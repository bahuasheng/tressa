1 :: ASSERT(cpumask_test_cpu(nxt,per_cpu(cpu_core_mask,cpu)))
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock);cpumask_copy(&affinity,&desc->affinity);spin_unlock(&desc->lock);continue;cpumask_and(&affinity,&affinity,&cpu_online_map);cpumask_copy(&affinity,&cpu_online_map);cpumask_tm;cpumask_clear(&m);for_each_vcpu(d,v)bool_tis_native=!is_pv_32on64_domain(d);cpumask_clear(pmask);vcpu_bias=offs*(is_native?BITS_PER_LONG:32);copy_from_guest_offset((unsignedint*)&vmask,bmap,offs,1)))
1 :: ASSERT(d->processor<nr_cpu_ids)
1 :: ASSERT(page_list_empty(&p2m->pod.super))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);shadow_lock_recursive(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_log_dirty);paging_unlock(d);shadow_lock(d)
2 :: ASSERT(len1==len2)
1 :: ASSERT(_atomic_read(_c)>=0)
2 :: ASSERT(((unsignedlong)p&(align-1))==0)
4 :: ASSERT(!aiocbp->aio_cb)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4,4)(v,smfn)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4,4)
2 :: ASSERT(n<=BLKIF_MAX_SEGMENTS_PER_REQUEST)
2 :: ASSERT(vlapic_enabled(vcpu_vlapic(v)))
9 :: ASSERT(mfn_valid(gw->l2mfn))
3 :: ASSERT(this_cpu(host_vmcs)==NULL)
34 :: ASSERT(shadow_locked_by_me(d))
3 :: ASSERT(vpic_is_locked(vpic))
5 :: ASSERT(sp->type!=SH_type_l2h_pae_shadow)
3 :: ASSERT((diff!=0)||vm86_mode(r)||((r->cs&3)>=GUEST_KERNEL_RPL)||(r->cs==0)||is_hvm_vcpu(current))
12 :: ASSERT(test_bit(_PGC_page_table,&page->count_info))
5 :: ASSERT((sp==0)||(pending_eoi[cpu][sp-1].vector<vector))
4 :: ASSERT(read_cr3()==__pa(idle_pg_table))
7 :: ASSERT(prev->runstate.state==RUNSTATE_running)
21 :: ASSERT(shadow_mode_external(d))
3 :: ASSERT(pagetable_get_phys(ed->arch.monitor_table))
17 :: ASSERT(!__task_on_queue(d))
6 :: ASSERT(args->bus<=mptable_maxbusid,("bus%distoobig",args->bus));
13 :: ASSERT(mfn)
19 :: ASSERT(purb->actual_length<=purb->transfer_buffer_length)
9 :: ASSERT(current->domain->id==IDLE_DOMAIN_ID)
3 :: ASSERT(pmap_valid_entry(pte));
5 :: ASSERT(nr_iovecs==1)
16 :: ASSERT(((_p)->u.inuse.type_info&PGT_type_mask)==(_t))
16 :: ASSERT(m->shadow_dirty_bitmap)
20 :: ASSERT(!p->has_cpu)
1 :: ASSERT(guest_l1e_get_flags(gw->l1e)&_PAGE_PRESENT)
1 :: ASSERT(spin_is_locked(&hd->mapping_lock)&&is_hvm_domain(d))
1 :: ASSERT(va<XEN_VIRT_END)
1 :: ASSERT(pool->shared_count==0)
3 :: ASSERT(lock->recurse_cnt<0xfu)
2 :: ASSERT((x&PGT_count_mask)==1)
3 :: ASSERT(nr<NR_SOFTIRQS)
8 :: ASSERT(p2m_locked_by_me(d->arch.p2m))
3 :: ASSERT((_p2m)->locker==-1)
2 :: ASSERT(l3e_get_flags(l3e[0])&_PAGE_PRESENT)
14 :: ASSERT(is_hvm_domain(d))
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l2_64_shadow)
4 :: ASSERT(op->cmd==XEN_DOMCTL_SCHEDOP_putinfo)
5 :: ASSERT(t==PGC_SH2_l1_shadow||t==PGC_SH2_fl1_shadow)
5 :: ASSERT(t==PGC_SH2_l4_shadow)
5 :: ASSERT(res==0||res==SHADOW2_SET_CHANGED)
10 :: ASSERT(l1e_get_pfn(*(l1_pgentry_t*)vaddr)==mfn_x(smfn))
3 :: ASSERT(pagetable_get_pfn(v->arch.monitor_table))
6 :: ASSERT((vector&~APIC_VECTOR_MASK)==0,("%s:invalidvector%d",__func__,vector));
6 :: ASSERT(p1->p_tracecred!=NULL,("ktracevnodewithnocred"));
6 :: ASSERT(lapic!=NULL,("localAPICisnotmapped"));
4 :: ASSERT(gl2e&_PAGE_PRESENT)
13 :: ASSERT(flush_count++==0)
17 :: ASSERT((_p&PAGE_MASK)!=0)
11 :: ASSERT(entry->next->prev==entry)
2 :: ASSERT(lowmem_reserved_base<ACPI_INFO_PHYSICAL_ADDRESS||lowmem_reserved_base>ACPI_INFO_PHYSICAL_END)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);shadow_lock(d)
1 :: ASSERT(vvmcb!=NULL)
1 :: ASSERT(mfn_to_page(sl2mfn)->u.sh.head)
1 :: ASSERT(len2<=PAGE_SIZE)
3 :: ASSERT(svc==CSCHED_VCPU(per_cpu(schedule_data,svc->vcpu->processor).curr))
6 :: ASSERT(hvm_irq_dpci)
3 :: ASSERT((status==not_parsed)&&(smp_processor_id()==0))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4,4)(v,smfn)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);SHADOW_PRINTK("newpagingmode:d=%uv=%upe=%dgl=%u"d->domain_id,v->vcpu_id,is_hvm_domain(d)?hvm_paging_enabled(v):1,NULL,/*none*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,3,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,3,2),/*fl1_32*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3,2),/*l2_32*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,3,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,3,3),/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3,3)
6 :: ASSERT(spin_is_locked(&h->lock))
17 :: ASSERT(d->is_dying)
7 :: ASSERT(!cpus_empty(cpus)&&cpu_isset(cpu,cpus))
26 :: ASSERT(mfn_valid(gmfn))
3 :: ASSERT(t==SH_type_fl1_32_shadow||t==SH_type_fl1_pae_shadow||t==SH_type_fl1_64_shadow||t==SH_type_monitor_table||(page_get_owner(mfn_to_page(_mfn(sp->backpointer)))==v->domain))
10 :: ASSERT(!(x&PGT_pae_xen_l2))
15 :: ASSERT(pagetable_get_pfn(v->arch.guest_table)==mfn_x(gmfn))
8 :: ASSERT(valid_mfn(shadow_l2e_get_mfn(*sl2e)))
3 :: ASSERT(d->arch.shadow_dirty_bitmap==NULL)
5 :: ASSERT((sp==0)||(peoi[sp-1].vector<vector))
4 :: ASSERT((type&PGT_va_mask)!=PGT_va_mutable)
2 :: ASSERT(cpu_online(cpu))
2 :: ASSERT((u32)tsc_elapsed64==tsc_elapsed64)
6 :: ASSERT(ioint_handlers[vector/32]!=NULL,("NoISRhandlerforIRQ%u",irq));
6 :: ASSERT(la->la_present,("missingAPICstructure"));
3 :: ASSERT(x->pfn||((x==head)&&(x->next==NULL)))
2 :: ASSERT((page_type_count(page)&~REFCNT_PIN_BIT)!=0)
20 :: ASSERT(p->state==TASK_DYING)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);shadow_unlock(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);shadow_lock(d)
2 :: ASSERT(nestedp2m_locked_by_me(_domain))
1 :: ASSERT(is_idle_vcpu(current))
2 :: ASSERT(i==1)
1 :: ASSERT(rc<count)
2 :: ASSERT(((objnew==obj)||(objfound==obj))&&(objnew!=objfound))
2 :: ASSERT(obj->tree_root.rnode==NULL)
1 :: ASSERT(_x->sentinel!=~_y##_SENTINEL);ASSERT(_x->sentinel==_y##_SENTINEL)
7 :: ASSERT(!(pg[i].count_info&PGC_offlined))
3 :: ASSERT(!l1_table_offset(v))
10 :: ASSERT(spin_is_locked(&irq_desc[irq].lock))
2 :: ASSERT(source_pfn<start_info.nr_pages)
4 :: ASSERT(next>=0)
4 :: ASSERT(!(*ar&_SEGMENT_DPL))
2 :: ASSERT(req_nr_frames<=max_nr_grant_frames)
3 :: ASSERT(action->ack_type==ACKTYPE_LAPIC_EOI)
13 :: ASSERT(v->arch.shadow_vtable)
26 :: ASSERT(0)
5 :: ASSERT(is_idle_domain(v->domain))
11 :: ASSERT(act->pin&(GNTPIN_hstw_mask|GNTPIN_hstr_mask))
7 :: ASSERT(act->pin&(GNTPIN_devw_mask|GNTPIN_devr_mask))
6 :: ASSERT(info->ring_ref!=-ENOSPC)
9 :: ASSERT(vm_buffer)
49 :: ASSERT(!shadow_mode_refcounts(d))
20 :: ASSERT(__task_on_queue(d))
6 :: ASSERT(intpin->io_dest!=DEST_EXTINT,("ExtINTpintryingtouseioapicenable_intrmethod"));
6 :: ASSERT(boot_cpu_id==-1,("CPU%dclaimstobeBSP,butCPU%dalreadyis",apic_id,boot_cpu_id));
6 :: ASSERT(1<<PTESHIFT==sizeof(pt_entry_t));
6 :: ASSERT(gpfn&&!(gpfn&~PGT_mfn_mask))
17 :: ASSERT(i*PAGE_SIZE>=req->length)
6 :: ASSERT(!allocated_in_map(first_page+i))
1 :: ASSERT(!(pfp_len&(sizeof(uint64_t)-1)))
1 :: ASSERT(list_empty(&pcd->pgp_list))
2 :: ASSERT(error!=-EBUSY)
1 :: ASSERT(l1e_get_flags(l2e_to_l1e(l2e)[l1_table_offset(sva)])&_PAGE_PRESENT)
1 :: ASSERT(IS_PAGE_ALIGNED(page_va))
5 :: ASSERT(obj->no_evict==0)
2 :: ASSERT((memory_size_mb&~0x7fff)==0)
1 :: ASSERT(tps64!=0)
4 :: ASSERT(l1e_get_pfn(l1e)!=INVALID_MFN||!p2m_is_ram(*t))
3 :: ASSERT(((unsignedlong)ioc->res_hint&(sizeof(unsignedlong)-1UL))==0)
12 :: ASSERT(d->arch.paging.hap.p2m_pages>=0)
5 :: ASSERT(t==PGC_SH2_fl1_32_shadow||t==PGC_SH2_fl1_pae_shadow||t==PGC_SH2_fl1_64_shadow||t==PGC_SH2_monitor_table||(page_get_owner(mfn_to_page(_mfn(pg->u.inuse.type_info)))==v->domain))
9 :: ASSERT(!test_bit(v->vcpu_id,&info->vcpus))
7 :: ASSERT(l4e_get_flags(ml4e[0])&_PAGE_PRESENT)
13 :: ASSERT(res==1)
3 :: ASSERT(d->arch.shadow2_hash_table)
8 :: ASSERT(port!=0)
8 :: ASSERT(next->runstate.state!=RUNSTATE_running)
11 :: ASSERT(pagetable_get_pfn(d->vcpu[0]->arch.monitor_table))
17 :: ASSERT(extraq_on(d,i))
2 :: ASSERT(d->arch.iobmp_mask)
6 :: ASSERT((buffer_ma&(XBD_SECTOR_SIZE-1))==0,("XENbuffermustbesectoraligned"));
16 :: ASSERT(mmfn_info)
10 :: ASSERT(sched==pending_req->sched)
3 :: ASSERT(((page->u.inuse.type_info&PGT_va_mask)>>PGT_va_shift)<(PAGE_OFFSET>>L2_PAGETABLE_SHIFT))
7 :: ASSERT((a->pfn&0xf0000000)==0)
3 :: ASSERT(!mfn_valid(mfn)||p2mt!=p2m_mmio_direct)
3 :: ASSERT(index<EPT_PAGETABLE_ENTRIES)
2 :: ASSERT(cpu_isset(new_cpu,timer_valid_cpumask))
1 :: ASSERT(tmh_tze_enabled())
2 :: ASSERT(!(l3e_get_flags(l3_ro_mpt[l3_table_offset(va)])&_PAGE_PSE))
3 :: ASSERT(order==0||ret==GUEST_TABLE_NORMAL_PAGE)
2 :: ASSERT(client->eph_count>=0)
2 :: ASSERT()dependonXen'sexception-handlingcapabilities).
4 :: ASSERT(pages>0)
2 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_mask&~SHF_L1_ANY))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4,4)(v,smfn)
4 :: ASSERT(!(length&~PAGE_MASK))
5 :: ASSERT(d->arch.paging.log_dirty.allocs==0)
9 :: ASSERT(mfn_valid(gw->l1mfn))
4 :: ASSERT(src==hvm_intack_lapic)
3 :: ASSERT(startsg->length<=DMA_CHUNK_SIZE)
10 :: ASSERT(d->arch.paging.hap.p2m_pages==0)
10 :: ASSERT(d->arch.paging.shadow.dirty_bitmap!=NULL)
8 :: ASSERT(!(r&SHADOW_SET_ERROR))
6 :: ASSERT(v->arch.shadow.action_log)
5 :: ASSERT(shadow_type!=PGC_SH_p2m_table)
13 :: ASSERT(ptr_sl1e)
8 :: ASSERT(valid_mfn(*sl3mfn))
5 :: ASSERT(shadow2_mode_external(v->domain))
5 :: ASSERT(shadow_type!=PGC_SH2_none)
5 :: ASSERT(result==-1||result>=16)
6 :: ASSERT((dst-rma)+image_len<eomem)
3 :: ASSERT(!pending_lapic_eoi[cpu][sp].ready_to_end)
4 :: ASSERT(mfn_to_page(gmfn)->count_info&PGC_page_table)
4 :: ASSERT(tsc_elapsed32!=0)
3 :: ASSERT(pve!=0);
3 :: ASSERT(xen_idt_idx<MAX_XEN_IDT);
2 :: ASSERT((_pfn)->count_info==PGC_always_set)
22 :: ASSERT(live<9999)
17 :: ASSERT(prev_inf!=NULL)
11 :: ASSERT((_p)->u.domain==(_d))
1 :: ASSERT(pgp_lookup_in_obj(pgp->us.obj,pgp->index)==NULL)
1 :: ASSERT(firstbyte<256)
2 :: ASSERT(mfn_valid(mfn_x(*mfn)))
1 :: ASSERT(rc<n)
2 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->u.sh.type==SH_type_l2_32_shadow)
3 :: ASSERT(sp->u.sh.type!=SH_type_l2h_pae_shadow)
10 :: ASSERT(spin_is_locked(&irq_desc[vector].lock))
3 :: ASSERT(!(rc&SHADOW_SET_FLUSH))
3 :: ASSERT(tmp_base==__vsa_base)
2 :: ASSERT(sector>=seg_start&&sector+nr_secs<=seg_end)
3 :: ASSERT(mfn_valid(*sl2mfn))
10 :: ASSERT(!(all&&fast))
5 :: ASSERT(valid_mfn(gmfn)&&(sh_mfn_is_a_page_table(gmfn)||((mfn_to_page(gmfn)->u.inuse.type_info&PGT_count_mask)==0)))
9 :: ASSERT((_d)->arch.shadow.locker==-1)
4 :: ASSERT(!guest_op||shadow_lock_is_acquired(v->domain))
9 :: ASSERT(shadow_remove_write_access(v,gmfn,0,0)==0)
5 :: ASSERT(!shadow2_mode_external(v->domain))
8 :: ASSERT(valid_mfn(shadow_l4e_get_mfn(*sl4e)))
8 :: ASSERT(mfn_x(sh2_gfn_to_mfn(d,gfn))==mfn)
5 :: ASSERT((pg->count_info&PGC_SH2_type_mask)>0)
8 :: ASSERT(x->t||((x==head)&&(x->next==NULL)))
6 :: ASSERT(len==4&&offset>0&&offset<=APIC_TDCR)
7 :: ASSERT(desc->status&IRQ_DISABLED)
8 :: ASSERT((l1e_get_flags(pte)&(_PAGE_RW|_PAGE_PRESENT))==_PAGE_PRESENT)
11 :: ASSERT(cache!=NULL)
8 :: ASSERT(!page_get_owner(&frame_table[ed->arch.monitor_shadow_ref]))
14 :: ASSERT(pfn_valid(mfn))
13 :: ASSERT(!(gpfn&~PGT_mfn_mask))
14 :: ASSERT(pagetable_val(ed->arch.monitor_table))
10 :: ASSERT(inf->time_slept+CPU_SVT(cpu)>inf->avt+io_warp)
4 :: ASSERT(rid<rp->max_event_channel)
5 :: ASSERT(rp!=NULL)
8 :: ASSERT(skb->skb_type==SKB_ZERO_COPY)
1 :: ASSERT(regs!=NULL)
2 :: ASSERT(dir==IOREQ_READ)
2 :: ASSERT(sp->u.sh.head)
3 :: ASSERT(smp_processor_id()==0)
4 :: ASSERT(client!=NULL)
2 :: ASSERT(mfn_to_page(_sl2mfn)->u.sh.type==SH_type_l2_pae_shadow||mfn_to_page(_sl2mfn)->u.sh.type==SH_type_l2h_pae_shadow)
4 :: ASSERT(opt_allow_hugepage&&!(mfn&(L1_PAGETABLE_ENTRIES-1)))
9 :: ASSERT(mfn_valid(gw->l3mfn))
2 :: ASSERT(pagetable_get_pfn(v->arch.guest_table))
5 :: ASSERT((_d)->arch.p2m.locker==current->processor)
19 :: ASSERT(shadow_locked_by_me(v->domain))
5 :: ASSERT(shadow_type<16)
6 :: ASSERT((len==4)&&(offset>0)&&(offset<=APIC_TDCR))
15 :: ASSERT(regs->error_code&PFEC_page_present)
5 :: ASSERT((pg->count_info&PGC_SH_type_mask)!=PGC_SH_l2h_pae_shadow)
5 :: ASSERT((mfn_to_page(_sl3mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l3_64_shadow)
2 :: ASSERT(shadow_mode_external(v->domain))
10 :: ASSERT(valid_mfn(*sl1mfn))
5 :: ASSERT(!((unsignedlong)d&(sizeof(shadow_l1e_t)-1)))
11 :: ASSERT(hashent->refcnt!=0)
4 :: ASSERT(free<=RING_SIZE(&blk_ring),("free%lu>RING_SIZE",free));
6 :: ASSERT(intpin->io_edgetrigger,("EXTINTnotedgetriggered"));
6 :: ASSERT((icrlo&APIC_ICRLO_RESV_MASK)==0,("%s:reservedbitssetinICRLOregister",__func__));
24 :: ASSERT(!shadow_mode_enabled(d))
8 :: ASSERT(!a->next)
20 :: ASSERT(order<=MAX_ORDER)
5 :: ASSERT(current->id!=IDLE_DOMAIN_ID)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;shadow_lock(v->domain)
1 :: ASSERT(tmh->domain->is_dying)
7 :: ASSERT(MSI_IRQ(irq))
4 :: ASSERT(!strncmp(nodename,"/local/domain/",14))
7 :: ASSERT(!d->arch.paging.shadow.hash_table)
9 :: ASSERT(hvm_sr_handlers[typecode].load==NULL)
6 :: ASSERT(ea==(u32)ea)
4 :: ASSERT(spin_is_locked(&vpic->lock))
6 :: ASSERT(phys_to_nid(page_to_maddr(pg))==node)
5 :: ASSERT(test_bit(type>>PGC_SH_type_shift,&page->shadow_flags))
4 :: ASSERT(d->arch.shadow2.p2m_pages==0)
4 :: ASSERT(sc->op==DOM0_SHADOW_CONTROL_OP_PEEK)
5 :: ASSERT(shadow2_remove_write_access(v,gmfn,0,0)==0)
9 :: ASSERT(desc->status&IRQ_GUEST)
3 :: ASSERT(reg==decode_dest_reg(buffer[2]))
3 :: ASSERT(root_get_intpte(idle_pg_table[1])==0)
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(vm_paddr_tptr,vm_paddr_tval)SET_VCPU();HYPERVISOR_set_gdt(unsignedlong*frame_list,intentries)__asm____volatile__(TRAP_INSTR:"=a"(ret),"=b"(ign1),"=c"(ign2):"0"(__HYPERVISOR_set_gdt),"1"(frame_list),"2"(entries):"memory");(pmap_valid_entry(*(_ptp))?xpmap_mtop(*(_ptp)):*(_ptp))PMAP_REF((_ptp),xpmap_ptom(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA);PMAP_REF((_ptp),(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA_MA);PMAP_REF((pt_entry_t*)(_ptp),0);xen_queue_pt_update((pt_entry_t*)vtomach(_ptp),0);
2 :: ASSERT(page_get_owner(&frame_table[ed->arch.monitor_shadow_ref])==NULL)
5 :: ASSERT(s&(PSH_shadowed|PSH_hl2))
4 :: ASSERT(d->arch.shadow_mode)
13 :: ASSERT(d->arch.shadow_extras_count==0)
16 :: ASSERT(gpfn)
9 :: ASSERT(((_p)->type_and_flags&PGT_type_mask)==(_t))
1 :: ASSERT(cpu<nr_cpu_ids)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));shadow_unlock(v->domain)
4 :: ASSERT(nestedhvm_vcpu_in_guestmode(v))
8 :: ASSERT(is_hvm_domain(d)&&d->arch.hvm_domain.hap_enabled)
1 :: ASSERT(!guest_handle_is_null(cnt_uop))
3 :: ASSERT(mfn_valid(sl1mfn))
2 :: ASSERT(mbox->reader==mbox->writer)
3 :: ASSERT(tb_init_done)
3 :: ASSERT(size<=DMA_CHUNK_SIZE)
2 :: ASSERT((e&~PAGE_MASK)==0)
4 :: ASSERT(d->is_shutdown)
10 :: ASSERT(v->arch.paging.mode)
8 :: ASSERT(v->arch.shadow.mode)
3 :: ASSERT(v->arch.shadow2!=NULL)
7 :: ASSERT((dst-rma)+(ulong)firmware_image_size<eomem)
2 :: ASSERT(vmcb->eventinj.v==0)
7 :: ASSERT(va<FIXADDR_START)
6 :: ASSERT(virt_to_mfn(MMAP_VADDR(pending_idx,i))==((buffer_mach>>PAGE_SHIFT)+i))
4 :: ASSERT(pagetable_get_paddr(ed->arch.monitor_table))
14 :: ASSERT(d->grant_table->active!=NULL)
19 :: ASSERT(active_cons!=active_prod)
3 :: ASSERT(prev!=NULL)
5 :: ASSERT(memguard_is_guarded(ch))
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock);cpumask_copy(&affinity,&desc->affinity);spin_unlock(&desc->lock);continue;cpumask_and(&affinity,&affinity,&cpu_online_map);cpumask_copy(&affinity,&cpu_online_map);cpumask_tm;cpumask_clear(&m);for_each_vcpu(d,v)bool_tis_native=!is_pv_32on64_domain(d);cpus_clear(*pmask)
1 :: ASSERT(bus!=-1||devfn==-1)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;shadow_lock_recursive(v->domain)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);shadow_unlock(d)
1 :: ASSERT(nv->nv_n2vmcx!=NULL)
2 :: ASSERT(p2!=NULL)
4 :: ASSERT(gpfn!=SHARED_M2P_ENTRY)
1 :: ASSERT(pfn_to_pdx(epfn)<=(DIRECTMAP_SIZE>>PAGE_SHIFT)&&(pfn_to_pdx(epfn)<=FRAMETABLE_SIZE/sizeof(structpage_info)))
1 :: ASSERT(pgp==pgpdel)
2 :: ASSERT(pgp->obj->pool->client->eph_count>=0)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);SHADOW_PRINTK("newpagingmode:d=%uv=%upe=%dgl=%u"d->domain_id,v->vcpu_id,is_hvm_domain(d)?hvm_paging_enabled(v):1,NULL,/*none*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,2),/*fl1_32*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,2),/*l2_32*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,3),/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,4),/*fl1_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_audit_l3_table,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_audit_l4_table,4),/*l4_64*/NULL/*Alltherest*/sh_guest_map_l1e(structvcpu*v,unsignedlongaddr,(void)guest_walk_tables(v,addr,&gw,PFEC_page_present);shadow_l1_index(mfn_t*smfn,u32guest_index)(guest_index/SHADOW_L1_PAGETABLE_ENTRIES));shadow_l2_index(mfn_t*smfn,u32guest_index)(guest_index/(SHADOW_L2_PAGETABLE_ENTRIES/2)));paddr_tgpaddr,paddr_tspaddr);d[1]=s[1];d[0]=s[0];BUILD_BUG_ON(sizeof(shadow_l1e_t)!=sizeof(unsignedlong));shadow_l2e_told_sl2e;paddr_tpaddr;shadow_l1e_t*_sp=map_shadow_page((_sl1mfn))
3 :: ASSERT(sizeof(grant_entry_t)==8)
4 :: ASSERT((_d)->arch.paging.shadow.locker==current->processor)
13 :: ASSERT(*count)
5 :: ASSERT(avail[zone][node]>=request)
20 :: ASSERT(v->arch.cr3==0)
6 :: ASSERT(shadow2_mode_log_dirty(d))
4 :: ASSERT((pte->bits.v==0))
10 :: ASSERT(sp>0)
2 :: ASSERT(ref!=-ENOSPC,("grant_referencefailed"));
5 :: ASSERT(free<=BLKIF_RING_SIZE,("free%lu>BLKIF_RING_SIZE",free));
6 :: ASSERT(d==page_get_owner(&frame_table[pagetable_val(d->arch.phys_table)>>PAGE_SHIFT]))
11 :: ASSERT(new_modes)
25 :: ASSERT(gpfn==(gpfn&PGT_mfn_mask))
4 :: ASSERT(ed->arch.arch_vmx.vmcs)
8 :: ASSERT(((_p)->count_info&PGC_count_mask)!=0)
40 :: ASSERT(current->domain==IDLE_DOMAIN_ID)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);shadow_unlock(v->domain)
1 :: ASSERT(vcpu_nestedhvm(v).nv_vmexit_pending==0)
1 :: ASSERT(sh_type_has_up_pointer(v,SH_type_l2_shadow))
2 :: ASSERT(spin_is_locked(&ch->lock))
4 :: ASSERT(irq>0)
2 :: ASSERT(obj->pgp_count>=0)
6 :: ASSERT(spin_is_locked(&hd->mapping_lock))
8 :: ASSERT(!test_bit(irq,d->pirq_mask))
3 :: ASSERT((_d)->arch.paging.log_dirty.locker==current->processor)
3 :: ASSERT(bits_not_wanted)
5 :: ASSERT(va<DIRECTMAP_VIRT_END)
4 :: ASSERT((_d)->arch.paging.hap.locker==-1)
4 :: ASSERT(spin_is_locked(&vioapic_domain(vioapic)->arch.hvm_domain.irq_lock))
4 :: ASSERT(d->tot_pages==dom0_nrpages)
5 :: ASSERT(r&SHADOW2_SET_L3PAE_RECOPY)
4 :: ASSERT(smfn)
1 :: ASSERT((diff!=0)||VM86_MODE(r)||((r->cs&3)>=GUEST_KERNEL_RPL)||(r->cs==0)||HVM_DOMAIN(current))
5 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)==PGT_l1_page_table)
5 :: ASSERT(tabmfn!=0)
7 :: ASSERT(hashent->pfn==pfn)
8 :: ASSERT(shadow_mode_write_l1(d)||shadow_mode_write_all(d)||shadow_mode_wr_pt_pte(d))
12 :: ASSERT(VALID_MFN(readonly_gmfn))
7 :: ASSERT(inf->time_slept+CPU_SVT(p->processor)>inf->avt+io_warp)
5 :: ASSERT((skb->data-skb->head)==(18+ETH_HLEN))
1 :: ASSERT(((long)ptr&0x3)==0x2)
2 :: ASSERT(cpu_has_svm_nrips)
1 :: ASSERT(ns_viomap!=NULL)
2 :: ASSERT(shr_lock.locker==current->processor)
1 :: ASSERT(l3e_get_flags(l3_ro_mpt[l3_table_offset(va)])&_PAGE_PRESENT)
2 :: ASSERT((dirty_vram->sl1ma[i]&PAGE_MASK)==(sl1ma&PAGE_MASK))
3 :: ASSERT(list_empty(&pgp->global_eph_pages))
2 :: ASSERT(mfn_to_page(_sl3mfn)->u.sh.type==SH_type_l3_64_shadow)
3 :: ASSERT(sp)
3 :: ASSERT(spin_is_locked(&viosapic->lock))
8 :: ASSERT((intack.source==hvm_intsrc_pic)||(intack.source==hvm_intsrc_lapic))
3 :: ASSERT(t<=31)
9 :: ASSERT(d->is_shutting_down)
5 :: ASSERT(cpu_isset(nxt,cpu_core_map[cpu]))
14 :: ASSERT((ft==ft_prefetch))
10 :: ASSERT(shadow_mode_write_all(d)||shadow_mode_wr_pt_pte(d))
9 :: ASSERT(page)
6 :: ASSERT(vector>=APIC_IO_INTS&&vector!=IDT_SYSCALL&&vector<=APIC_IO_INTS+NUM_IO_INTS,("Vector%udoesnotmaptoanIRQline",vector));
6 :: ASSERT(irq<NUM_IO_INTS,("InvalidIRQ%u",irq));
4 :: ASSERT(root_pgentry_val(idle_pg_table[1])==0)
13 :: ASSERT(head->next==NULL)
23 :: ASSERT((pg[i].u.inuse.type_info&PGT_count_mask)==0)
14 :: ASSERT(d!=current)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;shadow_unlock(d)
4 :: ASSERT(ret!=GUEST_TABLE_POD_PAGE||i!=target)
7 :: ASSERT(!(virt_to_page(rawbuf)->count_info&PGC_allocated))
3 :: ASSERT(ret!=-EEXIST)
2 :: ASSERT(global_eph_count>=0)
2 :: ASSERT((align&(align-1))==0)
17 :: ASSERT(isairq<NR_ISAIRQS)
9 :: ASSERT(typecode<=HVM_SAVE_CODE_MAX)
14 :: ASSERT(spin_is_locked(&d->arch.hvm_domain.irq_lock))
7 :: ASSERT(mfn_to_shadow_page(mmfn)->type==SH_type_monitor_table)
8 :: ASSERT((vendor_id==0x8086)&&(device_id==0x7010))
10 :: ASSERT(d->arch.shadow.dirty_bitmap!=NULL)
24 :: ASSERT(l4e_get_flags(l4e[0])&_PAGE_PRESENT)
10 :: ASSERT(*mfn==INVALID_MFN)
21 :: ASSERT(d!=dom0)
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(pt_entry_t*ptr,pt_entry_tval)
9 :: ASSERT(l1e_get_flags(l1e)&_PAGE_PRESENT)
6 :: ASSERT(shadow_mode_translate(ed->domain))
6 :: ASSERT(intpin->io_dest!=DEST_EXTINT,("intpinroutedviaExtINT"));
6 :: ASSERT(pmap->pm_stats.resident_count==0,("pmap_release:pmapresidentcount%ld!=0",pmap->pm_stats.resident_count));
4 :: ASSERT(sl2e&_PAGE_PRESENT)
2 :: ASSERT((inf->latency<ULONG_MAX)&&(inf->slice_orig<ULONG_MAX))
7 :: ASSERT(prev->ed_sched_priv!=NULL)
13 :: ASSERT(gpte&_PAGE_RW)
3 :: ASSERT(pmap->pm_obj.uo_npages==0);
34 :: ASSERT(e->tot_pages<=e->max_pages)
3 :: ASSERT(next->processor==current->processor)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock);cpumask_copy(&affinity,&desc->affinity);spin_unlock(&desc->lock);continue;cpumask_and(&affinity,&affinity,&cpu_online_map);cpumask_copy(&affinity,&cpu_online_map)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:shadow_unlock(d)
2 :: ASSERT(lru_index>=0)
1 :: ASSERT(!nestedhvm_vcpu_in_guestmode(v))
1 :: ASSERT(list_empty(&pgp->us.client_eph_pages))
2 :: ASSERT(!mfn_to_page(next)->u.sh.head)
1 :: ASSERT(!(pfp_size&(sizeof(uint64_t)-1)))
1 :: ASSERT(pool->obj_count>=0)
4 :: ASSERT(pool!=NULL)
3 :: ASSERT(!(sp->count_info&PGC_count_mask))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3,3)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2,2)
4 :: ASSERT(read_cr0()&X86_CR0_TS)
7 :: ASSERT(!list_empty(&d->arch.paging.hap.freelists))
12 :: ASSERT((r&SHADOW_SET_FLUSH)==0)
8 :: ASSERT(mfn_x(sh_gfn_to_mfn(d,gfn))==mfn)
4 :: ASSERT((_d)->arch.shadow2.locker==current->processor)
5 :: ASSERT(t==PGC_SH2_l3_shadow)
5 :: ASSERT((pg->count_info&PGC_SH2_type_mask)<PGC_SH2_max_shadow)
7 :: ASSERT(d->arch.htab.shadow!=NULL)
9 :: ASSERT(sp<(NR_VECTORS-1))
8 :: ASSERT(schedule_data[d->processor].curr)
6 :: ASSERT(pin<=LVT_MAX,("%s:pin%uoutofrange",__func__,pin));
14 :: ASSERT(d->grant_table->maptrack!=NULL)
10 :: ASSERT(shadow_mode_enabled(ed->domain))
3 :: ASSERT((x&PGT_validated)||test_bit(DF_DYING,&page->u.inuse.domain->flags))
3 :: ASSERT(m->m_flags&M_PKTHDR);
3 :: ASSERT(idt_allocmap[vec]==1);
13 :: ASSERT(current->domain!=IDLE_DOMAIN_ID)
3 :: ASSERT(rx->status==RING_STATUS_OK)
1 :: ASSERT(nv->nv_n1vmcx_pa!=VMCX_EADDR)
5 :: ASSERT(pod_target>=p2m->pod.count)
2 :: ASSERT(i!=handler_num)
5 :: ASSERT((page->u.inuse.type_info&(PGT_count_mask|PGT_validated|PGT_partial))==1)
3 :: ASSERT((fd==-1&&(flags==(MAP_SHARED|MAP_ANON)||flags==(MAP_PRIVATE|MAP_ANON)))||(fd!=-1&&flags==MAP_SHARED))
4 :: ASSERT(gla_validity==EPT_GLA_VALIDITY_MATCH)
5 :: ASSERT(!shadow_op||shadow_locked_by_me(d))
3 :: ASSERT(order<=shadow_max_order(d))
4 :: ASSERT(to_pci_dev(dev)->dma_mask)
7 :: ASSERT(shadow_type<SH_type_unused)
5 :: ASSERT(callbacks[x->type]!=NULL)
9 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2_pae_shadow||mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2h_pae_shadow)
10 :: ASSERT((vendor_id==0x8086)&&(device_id==0x7113))
7 :: ASSERT(!cpus_empty(cpus))
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l2_pae_shadow||(mfn_to_page(_sl2mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l2h_pae_shadow)
8 :: ASSERT((pg->count_info&PGC_SH_type_mask)!=PGC_SH_l4_64_shadow)
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l2_64_shadow)
3 :: ASSERT(d->arch.shadow2_p2m_pages==0)
6 :: ASSERT(hsa)
3 :: ASSERT(d==page_get_owner(pfn_to_page(pagetable_get_pfn(d->arch.phys_table))))
11 :: ASSERT(EQ(sedf_runnable(d),__task_on_queue(d)))
4 :: ASSERT(l1_pgentry_val(nl1e)&_PAGE_PRESENT)
10 :: ASSERT(shadow_mode_translate(current->domain))
9 :: ASSERT(!(atomic_read(&d->refcnt)&DOMAIN_DESTRUCTED))
3 :: ASSERT(r_time>0)
2 :: ASSERT(wqv->esp==0)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock);cpumask_copy(&affinity,&desc->affinity);spin_unlock(&desc->lock);continue;cpus_and(affinity,affinity,cpu_online_map)
1 :: ASSERT(nv->nv_vvmcx!=NULL)
1 :: ASSERT(!mfn_valid(smfn)||mfn_to_page(smfn)->u.sh.head)
4 :: ASSERT(p2m_locked_by_me(p2m_get_hostp2m(d)))
3 :: ASSERT(!(s&((1<<L2_PAGETABLE_SHIFT)-1)))
3 :: ASSERT(dirty_vram->sl1ma[i]==sl1ma)
1 :: ASSERT(bat_locked(s)&&test_vhd_flag(s->bat.status,VHD_FLAG_BAT_WRITE_STARTED))
1 :: ASSERT(bm->blk==s->bat.pbw_blk)
3 :: ASSERT(pgp_lookup_in_obj(pgp->obj,pgp->index)==NULL)
11 :: ASSERT(table!=NULL)
5 :: ASSERT(offset==0)
3 :: ASSERT(type!=SH_type_p2m_table)
3 :: ASSERT(size>0)
14 :: ASSERT(mfn_valid(_mfn(mfn)))
22 :: ASSERT(node>=0)
8 :: ASSERT((pg->count_info&PGC_SH_type_mask)>0)
5 :: ASSERT((r&SHADOW2_SET_FLUSH)==0)
5 :: ASSERT(test_bit(type>>PGC_SH2_type_shift,&page->shadow2_flags))
11 :: ASSERT(list_ent==&d->page_list)
3 :: ASSERT((virq>=0)&&(virq<NR_VIRQS))
2 :: ASSERT(runstate->state=RUNSTATE_running)
9 :: ASSERT(d->vcpu[i]->sched_priv!=NULL)
3 :: ASSERT(va>=(PDSLOT_KERN<<PDSHIFT));
5 :: ASSERT((page->type_count!=0)&&(page->tot_count!=0))
1 :: ASSERT(gpfn==gfn)
1 :: ASSERT(len1<=PAGE_SIZE)
3 :: ASSERT(ioapic_pin<MAX_IOAPIC_PIN_NUM)
5 :: ASSERT(sp->count_info==0)
4 :: ASSERT(l1e_get_flags(*p2m_entry)&(_PAGE_PRESENT|_PAGE_PSE))
3 :: ASSERT(mfn_valid(mfn_x(gw->l2mfn)))
2 :: ASSERT(d->arch.paging.log_dirty.bitmap==NULL)
7 :: ASSERT((id==BUGFRAME_bug)||(id==BUGFRAME_assert))
3 :: ASSERT(t==SH_type_l2_shadow)
8 :: ASSERT(spin_is_locked(&s->pics_state->lock))
3 :: ASSERT(hashent->mfn==mfn)
5 :: ASSERT((pg->count_info&PGC_SH2_type_mask)!=PGC_SH2_l4_64_shadow)
7 :: ASSERT((dst-rma)+oftree_len<eomem)
18 :: ASSERT(page->count_info==0)
10 :: ASSERT(l2e_get_flags(l2e)&_PAGE_PRESENT)
3 :: ASSERT(v)
11 :: ASSERT(d->arch.ops->guest_paging_levels>=PAGING_L3)
7 :: ASSERT(pagetable_val(d->arch.phys_table))
20 :: ASSERT(!(d->arch.shadow_mode&~mode))
17 :: ASSERT(i<=MMAP_PAGES_PER_REQUEST)
13 :: ASSERT((sizeof(structpfn_info)<<20)<=(FRAMETABLE_VIRT_END-FRAMETABLE_VIRT_START))
2 :: ASSERT(spin_is_locked(per_cpu(schedule_data,cpu).schedule_lock))
2 :: ASSERT(len<=PAGE_SIZE)
2 :: ASSERT(v->domain->domain_id==d->domain_id)
2 :: ASSERT(is_shared(pool))
3 :: ASSERT(!(initial_images_base&~PAGE_MASK))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3,2)(v,smfn)
3 :: ASSERT(is_x86_user_segment(seg))
5 :: ASSERT(regs->eflags&X86_EFLAGS_IF)
4 :: ASSERT(!sh_mfn_is_a_page_table(gmfn))
4 :: ASSERT(sizeof(QCowHeader)+sizeof(QCowHeader_ext)<512)
5 :: ASSERT(t==SH_type_l2_shadow||t==SH_type_l2h_pae_shadow)
2 :: ASSERT(t==PGC_SH_fl1_32_shadow||t==PGC_SH_fl1_pae_shadow||t==PGC_SH_fl1_64_shadow||t==PGC_SH_monitor_table||(page_get_owner(mfn_to_page(_mfn(pg->u.inuse.type_info)))==v->domain))
4 :: ASSERT(v->arch.shadow2.mode!=NULL)
8 :: ASSERT(htab_raddr!=0)
6 :: ASSERT(cpu_apic_ids[cpu]!=-1,("IPItonon-existentCPU%d",cpu));
14 :: ASSERT(d->grant_table->shared!=NULL)
18 :: ASSERT(debugtrace_buf!=NULL)
2 :: ASSERT((sizeof(structpfn_info)<<20)>(FRAMETABLE_VIRT_END-FRAMETABLE_VIRT_START))
5 :: ASSERT(prev->state!=TASK_UNINTERRUPTIBLE)
4 :: ASSERT((page_type_count(page)!=0)&&(page_tot_count(page)!=0))
4 :: ASSERT(rchn[rid].target_dom==lp->domain)
1 :: ASSERT(nv->nv_n1vmcx!=NULL)
1 :: ASSERT(h.tail->list.next==PAGE_LIST_NULL)
4 :: ASSERT(smp_processor_id()!=0)
1 :: ASSERT(spin_is_locked(per_cpu(schedule_data,v->processor).schedule_lock))
1 :: ASSERT(key_table[key]==NULL)
1 :: ASSERT(i<count)
1 :: ASSERT(i<VHD_CACHE_SIZE)
5 :: ASSERT(spin_is_locked(&d->evtchn_lock))
6 :: ASSERT(l2e_get_pfn(l2e)!=INVALID_MFN||!p2m_is_ram(p2mt))
4 :: ASSERT(dev->coherent_dma_mask)
3 :: ASSERT(off<ioc->pdir_size)
3 :: ASSERT(pages_needed)
3 :: ASSERT(zone_hi<NR_ZONES)
5 :: ASSERT(virt_to_maddr(&v->arch.paging.shadow.l3table)<=0xffffffe0ULL)
5 :: ASSERT((_d)->arch.p2m.locker==-1)
5 :: ASSERT((mfn_to_page(mmfn)->count_info&PGC_SH_type_mask)==PGC_SH_monitor_table)
19 :: ASSERT(shadow_lock_is_acquired(v->domain))
5 :: ASSERT((mfn_to_page(_sl3mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l3_pae_shadow)
5 :: ASSERT(page_get_owner(page)==d)
9 :: ASSERT(!in_irq()&&local_irq_is_enabled())
4 :: ASSERT(pagetable_get_paddr(ed->arch.monitor_table)==0)
6 :: ASSERT(max_mode)
13 :: ASSERT(ed!=current)
3 :: ASSERT(m->shadow_extras_count==0)
6 :: ASSERT((page->flags&PG_type_mask)==PGT_gdt_page)
1 :: ASSERT(consumer_is_xen(lchn))
3 :: ASSERT(!test_bit(vector,desc->arch.used_vectors))
1 :: ASSERT(nv->nv_n2vmcx_pa!=VMCX_EADDR)
1 :: ASSERT(t->status==TIMER_STATUS_invalid)
1 :: ASSERT(tmh_dedup_enabled())
5 :: ASSERT(i==0)
2 :: ASSERT(!((unsignedlong)va&~PAGE_MASK))
3 :: ASSERT(mfn_valid(mfn_x(gw->l3mfn)))
4 :: ASSERT(n==1||(stride==0&&increment==1))
2 :: ASSERT(v->vcpu_info_mfn==INVALID_MFN)
3 :: ASSERT(m!=0)
3 :: ASSERT(res_ptr<res_end)
4 :: ASSERT((len==4)&&(offset>=0)&&(offset<=APIC_TDCR))
20 :: ASSERT(count)
4 :: ASSERT(blkif->pending_list[idx].count==0)
11 :: ASSERT(list_ent!=&d->page_list)
14 :: ASSERT(VALID_M2P(gmfn))
7 :: ASSERT(!test_bit(ARCH_VMX_IO_WAIT,&v->arch.arch_vmx.flags))
7 :: ASSERT(is_idle_task(v->domain))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PT_SET_VA(&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);
5 :: ASSERT((frame_table[smfn].u.inuse.type_info&PGT_pinned))
5 :: ASSERT(1)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);shadow_unlock(d)
2 :: ASSERT(mfn_to_page(next)->u.sh.type==pg->u.sh.type)
2 :: ASSERT(apic<nr_ioapics)
6 :: ASSERT(!test_bit(pirq,d->pirq_mask))
3 :: ASSERT(cpu_isset(nxt,per_cpu(cpu_core_map,cpu)))
1 :: ASSERT(bat_locked(s))
1 :: ASSERT(pfp)
4 :: ASSERT(ma<DIRECTMAP_VIRT_END-DIRECTMAP_VIRT_START)
3 :: ASSERT(p_data!=NULL)
3 :: ASSERT((_p2m)->locker==current->processor)
2 :: ASSERT(mbox->reader!=mbox->writer)
6 :: ASSERT(!guest_op||shadow_locked_by_me(d))
3 :: ASSERT(d->arch.paging.log_dirty.bitmap!=NULL)
3 :: ASSERT(op==XENMEM_maximum_gpfn)
15 :: ASSERT(hap_locked_by_me(d))
9 :: ASSERT(bk->refcount>0)
3 :: ASSERT(__task_on_queue(v))
9 :: ASSERT(virq_is_global(virq))
13 :: ASSERT(v->runstate.state!=new_state)
13 :: ASSERT(cpus_weight(dirty_mask)<=1)
2 :: ASSERT(spin_is_locked(&p->mm.shadow_lock))
142 :: ASSERT(!in_irq())
5 :: ASSERT(((void*)ch->next<(void*)&_end)||memguard_is_guarded(ch->next))
3 :: ASSERT(memguard_is_guarded(ct))
11 :: ASSERT(entry->prev->next==entry)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);shadow_unlock(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);paging_unlock(d);shadow_lock(d)
3 :: ASSERT(mfn_x(r_mfn)==mfn_x(mfn))
1 :: ASSERT(pgp->us.obj->pool!=NULL)
14 :: ASSERT(p2m)
2 :: ASSERT((table!=NULL)&&(offset<INTREMAP_ENTRIES))
1 :: ASSERT(va-DIRECTMAP_VIRT_START<DIRECTMAP_VIRT_END)
3 :: ASSERT(pod_target>p2md->pod.count)
3 :: ASSERT(!(b->size&1))
2 :: ASSERT(!(aiocbp->aio_nbytes&(dev->info.sector_size-1)))
4 :: ASSERT(next<2*data_size)
3 :: ASSERT(extra_word<=TRACE_EXTRA_MAX)
4 :: ASSERT(pt->vcpu==v)
3 :: ASSERT(0==(size&~iovp_mask))
3 :: ASSERT((v==current)||spin_is_locked(&d->arch.hvm_domain.ioreq.lock))
5 :: ASSERT(!next->is_running)
5 :: ASSERT(hap_locked_by_me(v->domain))
8 :: ASSERT(!guest_op||shadow_locked_by_me(v->domain))
5 :: ASSERT(t==PGC_SH_l2_shadow||t==PGC_SH_l2h_pae_shadow)
4 :: ASSERT((_d)->arch.shadow2.locker==-1)
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l2_32_shadow)
14 :: ASSERT(valid_mfn(smfn))
5 :: ASSERT(!guest_op||shadow2_lock_is_acquired(v->domain))
3 :: ASSERT(regs->eax<=0xFFFF)
11 :: ASSERT(l1e_get_pfn(cache->l1tab[idx])==pfn)
8 :: ASSERT(!test_bit(ARCH_VMX_CONTIG_MEM,&v->arch.arch_vmx.flags))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(vm_paddr_tptr,vm_paddr_tval)SET_VCPU();HYPERVISOR_set_gdt(unsignedlong*frame_list,intentries)__asm____volatile__(TRAP_INSTR:"=a"(ret),"=b"(ign1),"=c"(ign2):"0"(__HYPERVISOR_set_gdt),"1"(frame_list),"2"(entries):"memory");(pmap_valid_entry(*(_ptp))?xpmap_mtop(*(_ptp)):*(_ptp))PMAP_REF((_ptp),xpmap_ptom(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA);PMAP_REF((_ptp),(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA_MA);PMAP_REF((pt_entry_t*)(_ptp),0);pd_set((_pmap),(_ptp),0,SH_PD_SET_VA_CLEAR);xen_flush_queue();PMAP_REF((_ptp),xpmap_ptom(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA);PMAP_REF((_ptp),(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA_MA);PMAP_REF((pt_entry_t*)(_ptp),0);pd_set((_pmap),(_ptp),0,SH_PD_SET_VA_CLEAR);
21 :: ASSERT(stype&&!(stype&~PGT_type_mask))
15 :: ASSERT(ptbase_mfn)
22 :: ASSERT(d->arch.shadow_dirty_bitmap!=NULL)
6 :: ASSERT(tlbflush_clock==0)
3 :: ASSERT((_pfn)->u.inuse.count_info==PGC_always_set)
4 :: ASSERT((sizeof(structpfn_info)<<20)
3 :: ASSERT(t->cpu==cpu)
4 :: ASSERT((ranfor>0))
1 :: ASSERT(nestedhvm_enabled(v->domain)&&nestedhvm_vcpu_in_guestmode(v))
2 :: ASSERT(list_empty(&ce->gfns))
4 :: ASSERT(page_is_ram_type(page_to_mfn(pg),RAM_TYPE_CONVENTIONAL))
2 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->u.sh.type==SH_type_l2_pae_shadow||mfn_to_shadow_page(_sl2mfn)->u.sh.type==SH_type_l2h_pae_shadow)
3 :: ASSERT(!l2_table_offset(va))
6 :: ASSERT(_raw_spin_is_locked(lock))
8 :: ASSERT(rmrr->base_address<rmrr->end_address)
2 :: ASSERT(d->is_dying==DOMDYING_dying)
4 :: ASSERT(FS_RING_FREE_REQUESTS(&import->ring,idx))
3 :: ASSERT(mfn_valid(pmfn))
3 :: ASSERT(t==PGC_SH_fl1_32_shadow||t==PGC_SH_fl1_pae_shadow||t==PGC_SH_fl1_64_shadow||t==PGC_SH_monitor_table||(page_get_owner(mfn_to_page(_mfn(pg->u.inuse.type_info)))
5 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2_64_shadow)
5 :: ASSERT((mfn_to_page(smfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l3_pae_shadow)
6 :: ASSERT(!peoi[sp].ready)
4 :: ASSERT(p->dir==IOREQ_WRITE)
8 :: ASSERT((diff==0)||(!vm86_mode(r)&&(r->cs==__HYPERVISOR_CS)))
1 :: ASSERT((diff==0)||(!VM86_MODE(r)&&(r->cs==__HYPERVISOR_CS)))
13 :: ASSERT(!(atomic_read(&d->refcnt)&DOMAIN_DESTROYED))
19 :: ASSERT(mmfn_info!=NULL)
6 :: ASSERT((dest&~(APIC_ID_MASK>>APIC_ID_SHIFT))==0,("%s:invaliddestination0x%x",__func__,dest));
6 :: ASSERT(m->phys_addr==(tpte&PG_FRAME),("vm_page_t%pphys_addrmismatch%016jx%016jx",m,(uintmax_t)m->phys_addr,(uintmax_t)tpte));
4 :: ASSERT(x&PGT_validated)
4 :: ASSERT(nr_psegs<=BLKIF_MAX_SEGMENTS_PER_REQUEST*2)
10 :: ASSERT(page_nr<max_page)
4 :: ASSERT((((unsignedlong)va)>=MAPCACHE_VIRT_START)&&(((unsignedlong)va)<=MAPCACHE_VIRT_END))
1 :: ASSERT(p2m_is_nestedp2m(p2m))
2 :: ASSERT(n2vmcb!=NULL)
3 :: ASSERT(p2m->domain->arch.paging.free_page)
1 :: ASSERT(mfn_to_page(smfn)->u.sh.head)
3 :: ASSERT(IS_VALID_PAGE(pi))
4 :: ASSERT(out_len==PAGE_SIZE)
4 :: ASSERT(obj->pool!=NULL)
4 :: ASSERT(rc<0)
1 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)!=PGT_writable_page||(page->u.inuse.type_info&PGT_count_mask)==0clear_bit(type,&page->shadow_flags);oos_hash_remove(v,gmfn);oos_fixup_remove(v,gmfn);clear_bit(_PGC_page_table,&page->count_info)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3,3)(v,smfn)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3,3)
4 :: ASSERT((val==NULL)||((dir==IOREQ_READ)&&!value_is_ptr))
3 :: ASSERT(vmcs==this_cpu(host_vmcs))
7 :: ASSERT(v->vcpu_id==0)
9 :: ASSERT((link<=3)&&(isa_irq<=15))
5 :: ASSERT(pagetable_is_null(v->arch.shadow_table[slot]))
3 :: ASSERT(d->tot_pages>0)
18 :: ASSERT(shadow_mode_log_dirty(d))
2 :: ASSERT(op->cmd==XEN_DOMCTL_SCHEDOP_getinfo)
7 :: ASSERT(d->max_pages==d->tot_pages)
14 :: ASSERT(!cpus_empty(cpumask))
9 :: ASSERT(d->processor<NR_CPUS)
7 :: ASSERT(d->exec_domain[i]->sched_priv!=NULL)
7 :: ASSERT(d->arch.out_of_sync_extras_count==0)
2 :: ASSERT(timer->timer_list.next)
4 :: ASSERT(r_time>ctx_allow)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_tcpumask=CPU_MASK_NONE;WARN_ON(!spin_is_locked(&v->domain->event_lock));BUG_ON(!local_irq_is_enabled());action->in_flight=0;action->shareable=will_share;action->ack_type=pirq_acktype(v->domain,pirq->pirq);cpus_clear(action->cpu_eoi_map)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock);cpumask_copy(&affinity,&desc->affinity);spin_unlock(&desc->lock);continue;cpumask_and(&affinity,&affinity,&cpu_online_map)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);shadow_lock(d)
1 :: ASSERT(tmh_mempool!=NULL)
3 :: ASSERT((pi==NULL)||IS_VALID_PAGE(pi))
4 :: ASSERT(va>=DIRECTMAP_VIRT_START&&va<DIRECTMAP_VIRT_END)
3 :: ASSERT(callbacks[x->u.sh.type]!=NULL)
3 :: ASSERT(spin_is_locked(&console_lock))
2 :: ASSERT(l1e_get_pfn(dcache->l1tab[idx])==mfn)
2 :: ASSERT(t==SH_type_l2_shadow||t==SH_type_l2h_shadow)
16 :: ASSERT((v==current)||!vcpu_runnable(v))
5 :: ASSERT(d->arch.shadow.total_pages==0)
5 :: ASSERT((mfn_to_page(_sl3mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l3_64_shadow)
5 :: ASSERT(sh2_mfn_is_a_page_table(gmfn))
9 :: ASSERT(test_bit(v->vcpu_id,&info->vcpus))
5 :: ASSERT(sizeof(l4_pgentry_t)==sizeof(shadow_l4e_t))
6 :: ASSERT(!(pair[0].l2&(1<<PAGE_SHIFT)))
10 :: ASSERT(tab[offset]&_PAGE_PRESENT)
2 :: ASSERT(page_get_owner(&pg[i])==NULL)
6 :: ASSERT(args->vector==-1,("MultipleIRQsforPCIinterrupt%d.%d.INT%c:%dand%dn",args->bus,args->irq>>2,'A'+(args->irq&0x3),args->vector,vector));
7 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),("pmap_release:gotwrongptdpage"));
8 :: ASSERT(key_table[key].u.irq_handler==NULL)
3 :: ASSERT(pmap!=pmap_kernel());
3 :: ASSERT(va>=VM_MIN_KERNEL_ADDRESS);
19 :: ASSERT((_p&~PAGE_MASK)==0)
41 :: ASSERT(__task_on_runqueue(prev))
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpus_copy(desc->pending_mask,*mask)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);shadow_lock_recursive(v->domain)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);shadow_lock(d)
3 :: ASSERT(p2m->set_entry)
1 :: ASSERT(svm->ns_gif==0)
1 :: ASSERT(pgp->us.obj->pool->client!=NULL)
2 :: ASSERT(vmce)
2 :: ASSERT(pfp_len==tze_len)
1 :: ASSERT(cmem_mempool!=NULL)
7 :: ASSERT(ecap_queued_inval(iommu->ecap)&&iommu_qinval)
4 :: ASSERT(spin_is_locked(&heap_lock))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3,2)
19 :: ASSERT(mfn_valid(omfn))
5 :: ASSERT(prev)
7 :: ASSERT(test_bit(type,&page->shadow_flags))
6 :: ASSERT((pg->count_info&PGC_SH_type_mask)!=PGC_SH_l3_pae_shadow)
3 :: ASSERT(v->arch.shadow2)
9 :: ASSERT(!mmio||!(shadow_l1e_get_flags(sl1e)&_PAGE_PRESENT))
8 :: ASSERT(valid_mfn(shadow_l3e_get_mfn(*sl3e)))
9 :: ASSERT(map!=NULL)
5 :: ASSERT((pg->count_info&PGC_SH2_type_mask)!=PGC_SH2_l2_32_shadow)
4 :: ASSERT(msrpm)
8 :: ASSERT(cpus_empty(n->vcpu_dirty_cpumask))
12 :: ASSERT((pa&~(PADDR_MASK&PAGE_MASK))==0)
11 :: ASSERT(tmp_base!=__vsa_base)
11 :: ASSERT(d==page_get_owner(&frame_table[pagetable_get_pfn(d->arch.phys_table)]))
6 :: ASSERT(APIC_IO_INTS+APIC_NUM_IOINTS<=APIC_LOCAL_INTS);
3 :: ASSERT(shadow_mode(d))
6 :: ASSERT(pagetable_val(m->monitor_table))
8 :: ASSERT(prev_inf->time_slept>=LAST_VTB(cpu))
3 :: ASSERT(__on_net_schedule_list(netif))
1 :: ASSERT(iommu->mmio_base)
4 :: ASSERT(per_cpu(vector_irq,cpu)[vector]==irq)
6 :: ASSERT(!test_bit(vector,cfg->used_vectors))
1 :: ASSERT(pfn_to_pdx(ma>>PAGE_SHIFT)<(DIRECTMAP_SIZE>>PAGE_SHIFT))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;shadow_lock_recursive(d)
1 :: ASSERT(nv->nv_vvmcxaddr!=VMCX_EADDR)
3 :: ASSERT(l3e_get_pfn(l3e)!=INVALID_MFN||!p2m_is_ram(p2mt))
1 :: ASSERT((info->cur+(1UL<<PAGETABLE_ORDER)<info->epfn)&&info->cur>=info->spfn)
1 :: ASSERT(spin_is_locked(&iommu->register_lock))
2 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->u.sh.type==SH_type_l2_64_shadow||mfn_to_shadow_page(_sl2mfn)->u.sh.type==SH_type_l2h_64_shadow)
3 :: ASSERT(num_online_cpus()==1)
3 :: ASSERT(is_pv_32on64_vcpu(v))
4 :: ASSERT((x&PGT_validated)||page_get_owner(page)->is_dying)
5 :: ASSERT(!cpu_isset(nxt,cpu_core_map[cpu]))
2 :: ASSERT(valid_mfn(gmfn)&&(level==1||(level==2&&GUEST_PAGING_LEVELS<4&&(flags&_PAGE_PSE)&&guest_supports_superpages(v))))
5 :: ASSERT(res==0||res==SHADOW_SET_CHANGED)
13 :: ASSERT(current==(v))
17 :: ASSERT(pagetable_get_pfn(v->arch.monitor_table)==0)
12 :: ASSERT(sflags!=-1)
8 :: ASSERT(shflags&(1u<<bit))
6 :: ASSERT(log_htab_size>=HTAB_MIN_LOG_SIZE)
4 :: ASSERT(sizeof(header)<512)
2 :: ASSERT(action->ack_type==ACKTYPE_MULTI)
10 :: ASSERT(!pagetable_get_paddr(v->arch.monitor_table))
6 :: ASSERT(!pagetable_get_paddr(d->arch.phys_table))
10 :: ASSERT(snapshot_mfn)
2 :: ASSERT(ret.time>now)
4 :: ASSERT(pagetable_val(current->arch.guest_table)==(gmfn<<PAGE_SHIFT))
22 :: ASSERT(!IS_INVALID_M2P_ENTRY(gpfn))
3 :: ASSERT((x&PGT_validated)||test_bit(DF_DYING,&page->u.inuse.domain->d_flags))
8 :: ASSERT(a->pfn<0x00100000UL)
3 :: ASSERT(m->shadow_dirty_bitmap!=NULL)
3 :: ASSERT(curapdp==0);
3 :: ASSERT(ci->ci_tlbstate!=TLBSTATE_VALID);
7 :: ASSERT(a->pfn)
2 :: ASSERT(per_cpu(vector_irq,cpu)[cfg->old_vector]==irq)
1 :: ASSERT(v->domain==p2m->domain)
2 :: ASSERT(lowmem_reserved_base>512<<10)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));shadow_unlock(v->domain)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_log_dirty);shadow_unlock(d)
2 :: ASSERT(l->locker==current->processor)
6 :: ASSERT(!pirq->masked)
1 :: ASSERT(p&&p->u.sh.type==SH_type_l2_32_shadow)
2 :: ASSERT(len>0||tmem_va==NULL)
1 :: ASSERT(scale.mul_frac!=0)
4 :: ASSERT(ret==LZO_E_OK)
3 :: ASSERT(pgp->obj->pool->client!=NULL)
4 :: ASSERT(pgp->obj->pool!=NULL)
3 :: ASSERT((y&PGC_count_mask)!=0)
3 :: ASSERT(sp->u.sh.type!=SH_type_l2_pae_shadow)
2 :: ASSERT(mfn_valid(snpmfn))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4,4)(v,smfn)
1 :: ASSERT(!mfn_valid(sh_ctxt->mfn2))
4 :: ASSERT(v->arch.hvm_vmx.active_cpu==smp_processor_id())
5 :: ASSERT(!(initial_images_end&~PAGE_MASK))
8 :: ASSERT((type==hvm_intack_pic)||(type==hvm_intack_lapic))
5 :: ASSERT(d->arch.p2m.alloc_page)
10 :: ASSERT(d->arch.shadow.hash_walking==0)
8 :: ASSERT((pg->u.inuse.type_info&PGT_count_mask)==0)
8 :: ASSERT(l3_backptr!=PGT_va_mutable)
4 :: ASSERT(l2e_get_flags(gl2e)&_PAGE_RW)
14 :: ASSERT(pagetable_get_paddr(v->arch.monitor_table))
8 :: ASSERT(!extraq_on(d,EXTRA_PEN_Q))
6 :: ASSERT(src_bus_irq<16,("InvalidEISAIRQ%d",src_bus_irq));
10 :: ASSERT((gmfn&~PGT_mfn_mask)==0)
17 :: ASSERT(sched[i].buffer_offset==purb->iso_frame_desc[i].offset)
7 :: ASSERT(insn_len>=PATCH_LEN)
5 :: ASSERT(!list_empty(RUNQUEUE(cpu)))
7 :: ASSERT(nr_psegs<=MAX_BLK_SEGS*2)
7 :: ASSERT(!__on_blkdev_list(p))
7 :: ASSERT((page->flags&PG_type_mask)==PGT_ldt_page)
1 :: ASSERT(access_w||access_r||access_x)
3 :: ASSERT((cfg->used_vectors==NULL)||(cfg->used_vectors==irq_used_vectors))
1 :: ASSERT(gvmcb!=NULL)
2 :: ASSERT(xsave_cntxt_size>=XSAVE_AREA_MIN_SIZE)
1 :: ASSERT(pfp_len<=PAGE_SIZE)
4 :: ASSERT(pod_target>=p2md->pod.count)
2 :: ASSERT(opnd_sel)
3 :: ASSERT(v->arch.paging.shadow.guest_vtable)
3 :: ASSERT(0==(byte_cnt&~iovp_mask))
3 :: ASSERT(0!=mask)
12 :: ASSERT(paging_mode_translate(d))
5 :: ASSERT(sp->type<SH_type_max_shadow)
4 :: ASSERT(sh_l1e_is_mmio(sl1e))
15 :: ASSERT(spin_is_locked(&s->lock))
8 :: ASSERT(!list_empty(&d->arch.shadow.freelists[SHADOW_MAX_ORDER]))
5 :: ASSERT((mfn_to_page(mmfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_monitor_table)
10 :: ASSERT(sizeof(l2_pgentry_t)==sizeof(shadow_l2e_t))
8 :: ASSERT(sl1e!=NULL)
22 :: ASSERT(p2m_entry)
9 :: ASSERT(shadow2_lock_is_acquired(v->domain))
5 :: ASSERT(!test_bit(type>>PGC_SH2_type_shift,&page->shadow2_flags))
7 :: ASSERT(parea!=NULL)
6 :: ASSERT((htab_addr&((1UL<<log_htab_size)-1))==0)
5 :: ASSERT(smfn!=0)
8 :: ASSERT(curinf->deadl_abs>=now)
6 :: ASSERT(flags&GPFN_IO_MASK)
8 :: ASSERT(spin_is_locked(&platform_timer_lock))
22 :: ASSERT(vpd)
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);
7 :: ASSERT(va==(va&PG_FRAME),("ldtnotpagealigned"));
6 :: ASSERT(td->td_proc==curthread->td_proc,("givingTSSto!curproc"));
25 :: ASSERT(va<(void*)MAPCACHE_VIRT_END)
26 :: ASSERT((void*)MAPCACHE_VIRT_START<=va)
3 :: ASSERT(shadow_mode_translate(rd))
12 :: ASSERT(B->next==0)
6 :: ASSERT(skb->len<=PAGE_SIZE)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpus_clear(desc->pending_mask)
1 :: ASSERT(!pgp->us.obj->pool->persistent)
4 :: ASSERT(p2m_locked_by_me(p2md))
2 :: ASSERT(pcpu.apic_id!=BAD_APICID)
1 :: ASSERT((unsignedlong)pg-FRAMETABLE_VIRT_START<FRAMETABLE_VIRT_END)
3 :: ASSERT(ivrs_mappings!=NULL)
1 :: ASSERT((obj!=NULL)&&((objnew==obj)||(objfound==obj))&&(objnew!=objfound))
2 :: ASSERT(obj->pgp_count==0)
2 :: ASSERT(mfn_to_page(_sl4mfn)->u.sh.type==SH_type_l4_64_shadow)
8 :: ASSERT(pg)
3 :: ASSERT(mfn_valid(mfn_x(gw->l1mfn)))
4 :: ASSERT(!start)
4 :: ASSERT(!(aiocbp->aio_nbytes&(dev->sector_size-1)))
2 :: ASSERT(regs==guest_cpu_user_regs())
4 :: ASSERT(ALIGN((unsignedlong)ioc->pdir_base,4*1024)==(unsignedlong)ioc->pdir_base)
3 :: ASSERT(!paging_mode_external(v->domain))
7 :: ASSERT(*addr==(u32)*addr)
9 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2_32_shadow)
9 :: ASSERT((_d)->arch.shadow.locker==current->processor)
12 :: ASSERT(sh_mfn_is_a_page_table(mfn))
13 :: ASSERT(!shadow_mode_external(v->domain))
3 :: ASSERT(d->arch.shadow2_total_pages==0)
6 :: ASSERT(shadow2_mode_external(d))
5 :: ASSERT(order<=SHADOW2_MAX_ORDER)
3 :: ASSERT(!d->arch.physmap_built)
9 :: ASSERT(action->ack_type!=ACKTYPE_NONE)
3 :: ASSERT(!__task_on_queue(v))
5 :: ASSERT(!virq_is_global(virq))
4 :: ASSERT(buffer[index+0]==0x0f&&(buffer[index+1]&0xFD)==0x21)
11 :: ASSERT(msg->shmem_ref!=-ENOSPC)
9 :: ASSERT(shadow_mode_translate(v->domain))
4 :: ASSERT(((pg[i].u.inuse.type_info&PGT_count_mask)==0)||shadow_tainted_refcnts(d))
6 :: ASSERT(rx->id!=0,("xn_rxeof:foundfreereceiveindexof0n"));
6 :: ASSERT(pci0!=-1,("donotknowhowtoroutePCIinterrupts"));
22 :: ASSERT((x&PGT_count_mask)!=0)
3 :: ASSERT(!list_empty(&schedule_data[this_cpu].runqueue))
1 :: ASSERT((desc->arch.used_vectors==NULL)||(desc->arch.used_vectors==irq_used_vectors))
1 :: ASSERT(trap<32)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;shadow_unlock(d)
3 :: ASSERT(list_empty(&wqv->list))
1 :: ASSERT(pgp->pcd->pgp_ref_count==1||pgp->eviction_attempted)
4 :: ASSERT(set_shared_p2m_entry(d,gfn,page_to_mfn(page))!=0)
2 :: ASSERT(page_get_owner(page)==dom_cow)
4 :: ASSERT(bdf<ivrs_bdf_entries)
3 :: ASSERT(pgp!=NULL)
2 :: ASSERT(mfn_to_shadow_page(mmfn)->u.sh.type==SH_type_monitor_table)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3,2)(v,smfn)
6 :: ASSERT(!((unsignedlong)start&~PAGE_MASK))
5 :: ASSERT(x<data_size)
2 :: ASSERT(seg==x86_seg_cs)
3 :: ASSERT(!v->arch.hvm_vcpu.flag_dr_dirty)
6 :: ASSERT((extra_space/sizeof(u32))<=TRACE_EXTRA_MAX)
2 :: ASSERT(mfn!=INVALID_MFN)
5 :: ASSERT((page->shadow2_flags&(SH2F_L4_64|SH2F_L3_64|SH2F_L2_64|SH2F_L1_64))==0)
11 :: ASSERT(pagetable_get_pfn(d->arch.phys_table)==0)
3 :: ASSERT(current==idle_vcpu[smp_processor_id()])
9 :: ASSERT(l2_backptr!=PGT_va_unknown)
10 :: ASSERT(s&&s->lapic_info[number])
4 :: ASSERT(ed->domain->domain_id==IDLE_DOMAIN_ID)
8 :: ASSERT(ret.time>0)
19 :: ASSERT(!extraq_on(d,i))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(vm_paddr_tptr,vm_paddr_tval)SET_VCPU();HYPERVISOR_set_gdt(unsignedlong*frame_list,intentries)__asm____volatile__(TRAP_INSTR:"=a"(ret),"=b"(ign1),"=c"(ign2):"0"(__HYPERVISOR_set_gdt),"1"(frame_list),"2"(entries):"memory");(pmap_valid_entry(*(_ptp))?xpmap_mtop(*(_ptp)):*(_ptp))PMAP_REF((_ptp),xpmap_ptom(_npte));pd_set((_pmap),(_ptp),(_npte),SH_PD_SET_VA);PMAP_REF((_ptp),(_npte));xen_queue_pt_update((pt_entry_t*)vtomach((_ptp)),(_npte));
6 :: ASSERT(i<mp_ncpus,("mp_ncpusandactualcpusareoutofwhack"));
6 :: ASSERT(a->smfn)
7 :: ASSERT(d->exec_domain[vcpu]==NULL)
9 :: ASSERT(a->spfn_and_flags&PSH_pfn_mask)
39 :: ASSERT(inf!=NULL)
9 :: ASSERT(((_p)->type_and_flags&PGT_count_mask)!=0)
3 :: ASSERT(!list_empty(&schedule_data[smp_processor_id()].runqueue))
7 :: ASSERT((!writeable)||((page_type_count(page)!=0)&&((page->flags&PG_type_mask)==PGT_writeable_page)))
1 :: ASSERT(cpumask_weight(&dirty_mask)<=1)
1 :: ASSERT(cpumask_empty(action->cpu_eoi_map))
2 :: ASSERT(!paging_locked_by_me(v->domain))
3 :: ASSERT(paging_locked_by_me(d))
5 :: ASSERT(pirq==pirq_info(d,domain_irq_to_pirq(d,irq)))
1 :: ASSERT(h.tail->u.sh.type==SH_type_l2_32_shadow)
1 :: ASSERT(mfn_to_page(sl4mfn)->u.sh.head)
10 :: ASSERT(is_epte_superpage(ept_entry))
1 :: ASSERT(sp<(NR_DYNAMIC_VECTORS-1))
3 :: ASSERT(gfn!=SHARED_M2P_ENTRY)
1 :: ASSERT(vreq->secs_pending==0)
1 :: ASSERT(bm&&bitmap_valid(bm)&&bitmap_locked(bm))
3 :: ASSERT(list_empty(&pgp->client_eph_pages))
2 :: ASSERT(mfn_valid(mfn_x(top_mfn)))
2 :: ASSERT(rc==-EINVAL)
3 :: ASSERT(do_locking||shadow_locked_by_me(v->domain))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4,4)
1 :: ASSERT(b2<bytes)
17 :: ASSERT((mfn&~(PADDR_MASK>>PAGE_SHIFT))==0)
6 :: ASSERT(spin_is_locked(&d->arch.hvm_domain.irq.lock))
2 :: ASSERT(valid_mfn(gmfn)&&(level==1||(level==2&&(flags&_PAGE_PSE)&&guest_supports_superpages(v))))
14 :: ASSERT(!test_bit(ARCH_HVM_IO_WAIT,&v->arch.hvm_vcpu.ioflags))
7 :: ASSERT(l1e_get_pfn(cache->l1tab[hashent->idx])==hashent->pfn)
11 :: ASSERT(phystab)
12 :: ASSERT(!d->arch.shadow_dirty_bitmap)
7 :: ASSERT(!page_out_of_sync(page))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);shadow_unlock(d)
1 :: ASSERT(shr_locked_by_me())
1 :: ASSERT(v->arch.hvm_svm.vmcb!=NULL)
1 :: ASSERT(vcpu_nestedhvm(v).nv_vvmcx!=NULL)
2 :: ASSERT(v->arch.xsave_area)
1 :: ASSERT(paging_mode_shadow(d))
1 :: ASSERT(pagetable_get_pfn(p2m_get_pagetable(p2m_get_hostp2m(d)))!=0)
1 :: ASSERT(l4e_get_flags(idle_pg_table[l4_table_offset(RO_MPT_VIRT_START)])&_PAGE_PRESENT)
2 :: ASSERT(g_info->apic_id!=BAD_APICID)
2 :: ASSERT(obj!=NULL)
3 :: ASSERT(x->u.sh.type<=15)
4 :: ASSERT((page->count_info&~PGC_xen_heap)==0)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);SHADOW_PRINTK("newpagingmode:d=%uv=%upe=%dgl=%u"d->domain_id,v->vcpu_id,is_hvm_domain(d)?hvm_paging_enabled(v):1,NULL,/*none*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,2),/*fl1_32*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,2),/*l2_32*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,3),/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,4,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,4,4),/*fl1_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_audit_l3_table,4,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_audit_l4_table,4,4)
4 :: ASSERT(!list_empty(&d->arch.paging.shadow.freelists[order]))
10 :: ASSERT(d->arch.paging.shadow.dirty_bitmap==NULL)
12 :: ASSERT(tn<HPET_TIMER_NUM)
5 :: ASSERT(x->type<=15)
5 :: ASSERT(!test_bit(type,&page->shadow_flags))
8 :: ASSERT((res==0)||(res==SHADOW_SET_CHANGED))
4 :: ASSERT(d->arch.shadow2.total_pages==0)
4 :: ASSERT(!list_empty(&d->arch.shadow2.freelists[SHADOW2_MAX_ORDER]))
3 :: ASSERT((_d)->arch.shadow2_locker==-1)
3 :: ASSERT(d->arch.shadow2_hash_walking==0)
5 :: ASSERT(cpus_empty(next->vcpu_dirty_cpumask))
7 :: ASSERT(shadow_enabled)
23 :: ASSERT(zone<NR_ZONES)
5 :: ASSERT(__task_on_runqueue(RUNLIST(prev)))
4 :: ASSERT((!writeable)||(page_type_count(page)!=0))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);shadow_unlock(v->domain)
4 :: ASSERT(d->arch.hvm_domain.irq.dpci)
4 :: ASSERT(pgp->pfp!=NULL)
4 :: ASSERT(pool->client!=NULL)
2 :: ASSERT(mfn_to_page(mmfn)->u.sh.type==SH_type_monitor_table)
5 :: ASSERT(is_viridian_domain(d))
4 :: ASSERT(level<CONFIG_PAGING_LEVELS)
4 :: ASSERT(src==hvm_intsrc_lapic)
4 :: ASSERT((_d)->arch.paging.shadow.locker==-1)
2 :: ASSERT((diff!=0)||vm86_mode(r)||((r->cs&3)>=GUEST_KERNEL_RPL)
8 :: ASSERT(page_get_owner(page)==NULL)
3 :: ASSERT(v->arch.shadow2_action_log)
12 :: ASSERT(valid_mfn(gmfn))
6 :: ASSERT(guest_l1e_get_flags(gpte)&_PAGE_RW)
5 :: ASSERT(dividend<divisor)
5 :: ASSERT(VALID_MFN(gmfn))
6 :: ASSERT(ioapics[intr->dst_apic_id]!=NULL,("NoI/OAPIC%dtorouteinterruptto",intr->dst_apic_id));
6 :: ASSERT(curthread->td_pinned>0,("curthreadnotpinned"));
3 :: ASSERT(sercon_buffer)
3 :: ASSERT(next_prime_einf->evt>=next_einf->evt)
3 :: ASSERT(va==(va&PG_FRAME));
3 :: ASSERT(pcb==&l->l_addr->u_pcb);
9 :: ASSERT(prev_inf->time_slept>=mcus*prev_inf->mcu_advance)
13 :: ASSERT(p->sched_priv!=NULL)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);shadow_lock(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);shadow_unlock(d)
2 :: ASSERT(opt_allow_superpage)
2 :: ASSERT(p1!=NULL)
2 :: ASSERT(client==NULL)
1 :: ASSERT(bm&&bitmap_valid(bm)&&!test_vhd_flag(bm->status,VHD_FLAG_BM_WRITE_PENDING))
4 :: ASSERT(sh_type_is_pinnable(v,sp->u.sh.type))
4 :: ASSERT(!(page->u.inuse.type_info&(PGT_count_mask|PGT_validated|PGT_partial)))
4 :: ASSERT(pt->source!=0)
3 :: ASSERT(byte_cnt>0)
2 :: ASSERT((s&~PAGE_MASK)==0)
6 :: ASSERT(va>=XEN_VIRT_START)
6 :: ASSERT(blkif->pending_list[idx].secs_pending==0)
4 :: ASSERT(sh_l1e_is_mmio(*sl1e))
2 :: ASSERT((__va>=IOREMAP_VIRT_START)&&(__va<IOREMAP_VIRT_END))
15 :: ASSERT(d==current->domain)
7 :: ASSERT(*ofh_tree==0xdeadbeef00000000)
6 :: ASSERT(!test_bit(irq,d->pirq_mask)||(action->ack_type!=ACKTYPE_NONE))
1 :: ASSERT((x&PGT_validated)
5 :: ASSERT((diff!=0)||vm86_mode(r)||((r->cs&3)>=GUEST_KERNEL_RPL)||(r->cs==0)||hvm_guest(current))
6 :: ASSERT(m3mfn_info)
7 :: ASSERT(!page_get_owner(mfn_to_page(v->arch.monitor_shadow_ref)))
6 :: ASSERT(guest_l2e_get_flags(gl2e)&_PAGE_PRESENT)
11 :: ASSERT(shadow_mode_enabled(v->domain))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(vm_paddr_tptr,vm_paddr_tval)SET_VCPU();HYPERVISOR_set_gdt(unsignedlong*frame_list,intentries)__asm____volatile__(TRAP_INSTR:"=a"(ret),"=b"(ign1),"=c"(ign2):"0"(__HYPERVISOR_set_gdt),"1"(frame_list),"2"(entries):"memory");(pmap_valid_entry(*(_ptp))?xpmap_mtop(*(_ptp)):*(_ptp))PMAP_REF((_ptp),xpmap_ptom(_npte));xen_queue_pt_update((pt_entry_t*)vtomach((_ptp)),xpmap_ptom((_npte)));
6 :: ASSERT(root_get_value(idle_pg_table[1])==0)
6 :: ASSERT((flags&(M_NOWAIT|M_WAITOK))==M_NOWAIT||(flags&(M_NOWAIT|M_WAITOK))==M_WAITOK,("pmap_allocpte:flagsisneitherM_NOWAITnorM_WAITOK"));
6 :: ASSERT(1<<PDESHIFT==sizeof(pd_entry_t));
6 :: ASSERT(!pagetable_val(ed->arch.monitor_table))
3 :: ASSERT(self==curcpu());
4 :: ASSERT((p!=NULL)||!in_irq())
6 :: ASSERT(ent->prev->next==ent)
5 :: ASSERT(!__task_on_runqueue(p))
5 :: ASSERT(test_bit(vector,cfg->used_vectors))
2 :: ASSERT(l->locker==-1)
2 :: ASSERT(rc==0)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3,3)
2 :: ASSERT(mfn_valid(sh_ctxt->mfn1))
8 :: ASSERT(mfn_valid(mfn)||!p2m_is_ram(*t))
3 :: ASSERT(ioc->pdir_base[off]>>63)
6 :: ASSERT(d->arch.paging.shadow.hash_walking==0)
13 :: ASSERT(((vaddr&~PAGE_MASK)+bytes)<=PAGE_SIZE)
6 :: ASSERT(sp->mbz==0)
5 :: ASSERT(sp->type!=SH_type_l4_64_shadow)
8 :: ASSERT(shadow_l3e_get_flags(shadow_l3e[3])&_PAGE_PRESENT)
7 :: ASSERT(port_is_valid(ld,lport))
2 :: ASSERT(((l1va=d->arch.ptwr[PTWR_PT_INACTIVE].l1va)==0)||(l1_linear_offset(l1va)!=l1_linear_offset(addr)))
2 :: ASSERT(((irq_guest_action_t*)desc->action)->ack_type==ACKTYPE_UNMASK)
9 :: ASSERT(l3_backptr!=PGT_va_unknown)
15 :: ASSERT(hcb->ht==THASH_VHPT)
10 :: ASSERT(sedf_runnable(ret.task))
12 :: ASSERT(l2e_get_flags(gl2e)&_PAGE_PRESENT)
6 :: ASSERT(intpin->io_edgetrigger,("SMInotedgetriggered"));
6 :: ASSERT(is->is_ithread!=NULL,("%s:isrcwithnoithread",__func__));
4 :: ASSERT(!pagetable_val(d->arch.phys_table))
17 :: ASSERT(purb->actual_length<=pending_req->nr_pages*PAGE_SIZE)
15 :: ASSERT(d!=NULL)
8 :: ASSERT(allocated_in_map(first_page+i))
4 :: ASSERT(per_cpu(vector_irq,cpu)[old_vector]==irq)
6 :: ASSERT(!p2m_is_nestedp2m(p2m))
1 :: ASSERT(pagetable_get_pfn(p2m_get_pagetable(hostp2m))!=0)
1 :: ASSERT(pfp_size<=PAGE_SIZE)
1 :: ASSERT(guest_kernel_mode(v,regs))
1 :: ASSERT(vhd_type_dynamic(&s->vhd))
3 :: ASSERT(sp->u.sh.type!=SH_type_l2_32_shadow)
4 :: ASSERT(!(initial_images_start&~PAGE_MASK))
8 :: ASSERT((size<=sizeof(mask))&&(size>0))
10 :: ASSERT((ACPI_PHYSICAL_ADDRESS+acpi_sz)<=0xF0000)
3 :: ASSERT(mfn_valid(*sl3mfn))
5 :: ASSERT(sp->type>0)
6 :: ASSERT((page->shadow_flags&(SHF_L2H_PAE|SHF_L2_PAE|SHF_L1_PAE))==0)
6 :: ASSERT((mfn_to_page(smfn)->count_info&PGC_SH_type_mask)==PGC_SH_l3_pae_shadow)
5 :: ASSERT(shadow_type!=PGC_SH_none)
4 :: ASSERT(v->arch.shadow2.action_log)
5 :: ASSERT(size+(((unsignedlong)new_gp)&~PAGE_MASK)<=PAGE_SIZE)
6 :: ASSERT(shadow_type!=PGC_SH2_p2m_table)
5 :: ASSERT(m1mfn_info)
4 :: ASSERT(hypercall_table!=NULL)
7 :: ASSERT(cur)
4 :: ASSERT(pagetable_val(v->arch.monitor_table))
9 :: ASSERT(current->domain==(_d))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap->pm_pdir[pdirindex],TRUE);
7 :: ASSERT(score)
6 :: ASSERT(cluster<=APIC_MAX_CLUSTER,("%s:cluster%utoobig",__func__,cluster));
6 :: ASSERT(size<=PAGE_SIZE,("'size'donotfitintoPAGE_SIZE,asexpected."));
19 :: ASSERT(virt_to_machine(MMAP_VADDR(pending_idx,i))==buffer_mach+i<<PAGE_SHIFT)
10 :: ASSERT(spin_is_locked(lock))
4 :: ASSERT(__on_net_schedule_list(vif))
23 :: ASSERT(r_time>=ctx_allow)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));shadow_lock(d)
4 :: ASSERT(set_shared_p2m_entry(p2m,gfn,page_to_mfn(page))!=0)
3 :: ASSERT(x2apic_enabled)
3 :: ASSERT(cpu_isset(cpu,timer_valid_cpumask))
2 :: ASSERT(!(e&((1<<L2_PAGETABLE_SHIFT)-1)))
1 :: ASSERT((pi->count_info&~(PGC_allocated|1))==0)
3 :: ASSERT(pfp!=NULL)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4,4)
3 :: ASSERT(prot==0)
3 :: ASSERT(dma_len<=DMA_CHUNK_SIZE)
3 :: ASSERT(d->arch.hvm_domain.ioreq.va!=NULL)
4 :: ASSERT(avail[node][zone]>=request)
5 :: ASSERT(mfn_valid(gmfn)&&(sh_mfn_is_a_page_table(gmfn)||((mfn_to_page(gmfn)->u.inuse.type_info&PGT_count_mask)==0)))
11 :: ASSERT(valid_mfn(*sl2mfn))
4 :: ASSERT(alignment==0)
5 :: ASSERT(spin_is_locked(&schedule_data[v->processor].schedule_lock))
5 :: ASSERT(VM_ASSIST(d,VMASST_TYPE_writable_pagetables))
17 :: ASSERT(!(l2e_get_flags(old_sl2e)&_PAGE_PRESENT))
7 :: ASSERT((psh_type==PGT_snapshot)||!mfn_out_of_sync(gmfn))
6 :: ASSERT(cluster_id<=APIC_MAX_INTRACLUSTER_ID,("%s:intraclusterid%utoobig",__func__,cluster_id));
8 :: ASSERT(spin_is_locked(&current->mm.shadow_lock))
5 :: ASSERT(p->state!=TASK_DYING)
3 :: ASSERT((((page->flags&PG_type_mask)==PGT_writeable_page)&&(page_type_count(page)!=0))||(((page->flags&PG_type_mask)==PGT_none)&&(page_type_count(page)==0)))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);shadow_unlock(d)
1 :: ASSERT(paging_locked_by_me(v->domain))
3 :: ASSERT(p2m->domain->arch.paging.alloc_page)
5 :: ASSERT(d)
4 :: ASSERT(total_avail_pages>=0)
2 :: ASSERT((long)obj->objnode_count==0)
2 :: ASSERT(rtn->slots[i]==NULL)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3,3)
5 :: ASSERT(bytes_to_wrap==calc_bytes_to_wrap(buf))
6 :: ASSERT(intr_source!=hvm_intack_none)
3 :: ASSERT((_d)->arch.paging.log_dirty.locker==-1)
7 :: ASSERT(paging_mode_external(v->domain))
6 :: ASSERT(d->arch.paging.shadow.hash_table)
5 :: ASSERT(mfn_valid(*sl1mfn))
2 :: ASSERT(current->domain->domain_id==IDLE_DOMAIN_ID)
10 :: ASSERT(cpus_empty(action->cpu_eoi_map))
8 :: ASSERT(cpus_subset(cpumask,cpu_online_map))
23 :: ASSERT(spin_is_locked(&d->big_lock))
3 :: ASSERT(pagetable_get_phys(d->arch.phys_table))
8 :: ASSERT(!extraq_on(d,EXTRA_UTIL_Q))
6 :: ASSERT(cpu_info[apic_id].cpu_present==0,("CPU%daddedtwice",apic_id));
6 :: ASSERT(lsect<=7,("XENdiskdriverdatacannotcrossapageboundary"));
6 :: ASSERT(callout!=NULL,("NULLcalloutinfork_exit"));
6 :: ASSERT(lapic!=NULL,("%scalledtooearly",__func__));
5 :: ASSERT(smfn&&!(smfn&~PGT_mfn_mask))
7 :: ASSERT(!(old_sl2e&_PAGE_PRESENT))
7 :: ASSERT(pending_list[idx].count==0)
18 :: ASSERT(((_p)->u.inuse.type_info&PGT_count_mask)!=0)
2 :: ASSERT(mfn_to_page(*smfn)->u.sh.head)
1 :: ASSERT(list_empty(&vreq->next))
2 :: ASSERT(rtn!=NULL)
2 :: ASSERT(is_viridian_domain(current->domain))
2 :: ASSERT(!((uintptr_t)aiocbp->aio_buf&(dev->info.sector_size-1)))
2 :: ASSERT(!(aiocbp->aio_offset&(dev->info.sector_size-1)))
3 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)!=PGT_writable_page||(page->u.inuse.type_info&PGT_count_mask)==0||v->domain->is_shutting_down)
9 :: ASSERT(t==SH_type_l3_shadow)
8 :: ASSERT((pg->count_info&PGC_SH_type_mask)<PGC_SH_max_shadow)
4 :: ASSERT(!d->arch.shadow2.hash_table)
5 :: ASSERT(valid_mfn(gmfn)&&(sh2_mfn_is_a_page_table(gmfn)||((mfn_to_page(gmfn)->u.inuse.type_info&PGT_count_mask)==0)))
9 :: ASSERT(guest_l3e_get_flags(gl3e[3])&_PAGE_PRESENT)
9 :: ASSERT(ft==ft_demand_read||ft==ft_demand_write)
12 :: ASSERT(index<MACHPHYS_MBYTES>>1)
8 :: ASSERT(v->processor==smp_processor_id())
2 :: ASSERT(!allocated_in_map(virt_to_pfn(head)))
6 :: ASSERT((flags&(M_NOWAIT|M_WAITOK))==M_NOWAIT||(flags&(M_NOWAIT|M_WAITOK))==M_WAITOK,("_pmap_allocpte:flagsisneitherM_NOWAITnorM_WAITOK"));
8 :: ASSERT(ridblock_owner[i]==d)
8 :: ASSERT(crit_count[cpu]>=0)
12 :: ASSERT(spin_is_locked(&m->shadow_lock))
3 :: ASSERT(sp->u.sh.head||(shadow_type>SH_type_max_shadow))
3 :: ASSERT(!nodemask_retry)
1 :: ASSERT(gt->gt_version!=0)
1 :: ASSERT(pt->source==PTSRC_isa)
1 :: ASSERT(test_vhd_flag(bm->status,VHD_FLAG_BM_WRITE_PENDING))
1 :: ASSERT(!bitmap_in_use(lru))
2 :: ASSERT(mfn_to_shadow_page(_sl3mfn)->u.sh.type==SH_type_l3_64_shadow)
5 :: ASSERT(d->dirty_vram->sl1ma[i]==sl1ma)
4 :: ASSERT(!((unsignedlong)data&~PAGE_MASK))
3 :: ASSERT(((u8*)pdir_start)[7]==0)
8 :: ASSERT(h->cur<=h->size)
2 :: ASSERT(valid_mfn(gmfn)
6 :: ASSERT(level==1||!(ft&FETCH_TYPE_DEMAND))
6 :: ASSERT(r&SHADOW_SET_L3PAE_RECOPY)
4 :: ASSERT(v->arch.shadow2.mode)
2 :: ASSERT(((l1va=d->arch.ptwr[PTWR_PT_ACTIVE].l1va)==0)||(l1_linear_offset(l1va)!=l1_linear_offset(addr)))
4 :: ASSERT(opcode)
7 :: ASSERT(entry->writable_pl1e==-1)
11 :: ASSERT(mpfn_info)
3 :: ASSERT(sdom->id!=IDLE_DOMAIN_ID)
3 :: ASSERT(vm_map_pmap(&l->l_proc->p_vmspace->vm_map)!=ci->ci_pmap||ci->ci_tlbstate!=TLBSTATE_VALID);
3 :: ASSERT(va<(PDSLOT_KERN<<PDSHIFT));
3 :: ASSERT(ci==curcpu());
3 :: ASSERT((opte&PG_PVLIST)==0);
5 :: ASSERT(crit_count[cpu]==0)
4 :: ASSERT(next!=NULL)
2 :: ASSERT(!test_bit(vector,desc->chip_data->used_vectors))
1 :: ASSERT(!pool->init_region)
3 :: ASSERT(sp->u.sh.type!=SH_type_l4_64_shadow)
3 :: ASSERT(t->status==TIMER_STATUS_inactive)
4 :: ASSERT(len>0)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4,4)(v,smfn)
4 :: ASSERT(v->arch.guest_table.pfn==d->arch.paging.shadow.unpaged_pagetable.pfn)
5 :: ASSERT(v->arch.paging.shadow.guest_vtable==NULL)
10 :: ASSERT(this_cpu(mc_state).flags==0)
5 :: ASSERT(lchn->consumer_is_xen)
6 :: ASSERT(log_htab_size<=SDR1_HTABSIZE_MAX)
1 :: ASSERT((diff!=0)||VM86_MODE(r)||!RING_0(r)||HVM_DOMAIN(current))
4 :: ASSERT(opcode[0]<=15)
11 :: ASSERT(hcb->ht==THASH_VTLB)
6 :: ASSERT((dest&~(APIC_ID_MASK>>APIC_ID_SHIFT))==0,("%s:invaliddestfield",__func__));
6 :: ASSERT(id!=0,("alloc_rx_buffers:foundfreereceiveindexof0n"));
6 :: ASSERT(src_bus<=mptable_maxbusid,("busid%dtoolarge",src_bus));
3 :: ASSERT(pfn_is_ram(smfn))
3 :: ASSERT(ci->ci_tlbstate==TLBSTATE_STALE);
2 :: ASSERT(test_bit(_PGC_always_set,&page->count_info))
2 :: ASSERT(__task_on_runqueue(d))
5 :: ASSERT(next_prime->evt>=next->evt)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpus_copy(desc->affinity,cfg->cpu_mask)
2 :: ASSERT(!nv->nv_vmexit_pending)
1 :: ASSERT(!cpu_online(old_cpu)&&cpu_online(new_cpu))
1 :: ASSERT(pgp->us.obj!=NULL)
1 :: ASSERT(pg->u.sh.type==SH_type_l1_32_shadow||pg->u.sh.type==SH_type_fl1_32_shadow||pg->u.sh.type==SH_type_l2_32_shadow)
1 :: ASSERT(cpumask_weight(cmd->mask)==1)
6 :: ASSERT(i==target)
2 :: ASSERT(vmce&&vmce->mci_ctl)
7 :: ASSERT(p2m_is_shared(ot))
1 :: ASSERT(offset!=DD_BLK_UNUSED)
1 :: ASSERT(objnode->obj!=NULL)
4 :: ASSERT(!(addr&(~PAGE_MASK_4K)))
4 :: ASSERT(flags==(MAP_SHARED|MAP_ANON)||flags==(MAP_PRIVATE|MAP_ANON))
2 :: ASSERT(l4e_get_flags(l4e[linear_slot])&_PAGE_PRESENT)
2 :: ASSERT(l4e!=NULL)
5 :: ASSERT((va<XEN_VIRT_END)||(va>=DIRECTMAP_VIRT_START))
5 :: ASSERT(sh_remove_write_access(v,gmfn,0,0)==0)
1 :: ASSERT(valid_mfn(gmfn)flags=guest_l1e_get_flags(*ep)
5 :: ASSERT(sh_type_is_pinnable(v,sp->type))
18 :: ASSERT(gfn<(RO_MPT_VIRT_END-RO_MPT_VIRT_START)/sizeof(l1_pgentry_t))
5 :: ASSERT((mfn_to_page(_sl1mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l1_shadow||(mfn_to_page(_sl1mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_fl1_shadow)
3 :: ASSERT((__va>=IOREMAP_VIRT_START)&&(__va<=(IOREMAP_VIRT_END-1)))
6 :: ASSERT(shadow2_mode_translate(d))
5 :: ASSERT(!shadow2_mode_refcounts(d))
8 :: ASSERT(action->ack_type==ACKTYPE_UNMASK)
1 :: ASSERT((diff==0)||(!VM86_MODE(r)&&RING_0(r)))
7 :: ASSERT(s&&target)
7 :: ASSERT(page==NULL)
6 :: ASSERT(end_xt>now)
11 :: ASSERT(IMPLY(extraq_on(d,EXTRA_UTIL_Q)||extraq_on(d,EXTRA_PEN_Q),sedf_runnable(d)))
14 :: ASSERT(l1e_get_flags(gpte)&_PAGE_RW)
3 :: ASSERT(avail_start==PAGE_SIZE);
6 :: ASSERT((page->flags&PG_domain_mask)==p->domain)
3 :: ASSERT(!active_ac_timer(timer))
12 :: ASSERT(page_type_count(page)!=0)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;shadow_unlock(d)
4 :: ASSERT(MSI_IRQ(desc-irq_desc))
2 :: ASSERT((_domain)->arch.nested_p2m_locker==-1)
3 :: ASSERT(mig)
7 :: ASSERT(victim!=NULL)
1 :: ASSERT(tmp.op==VHD_OP_DATA_READ||tmp.op==VHD_OP_DATA_WRITE)
1 :: ASSERT(!bitmap_locked(bm))
6 :: ASSERT(cpus_weight(cmd->mask)==1)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3,2)
4 :: ASSERT(domain_is_locked(d))
3 :: ASSERT(id==DOMID_SELF)
4 :: ASSERT(!((uintptr_t)aiocbp->aio_buf&(dev->sector_size-1)))
4 :: ASSERT(!(aiocbp->aio_offset&(dev->sector_size-1)))
3 :: ASSERT(pv_32on64_vcpu(v))
8 :: ASSERT(irq<VIOAPIC_NUM_PINS)
3 :: ASSERT(!list_empty(&d->arch.shadow2_freelists[SHADOW2_MAX_ORDER]))
2 :: ASSERT((pg[i].count_info&~(PGC_allocated|1))==0)
15 :: ASSERT(hvm_guest(v))
6 :: ASSERT(m2mfn_info)
63 :: ASSERT(shadow_lock_is_acquired(d))
6 :: ASSERT(object->type==OBJT_DEVICE,("pmap_object_init_pt:non-deviceobject"));
10 :: ASSERT(___shadow_status(d,gpfn,stype)==0)
5 :: ASSERT((a->pfn&~PSH_hl2)<0x00100000UL)
4 :: ASSERT(current->domain->id!=IDLE_DOMAIN_ID)
3 :: ASSERT((opte&PG_FRAME)!=(KERNTEXTOFF-KERNBASE_LOCORE));
36 :: ASSERT(skb->dev==dev)
6 :: ASSERT((!writeable)||((page_type_count(page)!=0)&&((page->flags&PG_type_mask)==PGT_writeable_page)&&((page->flags&PG_need_flush)==PG_need_flush)))
3 :: ASSERT(order==0||order==9||order==18)
4 :: ASSERT(p2m->domain)
2 :: ASSERT(!(len&(sizeof(uint64_t)-1)))
1 :: ASSERT(va>=DIRECTMAP_VIRT_START)
2 :: ASSERT(mfn_to_page(_sl1mfn)->u.sh.type==SH_type_l1_shadow||mfn_to_page(_sl1mfn)->u.sh.type==SH_type_fl1_shadow)
27 :: ASSERT(spin_is_locked(&d->event_lock))
2 :: ASSERT(v->arch.hvm_vmx.host_cr0&X86_CR0_TS)
9 :: ASSERT(hvm_sr_handlers[typecode].save==NULL)
3 :: ASSERT((diff!=0)||vm86_mode(r)||((r->cs&3)>=GUEST_KERNEL_RPL(current->domain))||(r->cs==0)||is_hvm_vcpu(current))
7 :: ASSERT(mfn_to_shadow_page(_sl1mfn)->type==SH_type_l1_shadow||mfn_to_shadow_page(_sl1mfn)->type==SH_type_fl1_shadow)
5 :: ASSERT(pagetable_is_null(v->arch.shadow_table[i]))
7 :: ASSERT(!test_bit(type>>PGC_SH_type_shift,&page->shadow_flags))
4 :: ASSERT(info->foreign==NULL)
4 :: ASSERT(per_cpu(schedule_data,d->processor).curr)
6 :: ASSERT(!(trig==INTR_TRIGGER_CONFORM||pol==INTR_POLARITY_CONFORM),("%s:Conformingtriggerorpolarityn",__func__));
6 :: ASSERT(busses[args->bus].bus_type==PCI,("probingfornon-PCIbus"));
10 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)==PGT_writable_page)
3 :: ASSERT(vm_map_pmap(&l->l_proc->p_vmspace->vm_map)!=pmap_kernel());
32 :: ASSERT(flags==(GTF_accept_transfer|GTF_transfer_committed))
8 :: ASSERT((_p)->u.inuse.domain==(_d))
98 :: ASSERT(local_irq_is_enabled())
17 :: ASSERT((_l&~PAGE_MASK)==0)
17 :: ASSERT((_l&PAGE_MASK)!=0)
8 :: ASSERT(timer!=NULL)
1 :: ASSERT(!cpumask_empty(&cpus)&&cpumask_test_cpu(cpu,&cpus))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);shadow_lock(v->domain)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);shadow_lock(v->domain)
4 :: ASSERT(v->domain==d)
1 :: ASSERT(h.next->list.prev==PAGE_LIST_NULL)
6 :: ASSERT(is_epte_superpage(epte))
1 :: ASSERT(!(level>2&&(l1e_get_flags(*p)&_PAGE_PRESENT)&&(l1e_get_flags(*p)&_PAGE_PSE)))
1 :: ASSERT(test_vhd_flag(tx->status,VHD_FLAG_TX_LIVE))
1 :: ASSERT(s->bat.pbw_blk==blk)
4 :: ASSERT(pgp->size!=-1)
2 :: ASSERT()isusedonlywherethe(usuallysmall)overheadsofanalways-ondeb
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3,3)(v,smfn)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3,2)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2,2)
2 :: ASSERT(guest_l2e_get_flags(gw->l2e)&_PAGE_PSE)
9 :: ASSERT(!(type&~PGT_type_mask))
5 :: ASSERT(t==PGC_SH2_l2_shadow||t==PGC_SH2_l2h_pae_shadow)
4 :: ASSERT(!(mfn_to_page(smfn)->u.inuse.type_info&PGT_pinned))
4 :: ASSERT((pfn_to_page(smfn)->u.inuse.type_info&PGT_pinned))
18 :: ASSERT(tabpfn!=0)
7 :: ASSERT(pagetable_get_paddr(d->arch.phys_table))
6 :: ASSERT(p->p_state==PRS_NORMAL,("executingprocessisstillnew"));
6 :: ASSERT(offsetof(structpcpu,pc_curthread)==0);
7 :: ASSERT(a->smfn_and_flags&PSH_pfn_mask)
32 :: ASSERT(d->sched_priv!=NULL)
3 :: ASSERT(crit_checking_disabled[cpu]>=0)
1 :: ASSERT((!writeable)||((page_type_count(page)!=0)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);cpu_set(v->processor,cpumask);desc->handler->set_affinity(desc,&cpumask)
1 :: ASSERT(!test_bit(vector,ret))
1 :: ASSERT(l3e_get_flags(l3_ro_mpt[l3_table_offset(HIRO_COMPAT_MPT_VIRT_START)])&_PAGE_PRESENT)
2 :: ASSERT(rc<=0)
9 :: ASSERT(t==SH_type_l4_shadow)
5 :: ASSERT(sp->type!=SH_type_l2_32_shadow)
5 :: ASSERT((pg->count_info&PGC_SH_type_mask)!=PGC_SH_l2_pae_shadow)
5 :: ASSERT((mfn_to_page(_sl1mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l1_shadow||(mfn_to_page(_sl1mfn)->count_info&PGC_SH_type_mask)==PGC_SH_fl1_shadow)
8 :: ASSERT(__va>=IOREMAP_VIRT_START)
13 :: ASSERT(ep&&!(((unsignedlong)ep)&((sizeof*ep)-1)))
4 :: ASSERT(papr_hcalls!=NULL)
4 :: ASSERT(cmd->direction==SCHED_INFO_PUT)
6 :: ASSERT(reg==decode_dest_reg(prefix,buffer[index+2]))
10 :: ASSERT(vlapic!=NULL)
9 :: ASSERT(d->processor>=0)
8 :: ASSERT(entry_get_flags(gle)&_PAGE_PRESENT)
6 :: ASSERT(!page_get_owner(&frame_table[v->arch.monitor_shadow_ref]))
4 :: ASSERT(offset<size)
8 :: ASSERT(mpt_order<=MAX_ORDER)
10 :: ASSERT(type&&(type<PGT_l4_page_table))
6 :: ASSERT((x&PGT_validated)||test_bit(DF_DYING,&page_get_owner(page)->flags))
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(&pdir_pde(PTD,kernel_vm_end),newpdir,TRUE);
6 :: ASSERT(p2->p_tracevp==NULL,("newprocesshasaktracevnode"));
9 :: ASSERT(!(frame_table[smfn].u.inuse.type_info&PGT_pinned))
13 :: ASSERT(gmfn)
46 :: ASSERT(spin_is_locked(&d->arch.shadow_lock))
3 :: ASSERT(ci->ci_tlbstate==TLBSTATE_VALID);
3 :: ASSERT(pcb->pcb_ldt_sel==pmap->pm_ldt_sel);
3 :: ASSERT(l!=NULL);
6 :: ASSERT(ent->next->prev==ent)
5 :: ASSERT(free_pfns!=0)
8 :: ASSERT(r_time!=0)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);shadow_unlock(v->domain)
1 :: ASSERT(info->tables_nr<MAX_TABLES)
1 :: ASSERT(firstbyte!=NOT_SHAREABLE)
2 :: ASSERT(t->gt_version!=0)
1 :: ASSERT(tx->closed)
1 :: ASSERT(bat_locked(s)&&s->bat.pbw_blk==blk)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2)
3 :: ASSERT(!v->fpu_dirtied)
10 :: ASSERT(zone_lo<=zone_hi)
6 :: ASSERT((page->shadow_flags&(SHF_L4_64|SHF_L3_64|SHF_L2H_64|SHF_L2_64|SHF_L1_64))==0)
11 :: ASSERT(isa_irq<=15)
10 :: ASSERT(!(type&~(PGT_type_mask|PGT_pae_xen_l2)))
5 :: ASSERT(d->tot_pages>=rma_nrpages)
8 :: ASSERT((pg->count_info&PGC_SH_type_mask)!=PGC_SH_l2_32_shadow)
5 :: ASSERT(d->arch.shadow.p2m_pages==0)
8 :: ASSERT(valid_mfn(_mfn(mfn)))
5 :: ASSERT((pg->count_info&PGC_SH2_type_mask)!=PGC_SH2_l3_pae_shadow)
3 :: ASSERT(HVM_DOMAIN(v))
4 :: ASSERT(pfn_to_page(gmfn)->count_info&PGC_page_table)
3 :: ASSERT(pagetable_get_phys(ed->arch.monitor_table)==0)
6 :: ASSERT(!lapics[apic_id].la_present,("duplicatelocalAPIC%u",apic_id));
6 :: ASSERT(boot_cpu_id==PCPU_GET(apic_id),("BSP'sAPICIDdoesn'tmatchboot_cpu_id"));
6 :: ASSERT(((vm_offset_t)pmap->pm_pdpt&((NPGPTD*sizeof(pdpt_entry_t))-1))==0,("pmap_pinit:pdptmisaligned"));
6 :: ASSERT(sc->xn_rx_batchlen==0,("notallmbufsprocessed"));
17 :: ASSERT((req->length>>PAGE_SHIFT)<=MMAP_PAGES_PER_REQUEST)
8 :: ASSERT(key_table[key].u.handler==NULL)
14 :: ASSERT(prev_einf!=NULL)
19 :: ASSERT(!in_interrupt())
1 :: ASSERT(raw)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;shadow_lock(d)
2 :: ASSERT((unsignedlong)v!=0xfffff000)
1 :: ASSERT(!get_bitmap(s,blk))
1 :: ASSERT(bat_entry(s,blk)==DD_BLK_UNUSED)
2 :: ASSERT(rw_is_locked(&pcidevs_lock))
3 :: ASSERT(spin_is_locked(&bus2bridge_lock))
4 :: ASSERT(l1e_get_flags(*p2m_entry)&_PAGE_PRESENT)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3,2)(v,vaddr,pmfn)
2 :: ASSERT(d->arch.vmx_platform.ioreq.va!=NULL)
2 :: ASSERT(intack.source==hvm_intsrc_lapic)
6 :: ASSERT(l2e!=NULL)
7 :: ASSERT(spin_is_locked(&pit->lock))
3 :: ASSERT(instr==INSTR_CMP||instr==INSTR_SUB)
2 :: ASSERT(info->busy.req==req)
5 :: ASSERT(d->arch.paging.shadow.total_pages==0)
6 :: ASSERT((mfn_to_page(_sl3mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l3_pae_shadow)
4 :: ASSERT(d->arch.shadow2.dirty_bitmap==NULL)
7 :: ASSERT(v->arch.guest_table.pfn==d->arch.phys_table.pfn)
5 :: ASSERT(!pending_eoi[cpu][sp].ready)
4 :: ASSERT(runstate->state==RUNSTATE_running)
2 :: ASSERT(info->grant_id!=-ENOSPC)
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pde,newpdir,FALSE);
1 :: ASSERT(VM_PAGE_TO_PHYS(m)==(pmap->pm_pdpt[i]&PG_FRAME),pmap_zero_page(nkpg);ptppaddr=VM_PAGE_TO_PHYS(nkpg);newpdir=(pd_entry_t)(ptppaddr|PG_V|PG_RW|PG_A|PG_M);PD_SET_VA(kernel_pmap,&pdir_pde(kernel_pmap->pm_pdir,kernel_vm_end),newpdir,TRUE);mtx_lock_spin(&allpmaps_lock);LIST_FOREACH(pmap,&allpmaps,pm_list){pde=pmap_pde(pmap,kernel_vm_end);PD_SET_VA(pmap,pde,newpdir,FALSE);PT_UPDATES_FLUSH();mtx_unlock_spin(&allpmaps_lock);PD_CLEAR_VA(pmap,&pmap->pm_pdir[pdirindex],TRUE);pmap->pm_stats.resident_count-=NBPDR/PAGE_SIZE;anyvalid=1;continue;pmap->pm_stats.resident_count+=size>>PAGE_SHIFT;npdes=size>>PDRSHIFT;PD_SET_VA(pmap,&pmap->pm_pdir[ptepindex],ptepa|PG_U|PG_RW|PG_V|PG_PS,FALSE);ptepa+=NBPDR;ptepindex+=1;PD_SET_VA(dst_pmap,&dst_pmap->pm_pdir[ptepindex],srcptepaddr,TRUE);dst_pmap->pm_stats.resident_count+=NBPDR/PAGE_SIZE;mtx_unlock(&CMAPCADDR12_lock);pmap_copy_ma(vm_paddr_tsrc,vm_paddr_tdst)mtx_lock(&CMAPCADDR12_lock);panic("pmap_copy_ma:CMAP1busy");panic("pmap_copy_ma:CMAP2busy");sched_pin();invltlb();invlpg((u_int)CADDR1);invlpg((u_int)CADDR2);PT_SET_VA_MA(CMAP1,PG_V|src|PG_A,FALSE);PT_SET_VA_MA(CMAP2,PG_V|PG_RW|dst|PG_A|PG_M,TRUE);bcopy(CADDR1,CADDR2,PAGE_SIZE);PT_CLEAR_VA(CMAP1,FALSE);PT_CLEAR_VA(CMAP2,TRUE);sched_unpin();mtx_unlock(&CMAPCADDR12_lock);boolean_trv;rv=FALSE;PMAP_LOCK(pmap);printf("");xen_queue_pt_update(vm_paddr_tptr,vm_paddr_tval)SET_VCPU();HYPERVISOR_set_gdt(unsignedlong*frame_list,intentries)__asm____volatile__(TRAP_INSTR:"=a"(ret):"0"(__HYPERVISOR_set_gdt),
20 :: ASSERT(VALID_M2P(gpfn))
6 :: ASSERT(pmap_kextract((vm_offset_t)pmap->pm_pdpt)<(4ULL<<30),("pmap_pinit:pdptabove4g"));
6 :: ASSERT(m<&vm_page_array[vm_page_array_size],("pmap_remove_pages:badtpte%#jx",(uintmax_t)tpte));
6 :: ASSERT(current->domain==(_d));:(gpfn))
11 :: ASSERT(!(entry->writable_pl1e&(sizeof(l1_pgentry_t)-1)))
4 :: ASSERT(l2_pgentry_val(hl2e)&_PAGE_PRESENT)
13 :: ASSERT(debugtrace_buf[debugtrace_bytes-1]==0)
7 :: ASSERT(page_get_owner(_p)==(_d))
3 :: ASSERT(ci->ci_pmap!=pmap_kernel());
5 :: ASSERT(l2_pgentry_val(l2e)&_PAGE_PRESENT)
2 :: ASSERT(cpumask_test_cpu(nxt,&per_cpu(cpu_core_map,cpu)))
2 :: ASSERT(test_bit(old_vector,cfg->used_vectors))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);shadow_lock(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);shadow_unlock(d)
1 :: ASSERT((_ptr>>2)==val)
5 :: ASSERT(irq==pirq->arch.irq)
4 :: ASSERT(!sh_page_has_multiple_shadows(mfn_to_page(gmfn)))
2 :: ASSERT(page_is_out_of_sync(pg))
2 :: ASSERT(l4e_get_flags(ml4e[linear_slot])&_PAGE_PRESENT)
4 :: ASSERT(op_size==BYTE||op_size==WORD||op_size==LONG)
4 :: ASSERT(v->arch.shadow.mode!=NULL)
9 :: ASSERT(vaddr)
4 :: ASSERT(writable_pagetable_in_sync(d))
3 :: ASSERT(buffer[0]==0x0f&&(buffer[1]&0xFD)==0x21)
5 :: ASSERT(!cpu_isset(cpu,next->vcpu_dirty_cpumask))
9 :: ASSERT(!test_bit(ARCH_VMX_IO_WAIT,&d->arch.arch_vmx.flags))
8 :: ASSERT(curinf->deadl_abs>now)
2 :: ASSERT(ref!=-ENOSPC,("couldn'tgetgrantreference"));
6 :: ASSERT(cold||td->td_ucred!=NULL,("kerneltrapdoesn'thaveucred"));
4 :: ASSERT(shadow_mode_external(ed->domain))
12 :: ASSERT(frame_table[gmfn].count_info&PGC_page_table)
5 :: ASSERT(ed->thread.arch_vmx.vmcs)
59 :: ASSERT(!local_irq_is_enabled())
7 :: ASSERT(a->pfn<0x00100000)
11 :: ASSERT(DOMAIN_OKAY(page->flags))
1 :: ASSERT(pdev!=NULL)
1 :: ASSERT(spin_is_locked(&hd->mapping_lock)&&pt_mfn)
3 :: ASSERT(bios_image_base<0x100000)
1 :: ASSERT(mfn_to_page(sl3mfn)->u.sh.head)
1 :: ASSERT(len<=XENSTORE_PAYLOAD_MAX)
1 :: ASSERT(!test_vhd_flag(s->bat.status,VHD_FLAG_BAT_WRITE_STARTED))
2 :: ASSERT(mfn_to_shadow_page(_sl4mfn)->u.sh.type==SH_type_l4_64_shadow)
3 :: ASSERT(sp->u.sh.type>0)
2 :: ASSERT(q>(char*)p)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4,4)(v,vaddr,pmfn)
4 :: ASSERT(spin_is_locked(&d->arch.irq_lock))
1 :: ASSERT(((unsignedlong)addr&PAGE_MASK)==LDT_VIRT_START(v))
12 :: ASSERT(l1e_get_pfn(l1e)!=INVALID_MFN||!p2m_is_ram(p2mt))
3 :: ASSERT((*res_ptr&m)==m)
4 :: ASSERT(!active_timer(&v->periodic_timer))
9 :: ASSERT(mfn_to_shadow_page(_sl4mfn)->type==SH_type_l4_64_shadow)
3 :: ASSERT(spin_is_locked(vpic_lock(vpic)))
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l2_pae_shadow||(mfn_to_page(_sl2mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l2h_pae_shadow)
11 :: ASSERT((unsignedlong)sl3e%(4*sizeof(shadow_l3e_t))==0)
8 :: ASSERT(r>0)
2 :: ASSERT(head->next->pprev==&head->next)
4 :: ASSERT(s2mfn)
11 :: ASSERT(inst_len)
4 :: ASSERT(is_idle_task(ed->domain))
9 :: ASSERT((WEIGHT_PERIOD<ULONG_MAX)&&(EDOM_INFO(p)->slice_orig<ULONG_MAX))
2 :: ASSERT(d==page_get_owner(&frame_table[mfn]))
16 :: ASSERT(pfn!=INVALID_M2P_ENTRY)
4 :: ASSERT(gpde&_PAGE_PRESENT)
6 :: ASSERT(current->id==IDLE_DOMAIN_ID)
5 :: ASSERT(!list_empty(&schedule_data[cpu].runqueue))
11 :: ASSERT(l1_pgentry_val(l1e)&_PAGE_PRESENT)
1 :: ASSERT((!writeable)||(((page_type_count(page)&~REFCNT_PIN_BIT)!=0)
1 :: ASSERT((cfg->used_vectors==NULL)ret=__assign_irq_vector(irq,cfg,TARGET_CPUS);ret=cfg->vector;cpumask_copy(&desc->affinity,&cfg->cpu_mask);spin_unlock_irqrestore(&vector_lock,flags);desc->handler->set_affinity(desc,&desc->pending_mask);cpumask_clear(&desc->pending_mask);desc->status&=~IRQ_MOVE_PENDING;wmb();cpumask_copy(&desc->pending_mask,mask);wmb();desc->status|=IRQ_MOVE_PENDING;irq_guest_action_t*action,*newaction=NULL;cpumask_clear(&action->cpu_eoi_map);init_timer(&action->eoi_timer,irq_guest_eoi_timer_fn,desc,0);desc->status|=IRQ_GUEST;desc->handler->startup(desc);desc->handler->set_affinity(desc,cpumask_of(v->processor));spin_lock(&desc->lock)
1 :: ASSERT(spin_is_locked(&cpupool_lock))
3 :: ASSERT(!dev->msix_used_entries)
4 :: ASSERT(p2m->alloc_page)
2 :: ASSERT(shr_lock.locker==-1)
1 :: ASSERT(!req->next)
2 :: ASSERT(desc->msi_desc==entry)
2 :: ASSERT()thiswillcras
1 :: ASSERT(!reverse)
6 :: ASSERT(spin_is_locked(&irq_desc[msi->vector].lock))
2 :: ASSERT(current==main_thread)
3 :: ASSERT(coalesced==filled)
5 :: ASSERT(d->arch.paging.hap.total_pages==0)
9 :: ASSERT(id==BUGFRAME_assert)
10 :: ASSERT(node<num_online_nodes())
6 :: ASSERT(rma_settings!=NULL)
4 :: ASSERT(d->arch.shadow2.hash_walking==0)
8 :: ASSERT(current==v)
16 :: ASSERT(sl4e!=NULL)
3 :: ASSERT(order>=0)
11 :: ASSERT(regs)
10 :: ASSERT(!test_bit(_VCPUF_running,&next->vcpu_flags))
5 :: ASSERT(d->vcpu[vcpuid]==NULL)
12 :: ASSERT(pagetable_get_paddr(v->arch.monitor_table)==0)
3 :: ASSERT(d->exec_domain[i]->ed_sched_priv!=NULL)
6 :: ASSERT(lapics[apic_id].la_present,("%s:APIC%udoesn'texist",__func__,apic_id));
6 :: ASSERT(td->td_pcb->pcb_ext==0,("alreadyhaveaTSS!"));
16 :: ASSERT(pfn<(1u<<20))
8 :: ASSERT(PGT_base_page_table==PGT_l2_page_table)
2 :: ASSERT(mpl2e[PERDOMAIN_VIRT_START>>L2_PAGETABLE_SHIFT])
26 :: ASSERT(nr_psegs<=(BLKIF_MAX_SEGMENTS_PER_REQUEST+1))
4 :: ASSERT(tx->status==RING_STATUS_OK)
2 :: ASSERT(!cpumask_test_cpu(nxt,&per_cpu(cpu_core_map,cpu)))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)shadow_unlock(d)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;shadow_unlock(d)
1 :: ASSERT(xsave_cntxt_size>=XSTATE_AREA_MIN_SIZE)
2 :: ASSERT(boot_cpu_has(X86_FEATURE_TSC_RELIABLE))
1 :: ASSERT(n1vmcb!=NULL)
1 :: ASSERT(pgp->us.obj->pgp_count>=0)
1 :: ASSERT(mfn_to_page(sl1mfn)->u.sh.head)
1 :: ASSERT(timer->status==TIMER_STATUS_inactive)
4 :: ASSERT((cpu!=0)&&cpu_online(0))
4 :: ASSERT(page_make_private(d,page)==0)
1 :: ASSERT(order==0)
1 :: ASSERT(j)
6 :: ASSERT(spin_is_locked(&irq_desc[domain_pirq_to_irq(d,mirq)].lock))
1 :: ASSERT(bm&&test_vhd_flag(bm->status,VHD_FLAG_BM_READ_PENDING))
1 :: ASSERT(size<tmh_mempool_maxalloc)
2 :: ASSERT(pgp_del==pgp)
3 :: ASSERT(mfn_is_out_of_sync(gmfn))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,3,2)(v,smfn)
2 :: ASSERT(x>0)
3 :: ASSERT(mfn_valid(d->arch.paging.log_dirty.top))
3 :: ASSERT((opnd_sel&~3)==regs->error_code)
6 :: ASSERT(current->processor==cpu)
5 :: ASSERT((mfn_to_page(_sl4mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l4_64_shadow)
4 :: ASSERT(l1e_get_pfn(cache->l1tab[idx])==mfn)
4 :: ASSERT(d->arch.shadow2.dirty_bitmap!=NULL)
3 :: ASSERT((_d)->arch.shadow2_locker==current->processor)
27 :: ASSERT(page_get_owner(pg)==d)
11 :: ASSERT(spin_is_locked(&per_cpu(schedule_data,v->processor).schedule_lock))
12 :: ASSERT(xl<sizeof(xen))
16 :: ASSERT(action->ack_type==ACKTYPE_EOI)
10 :: ASSERT(hcb->hash_sz%sizeof(thash_data_t)==0)
9 :: ASSERT(l1e_get_pfn(p2m[gpfn])==mfn)
5 :: ASSERT(pfn_valid(smfn))
23 :: ASSERT(ref!=-ENOSPC)
6 :: ASSERT(lapics[apic_id].la_present,("%s:missingAPIC%u",__func__,apic_id));
6 :: ASSERT(IPI_STOP<APIC_SPURIOUS_INT);
3 :: ASSERT(ci->ci_want_pmapload);
4 :: ASSERT(rchn[rid].flags==(ECF_INUSE|ECF_CONNECTED|lid))
1 :: ASSERT((!writeable)||(((page_type_count(page)&~REFCNT_PIN_BIT)!=0)&&((page->flags&PG_type_mask)==PGT_writeable_page)&&((page->flags&PG_need_flush)==PG_need_flush)))
1 :: ASSERT(!(req->flags&MEM_EVENT_FLAG_VCPU_PAUSED))
1 :: ASSERT(seg!=-1||bus==-1)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);paging_lock(d);d->arch.hvm_domain.dirty_vram=NULL;paging_unlock(d);p2m_teardown(p2m_get_hostp2m(d));paging_lock(d);sh_set_allocation(d,0,NULL);SHADOW_PRINTK("dom%ufinalteardowndone."d->arch.paging.shadow.total_pages,d->arch.paging.shadow.free_pages,d->arch.paging.shadow.p2m_pages);paging_unlock(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);domain_pause(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_SH_enable);paging_unlock(d);domain_unpause(d);paging_lock(d);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_enable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);ret=shadow_one_bit_disable(d,PG_log_dirty);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);||end_pfn>=p2m->max_mapped_pfn)
4 :: ASSERT(pirq_dpci->flags&HVM_IRQ_DPCI_GUEST_MSI)
3 :: ASSERT(!cpu_isset(nxt,per_cpu(cpu_core_map,cpu)))
1 :: ASSERT(test_batmap(s,blk)||(bm&&bitmap_valid(bm)))
2 :: ASSERT(pgp->pfp==NULL)
5 :: ASSERT(desc)
2 :: ASSERT(x<=data_size)
6 :: ASSERT(IS_COMPAT(v->domain))
7 :: ASSERT(mfn_x(gfn_to_mfn(d,gfn))==mfn)
6 :: ASSERT(guest_l2e_get_flags(*gw->l2e)&_PAGE_PSE)
10 :: ASSERT(!d->arch.shadow.hash_table)
6 :: ASSERT(shadow2_lock_is_acquired(d))
70 :: ASSERT(v==current)
5 :: ASSERT(result==-1||result>16)
5 :: ASSERT(diff<STACK_SIZE)
7 :: ASSERT(hcb->ht==THASH_TLB)
5 :: ASSERT((page->u.inuse.type_info&PGT_count_mask)!=0)
35 :: ASSERT(mfn_valid(smfn))
4 :: ASSERT(!page_get_owner(pfn_to_page(v->arch.monitor_shadow_ref)))
3 :: ASSERT(st_scale_f||st_scale_i)
6 :: ASSERT(trunc_page(addr)==addr,("localAPICnotalignedonapageboundary"));
6 :: ASSERT(m->monitor_table)
4 :: ASSERT(value)
3 :: ASSERT(TAILQ_EMPTY(&pmap->pm_obj.memq));
9 :: ASSERT(next_prime_inf->evt>=next_inf->evt)
7 :: ASSERT(!is_idle_vcpu(v))
1 :: ASSERT(!p||p->u.sh.head)
4 :: ASSERT(paging_mode_translate(p2m->domain))
1 :: ASSERT(!(tze_len&(sizeof(uint64_t)-1)))
3 :: ASSERT(sp->u.sh.type<SH_type_max_shadow)
2 :: ASSERT()
6 :: ASSERT(size==PAGE_SIZE)
6 :: ASSERT(freemem<=(uint8_t*)0xF0000)
11 :: ASSERT(shadow_type!=SH_type_p2m_table)
5 :: ASSERT(t==PGC_SH_l1_shadow||t==PGC_SH_fl1_shadow)
9 :: ASSERT(l1e_get_pfn(cache->l1tab[hashent->idx])==hashent->mfn)
4 :: ASSERT(d->arch.shadow2.hash_table)
9 :: ASSERT(valid_mfn(pmfn))
8 :: ASSERT(x->t<=15)
12 :: ASSERT(t)
10 :: ASSERT(l3e_get_flags(ml3e[3])&_PAGE_PRESENT)
8 :: ASSERT(l2_backptr!=PGT_va_mutable)
12 :: ASSERT(p!=n)
5 :: ASSERT(d->vcpu[vcpu]==NULL)
10 :: ASSERT(type==PGT_writable_page)
6 :: ASSERT(vector!=IDT_SYSCALL,("Attempttooverwritesyscallentry"));
8 :: ASSERT(shadow_mode_translate(d)&&!shadow_mode_external(d))
5 :: ASSERT(d->arch.out_of_sync==NULL)
6 :: ASSERT(s&PSH_shadowed)
15 :: ASSERT(spfn_info)
4 :: ASSERT(paging_mode_log_dirty(d))
4 :: ASSERT(!in_atomic())
1 :: ASSERT(pg->list.next!=PAGE_LIST_NULL)
1 :: ASSERT(handler_num)
1 :: ASSERT(timer->status>=TIMER_STATUS_inactive)
2 :: ASSERT(sizeof(grant_entry_v1_t)==8)
4 :: ASSERT(ret!=GUEST_TABLE_POD_PAGE||i!=walk_level)
1 :: ASSERT(!page_state_is(&pg[i],offlined))
1 :: ASSERT(bm&&bitmap_valid(bm))
2 :: ASSERT((obj!=NULL)&&(pgp!=NULL)&&(pgp->index!=-1))
46 :: ASSERT(spin_is_locked(&pcidevs_lock))
2 :: ASSERT())forfailures
3 :: ASSERT(spin_is_locked(&irq_desc[domain_irq_to_vector(d,mirq)].lock))
2 :: ASSERT(offset>=((*reps-1)*bytes_per_rep))
4 :: ASSERT(FSIF_NR_READ_GNTS==FSIF_NR_WRITE_GNTS)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3,3)(v,smfn)
2 :: ASSERT(irqs_disabled())
4 :: ASSERT(x>=0)
3 :: ASSERT((result&mask)<(src&mask))
2 :: ASSERT(ok);/*Firstsh_get_ref()
14 :: ASSERT(GUEST_PAGING_LEVELS>3||level!=3)
5 :: ASSERT(t==PGC_SH_l3_shadow)
9 :: ASSERT(v->arch.hvm_vcpu.hw_cr3==virt_to_maddr(v->arch.hvm_vcpu.hvm_lowmem_l3tab))
17 :: ASSERT(l3e_get_flags(l3e[3])&_PAGE_PRESENT)
5 :: ASSERT((page->shadow2_flags&(SH2F_L3_PAE|SH2F_L2_PAE|SH2F_L1_PAE))==0)
7 :: ASSERT(dir==IOREQ_READ||dir==IOREQ_WRITE)
10 :: ASSERT(shmem_ref!=-ENOSPC)
6 :: ASSERT(ed->domain->id==IDLE_DOMAIN_ID)
13 :: ASSERT(l2e_get_flags(sl2e)&_PAGE_PRESENT)
6 :: ASSERT(m!=NULL,("mbufnotfoundinxn_tx_chain"));
3 :: ASSERT(ci->ci_pmap==pmap);
26 :: ASSERT(d->grant_table!=NULL)
8 :: ASSERT(cur_sdom!=NULL)
7 :: ASSERT(sdom->domain!=IDLE_DOMAIN_ID)
56 :: ASSERT(p!=NULL)
1 :: ASSERT(test_bit(old_vector,desc->arch.used_vectors))
1 :: ASSERT(pg->u.sh.type==SH_type_l2_32_shadow||pg->u.sh.head)
1 :: ASSERT(sh_type_has_up_pointer(v,sp->u.sh.type))
5 :: ASSERT(spin_is_locked(&iommu->lock))
4 :: ASSERT(page->nr_validated_ptes)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3,3);SHADOW_ERROR("PAEnotsupportedin32-bitXenn");domain_crash(d)
7 :: ASSERT(d->arch.p2m->alloc_page)
4 :: ASSERT(t==SH_type_l1_shadow||t==SH_type_fl1_shadow)
8 :: ASSERT((result==-1)||(result>=16))
4 :: ASSERT((page->shadow_flags&(SHF_L4_64|SHF_L3_64|SHF_L2_64|SHF_L1_64))==0)
12 :: ASSERT(sh_mfn_is_a_page_table(gmfn))
8 :: ASSERT(d->arch.shadow.dirty_bitmap==NULL)
4 :: ASSERT(stack!=0)
10 :: ASSERT((htab_raddr&(htab_bytes-1))==0)
10 :: ASSERT(v->arch.hvm_vmx.launch_cpu==smp_processor_id())
7 :: ASSERT((l1e_get_flags(_nl1e)&L1_DISALLOW_MASK)==0)
8 :: ASSERT(IMPLY(inf->status&EXTRA_AWARE,extraq_on(d,EXTRA_UTIL_Q)))
6 :: ASSERT(intpin->io_edgetrigger,("NMInotedgetriggered"));
19 :: ASSERT(buffer_mach)
2 :: ASSERT(((tlbflush_clock+1)&TLBCLOCK_EPOCH_MASK)==0)
3 :: ASSERT(ci->ci_want_pmapload==0);
6 :: ASSERT(spin_is_locked(&d->mm.shadow_lock))
3 :: ASSERT(next_prime->evt>next->evt)
1 :: ASSERT(!boot_cpu_has(X86_FEATURE_TSC_RELIABLE))
2 :: ASSERT(nv->nv_vmexit_pending==0)
6 :: ASSERT(p2m_locked_by_me(p2m))
1 :: ASSERT(pcd->pfp!=NULL)
2 :: ASSERT(!pgp->obj->pool->persistent)
1 :: ASSERT(tmh_page_list_pages==0)
1 :: ASSERT(test_vhd_flag(s->bat.status,VHD_FLAG_BAT_WRITE_STARTED))
2 :: ASSERT(!(mfn&((1UL<<(L3_PAGETABLE_SHIFT-PAGE_SHIFT))-1)))
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);SHADOW_PRINTK("newpagingmode:d=%uv=%upe=%dgl=%u"d->domain_id,v->vcpu_id,is_hvm_domain(d)?hvm_paging_enabled(v):1,NULL,/*none*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,2),/*fl1_32*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,2),/*l2_32*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,3),/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,3),/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_audit_l1_table,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_audit_fl1_table,4),/*fl1_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_audit_l2_table,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_audit_l3_table,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_audit_l4_table,4),/*l4_64*/NULL/*Alltherest*/sh_guest_map_l1e(structvcpu*v,unsignedlongaddr,(void)guest_walk_tables(v,addr,&gw,PFEC_page_present);shadow_l1_index(mfn_t*smfn,u32guest_index)(guest_index/SHADOW_L1_PAGETABLE_ENTRIES));shadow_l2_index(mfn_t*smfn,u32guest_index)(guest_index/(SHADOW_L2_PAGETABLE_ENTRIES/2)));shadow_l1e_t*_sp=sh_map_domain_page((_sl1mfn))
4 :: ASSERT(hd->pgd_maddr!=0)
2 :: ASSERT(l3e_get_flags(ml3e[0])&_PAGE_PRESENT)
3 :: ASSERT(pdirp)
5 :: ASSERT(sp->type!=SH_type_l2_pae_shadow)
9 :: ASSERT(v!=current)
3 :: ASSERT((sp==0)||(pending_lapic_eoi[cpu][sp-1].vector<vector))
5 :: ASSERT(s<=e)
8 :: ASSERT(is_idle_vcpu(v))
30 :: ASSERT(v!=NULL)
16 :: ASSERT(VALID_M2P(l2pfn))
14 :: ASSERT(shadow_mode_write_all(d))
3 :: ASSERT(free<=BLK_RING_SIZE,("free%lu>RING_SIZE",free));
4 :: ASSERT(pagetable_val(ed->arch.monitor_table)==0)
10 :: ASSERT(shadow_mode_translate(d)||gpfn)
8 :: ASSERT((x&PGT_validated)||test_bit(DF_DYING,&page_get_owner(page)->d_flags))
5 :: ASSERT((WEIGHT_PERIOD<ULONG_MAX)&&(DOM_INFO(p)->slice_orig<ULONG_MAX))
7 :: ASSERT((_pfn)->count_info==0)
10 :: ASSERT((page->flags&PG_domain_mask)==current->domain)
1 :: ASSERT(!cpumask_test_cpu(nxt,per_cpu(cpu_core_mask,cpu)))
2 :: ASSERT(test_bit(vector,desc->arch.used_vectors))
1 :: ASSERT(!list_empty(lru_list))
1 :: ASSERT(page_list_empty(&p2m->pod.single))
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;paging_lock(d);sh_new_mode(d,mode);out_locked:paging_unlock(d);out_unlocked:p2m_teardown(p2m);shadow_lock(d)
1 :: ASSERT(!(mfn_to_page(mfn)->count_info&PGC_allocated))
2 :: ASSERT((val<=(LONG_MAX>>2))&&(val>=(LONG_MIN>>2)))
1 :: ASSERT(timer->status<=TIMER_STATUS_in_list)
2 :: ASSERT(ch==per_cpu(cpu_bc_channel,cpu))
1 :: ASSERT(!tx->closed)
1 :: ASSERT(sl->client!=old_client)
2 :: ASSERT(mfn_to_page(_sl2mfn)->u.sh.type==SH_type_l2_32_shadow)
3 :: ASSERT(!(mfn&(L1_PAGETABLE_ENTRIES-1)))
2 :: ASSERT().
2 :: ASSERT(l1e_get_pfn(dcache->l1tab[hashent->idx])==hashent->mfn)
4 :: ASSERT(!list_empty(&d->arch.paging.hap.freelist))
6 :: ASSERT(mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2_64_shadow||mfn_to_shadow_page(_sl2mfn)->type==SH_type_l2h_64_shadow)
12 :: ASSERT(is_hvm_vcpu(v))
17 :: ASSERT(shadow_type!=SH_type_none)
12 :: ASSERT((device<=31)&&(intx<=3))
7 :: ASSERT(!cpu_isset(nxt,cpus))
16 :: ASSERT(bytes<=sizeof(unsignedlong))
8 :: ASSERT(sl3e!=NULL)
13 :: ASSERT(pagetable_get_pfn(d->arch.phys_table)!=0)
13 :: ASSERT(x)
3 :: ASSERT(!d->arch.shadow2_hash_table)
2 :: ASSERT(free_head[x]->pprev==&free_head[x])
13 :: ASSERT((type&PGT_va_mask)!=(x&PGT_va_mask))
4 :: ASSERT((mfn_to_page(smfn)->u.inuse.type_info&PGT_pinned))
64 :: ASSERT(vmcb)
4 :: ASSERT(!(pfn_to_page(smfn)->u.inuse.type_info&PGT_pinned))
7 :: ASSERT(pfn_is_ram(mfn))
6 :: ASSERT(((_p)->u.inuse.count_info&PGC_count_mask)!=0)
28 :: ASSERT(prev->sched_priv!=NULL)
1 :: ASSERT(ns_vmcb!=NULL)
3 :: ASSERT(cpu_isset(old_cpu,timer_valid_cpumask))
1 :: ASSERT(tze_len<=PAGE_SIZE)
1 :: ASSERT(trap<=VCPU_TRAP_LAST)
2 :: ASSERT(offset>=MEMBLK_HEADER_SIZE,continue)
2 :: ASSERT((page->count_info&(PGC_allocated|PGC_count_mask))==0)
1 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)!=PGT_writable_page||(page->u.inuse.type_info&PGT_count_mask)==0clear_bit(type,&page->shadow_flags);oos_hash_remove(v,gmfn);oos_fixup_remove(v,gmfn);clear_bit(_PGC_page_table,&page->count_info);0,/*SH_type_l3_64_shadow*/0,/*SH_type_l4_64_shadow*/2,/*SH_type_p2m_table*/0,/*SH_type_monitor_table*/0/*SH_type_oos_snapshot*/sp=list_entry(d->arch.paging.shadow.freelists[order].next,list_del(&sp->list);spin_lock_init(&((structpage_info*)sp)[j].lock);d->arch.paging.shadow.free_pages-=1<<order;d->arch.paging.shadow.total_pages-=1<<order;free_domheap_pages((structpage_info*)sp,order);BUG_ON(!(gpg->shadow_flags&(1<<sp->type)));||sp->type==SH_type_l1_pae_shadow||sp->type==SH_type_l1_64_shadow)&&(gpg->u.inuse.type_info&PGT_count_mask)!=0)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3,3)(v,vaddr,pmfn)
10 :: ASSERT(intack.source!=hvm_intsrc_none)
6 :: ASSERT(irq<=15)
3 :: ASSERT(spin_is_locked(vpic_lock(s->pics_state)))
5 :: ASSERT((mfn_to_page(_sl2mfn)->count_info&PGC_SH_type_mask)==PGC_SH_l2_32_shadow)
6 :: ASSERT((page->shadow_flags&(SHF_L3_PAE|SHF_L2_PAE|SHF_L1_PAE))==0)
16 :: ASSERT(image_len<rma_sz)
8 :: ASSERT(atomic_read(&v->pausecnt)!=0)
18 :: ASSERT(vmcb->eventinj.fields.v==0)
3 :: ASSERT(d==page_get_owner(mfn_to_page(pagetable_get_pfn(d->arch.phys_table))))
4 :: ASSERT(iopm)
3 :: ASSERT(!pagetable_get_phys(d->arch.phys_table))
7 :: ASSERT(!shadow_lock_is_acquired(_d))
10 :: ASSERT(__shadow_status(d,gpfn,PGT_snapshot))
15 :: ASSERT(shadow_mode_enabled(d))
6 :: ASSERT(pending!=0)
8 :: ASSERT(gpfn!=0)
3 :: ASSERT(pv);
5 :: ASSERT(LAST_VTB(cpu)>=0)
5 :: ASSERT(prev_inf->time_slept>=prev_inf->vtb)
2 :: ASSERT(!d->has_cpu)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));shadow_unlock(v->domain)
1 :: ASSERT(!(mfn_to_page(gmfn)->shadow_flags&SHF_page_type_maskSHADOW_PRINTK("d=%d,v=%dn",v->domain->domain_id,v->vcpu_id);gotoresync_others;SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));rc=sh_validate_guest_entry(v,gmfn,entry,size);paging_lock(v->domain);failed=__copy_to_user(p,&new,sizeof(new));sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(v->domain);failed=cmpxchg_user(p,t,new);sh_validate_guest_entry(v,gmfn,p,sizeof(new));paging_unlock(v->domain);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);paging_lock(d);shadow_blow_tables(d);paging_unlock(d);rcu_read_unlock(&domlist_read_lock);perfc_incr(shadow_alloc);perfc_incr(shadow_free);shadow_type=sp->u.sh.type;paging_lock_recursive(d);<shadow_min_acceptable_pages(d)+1)paging_unlock(d);d->arch.paging.shadow.p2m_pages++;d->arch.paging.shadow.total_pages--;paging_unlock(d);page_set_owner(pg,NULL);paging_lock_recursive(d);shadow_free(d,page_to_mfn(pg));d->arch.paging.shadow.p2m_pages--;d->arch.paging.shadow.total_pages++;paging_unlock(d);table=xmalloc_array(structpage_info*,SHADOW_HASH_BUCKETS);xfree(d->arch.paging.shadow.hash_table);key_tkey;key_tkey;key_tkey;;paging_lock_recursive(v->domain);paging_unlock(v->domain);paging_lock_recursive(v->domain);SHADOW_PRINTK("d=%d,v=%d,gmfn=%05lxn",v->domain->domain_id,v->vcpu_id,mfn_x(gmfn));paging_unlock(v->domain);flush_tlb_mask(v->domain->domain_dirty_cpumask);paging_unlock(v->domain);conststructpaging_mode*old_mode=v->arch.paging.mode;paging_lock(v->domain);sh_update_paging_modes(v);paging_unlock(v->domain);d->arch.paging.mode=new_mode;paging_lock(d);r=sh_set_allocation(d,1024,NULL);/*Useatleast4MB*/rv=-ENOMEM;gotoout_locked;paging_unlock(d);d->arch.paging.alloc_page=shadow_alloc_p2m_page;d->arch.paging.free_page=shadow_free_p2m_page;pg->u.inuse.type_info=PGT_l2_page_table|1|PGT_validated;shadow_lock(d)
3 :: ASSERT(nestedhvm_enabled(v->domain))
1 :: ASSERT(cpumask_empty(n->vcpu_dirty_cpumask))
1 :: ASSERT(!bitmap_in_use(bm))
2 :: ASSERT(pgpfound==pgp)
2 :: ASSERT(poolid!=MAX_POOLS_PER_DOMAIN)
4 :: ASSERT(pgp->obj!=NULL)
2 :: ASSERT((page->count_info&PGC_count_mask)!=0)
2 :: ASSERT(mfn_to_page(_sl2mfn)->u.sh.type==SH_type_l2_64_shadow||mfn_to_page(_sl2mfn)->u.sh.type==SH_type_l2h_64_shadow)
13 :: ASSERT(spin_is_locked(&desc->lock))
4 :: ASSERT(fd==-1)
6 :: ASSERT((devfn!=PCI_ISA_DEVFN)||((vendor_id==0x8086)&&(device_id==0x7000)))
4 :: ASSERT(!sh_l1e_is_magic(sl1e))
8 :: ASSERT(node<num_nodes)
5 :: ASSERT(shadow2_mode_enabled(v->domain))
13 :: ASSERT(level<=GUEST_PAGING_LEVELS)
38 :: ASSERT(inst_len>0)
14 :: ASSERT(idx<MAPCACHE_ENTRIES)
7 :: ASSERT(shadow_lock_is_acquired(_d))
12 :: ASSERT(!sedf_runnable(d))
6 :: ASSERT(intpin->io_dest!=DEST_NONE,("intpinnotassignedtoacluster"));
4 :: ASSERT((l1_pgentry_val(p2m[gpfn])>>PAGE_SHIFT)==mfn)
5 :: ASSERT(x->gpfn_and_flags||((x==head)&&(x->next==NULL)))
40 :: ASSERT(shadow_mode_translate(d))
3 :: ASSERT(!shadow_mode_external(d))
3 :: ASSERT(!ed->arch.monitor_table)
3 :: ASSERT(m->shadow_mode)
3 :: ASSERT(ci->ci_tlbstate==TLBSTATE_LAZY);
1 :: ASSERT(spin_is_locked(&ir_ctrl->iremap_lock))
1 :: ASSERT(req->treq.secs==0)
8 :: ASSERT(ecap_intr_remap(iommu->ecap)&&iommu_intremap)
1 :: ASSERT((page->u.inuse.type_info&PGT_type_mask)!=PGT_writable_page||(page->u.inuse.type_info&PGT_count_mask)==0clear_bit(type,&page->shadow_flags);oos_hash_remove(v,gmfn);clear_bit(_PGC_page_table,&page->count_info);BUG_ON(!(gpg->shadow_flags&(1<<sp->type)));||sp->type==SH_type_l1_pae_shadow||sp->type==SH_type_l1_64_shadow)
5 :: ASSERT(prot==(PROT_READ|PROT_WRITE))
3 :: ASSERT(ioc)
6 :: ASSERT(svc->sdom!=NULL)
6 :: ASSERT(spin_is_locked(&vioapic_domain(vioapic)->arch.hvm_domain.irq.lock))
13 :: ASSERT(order<=SHADOW_MAX_ORDER)
5 :: ASSERT(sh2_mfn_is_a_page_table(mfn))
16 :: ASSERT(sl2e!=NULL)
22 :: ASSERT(test_bit(_DOMF_dying,&d->domain_flags))
4 :: ASSERT(percpu_info[cpu].foreign==NULL)
2 :: ASSERT(offset<=size)
9 :: ASSERT(l2e_get_flags(gpde)&_PAGE_PRESENT)
7 :: ASSERT(!d->arch.shadow_ht)
6 :: ASSERT(pfn_is_ram(gmfn))
11 :: ASSERT((inf->period<ULONG_MAX)&&(inf->slice_orig<ULONG_MAX))
32 :: ASSERT(s)
3 :: ASSERT(rings!=NULL)
3 :: ASSERT((target==2&&hvm_hap_has_1gb(d))||(target==1&&hvm_hap_has_2mb(d))||(target==0))
1 :: ASSERT(size<PAGE_SIZE)
2 :: ASSERT(pgp->obj->pgp_count>=0)
2 :: ASSERT(mfn_to_shadow_page(_sl1mfn)->u.sh.type==SH_type_l1_shadow||mfn_to_shadow_page(_sl1mfn)->u.sh.type==SH_type_fl1_shadow)
7 :: ASSERT(page!=NULL)
3 :: ASSERT(dpci)
1 :: ASSERT((page->shadow_flagscaseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_unhook_32b_mappings,2)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_unhook_pae_mappings,3)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_unhook_64b_mappings,4)(v,smfn);default:caseSH_type_l1_32_shadow:caseSH_type_fl1_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,2)(v,smfn);caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,2)(v,smfn);caseSH_type_l1_pae_shadow:caseSH_type_fl1_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,3)(v,smfn);caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,3)(v,smfn);caseSH_type_l1_64_shadow:caseSH_type_fl1_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l1_shadow,4)(v,smfn);caseSH_type_l2h_64_shadow:caseSH_type_l2_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l2_shadow,4)(v,smfn);caseSH_type_l3_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l3_shadow,4)(v,smfn);caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_destroy_l4_shadow,4)(v,smfn);default:NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_write_access_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/GUESS(0xC0000000UL+(gfn<<PAGE_SHIFT),4);GUESS(0x0000010000000000UL+(gfn<<PAGE_SHIFT),4);NULL,/*none*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*l1_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,2),/*fl1_32*/NULL,/*l2_32*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*l1_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,3),/*fl1_pae*/NULL,/*l2_pae*/NULL,/*l2h_pae*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*l1_64*/SHADOW_INTERNAL_NAME(sh_rm_mappings_from_l1,4),/*fl1_64*/NULL,/*l1_64*/NULL,/*fl1_64*/caseSH_type_l1_32_shadow:caseSH_type_l2_32_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,2)(v,vaddr,pmfn);caseSH_type_l1_pae_shadow:caseSH_type_l2_pae_shadow:caseSH_type_l2h_pae_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,3)(v,vaddr,pmfn);caseSH_type_l1_64_shadow:caseSH_type_l2h_64_shadow:caseSH_type_l3_64_shadow:caseSH_type_l4_64_shadow:SHADOW_INTERNAL_NAME(sh_clear_shadow_entry,4)(v,vaddr,pmfn);default:BUG();/*Somewierdunknownshadowtype*/NULL,/*none*/NULL,/*l1_32*/NULL,/*fl1_32*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,2),/*l2_32*/NULL,/*l1_pae*/NULL,/*fl1_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2_pae*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,3),/*l2h_pae*/NULL,/*l1_64*/NULL,/*fl1_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2_64*/SHADOW_INTERNAL_NAME(sh_remove_l1_shadow,4),/*l2h_64*/SHADOW_INTERNAL_NAME(sh_remove_l2_shadow,4),/*l3_64*/SHADOW_INTERNAL_NAME(sh_remove_l3_shadow,4),/*l4_64*/NULL,/*l2_64*/NULL,/*l2h_64*/DO_UNSHADOW(SH_type_l2_32_shadow);DO_UNSHADOW(SH_type_l1_32_shadow);DO_UNSHADOW(SH_type_l2h_pae_shadow);DO_UNSHADOW(SH_type_l2_pae_shadow);DO_UNSHADOW(SH_type_l1_pae_shadow);DO_UNSHADOW(SH_type_l2_64_shadow);DO_UNSHADOW(SH_type_l1_64_shadow);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,3);v->arch.guest_table=d->arch.paging.shadow.unpaged_pagetable;v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,2);v->arch.paging.mode=&SHADOW_INTERNAL_NAME(sh_paging_mode,4,4)
2 :: ASSERT((v==current)||spin_is_locked(&d->arch.vmx_platform.ioreq.lock))
2 :: ASSERT((delivery_mode==dest_Fixed)||(delivery_mode==dest_LowestPrio))
4 :: ASSERT((_d)->arch.paging.hap.locker==current->processor)
5 :: ASSERT(!list_empty(&d->arch.paging.shadow.freelists[SHADOW_MAX_ORDER]))
7 :: ASSERT(mfn_to_shadow_page(_sl3mfn)->type==SH_type_l3_64_shadow)
7 :: ASSERT(virt_to_maddr(&v->arch.shadow.l3table)<=0xffffffe0ULL)
5 :: ASSERT(t==PGC_SH_l4_shadow)
10 :: ASSERT(d->arch.shadow.hash_table)
5 :: ASSERT((mfn_to_page(_sl4mfn)->count_info&PGC_SH2_type_mask)==PGC_SH2_l4_64_shadow)
8 :: ASSERT(callbacks[x->t]!=NULL)
4 :: ASSERT(alignment!=3)
30 :: ASSERT(d!=current->domain)
5 :: ASSERT(page_to_mfn(gpage)!=0)
3 :: ASSERT(!pending_lapic_eoi[cpu][sp-1].ready_to_end)
1 :: ASSERT(d==page_get_owner(pfn_to_page(pagetable_get_pfn(
33 :: ASSERT(mfn_valid(mfn))
4 :: ASSERT(inst_len<=MAX_INST_LEN)
10 :: ASSERT(d->arch.pmt)
12 :: ASSERT(VM_ASSIST(d,VMASST_TYPE_writable_pagetables)||shadow_mode_write_all(d))
15 :: ASSERT((x&PGT_validated)||test_bit(_DOMF_dying,&page_get_owner(page)->domain_flags))
5 :: ASSERT(!shadow_mode_enabled(ed->domain))
3 :: ASSERT((pmap->pm_cpus&cpumask)==0);
4 :: ASSERT((p==NULL)||!in_irq())
5 :: ASSERT(((void*)ch->pprev<(void*)&_end)||memguard_is_guarded(ch->pprev))
11 :: ASSERT(((_p)->count_and_flags&PGC_count_mask)!=0)
