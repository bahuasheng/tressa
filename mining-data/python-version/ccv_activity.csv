x_val,y_added,y_removed,y_combined
 rc==SQLITE_OK ,27,0,27
 cursorHoldsMutex(pCur) ,25,0,25
 sqlite3_mutex_held(db->mutex) ,22,0,22
 sqlite3_mutex_held(pBt->mutex) ,22,0,22
pPager,22,0,22
" sqlite3SchemaMutexHeld(db, iDb, 0) ",21,0,21
 pFile ,21,0,21
 assert_pager_state(pPager) ,21,0,21
 pOp->p1>=0 && pOp->p1<p->nCursor ,20,0,20
image != 0,12,5,17
 sqlite3_mutex_held(pCtx->s.db->mutex) ,17,0,17
 sqlite3_mutex_held(pPage->pBt->mutex) ,17,0,17
argc >= 3,10,5,15
CCV_GET_DATA_TYPE(a->type) == CCV_32F,12,3,15
0,13,1,14
 pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) ,14,0,14
 p!=0 ,13,0,13
a->type & CCV_C1,7,6,13
"k >= 0 && k < ccv_max(db->rows, db->cols)",8,4,12
 v!=0 ,12,0,12
 sqlite3_mutex_held(p->db->mutex) ,11,0,11
 db!=0 ,11,0,11
 argc==1 ,11,0,11
!isnan(score),10,1,11
" !ExprHasProperty(pExpr, EP_IntValue) ",11,0,11
 pCur->eState==CURSOR_VALID ,10,0,10
 sqlite3PagerIswriteable(pPage->pDbPage) ,10,0,10
 !pagerUseWal(pPager) ,10,0,10
 sqlite3_mutex_held(mem3.mutex) ,10,0,10
x == 0 || y == 0,6,4,10
 v ,10,0,10
box->neighbors >= 0 && box->neighbors < best_box.neighbors,6,4,10
CURRENT == NULL,10,0,10
 (pMem->flags & MEM_RowSet)==0 ,10,0,10
 p->readOnly==0 ,10,0,10
CCV_GET_CHANNEL(a->type) == CCV_C1,7,3,10
 !db->mallocFailed ,9,0,9
p,9,0,9
((uint64_t)set & 0x3) == 0,6,3,9
 p->magic==VDBE_MAGIC_INIT ,9,0,9
 !MEMDB ,9,0,9
"param_parser_map_alphabet(param_map, sizeof(param_map) / sizeof(param_dispatch_t)) == 0",8,0,8
a->rows == state->size.height + 2 && a->cols == state->size.width + 2,4,4,8
 iDb>=0 && iDb<db->nDb ,8,0,8
a->rows == state->size.height && a->cols == state->size.width,4,4,8
"k >= 0 && k < ccv_max(db->rows, db->cols) + 1",4,4,8
 pEList!=0 ,8,0,8
 p->bIsReader ,8,0,8
 sqlite3BtreeHoldsMutex(p) ,8,0,8
working_dir != 0,6,2,8
scale_size.width > 0 && scale_size.height > 0,4,3,7
rgb_padding >= 0,7,0,7
positive_list != 0,6,1,7
 p->nRef>0 ,7,0,7
 pWal->writeLock ,7,0,7
 pOp->p1>=0 && pOp->p1<db->nDb ,7,0,7
linear != 0,4,3,7
 EIGHT_BYTE_ALIGNMENT(pMem) ,7,0,7
 p->pSegments==0 ,7,0,7
"r0 && ""positive-list doesn't exists""",6,1,7
 sqlite3BtreeHoldsAllMutexes(db) ,7,0,7
argc == 3,6,1,7
argc == 2,5,2,7
rate > 0.5,4,3,7
 rc!=SQLITE_DONE ,6,0,6
y >= 0 && y + rows <= da->rows && x >= 0 && x + cols <= da->cols,3,3,6
"r1 && ""background-list doesn't exists""",5,1,6
i == dmt->data.i[0],3,3,6
db->rows == rows && db->cols == cols && CCV_GET_CHANNEL(db->type) == CCV_GET_CHANNEL(a->type),3,3,6
da->type == db->type && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows),3,3,6
 isOpen(pPager->jfd) ,6,0,6
da->type == dd->type && da->rows == dd->rows && da->cols == dd->cols,3,3,6
 pPk!=0 ,6,0,6
 pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) ,6,0,6
err_rate[i] == error,2,4,6
background_list != 0,5,1,6
da->type == dd->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dd->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dd->cols,3,3,6
" !ExprHasProperty(pExpr, EP_xIsSelect) ",6,0,6
src_x >= 0 && src_y >= 0,4,2,6
da->type == db->type && db->rows == rows && db->cols == cols,3,3,6
example_state[i].correct,4,2,6
 sqlite3_mutex_held(pCur->pBtree->db->mutex) ,6,0,6
dc->type == da->type && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols,3,3,6
fabs(error - gene[i].error) < 1e-3,2,4,6
db->rows == a->rows && db->cols == a->cols && db->type == a->type,3,3,6
 pPager->errCode==SQLITE_OK ,6,0,6
layer->type == CCV_CONVNET_FULL_CONNECT,4,2,6
 pPager->eState!=PAGER_ERROR ,6,0,6
!example_state[i].correct,4,2,6
db->rows == a->rows / 2 && db->cols == a->cols / 2 && db->type == a->type,3,3,6
 iIndex>=0 && iIndex<p->nIndex ,5,0,5
 (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 ,5,0,5
(a->type & CCV_32S) || (a->type & CCV_8U),3,2,5
 pPage->isInit ,5,0,5
 hHeap!=INVALID_HANDLE_VALUE ,5,0,5
sliced->rows >= cascade->size.height && sliced->cols >= cascade->size.width,3,2,5
negative_count > 0,4,1,5
(type & CCV_32S) || (type & CCV_64S) || (type & CCV_8U),5,0,5
 pH!=0 ,5,0,5
 hHeap!=0 ,5,0,5
 pOp->p4type==P4_INT32 ,5,0,5
 eFileLock<=SHARED_LOCK ,5,0,5
 id!=0 ,5,0,5
cache_types > 0 && cache_types <= 16,3,2,5
 pTab!=0 ,5,0,5
iyp < rows,3,2,5
layer->net.convolutional.rows % 2,3,2,5
ixp < cols,3,2,5
layer->net.convolutional.cols % 2,3,2,5
wnum == 32 * sizeof(float),3,2,5
 fd!=0 ,3,2,5
 pPager->eState==PAGER_OPEN ,5,0,5
rows != 0 && cols != 0,3,2,5
 iDb>=0 ,5,0,5
 IsVirtual(pTab) ,5,0,5
size % 2 == 0,5,0,5
(matrix && !file) || (!matrix && file),3,2,5
 p->pEList ,5,0,5
feature->sat[q * 2].x >= 0 && feature->sat[q * 2].y >= 0,2,2,4
CCV_GET_CHANNEL(a->type) == CCV_C3,3,1,4
positives->rnum + negatives->rnum > 0,2,2,4
 rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 ,4,0,4
 db->mallocFailed ,4,0,4
 pList!=0 ,4,0,4
 p->nPendingData==0 ,4,0,4
 ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 ,4,0,4
posfiles->rnum > 0,3,1,4
feature->sat[q * 2].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1,2,2,4
off_x >= 0 && off_y >= 0,2,2,4
positives->rnum > 0 && z.negatives->rnum > 0,2,2,4
a->rows == state->size.height + state->margin.top + state->margin.bottom + 2 && a->cols == state->size.width + state->margin.left + state->margin.right + 2,4,0,4
 pParse->nErr==0 ,4,0,4
 pTabList->nSrc==1 ,4,0,4
 pIn1->flags&MEM_Int ,4,0,4
argc >= 4,2,2,4
 pBt->inTransaction==TRANS_WRITE ,4,0,4
(image->type & CCV_C1) && (image->type & CCV_8U),2,2,4
 iDb<db->nDb ,4,0,4
db->rows >= a->rows && db->cols >= a->cols,2,2,4
scanline >= cols * 4,4,0,4
 sqlite3BtreeHoldsAllMutexes(pParse->db) ,4,0,4
 nByte>0 ,4,0,4
feature->sat[q * 2 + 1].x >= 0 && feature->sat[q * 2].y >= 0,2,2,4
weigh[0] <= aweigh[0] && weigh[1] <= aweigh[1],2,2,4
 unixMutexHeld() ,4,0,4
sat->rows == pyr[q]->rows + 1 && sat->cols == pyr[q]->cols + 1,2,2,4
 pOp->p3>0 ,4,0,4
batch == 1,3,1,4
a->rows >= 3 && a->cols >= 3,4,0,4
size >= DSFMT_N64,4,0,4
 nColumn==1 ,4,0,4
feature->sat[q * 2 + 1].x < a->cols - 1 && feature->sat[q * 2].y < a->rows - 1,2,2,4
 amt>0 ,4,0,4
 sqlite3PagerIswriteable(pParent->pDbPage) ,4,0,4
 p->nOp>0 ,4,0,4
 pOp->p1>=0 ,4,0,4
feature->channel[q] >= 0 && feature->channel[q] < ch,2,2,4
 pOp->p2>0 ,4,0,4
ch == 1,2,2,4
 p->inTrans==TRANS_WRITE ,4,0,4
 pParse!=0 ,4,0,4
"0 && ""ccv_scd_classifier_cascade_new requires GSL library and liblinear support""",2,2,4
"k >= 0 && k < ccv_max(db->rows, db->cols) - 1",4,0,4
 pOp->p3<=(p->nMem-p->nCursor) ,4,0,4
cell.i[0] == k,2,2,4
ch == 1 || ch == 3,3,1,4
best_error_index < positives->rnum + negatives->rnum - 1 && best_error_index >= 0,2,2,4
(a->rows - size) % strides == 0,2,2,4
da->rows == db->rows && da->cols == db->cols && CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type),3,1,4
(a->cols - size) % strides == 0,2,2,4
 pBt!=0 ,3,0,3
 p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) ,3,0,3
 pH->htsize>0 ,3,0,3
weigh[0] <= aweigh[0] + 1e-10 && weigh[1] <= aweigh[1] + 1e-10,2,1,3
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 ,3,0,3
 pOp->p2<=(p->nMem-p->nCursor) ,3,0,3
 i>0 ,3,0,3
a->rows == a->cols,2,1,3
 p->nRef==0 ,3,0,3
 pName->nSrc==1 ,3,0,3
 sqlite3_mutex_held(pCache->pGroup->mutex) ,3,0,3
 pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell ,3,0,3
 (pH->htsize & (pH->htsize-1))==0 ,3,0,3
SQLITE_DONE == sqlite3_step(classifier_params_insert_stmt),2,1,3
(type & CCV_32F) || (type & CCV_64F),3,0,3
 n>0 && n<=4 ,3,0,3
depth >= 0,2,1,3
 p->eLock!=UNKNOWN_LOCK ,3,0,3
 op>=0 && op<ArraySize(wsdStat.nowValue) ,3,0,3
len > 1,2,1,3
(input_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,2,1,3
" sqlite3MemdebugHasType(p, MEMTYPE_DB) ",3,0,3
 i>=0 && i<mem5.nBlock ,3,0,3
CCV_GET_DATA_TYPE(sat->type) == CCV_32F,2,1,3
CCV_GET_DATA_TYPE(du->type) == CCV_GET_DATA_TYPE(dv->type),2,1,3
 pOrTerm->eOperator & WO_EQ ,3,0,3
hog->rows == rows && hog->cols == cols && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F,2,1,3
CCV_GET_CHANNEL(sat->type) == 8,2,1,3
 enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE ,3,0,3
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,3,0,3
 pKeyInfo->aSortOrder!=0 ,3,0,3
CCV_GET_DATA_TYPE(dx->type) == CCV_GET_DATA_TYPE(dy->type),2,1,3
a->rows >= size && a->cols >= size && (4 + sbin * 3) <= CCV_MAX_CHANNEL,2,1,3
SQLITE_DONE == sqlite3_step(negative_data_insert_stmt),2,1,3
bordered->rows >= point->point.y + a->rows && bordered->cols >= point->point.x + a->cols,2,1,3
 pBt->autoVacuum ,3,0,3
rc==SQLITE_OK || rc==SQLITE_NOMEM,3,0,3
" sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) ",3,0,3
 pList ,3,0,3
"sqlite3_column_int(negative_data_stmt, 2) == rsize",2,1,3
 db==0 || sqlite3_mutex_held(db->mutex) ,3,0,3
params.interval >= 0,2,1,3
 isOpen(pPager->fd) ,3,0,3
 pOp[-1].opcode==OP_CollSeq ,3,0,3
(imgs0->type & CCV_C1) && (imgs0->type & CCV_8U) && imgs0->rows == size.height + HOG_BORDER_SIZE * 2 && imgs0->cols == size.width + HOG_BORDER_SIZE * 2,1,2,3
 pTab->pSelect==0 ,3,0,3
 nKey>=0 ,3,0,3
 pPg->flags&PGHDR_DIRTY ,3,0,3
"SQLITE_OK == sqlite3_prepare_v2(db, classifier_params_insert_qs, sizeof(classifier_params_insert_qs), &classifier_params_insert_stmt, 0)",2,1,3
 (z-zBuf)==n ,3,0,3
 nCell<nMaxCells ,3,0,3
(input_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,2,1,3
 db->lookaside.bEnabled==0 ,3,0,3
 pToken->pDeferred==0 ,3,0,3
 pPager->eState>=PAGER_WRITER_LOCKED ,3,0,3
SQLITE_DONE == sqlite3_step(feature_params_insert_stmt),2,1,3
size == (size_t)rsize * rnum,2,1,3
CCV_GET_DATA_TYPE(dy->type) == CCV_GET_DATA_TYPE(du->type),2,1,3
" !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) ",3,0,3
depth < 10,2,1,3
CCV_GET_CHANNEL(dy->type) == CCV_GET_CHANNEL(du->type),2,1,3
bboxes[i].width > 0 && bboxes[i].height > 0,2,1,3
 isOpen(pPager->fd) || pPager->tempFile ,3,0,3
z->cascade->size.width == z->params.size.width,2,1,3
 pCur->aiIdx[pCur->iPage]<pPage->nCell ,3,0,3
 rc!=SQLITE_OK ,3,0,3
 pFile!=0 ,3,0,3
CCV_GET_CHANNEL(dx->type) == CCV_GET_CHANNEL(dy->type),2,1,3
 pIdx!=0 ,3,0,3
"SQLITE_OK == sqlite3_exec(db, function_state_create_table_qs, 0, 0, 0)",2,1,3
 argc==1 || argc==2 ,3,0,3
params.C > 0,2,1,3
 nBytes>=0 ,3,0,3
 pShmNode->pInode==pDbFd->pInode ,3,0,3
db,3,0,3
((uint64_t)x & 0x3) == 0,2,1,3
 p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE ,3,0,3
 iLevel<FTS3_SEGDIR_MAXLEVEL ,3,0,3
 pList->nExpr>0 ,3,0,3
 p->db->mallocFailed ,3,0,3
 pIdx->pSchema==pTab->pSchema ,3,0,3
(input_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0,2,1,3
 pHdr->iForeGuard==FOREGUARD ,3,0,3
"0 && ""CCV_INTER_LANCZOS is not implemented""",2,1,3
 pPage->nOverflow==0 ,3,0,3
 (pBt->btsFlags & BTS_READ_ONLY)==0 ,3,0,3
 pPage->pBt!=0 ,3,0,3
z->cascade->size.height == z->params.size.height,2,1,3
CCV_GET_CHANNEL(a->type) == ch,2,1,3
total > 1,2,1,3
 pPager->journalHdr<=pPager->journalOff ,3,0,3
count_per_partition % 4 == 0,2,1,3
hard_mine->rnum > 0,2,1,3
"SQLITE_OK == sqlite3_prepare_v2(db, function_state_insert_qs, sizeof(function_state_insert_qs), &function_state_insert_stmt, 0)",2,1,3
 p->db!=0 ,3,0,3
"SQLITE_OK == sqlite3_prepare_v2(db, negative_data_insert_qs, sizeof(negative_data_insert_qs), &negative_data_insert_stmt, 0)",2,1,3
 i>=1 ,3,0,3
"SQLITE_OK == sqlite3_prepare_v2(db, cascade_params_insert_qs, sizeof(cascade_params_insert_qs), &cascade_params_insert_stmt, 0)",2,1,3
v->count == root_classifier->count,2,1,3
 pNew!=0 ,3,0,3
SQLITE_DONE == sqlite3_step(cascade_params_insert_stmt),2,1,3
CCV_GET_CHANNEL(du->type) == CCV_GET_CHANNEL(dv->type),2,1,3
"SQLITE_OK == sqlite3_exec(db, create_table_qs, 0, 0, 0)",2,1,3
count > 0,2,1,3
argc >= 2,2,1,3
"0 && ""CCV_INTER_LINEAR is not implemented""",2,1,3
SQLITE_DONE == sqlite3_step(function_state_insert_stmt),2,1,3
 id ,3,0,3
 pParse->pNewTable==0 ,3,0,3
 pTerm!=0 ,3,0,3
 isOpen(p->jfd) || p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_WAL ,3,0,3
 pPrior!=0 ,3,0,3
" sqlite3SchemaMutexHeld(db, j, 0) ",3,0,3
 iLangid>=0 ,3,0,3
"SQLITE_OK == sqlite3_prepare_v2(db, feature_params_insert_qs, sizeof(feature_params_insert_qs), &feature_params_insert_stmt, 0)",2,1,3
(input_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0,2,1,3
 pWal->nWiData>0 && pWal->apWiData[0] ,3,0,3
n > 0,3,0,3
 x==0 ,2,1,3
flag == CCV_RGB_TO_YUV,2,1,3
 pPager->eLock==EXCLUSIVE_LOCK ,3,0,3
 sqlite3BtreeCursorIsValid(pCur) ,3,0,3
a->rows == tld->patch.height && a->cols == tld->patch.width,2,1,3
 !db->init.busy ,3,0,3
dmt->sig == 0,2,1,3
 iCol>=0 ,3,0,3
 sqlite3BtreeCursorIsValid(u.ap.pCrsr) ,2,0,2
 0!=pFile->eFileLock ,2,0,2
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB ,2,0,2
 j<nMaxCells ,2,0,2
CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL_NUM(da->type) == 1 && CCV_GET_CHANNEL_NUM(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows),1,1,2
 p->eLock>=RESERVED_LOCK ,2,0,2
 pRes!=0 ,2,0,2
image->type & CCV_C1,1,1,2
 n>=1 ,2,0,2
bgra_padding >= 0,2,0,2
 (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize ,2,0,2
CCV_GET_CHANNEL(a->type) == 1,2,0,2
 pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK ,2,0,2
 ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK ,2,0,2
 pCur->iPage>=0 && pCur->apPage[pCur->iPage] ,2,0,2
 sqlite3_mutex_held(pGroup->mutex) ,2,0,2
 pSorter ,2,0,2
(a_rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0,1,1,2
CCV_GET_CHANNEL(a->type) == layer->net.convolutional.channels,1,1,2
 !withoutRowid ,2,0,2
kernel_rows % 2,1,1,2
 p->inTransaction!=0 ,2,0,2
 TK_ISNULL==OP_IsNull ,2,0,2
pExpr->x.pList->nExpr > 0,2,0,2
 pCsr->isRequireSeek==0 ,2,0,2
isDelete==0 || isCreate,2,0,2
x,1,1,2
p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_MATCH ,2,0,2
 (f & (MEM_Static|MEM_Dyn))==0 ,2,0,2
 db->mallocFailed==0 ,2,0,2
 pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 ,2,0,2
 iCol==4 ,2,0,2
params.components > 0,2,0,2
 eFileLock==SHARED_LOCK ,2,0,2
isCreate==0 || isReadWrite,2,0,2
(layer->input.matrix.cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0,1,1,2
 szRegion==pShmNode->szRegion || pShmNode->nRegion==0 ,2,0,2
 p->aSample!=0 ,2,0,2
id >= 0,1,1,2
 (rc&0xff)==rc ,2,0,2
"SQLITE_OK == sqlite3_prepare(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0)",1,1,2
 nMap>=0 || pFd->nFetchOut==0 ,2,0,2
 pTable!=0 ,2,0,2
params.deform_angle > 0,1,1,2
 pPager->eState>=PAGER_WRITER_CACHEMOD ,2,0,2
 rc2==SQLITE_OK ,2,0,2
 rc==SQLITE_OK || pCsr==0 ,2,0,2
" sqlite3SchemaMutexHeld(db, pOp->p1, 0) ",2,0,2
a[i]->rows == convnet->input.height,1,1,2
 lwr+upr>=0 ,2,0,2
 eType==SQLITE_OPEN_MAIN_DB || eType==SQLITE_OPEN_TEMP_DB || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL || eType==SQLITE_OPEN_SUBJOURNAL || eType==SQLITE_OPEN_MASTER_JOURNAL || eType==SQLITE_OPEN_TRANSIENT_DB || eType==SQLITE_OPEN_WAL ,2,0,2
 pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) ,2,0,2
 p->op==RTREE_MATCH ,2,0,2
 sqlite3_memory_used()==0 ,2,0,2
" ExprHasProperty(pExpr, EP_xIsSelect) ",2,0,2
best.error_index < positives->rnum + negatives->rnum - 1 && best.error_index >= 0,2,0,2
 iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 ,2,0,2
 pagerUseWal(pPager) ,2,0,2
leafCorrection==4,2,0,2
 p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] ,2,0,2
a->rows >= db->rows && a->cols >= db->cols,1,1,2
 (n&0x7fffffff)==n ,2,0,2
multiscale_cascade[i]->interval == multiscale_cascade[i + 1]->interval,1,1,2
 pPager->pInJournal==0 ,2,0,2
 pTab ,2,0,2
 pShmNode==pDbFd->pInode->pShmNode ,2,0,2
params.weight_trimming > 0.5 && params.weight_trimming <= 1.0,1,1,2
example_state[index].weight > 0,2,0,2
 p!=0 && (p->rsFlags & ROWSET_NEXT)==0 ,2,0,2
 pIn->nSdst==1 ,2,0,2
multiscale_cascade[i]->count == multiscale_cascade[i + 1]->count,1,1,2
 pOp->p2>=0 ,2,0,2
 pWinMemData->magic1==WINMEM_MAGIC1 ,2,0,2
(type & 0xFF) == CCV_IO_DEFLATE_STREAM,1,1,2
 pFd->nFetchOut==0 ,2,0,2
(layer->input.matrix.rows + layer->net.convolutional.border * 2 - layer->net.convolutional.rows) % layer->net.convolutional.strides == 0,1,1,2
 target>0 ,2,0,2
 z!=0 ,2,0,2
 pMem->z!=0 ,2,0,2
(flags&0x0F)==SQLITE_SYNC_NORMAL || (flags&0x0F)==SQLITE_SYNC_FULL ,2,0,2
size <= batch,1,1,2
 20==sqlite3LogEst(4) ,2,0,2
 p->magic==VDBE_MAGIC_RUN ,2,0,2
"SQLITE_OK == sqlite3_prepare(db, layer_data_qs, sizeof(layer_data_qs), &layer_data_stmt, 0)",1,1,2
" osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",2,0,2
(isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly),2,0,2
 pH->first==0 ,2,0,2
 pDbFd->pShm==0 ,2,0,2
 x>='a' && x<='z' ,2,0,2
 sizeof(Mem3Block)==8 ,2,0,2
a[i]->cols == convnet->input.width,1,1,2
"SQLITE_OK == sqlite3_prepare(db, layer_params_qs, sizeof(layer_params_qs), &layer_params_stmt, 0)",1,1,2
context->image_net.words,1,1,2
sfmt->idx == SFMT_N32,2,0,2
 SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,2,0,2
 iCol==-1 || (iCol>=0 && iCol<pTab->nCol) ,2,0,2
type == 0 || CCV_GET_DATA_TYPE(type) == CCV_32F,1,1,2
 IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) ,2,0,2
 pInode->nShared!=0 ,2,0,2
 (pFrom->flags & MEM_RowSet)==0 ,2,0,2
 offset>=0 ,2,0,2
 EIGHT_BYTE_ALIGNMENT(p) ,2,0,2
 pH->count==0 ,2,0,2
alpha < 0.5,1,1,2
 !IsVirtual(pTab) ,2,0,2
 len>0 ,2,0,2
 zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) ,2,0,2
 pParse->db!=0 ,2,0,2
 lockType==F_WRLCK ,2,0,2
" sqlite3MemdebugNoType(p, MEMTYPE_DB) ",2,0,2
 (p==0)==(pFd->nFetchOut==0) ,2,0,2
 (pX->exclMask & (p->exclMask|p->sharedMask))==0 ,2,0,2
 p->pOffset==0 ,2,0,2
 p->mxSavepoint >= iSavepoint ,2,0,2
 pPager->eState==PAGER_WRITER_DBMOD ,2,0,2
CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r1->type) == CCV_8U,1,1,2
test_list != 0,1,1,2
 iLogsize>=0 && iLogsize<=LOGMAX ,2,0,2
 rc==SQLITE_OK || pStmt==0 ,2,0,2
last >= 0,1,1,2
SQLITE_IOCAP_ATOMIC64K==(65536>>8),2,0,2
params.deform_scale > 0 && params.deform_scale < 1,1,1,2
 pParse->db->mallocFailed ,2,0,2
 pcacheCheckSynced(p) ,2,0,2
argb_padding >= 0,2,0,2
 p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) ,2,0,2
 esc==0 ,2,0,2
scanline >= cols * 3,2,0,2
 pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' ,2,0,2
 iVar>0 ,2,0,2
a->rows >= size && a->cols >= size,1,1,2
 (!isDelete && zName) || eType!=SQLITE_OPEN_WAL ,2,0,2
kernel_cols % 2,1,1,2
 pWal->readLock>=0 || pWal->lockError ,2,0,2
 (f & (MEM_Static|MEM_Ephem))==0 ,2,0,2
 sqlite3KeyInfoIsWriteable(pKeyInfo) ,2,0,2
 p->bFts4==0 ,2,0,2
SIMD(layer),2,0,2
 pOut!=pIn1 ,2,0,2
 pInode->nShared==0 ,2,0,2
 pPager!=0 ,2,0,2
 pX!=0 ,2,0,2
pCsr->pNode,2,0,2
seq->rsize == sizeof(ccv_mser_keypoint_t),2,0,2
 pPage->pBt ,2,0,2
 z2==(char*)sqlite3_value_text(argv[0]) ,2,0,2
image->rows == dim.height || image->cols == dim.width,1,1,2
params.exclude_overlap > 0.1,1,1,2
 p->bIgnore==0 ,2,0,2
 (SQLITE_PTR_TO_INT(ptr)&1)==0 ,2,0,2
 rc!=SQLITE_OK || isOpen(pPager->jfd) ,2,0,2
 onError==OE_Replace ,2,0,2
 (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 ,2,0,2
 pShmNode->nRef>0 ,2,0,2
CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL_NUM(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols,1,1,2
 pLeft ,2,0,2
 TK_EQ==OP_Eq ,2,0,2
 pMem->n>=0 ,2,0,2
 pPage->pCache==pCache ,2,0,2
context->image_net[1].convnet,1,1,2
 rc==SQLITE_NOMEM || rc==SQLITE_OK ,2,0,2
 nVal==1 ,2,0,2
 pInode->nShared>0 ,2,0,2
 p->inTrans>TRANS_NONE ,2,0,2
bgr_padding >= 0,2,0,2
 target>0 && target<=pParse->nMem ,2,0,2
"r2 && ""test-list doesn't exists""",1,1,2
 iType-2 >= 0 ,2,0,2
part_feature[k]->rows == pyr[j - next]->rows && part_feature[k]->cols == pyr[j - next]->cols,1,1,2
" sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) ",2,0,2
 pX->op==TK_IN ,2,0,2
 *pbEof==0 ,2,0,2
"0 && ""ccv_scd_classifier_cascade_new requires GSL library support""",1,1,2
 pInode->eFileLock==0 ,2,0,2
convnet->mean_activity->cols == convnet->cols,1,1,2
 pSrc!=0 ,2,0,2
 pWal->writeLock==0 ,2,0,2
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT ,2,0,2
v->id == j,2,0,2
params.parts > 0,2,0,2
 pPager->eState==PAGER_WRITER_LOCKED ,2,0,2
 xHash!=0 ,2,0,2
 (pIn2->flags & MEM_Int)!=0 ,2,0,2
 (f & (MEM_Dyn|MEM_Ephem))==0 ,2,0,2
 pPager->dbOrigSize==pPager->dbHintSize ,2,0,2
 p==0 ,2,0,2
 (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ,2,0,2
 eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK ,2,0,2
" sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) ",2,0,2
 pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER ,2,0,2
i < 10,2,0,2
 pBt->pPage1->aData ,2,0,2
(a_rows - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
 TK_GT==OP_Gt ,2,0,2
 !pPager->tempFile ,2,0,2
CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE_SIZE(r0->type) == CCV_8U,1,1,2
 pLevel->p5==0 ,2,0,2
(a->cols + border * 2 - kernel_cols) % strides == 0,1,1,2
"j == positives->rnum + negatives->rnum - 1, !skip",2,0,2
 omitTable==0 ,2,0,2
 p->nRef==1 ,2,0,2
 pWal->readLock>=0 ,2,0,2
 TK_LT==TK_GT+2 ,2,0,2
 pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) ,2,0,2
(dx == 1 && dy == 0) || (dx == 0 && dy == 1),1,1,2
pyr[q]->rows >= point->point.y + a->rows && pyr[q]->cols >= point->point.x + a->cols,1,1,2
 pMem->flags & MEM_Blob ,2,0,2
 pA->pRight==0 || pA->v<=pA->pRight->v ,2,0,2
 pExpr->op==TK_AGG_FUNCTION ,2,0,2
v->count == 8,1,1,2
 aHash[iKey]==i ,2,0,2
" p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) ",2,0,2
isExclusive==0 || isCreate,2,0,2
"!""Invalid flags argument""",2,0,2
 sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage ,2,0,2
 p || *piDocid==0 ,2,0,2
 iLookAhead!=YYNOCODE ,2,0,2
 pNC!=0 ,2,0,2
(a->rows + border * 2 - kernel_rows) % strides == 0,1,1,2
 sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) ,2,0,2
 pPage->leaf ,2,0,2
 pInode->nLock>=0 ,2,0,2
rows > 8,1,1,2
 46==sqlite3LogEst(25) ,2,0,2
multiscale_cascade[i]->grayscale == multiscale_cascade[i + 1]->grayscale,1,1,2
 p->inTransaction ,2,0,2
 nNew>0 ,2,0,2
mat->prime >= 0 && mat->prime < sizeof(_ccv_get_sparse_prime) / sizeof(int),2,0,2
 pBt->pageSize>=512 && pBt->pageSize<=65536 ,2,0,2
 pIn1->flags & MEM_Str || db->mallocFailed ,2,0,2
last >= 0 && last < convnet->count,1,1,2
 sqlite3_data_count(pCsr->pStmt)==0 ,2,0,2
(layer->input.matrix.cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
 (PAGER_JOURNALMODE_TRUNCATE & 5)==1 ,2,0,2
params.data_minings > 0,1,1,2
best_rate.weight > 0,1,1,2
 sz<=pBt->maxLocal+23 ,2,0,2
 rc!=SQLITE_IOERR_SHORT_READ ,2,0,2
a->rows == convnet->rows,1,1,2
 size>=2 ,2,0,2
update_params->layers[i].wnum % update_params->layers[i].net.full_connect.count == 0,2,0,2
 isWriteLock==0 || isWriteLock==1 ,2,0,2
 op>0 && op<0xff ,2,0,2
(a_cols - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
 pFrom->pTab==0 ,2,0,2
" !ExprHasProperty(pNew, EP_xIsSelect) ",2,0,2
 db->init.busy ,2,0,2
!ccv_any_nan(response),1,1,2
 pOp[-1].p4type==P4_COLLSEQ ,2,0,2
"SQLITE_OK == sqlite3_prepare(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0)",1,1,2
context->face,2,0,2
 keyClass==FTS3_HASH_BINARY ,2,0,2
 size==mem3.aPool[i+size-1].u.hdr.prevSize ,2,0,2
 pSrc ,2,0,2
 pCsr->pNode==pRoot ,2,0,2
 pParse ,2,0,2
rgba_padding >= 0,2,0,2
parser->state >= 0,2,0,2
 sqlite3_mutex_notheld(pcache1.grp.mutex) ,2,0,2
 pParse->pNewTrigger==0 ,2,0,2
 pNew->nOut==saved_nOut ,2,0,2
 pDb->pSchema!=0 ,2,0,2
 memIsValid(pIn1) ,2,0,2
(a_rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
 pWinMemData->magic2==WINMEM_MAGIC2 ,2,0,2
 nDoclist>0 ,2,0,2
(a_cols + layer->net.convolutional.border * 2 - layer->net.convolutional.cols) % layer->net.convolutional.strides == 0,1,1,2
(type && 0xFF) == CCV_IO_ANY_RAW,1,1,2
 n==pPage->pgno && e==PTRMAP_BTREE ,2,0,2
 pTable ,2,0,2
multi >= 0 && multi < convnet->count,1,1,2
a->cols > 0 && b->cols > 0,2,0,2
 TK_GE==OP_Ge ,2,0,2
 pPager->dbOrigSize==pPager->dbFileSize ,2,0,2
 (p->sharedMask & mask)==0 ,2,0,2
 p->eLock==EXCLUSIVE_LOCK ,2,0,2
 WAL_FRAME_HDRSIZE==24 ,2,0,2
 pFd->nFetchOut>=0 ,2,0,2
index >= 0 && index < positives->rnum + negatives->rnum,2,0,2
 sizeof(u32)==4 ,2,0,2
params.iterations > 0,1,1,2
positives->rnum > 0 && negatives->rnum > 0,1,1,2
 eLock==READ_LOCK || eLock==WRITE_LOCK ,2,0,2
params.sample_rate > 0 && params.sample_rate <= 1.0,1,1,2
!ccv_any_nan(root_feature),1,1,2
 pLhs->aNode && pRhs->aNode ,2,0,2
 sqlite3PagerIswriteable(pRoot->pDbPage) ,2,0,2
 p->pBt->pPager!=0 ,2,0,2
tho->rows == mdo->rows && tho->cols == mdo->cols,2,0,2
 pPager->eState>=PAGER_READER ,2,0,2
 eFileLock!=PENDING_LOCK ,2,0,2
 flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE) ,2,0,2
 pOp->p1>0 ,2,0,2
channels == 3,2,0,2
 pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK ,2,0,2
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL ,2,0,2
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",2,0,2
 jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 ,2,0,2
 op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK ,2,0,2
"0 && ""bad hex char""",2,0,2
 sqlite3_mutex_held(p->pSrc->pBt->mutex) ,2,0,2
 pOp->p4.z!=0 ,2,0,2
 aiCol || pFKey->nCol==1 ,2,0,2
 (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL ,2,0,2
 pKey!=0 ,2,0,2
 pPager->eLock>=SHARED_LOCK ,2,0,2
 pOp->p1>0 && pOp->p1<=(p->nMem-p->nCursor) ,2,0,2
mems[i] == x,1,1,2
convnet->mean_activity->rows == convnet->rows,1,1,2
 pSelect==0 ,2,0,2
 *pPgno!=PENDING_BYTE_PAGE(pBt) ,2,0,2
pCur,2,0,2
 pIn3->flags&MEM_Int ,2,0,2
CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(m->type),2,0,2
(a_cols + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
params.deform_scale > 0,1,1,2
 pPager->useJournal ,2,0,2
 (rc&db->errMask)==rc ,2,0,2
 pWinMemData->hHeap!=INVALID_HANDLE_VALUE ,2,0,2
 pInode->eFileLock==pFile->eFileLock ,2,0,2
" db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) ",2,0,2
 mem.disallow==0 ,2,0,2
CCV_GET_CHANNEL(a->type) == convnet->channels,1,1,2
 p->locked==0 ,2,0,2
ch == 31,2,0,2
 p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE ,2,0,2
 pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 ,2,0,2
 pCur->skipNext!=SQLITE_OK ,2,0,2
 z[0]=='\0' && z>zRet ,2,0,2
 c==i ,2,0,2
 (pIn1->flags & MEM_Dyn)==0 ,2,0,2
params.overlap > 0.1,1,1,2
 TK_NE==OP_Ne ,2,0,2
params.relabels > 0,1,1,2
 pExpr->pLeft==0 && pExpr->pRight==0 ,2,0,2
 mem1.zMalloc==0 ,2,0,2
 pPager->eState==PAGER_READER ,2,0,2
a->cols == convnet->cols,1,1,2
 pFile->pUnused==0 || offset>=PENDING_BYTE+512 || offset+amt<=PENDING_BYTE ,2,0,2
 iLevel==FTS3_SEGCURSOR_ALL || iLevel==FTS3_SEGCURSOR_PENDING || iLevel>=0 ,2,0,2
 pCur->skipNext==0 || pCur->eState!=CURSOR_VALID ,2,0,2
 p->nRef>0 || p->owner==0 ,2,0,2
" !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) ",2,0,2
base_dir != 0,1,1,2
 i>=0 ,2,0,2
 n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 ,2,0,2
da->type == db->type,1,1,2
 pOp->p4type==P4_VTAB ,2,0,2
 u<=LARGEST_INT64 ,2,0,2
 (mem3.aPool[i-1].u.hdr.size4x & 1)==0 ,2,0,2
(layer->input.matrix.rows + layer->net.pool.border * 2 - layer->net.pool.size) % layer->net.pool.strides == 0,1,1,2
 TK_LT==OP_Lt ,2,0,2
 pExpr->pLeft && pExpr->pRight ,2,0,2
 (PAGER_JOURNALMODE_PERSIST & 5)==1 ,2,0,2
 pPager->setMaster==0 ,2,0,2
 p->pOrderBy==0 ,2,0,2
params.negative_cache_size <= negnum,1,1,2
db->type == dd->type && db->rows == dd->rows && db->cols == dd->cols,1,1,2
 (pageSize & 7)==0 ,2,0,2
 p->addrOpenEphm[0] == -1 ,2,0,2
params.deform_shift > 0,1,1,2
 p->pGroupBy==0 ,2,0,2
 pzErrMsg!=0 ,2,0,2
best_rate > 0,1,1,2
 pExpr->u.zToken[1]=='\'' ,2,0,2
params.exclude_overlap >= 0.0,1,1,2
" sqlite3MemdebugHasType(p, MEMTYPE_HEAP) ",2,0,2
 memIsValid(&aMem[pOp->p3]) ,2,0,2
 j==1 ,2,0,2
 rc==SQLITE_NOMEM ,2,0,2
 pFile->eFileLock==0 ,2,0,2
error < 0.5,1,1,2
 pPg->pPager==pPager ,2,0,2
 TK_NOTNULL==OP_NotNull ,2,0,2
 10==sqlite3LogEst(2) ,2,0,2
SQLITE_IOCAP_ATOMIC512==(512>>8),2,0,2
type >= 0 && type < 16,2,0,2
abgr_padding >= 0,2,0,2
db->rows == rows && db->cols == cols && db->type == a->type,1,1,2
 TK_LE==OP_Le ,2,0,2
" !ExprHasProperty(pF->pExpr, EP_xIsSelect) ",2,0,2
 n>=0 ,2,0,2
 offset <= (int)pBt->usableSize-5 ,2,0,2
!ccv_any_nan(feature),1,1,2
 nCol>1 ,2,0,2
k >= 0,2,0,2
 p->rSetup>=pTemplate->rSetup ,2,0,2
 n>1 || mask==(1<<ofst) ,2,0,2
 u.bi.pC->isTable ,2,0,2
tops <= rank->rows,1,1,2
" hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) ",2,0,2
context->image_net.convnet,1,1,2
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) ",2,0,2
 p && p->pFunc ,2,0,2
 onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail || onError==OE_Ignore || onError==OE_Replace ,2,0,2
!(type & CCV_UNMANAGED),2,0,2
 rc==SQLITE_OK || mxLevel==0 ,1,0,1
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) ,1,0,1
 pSorter->nPMA==0 ,1,0,1
 idx >= end+2 ,1,0,1
 pLeft!=0 ,1,0,1
CURRENT->body_read < CURRENT->content_length,1,0,1
 p->pForest==0 ,1,0,1
a->rows > 0 && a->cols > 0,1,0,1
 pParent->pGroupBy==0 ,1,0,1
 SQLITE_OPEN_READWRITE == 0x02 ,1,0,1
 (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll ,1,0,1
 pCur->apPage[pCur->iPage]->nOverflow==0 ,1,0,1
mean_activity->cols == dim.width,1,0,1
 len<=(u32)nBuf ,1,0,1
(box.width >= tld->patch.width && box.height >= tld->patch.height) || (box.width <= tld->patch.width && box.height <= tld->patch.height),1,0,1
cb,1,0,1
rc==SQLITE_OK || pMem->enc!=desiredEnc,1,0,1
 nEq>=1 ,1,0,1
 pcache1.isInit==0 ,1,0,1
(imgs0->type & CCV_C1) && (imgs0->type & CCV_8U) && imgs0->rows == size.height && imgs0->cols == size.width,1,0,1
 zFilename!=0 ,1,0,1
c == 0 || c == 1,1,0,1
 z[n]=='\'' ,1,0,1
 op!=TK_ISNULL || c==WO_ISNULL ,1,0,1
 sqlite3_value_type(argv[0])==SQLITE_NULL ,1,0,1
 !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 ,1,0,1
 ppStmt!=0 ,1,0,1
" iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) ",1,0,1
 p->eType!=FTSQUERY_PHRASE ,1,0,1
 (m.flags & MEM_Str)!=0 || db->mallocFailed ,1,0,1
" countValidCursors(pBt, 1)==0 ",1,0,1
width > 0 && height > 0,1,0,1
SQLITE_DONE == sqlite3_step(layer_data_insert_stmt),1,0,1
 id-2 >= 0 ,1,0,1
 pEntry->count>=0 ,1,0,1
 28==sqlite3LogEst(7) ,1,0,1
 !pSubParse->pTriggerPrg && !pSubParse->nMaxArg ,1,0,1
gridDim.z == count,1,0,1
 ArraySize(aSyscall)==24 ,1,0,1
 (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 ,1,0,1
 ArraySize(aSyscall)==76 ,1,0,1
 rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) ,1,0,1
 pIdx==0 || bStat3 || pIdx->nSample==0 ,1,0,1
 p->pOrderBy!=0 ,1,0,1
 u.bs.pC!=0 ,1,0,1
 p->db==0 || p->db==db ,1,0,1
 !IsVirtual(pSrc->pTab) ,1,0,1
 pExpr->op==TK_OR ,1,0,1
size % 4 == 0,1,0,1
rc==SQLITE_NOMEM || pMem->enc==desiredEnc,1,0,1
 nDist>0 ,1,0,1
 p->eLock>=SHARED_LOCK ,1,0,1
 EIGHT_BYTE_ALIGNMENT(aSpace1) ,1,0,1
 ArraySize(pLoop->aLTermSpace)==4 ,1,0,1
 u.ae.n>=0 && u.ae.p1>0 && u.ae.p2>0 ,1,0,1
 pCsr ,1,0,1
 db->u1.isInterrupted ,1,0,1
 pPager->pPCache!=0 ,1,0,1
 pIn2->flags & MEM_Blob ,1,0,1
age >= min_age,1,0,1
type == 1,1,0,1
 (PAGER_FULLFSYNC | PAGER_CKPT_FULLFSYNC | PAGER_CACHESPILL) == PAGER_FLAGS_MASK ,1,0,1
 pTrigger || tmask==0 ,1,0,1
 iOfst+iAmt<=p->endpoint.iOffset ,1,0,1
end_y >= 0,1,0,1
 sqlite3BtreeHoldsMutex(pBt) ,1,0,1
 sqlite3PagerGetData(pPage->pDbPage)==pPage->aData ,1,0,1
 pVfs ,1,0,1
 p->rc!=SQLITE_IOERR_BLOCKED ,1,0,1
 pChanged ,1,0,1
 u.bu.pCrsr!=0 ,1,0,1
 pTerm->eOperator & (WO_LT|WO_LE) ,1,0,1
 p>mem3.aPool && p<&mem3.aPool[mem3.nPool] ,1,0,1
 nArg<=(int)ArraySize(aStatic) || aArg==aDyn ,1,0,1
 p->aList && p->nList<=(1<<iSub) ,1,0,1
 id->h>2 ,1,0,1
 ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) ,1,0,1
 PAGER_LOCKINGMODE_EXCLUSIVE==1 ,1,0,1
 (MEM_Blob>>3) == MEM_Str ,1,0,1
 sqlite3_mutex_notheld(pBt->mutex) ,1,0,1
 pBt->pPage1 ,1,0,1
 u.bg.pC->pseudoTableReg==0 ,1,0,1
 SQLITE_OPEN_CREATE == 0x04 ,1,0,1
 pMem->flags & MEM_Real ,1,0,1
 pOp->p3<SQLITE_N_BTREE_META ,1,0,1
 nLoop<=pWInfo->pTabList->nSrc ,1,0,1
 pPage==p->pDirtyTail ,1,0,1
 dest.nSdst==nColumn ,1,0,1
 !p->locked || p->wantToLock>0 ,1,0,1
 pInt[nReserve/sizeof(int)]==(int)REARGUARD ,1,0,1
 !isFatalError(p->rc) ,1,0,1
 pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg ,1,0,1
 p->iOff<=p->nNode ,1,0,1
 pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK ,1,0,1
 pParent->pOrderBy==0 ,1,0,1
 pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable ,1,0,1
 pOp->p3==0 ,1,0,1
 IsVirtual(p) ,1,0,1
 eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,1,0,1
" sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) ",1,0,1
 memIsValid(u.bh.pMem) ,1,0,1
 p->nIndex>=1 ,1,0,1
 iCell<NCELL(pNode) ,1,0,1
 i+size<=mem3.nPool+1 ,1,0,1
 MAP_FAILED!=0 ,1,0,1
 (pKey==0)==(pCur->pKeyInfo==0) ,1,0,1
 aRegIdx ,1,0,1
params.nnc_verify > 0.5 && params.nnc_verify < 1,1,0,1
 p->aMem[i].db==p->db ,1,0,1
label[i + posnum] < model->count,1,0,1
 pPrior->pRightmost!=pPrior ,1,0,1
 pNew==0 ,1,0,1
 p->nCol>1 ,1,0,1
 pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) ,1,0,1
 (rc&0xFF)==(rcp&0xFF) ,1,0,1
 nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 ,1,0,1
 nByte>=8 ,1,0,1
 pExpr->flags&EP_xIsSelect ,1,0,1
 i<(int)sizeof(p->btreeMask)*8 ,1,0,1
 pPgHdr->pCache==pCache ,1,0,1
 pOut<=&aMem[(p->nMem-p->nCursor)] ,1,0,1
CCV_GET_DATA_TYPE(dmt->type) == CCV_8U || CCV_GET_DATA_TYPE(dmt->type) == CCV_32S || CCV_GET_DATA_TYPE(dmt->type) == CCV_32F || CCV_GET_DATA_TYPE(dmt->type) == CCV_64S || CCV_GET_DATA_TYPE(dmt->type) == CCV_64F,1,0,1
" !ExprHasProperty(p, EP_NoReduce) ",1,0,1
negnum > 0,1,0,1
params.level >= 0,1,0,1
 pOp->p5==0 ,1,0,1
 u.cg.n>=0 ,1,0,1
!(*ppStmt),1,0,1
 pMem1->enc==SQLITE_UTF8 || pMem1->enc==SQLITE_UTF16LE || pMem1->enc==SQLITE_UTF16BE ,1,0,1
 zP4!=0 ,1,0,1
 iSavepoint>=0 ,1,0,1
context->image_net[0].words,1,0,1
 u.bh.pC->isTable ,1,0,1
 u.at.p1==SAVEPOINT_BEGIN||u.at.p1==SAVEPOINT_RELEASE||u.at.p1==SAVEPOINT_ROLLBACK ,1,0,1
 sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 ,1,0,1
context->pedestrian,1,0,1
 sqlite3PagerIswriteable(pChild->pDbPage) ,1,0,1
 pgszDest==sqlite3BtreeGetPageSize(p->pDest) ,1,0,1
 u.bm.pC->isTable || pOp->opcode!=OP_RowData ,1,0,1
nArg==1 || nArg==2,1,0,1
 !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE || type==SQLITE_WIN32_TEMP_DIRECTORY_TYPE ,1,0,1
 pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 ,1,0,1
 (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 ,1,0,1
 pIter->aBuffer==0 ,1,0,1
 pSorter->pRecord==0 ,1,0,1
 TK_BITAND==OP_BitAnd ,1,0,1
 1==sqlite3BtreeIsInTrans(pTemp) ,1,0,1
 gap+nByte<=top ,1,0,1
 pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 ,1,0,1
 p->readOnly==0 || pOp->p2==0 ,1,0,1
 pParse->azVar==0 ,1,0,1
 OP_SeekLe == OP_SeekLt+1 ,1,0,1
CCV_GET_DATA_TYPE(m->type) == CCV_32F,1,0,1
 !u.bm.pC->isTable ,1,0,1
 x<pIdx->pTable->nCol ,1,0,1
" sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) ",1,0,1
 pTo!=0 ,1,0,1
 (flags & BTREE_SINGLE)==0 || isTempDb ,1,0,1
 cArg==FTS3_MATCHINFO_HITS ,1,0,1
 pE!=0 ,1,0,1
multiscale_cascade[i - 1]->grayscale == multiscale_cascade[i]->grayscale,1,0,1
params.direction == CCV_BRIGHT_TO_DARK || params.direction == CCV_DARK_TO_BRIGHT,1,0,1
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || x>=0 ,1,0,1
 pIdx->autoIndex ,1,0,1
 pKeyInfo->nField>0 ,1,0,1
 u.bg.pC->rowidIsValid==0 ,1,0,1
 memIsValid(u.cr.pX) ,1,0,1
 pCsr->isEof==0 ,1,0,1
 sqlite3IsNaN(y) ,1,0,1
 db==0 || p->pBlockingConnection!=db ,1,0,1
 nFull>=pVfs->mxPathname ,1,0,1
 memIsValid(u.ar.pRec) ,1,0,1
 db->nVdbeActive>0 || db->autoCommit==0 || db->nStatement==0 ,1,0,1
 pStep!=0 ,1,0,1
 isOpen(pPager->fd) || pPager->noSync ,1,0,1
 pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 ,1,0,1
 aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]== SQLITE_MAX_LIKE_PATTERN_LENGTH ,1,0,1
vfsList,1,0,1
 eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE ,1,0,1
 *pRc==SQLITE_OK ,1,0,1
" 0==strcmp(sqlite3_errmsg(db), ""unknown tokenizer: nosuchtokenizer"") ",1,0,1
hull.y + hull.height <= a->rows,1,0,1
 p->pBt->inTransaction>=p->inTrans ,1,0,1
 pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 ,1,0,1
 u.bd.nField>0 ,1,0,1
*(((int**)cascade)[i]) == type,1,0,1
params.size.width > 0,1,0,1
 pFile->inNormalWrite==0 || pFile->dbUpdate==0 || pFile->transCntrChng==1 ,1,0,1
 pOp->p2==SQLITE_CHECKPOINT_PASSIVE || pOp->p2==SQLITE_CHECKPOINT_FULL || pOp->p2==SQLITE_CHECKPOINT_RESTART ,1,0,1
sizeof(x)==8,1,0,1
pList || pParse->db->mallocFailed ,1,0,1
 SQLITE_OPEN_READONLY == 0x01 ,1,0,1
 i>=0 && i<=pPage->nCell+pPage->nOverflow ,1,0,1
 OPFLAG_BULKCSR==BTREE_BULKLOAD ,1,0,1
 TK_RSHIFT==OP_ShiftRight ,1,0,1
 !(fg&MEM_Zero) ,1,0,1
 i<pIdx->nSample ,1,0,1
 (offset-c)<JOURNAL_HDR_SZ(pPager) ,1,0,1
flag == '.',1,0,1
 r>=0.0 ,1,0,1
" !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList ",1,0,1
 desiredEnc==SQLITE_UTF8 ,1,0,1
 pNew->nCell>0 || (nNew==1 && cntNew[0]==0) ,1,0,1
size==0,1,0,1
 pCache->nPage >= pCache->nRecyclable ,1,0,1
params.grayscale == 0 || params.grayscale == 1,1,0,1
 !db->xCollNeeded || !db->xCollNeeded16 ,1,0,1
 u.bm.pC->isTable==0 || pOp->opcode==OP_RowData ,1,0,1
 1 >= ((pMem->zMalloc && pMem->zMalloc==pMem->z) ? 1 : 0) + (((pMem->flags&MEM_Dyn)&&pMem->xDel) ? 1 : 0) + ((pMem->flags&MEM_Ephem) ? 1 : 0) + ((pMem->flags&MEM_Static) ? 1 : 0) ,1,0,1
 nShift<=nDesired ,1,0,1
 iCsr>=iStart ,1,0,1
 p && p->pFunc && p->pFunc->xStep ,1,0,1
CCV_GET_CHANNEL(da->type) == CCV_C1,1,0,1
 EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) ,1,0,1
 pCur->cachedRowid==iRowid ,1,0,1
 dirSync==0 || dirSync==1 ,1,0,1
 pTokenizer ,1,0,1
 rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED ,1,0,1
 &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne ,1,0,1
rect.width == rect.height,1,0,1
 (pTab->tabFlags & TF_Virtual)!=0 ,1,0,1
posnum > 0 && negnum > 0,1,0,1
connection->written <= connection->to_write_len,1,0,1
 0 < db->nProgressOps ,1,0,1
 ap[1]==pBusyHandlerArg ,1,0,1
 i<nNew-1 || j==nCell ,1,0,1
 (OP_SeekLt & 0x0001)==(OP_SeekGe & 0x0001) ,1,0,1
 pParse->checkSchema ,1,0,1
" sqlite3SchemaMutexHeld(db, idx, 0) ",1,0,1
blockDim.x == batch,1,0,1
 (pMsr->aBuffer[nList] & 0xFE)==0x00 ,1,0,1
 pTable->nCol>=0 ,1,0,1
 zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) ,1,0,1
 pTerm->pExpr ,1,0,1
 zPattern==sqlite3_value_text(argv[1]) ,1,0,1
 CURSOR_VALID < CURSOR_REQUIRESEEK ,1,0,1
 isSaveLeft==0 || isExact==0 ,1,0,1
 pPager->nSavepoint==nSavepoint ,1,0,1
 pTrunk->aData!=0 ,1,0,1
 pOp->p1 <= SQLITE_MAX_LENGTH ,1,0,1
 iDb>=0 && iDb<pParse->db->nDb ,1,0,1
 pPager->dbSize>=nPage ,1,0,1
CCV_GET_DATA_TYPE(adx->type) == CCV_32S,1,0,1
 (p->flags & MEM_Agg)==0 ,1,0,1
 nWrite==0 || nWrite<=(DWORD)nRem ,1,0,1
 pIndex!=0 ,1,0,1
 pTo->nVar==pFrom->nVar ,1,0,1
"0 && ""ccv_icf_classifier_cascade_soft requires GSL library support""",1,0,1
 pSrc->a[iLeft].pTab ,1,0,1
 zRawSql[0] || nToken==0 ,1,0,1
 p->pgno < p->pDirty->pgno ,1,0,1
 isIgnoreEmpty || (isRequirePos && !isColFilter) ,1,0,1
 sqlite3BtreeIsInTrans(pTo) ,1,0,1
 pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt ,1,0,1
 sqlite3PagerIswriteable(pPage1->pDbPage) ,1,0,1
z.fv,1,0,1
 u.bj.pC!=0 ,1,0,1
new_length > 0,1,0,1
 pOp>aOp ,1,0,1
 pCsr->pKeyInfo && pCsr->pBt==0 ,1,0,1
"0 && ""aflw requires GSL library support""",1,0,1
 iMeta==0 || iMeta==1 ,1,0,1
 pgno<=pBt->nPage ,1,0,1
 pSrcIdx ,1,0,1
 pzBuffer==0 || isReduced ,1,0,1
 p->iAddr<nOp ,1,0,1
 p->base.zErrMsg==0 ,1,0,1
 SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) ,1,0,1
"0 && ""ccv_convnet_supervised_train requires GSL library support""",1,0,1
 pbegin>addr || pbegin==0 ,1,0,1
nPage>0,1,0,1
 pWal->ckptLock && pWal->hdr.mxFrame>0 ,1,0,1
 db->nStatement==0 ,1,0,1
 TK_GE==TK_GT+3 ,1,0,1
 (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 ,1,0,1
 p->inTrans>0 ,1,0,1
CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(b->type) && CCV_GET_DATA_TYPE(a->type) == CCV_GET_DATA_TYPE(b->type),1,0,1
nArg==2,1,0,1
 yymsp[-1].minor.yy203!=0 ,1,0,1
 p->l_whence==SEEK_SET ,1,0,1
 !pWinMemData->bOwned ,1,0,1
 pPager->pInJournal!=0 ,1,0,1
 xConstruct ,1,0,1
 chngPk==0 || chngPk==1 ,1,0,1
 sizeof(v)==sizeof(pMem->r) ,1,0,1
" sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) ",1,0,1
0 <= x && x <= EXPN_MAX,1,0,1
 rc!=SQLITE_OK || nDocSize>0 ,1,0,1
 pOp->opcode==OP_InsertInt ,1,0,1
" !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 ",1,0,1
 v || db->mallocFailed ,1,0,1
 isNew==1 || isNew==0 ,1,0,1
 iFrom>=iTo+nReg || iFrom+nReg<=iTo ,1,0,1
 pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE ,1,0,1
 pCur->iPage<BTCURSOR_MAX_DEPTH ,1,0,1
 winSysInfo.dwPageSize>0 ,1,0,1
 rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 ,1,0,1
 pPage->intKey ,1,0,1
 maxRootPgno!=PENDING_BYTE_PAGE(pBt) ,1,0,1
 nBuf>=0 ,1,0,1
 u.bd.oc==OP_SeekGe || u.bd.oc==OP_SeekGt ,1,0,1
 pPager->walSyncFlags==0 ,1,0,1
CCV_GET_DATA_TYPE(da->type) == CCV_GET_DATA_TYPE(db->type) && CCV_GET_CHANNEL(da->type) == 1 && CCV_GET_CHANNEL(db->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->rows : da->cols) == ((transpose & CCV_B_TRANSPOSE) ? db->cols : db->rows),1,0,1
 pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage],1,0,1
 aContent[aList[i]] > aContent[aList[i-1]] ,1,0,1
 -1-pOp->p2<p->nLabel ,1,0,1
 op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT ,1,0,1
 i<pTab->nCol ,1,0,1
watcher == &connection->timeout_watcher,1,0,1
 pNew->iCol==pOld->iCol ,1,0,1
params.nnc_same > 0.5 && params.nnc_same < 1,1,0,1
 pSubWInfo->a[0].iIdxCur==iCovCur ,1,0,1
 pIdx!=0 || HasRowid(pTab) ,1,0,1
 p->zContentTbl==0 || bContent==0 ,1,0,1
 idx<pPage->nCell ,1,0,1
 n==1 || lockType!=F_RDLCK ,1,0,1
 sqlite3_mutex_notheld(mem0.mutex) ,1,0,1
params.max_area > params.min_area,1,0,1
 (p->btreeMask & (((yDbMask)1)<<p1))!=0 ,1,0,1
 pFrom->pSelect==0 ,1,0,1
 !p || p->xCmp ,1,0,1
 pSorter->iWriteOff==0 ,1,0,1
" SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) ",1,0,1
 !(fg&(MEM_Str|MEM_Blob)) ,1,0,1
params.win_size.width > 0 && params.win_size.height > 0,1,0,1
 rc!=SQLITE_OK || bMaxSet ,1,0,1
 pIdx->pTable==pTab ,1,0,1
params[i].output.convolutional.partition % params[i].input.matrix.partition == 0,1,0,1
 isOpen(pPager->fd) || tempFile ,1,0,1
 nPathname>0 ,1,0,1
 p==pIndex ,1,0,1
 pEList!=0 && pExpr->iColumn<pEList->nExpr ,1,0,1
 aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH ,1,0,1
 seenIn ,1,0,1
 (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload ,1,0,1
 info.nHeader==nHeader ,1,0,1
 zArg[i]==FTS3_MATCHINFO_HITS ,1,0,1
 zName!=0 ,1,0,1
 pParent || pNode->iNode==1 ,1,0,1
 p->sharable==0 || p->locked==0 || p->wantToLock>0 ,1,0,1
 nByte==ROUND8(nByte) ,1,0,1
params.deform_shift >= 0,1,0,1
 a & 0x80 ,1,0,1
sfmt->idx % 2 == 0,1,0,1
 zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 ,1,0,1
 p2->xUnlockNotify==p->xUnlockNotify || !seen ,1,0,1
hull.y >= 0 && hull.y < a->rows,1,0,1
tld->frame_signature == a->sig,1,0,1
 pTable->pSelect ,1,0,1
 pTab->iPKey<0 ,1,0,1
 u.bp.pCrsr!=0 ,1,0,1
params.shift > 0 && params.shift < 1,1,0,1
hull.x + hull.width <= a->cols,1,0,1
 (sizeof(struct MemBlockHdr)&7) == 0 ,1,0,1
 pOld->isPSample==0 && pNew->isPSample==0 ,1,0,1
 p->a || p->nSrc==0 ,1,0,1
 sqlite3KeyInfoIsWriteable(pKeyMerge) ,1,0,1
 pItem->notIndexed==0 && pItem->zIndex==0 ,1,0,1
" sqlite3SchemaMutexHeld(db, i, 0) ",1,0,1
 pEList->nExpr>0 ,1,0,1
 eAuto>=0 && eAuto<=2 ,1,0,1
array->sig == 0,1,0,1
part_vector->w->rows == part_classifier->w->rows && part_vector->w->cols == part_classifier->w->cols,1,0,1
 winShmMutexHeld() ,1,0,1
multiscale_cascade[0]->count % multiscale_cascade[0]->octave == 0,1,0,1
 nKey==nPk ,1,0,1
 pInode->pShmNode==0 ,1,0,1
 u.as.pCrsr ,1,0,1
 p->wantToLock>0 ,1,0,1
 (PAGER_JOURNALMODE_MEMORY & 5)!=1 ,1,0,1
params.new_deform_shift > 0,1,0,1
 pList->pDirty==0 || isCommit ,1,0,1
 WO_LT==SQLITE_INDEX_CONSTRAINT_LT ,1,0,1
 pPage->pDirtyNext->pDirtyPrev==0 ,1,0,1
 pPrior->pOrderBy==0 ,1,0,1
 isSorter(u.bq.pC)==(pOp->opcode==OP_SorterSort) ,1,0,1
 nArg==1 ,1,0,1
 rc==SQLITE_OK || *ppStmt==0 ,1,0,1
 pRoot->pgno==pCur->pgnoRoot ,1,0,1
 pUnpacked->flags & UNPACKED_PREFIX_MATCH ,1,0,1
 seenVar && seenIn ,1,0,1
 (m.flags & MEM_Term)!=0 || db->mallocFailed ,1,0,1
CCV_GET_DATA_TYPE(convnet->mean_activity->type) == CCV_32F,1,0,1
 pExpr->op==TK_COLLATE ,1,0,1
 (rc & p->db->errMask)==rc ,1,0,1
 eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) ,1,0,1
 isSavepnt ,1,0,1
 pPager->eState!=PAGER_WRITER_FINISHED ,1,0,1
 rc!=SQLITE_OK || pPager->journalOff>=szJ ,1,0,1
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit ,1,0,1
rows == 0 && cols == 0 && scanline == 0,1,0,1
 (isCommit!=0)==(nTruncate!=0) ,1,0,1
 pCol->zType==0 ,1,0,1
 op!=TK_LE || c==WO_LE ,1,0,1
 p->inTrans!=TRANS_NONE ,1,0,1
 iDb==0 || pId2->z ,1,0,1
 pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 ,1,0,1
 pOp->opcode!=OP_NextIfOpen || pOp->p4.xAdvance==sqlite3BtreeNext ,1,0,1
 pCur->apPage[1]->nOverflow ,1,0,1
CCV_GET_DATA_TYPE(sat->type) == CCV_32S,1,0,1
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_ERROR ,1,0,1
 iOut>0 ,1,0,1
b->cols > 0,1,0,1
 pPage->leaf==0 || pPage->leaf==1 ,1,0,1
 u.cd.pProgram->nMem+u.cd.pProgram->nCsr==u.cd.pFrame->nChildMem ,1,0,1
 TK_GT<TK_LE ,1,0,1
 mem.nCurrent[i]>=0 ,1,0,1
 info.nKey==nKey ,1,0,1
 u.ba.pKeyInfo->enc==ENC(db) ,1,0,1
 eType!=PTRMAP_FREEPAGE ,1,0,1
 (PAGER_JOURNALMODE_WAL & 5)==5 ,1,0,1
 p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_MEMORY ,1,0,1
 nOut<SQLITE_MAX_LENGTH ,1,0,1
 pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 ,1,0,1
 p->pPrior==0 ,1,0,1
" wrFlag==0 || !hasReadConflicts(p, iTable) ",1,0,1
 nTerm>0 ,1,0,1
 (idxStr==0 && argc==0) || (idxStr && (int)strlen(idxStr)==argc*2) ,1,0,1
 SQLITE_CacheSpill==PAGER_CACHESPILL ,1,0,1
" sqlite3SchemaMutexHeld(db, u.az.iDb, 0) ",1,0,1
 p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 ,1,0,1
da->rows == db->rows && da->cols == db->cols && CCV_GET_CHANNEL(da->type) == CCV_GET_CHANNEL(db->type),1,0,1
 iChng<p->nCol ,1,0,1
 (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 ,1,0,1
 pSrc->nSrc>iRight ,1,0,1
 idxStr==0 ,1,0,1
 0==(1&SQLITE_PTR_TO_INT(pVal->z)) ,1,0,1
 pBt->pPage1==0 ,1,0,1
mean_activity->rows == dim.height,1,0,1
 pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) ,1,0,1
 TK_LT>TK_EQ && TK_LT<TK_GE ,1,0,1
 pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID ,1,0,1
 pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE ,1,0,1
 rc==SQLITE_ROW || rc==SQLITE_DONE || rc==SQLITE_ERROR || rc==SQLITE_BUSY || rc==SQLITE_MISUSE ,1,0,1
 zIn==sqlite3_value_text(argv[0]) ,1,0,1
 u.bd.oc!=OP_SeekGt || u.bd.r.flags==UNPACKED_INCRKEY ,1,0,1
 u.ap.sMem.z==u.ap.sMem.zMalloc ,1,0,1
 pc>=-1 && pc<p->nOp ,1,0,1
params.features > 0 && params.features <= 32,1,0,1
 (size&1)==0 ,1,0,1
"parser->new_request && ""undefined callback""",1,0,1
 isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF || pPager->journalMode==PAGER_JOURNALMODE_WAL ,1,0,1
 TK_PLUS==OP_Add ,1,0,1
 !p || (p>aDoclist && p<&aDoclist[nDoclist]) ,1,0,1
 u.cc.iSet==-1 || u.cc.iSet>=0 ,1,0,1
 pTab->nCol==pSelect->pEList->nExpr || db->mallocFailed ,1,0,1
 pPager->dbSize==pPager->dbOrigSize ,1,0,1
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_FINISHED || (pagerUseWal(pPager) && pPager->eState==PAGER_WRITER_CACHEMOD) ,1,0,1
 pTest!=0 ,1,0,1
b[j + 1]->rows == out_rows && b[j + 1]->cols == out_cols,1,0,1
 p->btreeMask==0 ,1,0,1
 p->apCsr[i]==0 ,1,0,1
 pTab && pExpr->pTab==pTab ,1,0,1
 pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_AND || pExpr->eType==FTSQUERY_NEAR ,1,0,1
 flags==0 || flags==PAGER_GET_NOCONTENT || flags==PAGER_GET_READONLY ,1,0,1
box.rect.x >= 0 && box.rect.x < a->cols,1,0,1
 iMin>=0 ,1,0,1
 u.am.n>0 ,1,0,1
 p->db==0 || sqlite3_mutex_held(p->db->mutex) ,1,0,1
a->cols == cols,1,0,1
 u.bd.oc==OP_SeekLt || u.bd.oc==OP_SeekLe ,1,0,1
 iIdxCur+i!=iDataCur || pPk==pIdx ,1,0,1
 pRes ,1,0,1
 get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize ,1,0,1
full_connect >= 0 && full_connect < convnet->count,1,0,1
 mem5.currentCount>0 ,1,0,1
 db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE ,1,0,1
 pParse->nested==0 ,1,0,1
argc == 4,1,0,1
lockPath!=NULL,1,0,1
 FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 ,1,0,1
 octet>=0 && octet<256 ,1,0,1
 p->nRef || (p->flags&PGHDR_NEED_SYNC) ,1,0,1
 EIGHT_BYTE_ALIGNMENT(pIndex->azColl) ,1,0,1
 pOp->p4type==P4_KEYINFO ,1,0,1
 i<=p->iSize ,1,0,1
 p->aNode ,1,0,1
 OP_SeekGe == OP_SeekLt+2 ,1,0,1
 pIn1 <= &p->aMem[(p->nMem-p->nCursor)] ,1,0,1
 p->sharable==0 || p->locked==0 || p->db==p->pBt->db ,1,0,1
 pBt->autoVacuum || iMeta==0 ,1,0,1
 p->pInode==pFd->pInode ,1,0,1
 db->pSavepoint==0 || db->autoCommit==0 ,1,0,1
 !pPager->pTmpSpace ,1,0,1
 pCsr->pSorter->pUnpacked!=0 ,1,0,1
 TOKEN.z[0] ,1,0,1
 (PAGER_JOURNALMODE_WAL & 5)!=1 ,1,0,1
rows > 8 && cols == 0 && scanline == 0,1,0,1
 u.bm.pC->pCursor!=0 ,1,0,1
 isSorter(u.br.pC) ,1,0,1
 apNew[0]->nFree == (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2) ,1,0,1
 ((VTable *)zP4)->db==p->db ,1,0,1
 u.ar.nField>0 && pOp->p2>0 && pOp->p2+u.ar.nField<=(p->nMem-p->nCursor)+1 ,1,0,1
 rc==SQLITE_OK || !MEMDB ,1,0,1
 pPage->nOverflow<=ArraySize(pPage->apOvfl) ,1,0,1
 p->nList<=(1<<iSub) ,1,0,1
 (u.ap.payloadSize64 & SQLITE_MAX_U32)==(u64)u.ap.payloadSize64 ,1,0,1
 idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0 || idxNum==FTS4AUX_LE_CONSTRAINT || idxNum==FTS4AUX_GE_CONSTRAINT || idxNum==(FTS4AUX_LE_CONSTRAINT|FTS4AUX_GE_CONSTRAINT) ,1,0,1
" !ExprHasProperty(p, EP_FromJoin) ",1,0,1
 pSel ,1,0,1
 pPage->nFree>=nByte ,1,0,1
 zStartAff==0 || sqlite3Strlen30(zStartAff)>=nEq ,1,0,1
a[i]->rows == convnet->input.height || a[i]->cols == convnet->input.width,1,0,1
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_WRITER_LOCKED ,1,0,1
 u.ap.pC->pVtabCursor==0 ,1,0,1
 iToken!=p->iDoclistToken ,1,0,1
 a!=0 ,1,0,1
" sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",1,0,1
 rc==SQLITE_OK || pPage==0 ,1,0,1
 iPage>1 ,1,0,1
 (u.bh.pMem->flags & MEM_Int)!=0 ,1,0,1
 u.bi.pC->pCursor!=0 ,1,0,1
 pExpr->aMI ,1,0,1
convnet->mean_activity->cols == convnet->input.width,1,0,1
 isSorter(u.bk.pC) ,1,0,1
 pIdx==0 || pIdx->nKeyCol==pFKey->nCol ,1,0,1
 sz > (int)sizeof(LookasideSlot*) ,1,0,1
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || (pLoop->wsFlags & WHERE_INDEXED)!=0 ,1,0,1
 !pPager->aSavepoint && !pPager->pInJournal ,1,0,1
" GLOBAL(int, mutexIsInit) ",1,0,1
 zPath[nDb]!='\n' ,1,0,1
 (iEq==0 && iGe==-1) || (iEq==-1 && iGe==0) ,1,0,1
 pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) ,1,0,1
 newPgno>0 ,1,0,1
 eMode==PAGER_LOCKINGMODE_QUERY || eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,1,0,1
 WO_GE==SQLITE_INDEX_CONSTRAINT_GE ,1,0,1
 nEq>=pLoop->u.btree.nSkip ,1,0,1
 pWInfo->nLevel<=pTabList->nSrc ,1,0,1
 !memDb ,1,0,1
 pOrWc->nTerm>=2 ,1,0,1
 nKey==4 ,1,0,1
" !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) ",1,0,1
 pOp->p4type==P4_INTARRAY ,1,0,1
 aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER,1,0,1
 zByte!=0 ,1,0,1
 sizeof(res.azResult[0])>= sizeof(res.nData) ,1,0,1
 aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame ,1,0,1
 pMem1->enc==pMem2->enc ,1,0,1
 pPage->cellOffset == hdr + 12 - 4*pPage->leaf ,1,0,1
 sizeof(x)==8 && sizeof(a)==8 ,1,0,1
" xCmp(apSegment[i], apSegment[i+1])<0 ",1,0,1
 p->apCsr[pOp->p1]!=0 ,1,0,1
 debugMutexHeld(pX) ,1,0,1
 eLock==NO_LOCK || eLock==SHARED_LOCK ,1,0,1
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)==0 ,1,0,1
 rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 ,1,0,1
 iFirst>=0 ,1,0,1
 pName==0 ,1,0,1
CCV_GET_DATA_TYPE(ady->type) == CCV_32S,1,0,1
 iOpt==6 ,1,0,1
" i==pIdx->nSample || sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec)>0 || pParse->db->mallocFailed ",1,0,1
 u.bg.pC!=0 ,1,0,1
 pWal->ckptLock==1 || pWal->ckptLock==0 ,1,0,1
 pOp->p5>=1 && pOp->p5<=4 ,1,0,1
 pExpr->u.zToken[0]!=0 ,1,0,1
 pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize,1,0,1
feature->channel[i] >= 0 && feature->channel[i] < (grayscale ? 8 : 10),1,0,1
 pPager->eState!=PAGER_READER ,1,0,1
contour->rect.height <= params.max_height && contour->rect.height >= params.min_height,1,0,1
 pAndTerm->pExpr ,1,0,1
 rc!=SQLITE_OK || isOpen(pFile) ,1,0,1
 badHdr==0 || pWal->writeLock==0 ,1,0,1
" !ExprHasProperty(pE, EP_FromJoin) ",1,0,1
box.rect.y >= 0 && box.rect.y < a->rows,1,0,1
input.height != 0 && input.width != 0,1,0,1
 p->pEList && pPrior->pEList ,1,0,1
 ((int(*)(void *))(ap[0]))==xBusyHandler ,1,0,1
 SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG ,1,0,1
 (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey ,1,0,1
 zTab==0 && zDb==0 ,1,0,1
 pIdx!=0 || pFKey->nCol==1 ,1,0,1
 op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL ,1,0,1
 mem5.currentOut>=(size*mem5.szAtom) ,1,0,1
 iType-2 < ArraySize(staticMutexes) ,1,0,1
 autoInc==0 || autoInc==1 ,1,0,1
 start>=pPage->hdrOffset+6+pPage->childPtrSize ,1,0,1
 !pS ,1,0,1
 pKeyDup==0 ,1,0,1
 pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] ,1,0,1
 iSpace1 <= (int)pBt->pageSize ,1,0,1
 pParse->pVdbe || pParse->db->mallocFailed ,1,0,1
 pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl ,1,0,1
 pthreadMutexHeld(p) ,1,0,1
 p->nIndex>0 ,1,0,1
 memIsValid(pIn2) ,1,0,1
 chngKey || pTrigger || hasFK || regOldRowid==regNewRowid ,1,0,1
" SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) ",1,0,1
 pToken->pSegcsr || pPhrase->iDoclistToken>=0 ,1,0,1
z[k + 1] >= a->cols - 1,1,0,1
 !pColl || pColl->xCmp ,1,0,1
 iMin<0xffffffff ,1,0,1
 v!=(-2147483647-1) ,1,0,1
 nToken==ii ,1,0,1
 zTabName!=0 ,1,0,1
 iDb<SQLITE_MAX_ATTACHED+2 ,1,0,1
 pItem->u.x.iOrderByCol>0 ,1,0,1
 p->wantToLock==0 ,1,0,1
 u.bg.pC->isTable ,1,0,1
 pVfs->mxPathname==MAX_PATHNAME ,1,0,1
 pMem->xDel!=SQLITE_DYNAMIC ,1,0,1
 p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) ,1,0,1
 pParse==sqlite3ParseToplevel(pParse) ,1,0,1
 pOp->opcode==OP_Noop || pOp->opcode==OP_Explain ,1,0,1
CCV_GET_CHANNEL(w->type) == 31 && CCV_GET_DATA_TYPE(w->type) == CCV_32F,1,0,1
 p->aList==&aList[nList&~((2<<iSub)-1)] ,1,0,1
 sizeof(u64)==8 || sizeof(u64)==4 ,1,0,1
 nReserve>=-1 && nReserve<=255 ,1,0,1
 nRead>0 ,1,0,1
 SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART ,1,0,1
 (PAGER_JOURNALMODE_DELETE & 5)!=1 ,1,0,1
 (int)strlen(conchPath) == len+7 ,1,0,1
 pFrom->nSrc==1 ,1,0,1
params.size.height > 0,1,0,1
 pWal==0 || pWal->readLock>=0 ,1,0,1
 pList->a!=0 ,1,0,1
 u.bo.pC->pCursor || u.bo.pC->pVtabCursor ,1,0,1
" !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) ",1,0,1
 pDel==0 || pDel==pColl ,1,0,1
 u.ap.pCrsr ,1,0,1
 nReserve>=0 && nReserve<=255 ,1,0,1
 0==pTable->pIndex ,1,0,1
 WO_LE==SQLITE_INDEX_CONSTRAINT_LE ,1,0,1
 pagerUseWal(pPager) || pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,1,0,1
 leafCorrection==0 || leafCorrection==4 ,1,0,1
 (*ppLast)->pRight==0 ,1,0,1
 CURSOR_INVALID < CURSOR_REQUIRESEEK ,1,0,1
 pPrior!=0 && nByte>0 ,1,0,1
 sizeof(x)==8 && sizeof(pMem->r)==8 ,1,0,1
 pParse->pNewTrigger==pTrigger ,1,0,1
 n==nKeyCol ,1,0,1
" (sqlite3_strnicmp(argv[0], ""fts4"", 4)==0 && isFts4) || (sqlite3_strnicmp(argv[0], ""fts3"", 4)==0 && !isFts4) ",1,0,1
 pPg->nRef>0 || pPg->pPager->memDb ,1,0,1
 zB==sqlite3_value_text(argv[0]) ,1,0,1
 pConstraint->op==RTREE_MATCH ,1,0,1
 *ppVal==0 ,1,0,1
 p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN ,1,0,1
 pTab->nCol>cnum ,1,0,1
 !isOpen(pPager->jfd) ,1,0,1
 pPager->eState>=PAGER_WRITER_CACHEMOD || (pPager->eState==PAGER_OPEN && pPager->eLock==EXCLUSIVE_LOCK) ,1,0,1
 pWinMemData->hHeap!=0 ,1,0,1
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE,1,0,1
multiscale_cascade[i - 1]->count == multiscale_cascade[i]->count,1,0,1
 idx>0 && idx<=p->nVar ,1,0,1
 (PAGER_JOURNALMODE_DELETE & 5)==0 ,1,0,1
 *pbFirst==0 || iWrite>0 ,1,0,1
 (addr>=0 && addr<p->nOp) || p->db->mallocFailed ,1,0,1
 0==(pMem->flags&MEM_Dyn) && !pMem->xDel ,1,0,1
 u.bn.pC->pseudoTableReg==0 || u.bn.pC->nullRow ,1,0,1
 offset%JOURNAL_HDR_SZ(pPager)==0 ,1,0,1
 pExcept==0 || pExcept->pBt==pBt ,1,0,1
 pOp->p2>0 && pOp->p2<p->nOp ,1,0,1
 iIndexCur>=0 ,1,0,1
 nFarg>=2 ,1,0,1
 (WO_EQ<<(op-TK_EQ)) < 0x7fff ,1,0,1
 pName2!=0 ,1,0,1
 pTokenizer && pModule ,1,0,1
 flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) ,1,0,1
 p->pSchema==0 || p->zDatabase==0 ,1,0,1
nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1,1,0,1
 iRead==iRead2 ,1,0,1
 pTab->nCol<=0x7fff && j<=0x7fff ,1,0,1
 !pParse->pNewTrigger ,1,0,1
 pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] ,1,0,1
params[i].input.matrix.channels % params[i].input.matrix.partition == 0,1,0,1
rng && CCV_GET_CHANNEL(image->type) == CCV_C3 && image_manipulation > 0 && image_manipulation <= 1,1,0,1
 aToOpen==0 ,1,0,1
 pDbFd ,1,0,1
 p->eState==PAGER_OPEN || p->eState==PAGER_READER || p->eState==PAGER_WRITER_LOCKED || p->eState==PAGER_WRITER_CACHEMOD || p->eState==PAGER_WRITER_DBMOD || p->eState==PAGER_WRITER_FINISHED || p->eState==PAGER_ERROR ,1,0,1
 p==p->pParent->pRight || p==p->pParent->pLeft ,1,0,1
 scratchAllocOut<=1 ,1,0,1
 pc>=0 && pc<p->nOp ,1,0,1
 p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) ,1,0,1
 nNew>pFd->mmapSize ,1,0,1
one_precision <= words->rnum + 0.1,1,0,1
 (*p1&0xFE)==0 && (*p2&0xFE)==0 ,1,0,1
 sqlite3GlobalConfig.nRefInitMutex==0 ,1,0,1
 pPage->nCell==0 ,1,0,1
 nExtra>=nColl ,1,0,1
 isSorter(u.bm.pC)==0 ,1,0,1
CCV_GET_CACHE_TYPE(branch->terminal.type) >= 0 && CCV_GET_CACHE_TYPE(branch->terminal.type) < 16,1,0,1
 SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG ,1,0,1
 to_op==OP_ToInt || aff!=SQLITE_AFF_INTEGER ,1,0,1
params.negative_cache_size > 0,1,0,1
 pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 ,1,0,1
 p->db==pBt->db ,1,0,1
 TK_REM==OP_Remainder ,1,0,1
pDup,1,0,1
 iExclude==-1 ,1,0,1
 u.co.pModule->xColumn ,1,0,1
 pWal->readLock<0 ,1,0,1
 useTempTable==0 ,1,0,1
size > 0 && size <= batch,1,0,1
 0==pParse->nQueryLoop ,1,0,1
CONNECTION_HAS_SOMETHING_TO_WRITE,1,0,1
 pName->z!=0 ,1,0,1
 nSrcPage>=0 ,1,0,1
 !pBt->pPage1 && !pBt->pCursor ,1,0,1
 rc!=SQLITE_OK || winMemGetOwned() ,1,0,1
 ((Fts3Table *)pVtab)->inTransaction ,1,0,1
 db->pDfltColl!=0 ,1,0,1
 pOp->p2!=0 ,1,0,1
 !pnCkpt || *pnCkpt==-1 ,1,0,1
p || db->mallocFailed,1,0,1
 pParse==pWalker->pParse ,1,0,1
 pSorter->aTree==0 ,1,0,1
" db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) ",1,0,1
 iStartLeaf<=iEndLeaf ,1,0,1
 pPager->fd->pMethods->iVersion>=3 ,1,0,1
 p->rSetup==0 || pTemplate->rSetup==0 || p->rSetup==pTemplate->rSetup ,1,0,1
 u.bm.pC->nullRow==0 ,1,0,1
 nNew<=pPhrase->doclist.nList && nNew>0 ,1,0,1
positive_count + negative_count > 0,1,0,1
 EIGHT_BYTE_ALIGNMENT(pPager->jfd) ,1,0,1
 pPager->pWal ,1,0,1
 mem5.currentCount>0 || mem5.currentOut==0 ,1,0,1
 SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,1,0,1
 pOther!=pDef && pOther->pNext!=pDef ,1,0,1
 pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab,1,0,1
 pExpr->op!=TK_LT || op==OP_Ge ,1,0,1
 pOrTerm->leftCursor==iCursor ,1,0,1
 aNext!=p->aAlloc ,1,0,1
 pVar->flags & MEM_Blob ,1,0,1
 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK ,1,0,1
 nEq<=(p->nKeyCol+1) ,1,0,1
 pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT ,1,0,1
 op==OP_OpenRead || op==OP_OpenWrite ,1,0,1
 (OP_SeekLe & 0x0001)==(OP_SeekGt & 0x0001) ,1,0,1
 pPhrase->aToken[iToken].pSegcsr==0 ,1,0,1
 thisMark!=READMARK_NOT_USED ,1,0,1
 sqlite3_mutex_held(p->pCache->pGroup->mutex) ,1,0,1
 iCur<p->nCursor ,1,0,1
 pDest->nSdst==nResultCol ,1,0,1
 db2 ,1,0,1
 pNew->nCol>0 ,1,0,1
 (errCode&0xff)==SQLITE_CONSTRAINT ,1,0,1
SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE,1,0,1
 fg & MEM_Real ,1,0,1
 sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 ,1,0,1
 pp && p ,1,0,1
 pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT || pExpr->op==TK_GT || pExpr->op==TK_GE || pExpr->op==TK_LE || pExpr->op==TK_NE || pExpr->op==TK_IS || pExpr->op==TK_ISNOT ,1,0,1
 cursorHoldsMutex(pCsr) ,1,0,1
 pInode->nLock==0 ,1,0,1
CCV_GET_CHANNEL(a[i]->type) == convnet->channels,1,0,1
params.feature_size > 0,1,0,1
 db->lookaside.nOut==0 ,1,0,1
 argc>1 ,1,0,1
 bRev==0 || bRev==1 ,1,0,1
 pOp->p5<ArraySize(p->aCounter) ,1,0,1
 pPager->dbFileSize>0 ,1,0,1
 pB->pRight==0 || pB->v<=pB->pRight->v ,1,0,1
 eMode>=0 && eMode<=ArraySize(azModeName) ,1,0,1
label[k] < model->count,1,0,1
 (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,1,0,1
 iLastPg>nFin ,1,0,1
 eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE,1,0,1
 u.bb.pCx->pKeyInfo->enc==ENC(db) ,1,0,1
 pPage->intKey==(pIdxKey==0) ,1,0,1
 (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 ,1,0,1
 pCsr->bDesc==0 || pCsr->bDesc==1 ,1,0,1
 pCur->aiIdx[ii]==pCur->apPage[ii]->nCell ,1,0,1
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] ,1,0,1
 handleNFSUnlock==0 ,1,0,1
 pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v ,1,0,1
 p->aOp ,1,0,1
 pPg->nRef>0 ,1,0,1
 p->nSample>0 ,1,0,1
 p==pBt->pWriter ,1,0,1
 !pPager->exclusiveMode || pPager->eLock==eLock ,1,0,1
 pMem->z || pMem->n==0 ,1,0,1
 rc!=SQLITE_IOERR_BLOCKED ,1,0,1
 u.cj.eNew==PAGER_JOURNALMODE_DELETE || u.cj.eNew==PAGER_JOURNALMODE_TRUNCATE || u.cj.eNew==PAGER_JOURNALMODE_PERSIST || u.cj.eNew==PAGER_JOURNALMODE_OFF || u.cj.eNew==PAGER_JOURNALMODE_MEMORY || u.cj.eNew==PAGER_JOURNALMODE_WAL || u.cj.eNew==PAGER_JOURNALMODE_QUERY ,1,0,1
" walFramePgno(pWal, iFrame)==iDbpage ",1,0,1
 p->aCol==0 ,1,0,1
(*a)->rows == convnet->rows,1,0,1
 u.ca.nRoot>0 ,1,0,1
watcher == &connection->read_watcher,1,0,1
" chngToIN==getMask(&pWInfo->sMaskSet, iCursor) ",1,0,1
header_index >= 0,1,0,1
multiscale_cascade[i - 1]->octave == multiscale_cascade[i]->octave,1,0,1
CCV_GET_CHANNEL(m->type) == ch,1,0,1
 pToken ,1,0,1
 p->iStatement==0 || db->flags&SQLITE_CountRows ,1,0,1
 bBulk==0 ,1,0,1
 u.aq.zAffinity[pOp->p2]==0 ,1,0,1
 j+1 < nOld ,1,0,1
 pBuilder->nRecValid<nEq ,1,0,1
isDelete && !syncDir,1,0,1
 nOld>0 ,1,0,1
 rc==0 ,1,0,1
negv->rnum < params.negative_cache_size + 64,1,0,1
 idx <= HASHTABLE_NSLOT/2 + 1 ,1,0,1
 eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL ,1,0,1
 PENDING_BYTE+1==RESERVED_BYTE ,1,0,1
 !pMemPage || pMemPage->pgno==iPage ,1,0,1
 pId->nRef>0 ,1,0,1
 *p ,1,0,1
 pExpr->x.pSelect==0 ,1,0,1
 sqlite3_mutex_held(mem5.mutex) ,1,0,1
 pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,1,0,1
 pCur->apPage[0]->intKey || pIdxKey ,1,0,1
 pList->nExpr==2 ,1,0,1
"ccv_convnet_verify(convnet, 10) == 0",1,0,1
 u.ap.pCrsr!=0 || u.ap.pC->nullRow ,1,0,1
 n<=pTab->nCol ,1,0,1
 p->aColName!=0 ,1,0,1
 pTabList ,1,0,1
 pPager->tempFile && rc==SQLITE_OK ,1,0,1
 bAlnum==0 || bAlnum==1 ,1,0,1
 pReader->aNode ,1,0,1
 (start + size) <= (int)pPage->pBt->usableSize ,1,0,1
 iOut<pSorter->nTree && iOut>0 ,1,0,1
 pgno==MASTER_ROOT+1 ,1,0,1
 pRight->bStart || pLeft->iDocid==pRight->iDocid ,1,0,1
 regOut!=regStat4 && regOut!=regStat4+1 ,1,0,1
a->step == a->cols * CCV_GET_DATA_TYPE_SIZE(a->type) * ch,1,0,1
 i!=YY_REDUCE_USE_DFLT ,1,0,1
 nBlock>=2 ,1,0,1
 pTab==pOld ,1,0,1
params.relabels >= 0,1,0,1
 type==NC_IsCheck || type==NC_PartIdx ,1,0,1
" db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",1,0,1
 iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) ,1,0,1
 nRead==db->nVdbeRead ,1,0,1
 SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE ,1,0,1
x >= 0 && y >= 0,1,0,1
z.positives->rnum > 0 && z.negatives->rnum > 0,1,0,1
 m.z || db->mallocFailed ,1,0,1
 pgno!=0 ,1,0,1
 rc!=SQLITE_OK || isOpen(pPager->fd) ,1,0,1
bdxy2->rows == a->rows - 1 && bdxy2->cols == a->cols - 1,1,0,1
 pSrc->nSrc==1 ,1,0,1
 pLoop->u.btree.nEq==1 ,1,0,1
 zStr==sqlite3_value_text(argv[0]) ,1,0,1
 pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0) == (int)sqlite3VdbeSerialTypeLen(serial_type) ,1,0,1
scanline >= cols,1,0,1
 pPager->eState==PAGER_OPEN || pbOpen ,1,0,1
 rc==SQLITE_OK || pExpr==0 ,1,0,1
 p->iBufEnd<p->nBuffer ,1,0,1
 db->aDb==db->aDbStatic ,1,0,1
 info.nData==(u32)(nData+nZero) ,1,0,1
size >= SFMT_N64,1,0,1
 (pBlock[-1].u.hdr.size4x&1)!=0 ,1,0,1
 pPgHdr==0 || rc==SQLITE_OK ,1,0,1
 pChild->nCell==pRoot->nCell ,1,0,1
 (m.flags & MEM_Dyn)!=0 || db->mallocFailed ,1,0,1
 db->init.busy==0 ,1,0,1
 pPrev && pPrev->pLeft && pPrev->pRight==0 ,1,0,1
" szNew==cellSizePtr(pPage, newCell) ",1,0,1
 p1==p2 ,1,0,1
fsz > 0,1,0,1
 (p->flags&MEM_RowSet)==0 ,1,0,1
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY ,1,0,1
 u.cq.pVtab->pModule->xRename ,1,0,1
 nearby>0 ,1,0,1
 (nByte % pgsz)==0 ,1,0,1
 pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR ,1,0,1
 EIGHT_BYTE_ALIGNMENT(zCsr) ,1,0,1
 strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,1,0,1
"flag == ','",1,0,1
 u.bm.pC->deferredMoveto==0 ,1,0,1
 p->pRightmost==p ,1,0,1
 op!=TK_GT || c==WO_GT ,1,0,1
 p->rSetup==pTemplate->rSetup ,1,0,1
 eStmt<SizeofArray(azSql) && eStmt>=0 ,1,0,1
 u.ca.z==0 ,1,0,1
pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union || pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard,1,0,1
params[i].output.convolutional.count % params[i].output.convolutional.partition == 0,1,0,1
 pToken->pSegcsr==0 ,1,0,1
 pPrevTrunk==0 ,1,0,1
" !hasReadConflicts(p, pCur->pgnoRoot) ",1,0,1
 sqlite3_mutex_held(mutexOpen) ,1,0,1
 regOldRowid>0 ,1,0,1
 db->pVdbe==p ,1,0,1
 pNew->pSrc!=0 || pParse->nErr>0 ,1,0,1
 p->nOp - i >= 3 ,1,0,1
 pDest && pSrc ,1,0,1
 pName && pName->z ,1,0,1
 nReserve>=0 && nReserve<1000 ,1,0,1
 ((p->pBt->nPage)&0x8000000)==0 ,1,0,1
 idx>=0 && idx<=15 ,1,0,1
 (pStart->wtFlags & TERM_VNULL)==0 ,1,0,1
 pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) ,1,0,1
 eCall==STAT_GET_STAT1 || eCall==STAT_GET_NEQ || eCall==STAT_GET_ROWID || eCall==STAT_GET_NLT || eCall==STAT_GET_NDLT ,1,0,1
ix >= 0 && ix < tho->cols && iy >=0 && iy < tho->rows,1,0,1
" iOffset==walFrameOffset(iFrame, szPage) ",1,0,1
 pParent->isInit ,1,0,1
params.track_deform_angle > 0,1,0,1
 nByte < usableSize-8 ,1,0,1
 u.ap.p2<u.ap.pC->nField ,1,0,1
 pOrderBy ,1,0,1
 c==t ,1,0,1
 eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) ,1,0,1
"SQLITE_OK == sqlite3_exec(db, layer_create_table_qs, 0, 0, 0)",1,0,1
 (0xfff & (EP_Reduced|EP_TokenOnly))==0 ,1,0,1
 sqlite3_mutex_held(pCsr->pBtree->db->mutex) ,1,0,1
 pTab!=0 || cntTab==0 ,1,0,1
 u.aw.iDb>=0 && u.aw.iDb<db->nDb ,1,0,1
 pE->op!=TK_DOT || pE->pRight!=0 ,1,0,1
 x<mem5.nBlock ,1,0,1
 p->zErrMsg==0 ,1,0,1
 p->zSql==0 ,1,0,1
 db->nVdbeWrite>0 || db->autoCommit==0 || (db->nDeferredCons==0 && db->nDeferredImmCons==0) ,1,0,1
 OE_Ignore==4 && OE_Replace==5 ,1,0,1
 pOp->opcode==OP_Eq || pOp->opcode==OP_Ne ,1,0,1
 TK_LE==TK_GT+1 ,1,0,1
 pCur->eState>=CURSOR_REQUIRESEEK ,1,0,1
params.data_minings >= 0,1,0,1
 p->x.pList==0 || p->pRight==0 ,1,0,1
 TK_CONCAT==OP_Concat ,1,0,1
 p->bDestLocked ,1,0,1
node1->root == -1,1,0,1
 j<pCsr->nSegment && pSeg->iIdx==i ,1,0,1
 aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH ,1,0,1
server->listening == 0,1,0,1
" 0==fts3HashFind(pHash, zToken, nToken) ",1,0,1
 pE->op!=TK_DOT || pRight!=0 ,1,0,1
 p->sharable || p->wantToLock==0 ,1,0,1
 encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE ,1,0,1
 state==PAGER_OPEN || state==PAGER_READER ,1,0,1
 OP_SeekLt==(OP_SeekLe-1) ,1,0,1
 iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 ,1,0,1
 (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 ,1,0,1
 nDestTruncate==0 || (i64)nDestTruncate*(i64)pgszDest >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+pgszDest ),1,0,1
 zBlob==sqlite3_value_blob(argv[0]) ,1,0,1
 pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK ,1,0,1
 pStart!=0 || pEnd!=0 ,1,0,1
 pReader->iCurrentBlock<=pReader->iLeafEndBlock ,1,0,1
 iHeight>=1 && iHeight<128 ,1,0,1
 pExpr->u.zToken!=0 ,1,0,1
SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536,1,0,1
 sizeof(db->aLimit)==sizeof(aHardLimit) ,1,0,1
 HasRowid(pDest) || destHasUniqueIdx ,1,0,1
 i==0 ,1,0,1
 pId2 ,1,0,1
 nDoclist>0 || iDelta==iDocid ,1,0,1
 memIsValid(&aMem[u.am.p2+u.am.idx]) ,1,0,1
 p->aBuffer ,1,0,1
 pExpr->affinity==OE_Rollback || pExpr->affinity==OE_Abort || pExpr->affinity==OE_Fail || pExpr->affinity==OE_Ignore ,1,0,1
 isOpen(pPager->jfd) || pagerUseWal(pPager) ,1,0,1
 pNew->nLTerm<=pNew->nLSlot ,1,0,1
 u.ap.avail<=65536 ,1,0,1
 sqlite3PagerGetData(pPage->pDbPage) == data ,1,0,1
 db->autoCommit==0 || db->nVTrans==0 ,1,0,1
 u-1==LARGEST_INT64 ,1,0,1
 pBt->usableSize > 4 ,1,0,1
 u.cg.apVal || u.cg.n==0 ,1,0,1
 pWInfo->pTabList->nSrc>=1 ,1,0,1
 sqlite3_mutex_held(mem0.mutex) ,1,0,1
 pOrig->flags & EP_Resolved ,1,0,1
 c>=0 ,1,0,1
 zCol ,1,0,1
y + rows <= a->rows,1,0,1
argc == 6,1,0,1
argc == 5,1,0,1
 pParse->nVar==0 ,1,0,1
 pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) ,1,0,1
" !usedAsColumnCache(pParse, i, i+n-1) ",1,0,1
!isnan(scores[j]),1,0,1
 p->xDel!=SQLITE_DYNAMIC ,1,0,1
context->pedestrian && context->car,1,0,1
 to_op==OP_ToText || aff!=SQLITE_AFF_TEXT ,1,0,1
 db->aDb[u.aw.iDb].pBt!=0 ,1,0,1
 pPk || iDataCur==iTabCur ,1,0,1
 pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 ,1,0,1
 p->zText ,1,0,1
 pOp->p4type==P4_COLLSEQ ,1,0,1
bgfiles->rnum > 0,1,0,1
 pSel!=0 ,1,0,1
 pPager->pTmpSpace!=0 ,1,0,1
 p->iDoclistToken<MAX_INCR_PHRASE_TOKENS ,1,0,1
params.detector.interval > 0,1,0,1
 WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH ,1,0,1
 p->pUnlockConnection || p->pBlockingConnection ,1,0,1
 (nByte & 7)==0 ,1,0,1
 memIsValid(&u.bt.r.aMem[i]) ,1,0,1
 memIsValid(&u.bd.r.aMem[i]) ,1,0,1
start_x < detail->cols,1,0,1
 u.bs.pCrsr!=0 ,1,0,1
 pIn3->flags & MEM_Blob ,1,0,1
 pExpr->op!=TK_NOTNULL || op==OP_IsNull ,1,0,1
!isView || pTrigger,1,0,1
 iKey>=0 && iKey<pTab->nCol ,1,0,1
 nDir>0 ,1,0,1
params.track_deform_scale > 0,1,0,1
 N>0 ,1,0,1
 state==pPager->eState ,1,0,1
(iOffset+nAlloc)>mem5.nBlock,1,0,1
 pParse->nested<10 ,1,0,1
pEList != 0 || pSelect != 0 || db->mallocFailed,1,0,1
 opcode==OP_OpenWrite || opcode==OP_OpenRead ,1,0,1
 !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) ,1,0,1
 pSplit->pParent->pRight==pSplit ,1,0,1
validate_list != 0,1,0,1
 !sqlite3IsNaN(value) ,1,0,1
 zName[strlen(zName)+1]==0 ,1,0,1
part_vector->w->rows == other_part_classifier->w->rows && part_vector->w->cols == other_part_classifier->w->cols,1,0,1
 keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY ,1,0,1
 p->pFirst ,1,0,1
 (int)pWal->szPage==szPage ,1,0,1
 p2==p1 ,1,0,1
 u.bv.pC->isOrdered ,1,0,1
 sizeof(*p)==BITVEC_SZ ,1,0,1
 pHdr->pNext->pPrev==pHdr ,1,0,1
 pOp->p4type==P4_FUNCDEF ,1,0,1
 j==nCell ,1,0,1
 pBt->db ,1,0,1
 pBt->autoVacuum==1 || pBt->autoVacuum==0 ,1,0,1
 pPhrase->doclist.bFreeList==0 ,1,0,1
 pFile->locktype>=SHARED_LOCK ,1,0,1
 sizeof(RtreeCoord)==4 ,1,0,1
 TK_BITOR==OP_BitOr ,1,0,1
 sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0 || mem.mutex!=0 ,1,0,1
 rc!=SQLITE_OK || sqlite3_memory_used()==0 ,1,0,1
 (u.ca.pnErr->flags & (MEM_Str|MEM_Blob))==0 ,1,0,1
 ppIdx && *ppIdx==0 ,1,0,1
 pItem->zName==0 ,1,0,1
 pCell!=0 ,1,0,1
 op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE ,1,0,1
 pcache1.nFreeSlot>=0 ,1,0,1
&server->connection_watcher == watcher,1,0,1
positive_count > 0,1,0,1
 u.bn.pModule->xRowid ,1,0,1
imgs2->step == steps[2],1,0,1
 iPos>=0 ,1,0,1
 db == v->db ,1,0,1
 p->pPager==pPager ,1,0,1
 allowedOp(op) ,1,0,1
 db->nDb>iDb ,1,0,1
 TK_OR==OP_Or ,1,0,1
 iA1*iB0==0 || iA0*iB1==0 ,1,0,1
 pFrom->nFree>=iToHdr ,1,0,1
 nArg>=(-1) || createFlag==0 ,1,0,1
 pInode->pNext->pPrev==pInode ,1,0,1
 iTarget>0 ,1,0,1
" hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) ",1,0,1
 pc==u.cd.pFrame->pc ,1,0,1
 u.bd.pC->pseudoTableReg==0 ,1,0,1
request_extras->response.on_release == 0,1,0,1
 PTF_LEAF == 1<<3 ,1,0,1
 nCell<=nMaxCell ,1,0,1
 pExpr->op!=TK_GE || op==OP_Lt ,1,0,1
 pBt->incrVacuum==1 || pBt->incrVacuum==0 ,1,0,1
 sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno ,1,0,1
 u.bv.pC!=0 ,1,0,1
 sqlite3BtreeIsInTrans(u.cj.pBt)==0 ,1,0,1
 pIdx->nColumn>=pIdx->nKeyCol+n ,1,0,1
 TK_GT>TK_EQ && TK_GT<TK_GE ,1,0,1
tG[j] == 0,1,0,1
 p->eType==FTSQUERY_PHRASE || p->pPhrase==0 ,1,0,1
 sizeof(zMagicHeader)==16 ,1,0,1
 (pBt->pageSize & 7)==0 ,1,0,1
 pKeyInfo!=0 ,1,0,1
node->prev == mscr_area->tail,1,0,1
 iFreePg==iLastPg ,1,0,1
 iCol<pTab->nCol ,1,0,1
 eDest==SRT_Output || eDest==SRT_Coroutine ,1,0,1
 (u.al.flags1 & MEM_Cleared)==0 ,1,0,1
 pPage ,1,0,1
 mxReadMark<=pWal->hdr.mxFrame ,1,0,1
 pOp>p->aOp ,1,0,1
 pWInfo->nLevel==nLoop ,1,0,1
 regOld==0 && regNew!=0 ,1,0,1
 pNew ,1,0,1
 u.am.pKeyInfo!=0 ,1,0,1
all_words,1,0,1
pnum > 0,1,0,1
 rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE ,1,0,1
 aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT,1,0,1
 pCsr->nDoclist==0 ,1,0,1
 db->nVdbeRead>=db->nVdbeWrite ,1,0,1
 (PAGER_JOURNALMODE_OFF & 5)!=1 ,1,0,1
 &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet ,1,0,1
 pFree==0 ,1,0,1
 bReadonly==PAGER_GET_READONLY || bReadonly==0 ,1,0,1
 pOp->p4.pVtab!=0 ,1,0,1
 u.be.pC!=0 ,1,0,1
params.alpha_ratio > 0 && params.alpha_ratio < 1,1,0,1
 rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR ,1,0,1
 db->mallocFailed || !pOffset || pLimit ,1,0,1
 pParse->pTriggerTab==0 ,1,0,1
 offset==(i64)ii*(4+pPager->pageSize) ,1,0,1
 WRITE_LOCK>READ_LOCK ,1,0,1
 pNode->n<=pNode->nAlloc ,1,0,1
 pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK ,1,0,1
 pConstraint->pGeom ,1,0,1
 (nByte&0x00000007)==0 ,1,0,1
 *ppMinMax==0 || (*ppMinMax)->nExpr==1 ,1,0,1
 pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR ,1,0,1
 nLeft>0 && nRight>0 ,1,0,1
 p==0 || sqlite3_mutex_held(p->db->mutex) ,1,0,1
watcher == &connection->goodbye_watcher,1,0,1
 pStart==0 ,1,0,1
 pSize!=0 ,1,0,1
 azCols[i]!=0 ,1,0,1
 p->nResColumn==pOp->p2 ,1,0,1
 encnames[SQLITE_UTF8].enc==SQLITE_UTF8 ,1,0,1
" db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",1,0,1
" p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0 || sqlite3GetInt32(p->u.zToken, &rc)==0 ",1,0,1
 pExpr->pLeft ,1,0,1
 p->addrOpenEphm[1] == -1 ,1,0,1
 winSysInfo.dwAllocationGranularity>0 ,1,0,1
 (pPager->eLock==SHARED_LOCK) || (pPager->exclusiveMode && pPager->eLock>SHARED_LOCK) ,1,0,1
a->rows >= 3,1,0,1
 db->mallocFailed==0 || pTab==0 ,1,0,1
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff ,1,0,1
 zPrefix ,1,0,1
" sqlite3SchemaMutexHeld(db, 0, pSchema) ",1,0,1
REMAINING == 0,1,0,1
 p->pNext==0 || p->pNext->pBt>p->pBt ,1,0,1
 pIdx->nSample>0 ,1,0,1
 nTemp>=20 ,1,0,1
 (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 ,1,0,1
 pNC->pSrcList!=0 ,1,0,1
 memIsValid(u.cf.pIn1) ,1,0,1
pDb==&db->aDb[0],1,0,1
 u.az.pX!=0 ,1,0,1
 p1>=0 && p1<(pTab->nCol*2+2) ,1,0,1
 p->sharable ,1,0,1
 u.bp.pC!=0 ,1,0,1
imgs1->step == steps[1],1,0,1
 pName2!=0 || pName1==0 ,1,0,1
 p->op==TK_INTERSECT ,1,0,1
 TRANS_WRITE==pBt->inTransaction ,1,0,1
 pSrc && iFrom>=0 && iFrom<pSrc->nSrc ,1,0,1
 pVTab->nRef>0 ,1,0,1
 pSubSrc ,1,0,1
"SQLITE_OK == sqlite3_prepare_v2(db, layer_params_insert_qs, sizeof(layer_params_insert_qs), &layer_params_insert_stmt, 0)",1,0,1
 !pnLog || *pnLog==-1 ,1,0,1
 sqlite3KeyInfoIsWriteable(pKeyDup) ,1,0,1
 (regOld==0)!=(regNew==0) ,1,0,1
 pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious ,1,0,1
 pSrc->nSrc>0 ,1,0,1
 sqlite3KeyInfoIsWriteable(pInfo) ,1,0,1
" 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) ",1,0,1
 aEntry[0]<key ,1,0,1
 !paiCol || *paiCol==0 ,1,0,1
 sqlite3BtreeHoldsMutex(pBtree) ,1,0,1
label[i] < model->count,1,0,1
 pTab->pVTable==p && p->pNext==0 ,1,0,1
 pTable->aCol==0 ,1,0,1
 scratchAllocOut>=1 && scratchAllocOut<=2 ,1,0,1
 aOp && !p->db->mallocFailed ,1,0,1
 pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE ,1,0,1
rows > 0 && cols > 0,1,0,1
 u.ab.zType!=0 || pOp->p4.z!=0 ,1,0,1
 p->pAuxData==0 ,1,0,1
 db->vtabOnConflict>=1 && db->vtabOnConflict<=5 ,1,0,1
 pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) ,1,0,1
" sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) ",1,0,1
 pCache->bPurgeable || createFlag!=1 ,1,0,1
 pSrcList && pSrcList->nSrc==1 ,1,0,1
 (pDb->safety_level & PAGER_SYNCHRONOUS_MASK)==pDb->safety_level ,1,0,1
 u.bs.pC->deferredMoveto==0 ,1,0,1
 pNew->nOverflow==0 ,1,0,1
 pPager->eState!=PAGER_OPEN ,1,0,1
 pIndex->aiColumn[nColumn-1]==(-1) || !HasRowid(pIndex->pTable),1,0,1
 pFree ,1,0,1
 p->wantToLock==0 && p->locked==0 ,1,0,1
size * (size - 1) / 2 == k,1,0,1
" sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) ",1,0,1
 pExpr->op==TK_COLLATE || pExpr->op==TK_AS ,1,0,1
 pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey ,1,0,1
server->listening,1,0,1
 pSelect->pEList ,1,0,1
 pNC->nRef>=nRef ,1,0,1
 mem3.aPool[i-1].u.hdr.size4x/4==nBlock ,1,0,1
 op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN ,1,0,1
 db!=0 || rc==SQLITE_NOMEM ,1,0,1
 pPager->memDb==0 ,1,0,1
 iCol>=-1 && iCol<32768 ,1,0,1
max_idx >= 0,1,0,1
 nTries==3 ,1,0,1
 sDistinct.isTnct ,1,0,1
 page0 || pWal->writeLock==0 ,1,0,1
 rc!=SQLITE_OK || winMemGetHeap()!=NULL ,1,0,1
 aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN ,1,0,1
 j<=usableSize-4 ,1,0,1
 pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) ,1,0,1
convnet->layers[convnet->count - 1].type == CCV_CONVNET_FULL_CONNECT,1,0,1
 u.bu.pC->deferredMoveto==0 ,1,0,1
 z!=0 || pIndex->aiColumn[i]<0 ,1,0,1
 pOp->p1!=1 ,1,0,1
 pCur->wrFlag ,1,0,1
 u.aj.n==0 || (pOp->p2>0 && pOp->p2+u.aj.n<=(p->nMem-p->nCursor)+1) ,1,0,1
 isPrefix==0 || isScan==0 ,1,0,1
 rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED ,1,0,1
 idx+sz <= (int)pPage->pBt->usableSize ,1,0,1
 ret>0 ,1,0,1
 memIsValid(u.cq.pName) ,1,0,1
 pTab!=0 && pTab->zName!=0 ,1,0,1
 wrFlag==0 || p->inTrans==TRANS_WRITE ,1,0,1
 rc ,1,0,1
 enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE ,1,0,1
 p->pPrev==0 || p->pPrev->pBt<p->pBt ,1,0,1
 u.bi.pC!=0 ,1,0,1
SQLITE_DONE == sqlite3_step(convnet_params_insert_stmt),1,0,1
 pAlias!=0 ,1,0,1
 (pEnd->wtFlags & TERM_VNULL)==0 ,1,0,1
 (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 ,1,0,1
 pKey!=0 || db->mallocFailed || pParse->nErr ,1,0,1
 pParent!=p ,1,0,1
 nVal>=1 ,1,0,1
 pFrom->a[0].pUsing==0 ,1,0,1
 pgsz>0 ,1,0,1
 u.bh.v>0 ,1,0,1
 win_mem_data.magic2==WINMEM_MAGIC2 ,1,0,1
 pPage==p->pDirty ,1,0,1
 pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx ,1,0,1
 !(u.ap.pDest->flags & MEM_Dyn) ,1,0,1
 z && zName ,1,0,1
 pReader->pBlob==0 ,1,0,1
zType[i-1]==' ',1,0,1
 u.cp.pModule->xNext ,1,0,1
 p->noSync ,1,0,1
 pExpr->op!=TK_EQ || op==OP_Ne ,1,0,1
 enc!=0 ,1,0,1
params.nnc_beyond > 0.5 && params.nnc_beyond < 1,1,0,1
 zCsr <= &((char *)p)[nByte] ,1,0,1
 nArg==1 || nArg==(2 + p->nColumn + 3) ,1,0,1
 pDel==0 || pDel->pParent==0 ,1,0,1
 pTrunk!=0 ,1,0,1
 pParse->pVdbe!=0 ,1,0,1
 pPager->ckptSyncFlags==0 ,1,0,1
 rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT || rc==SQLITE_NOMEM || (rc&0xFF)==SQLITE_IOERR ,1,0,1
 mem.pLast==pHdr ,1,0,1
 xtype==etINVALID ,1,0,1
 pPager->nSavepoint>0 ,1,0,1
 pLeft->bStart || pLeft->iDocid==pRight->iDocid ,1,0,1
 isPrepareV2==1 || isPrepareV2==0 ,1,0,1
r0->rows == r1->rows && r0->cols == r1->cols,1,0,1
 pPrior->pRightmost==p->pRightmost ,1,0,1
 isOpen(pPager->sjfd) || pPager->nSubRec==0 ,1,0,1
 pNode->nRef==1 ,1,0,1
 eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK,1,0,1
 ppDb ,1,0,1
 rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff ,1,0,1
 pPager->errCode==SQLITE_FULL || pPager->errCode==SQLITE_OK || (pPager->errCode & 0xff)==SQLITE_IOERR ,1,0,1
 WO_GT==SQLITE_INDEX_CONSTRAINT_GT ,1,0,1
 *pzErrMsg==0 ,1,0,1
 winMemGetOwned() ,1,0,1
 nVal==1 || nVal==2 ,1,0,1
 pMem->flags&MEM_Str ,1,0,1
 srcType==MEM_Ephem || srcType==MEM_Static ,1,0,1
 pCur->iPage>=0 ,1,0,1
 pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER ,1,0,1
 pRight->op==TK_DOT ,1,0,1
 pEList->nExpr==nColumn ,1,0,1
 eFileLock==NO_LOCK ,1,0,1
 !pPgOld || pPgOld->nRef==1 ,1,0,1
 p->rc==SQLITE_OK ,1,0,1
 sqlite3BtreeIsInTrans(pTo)==0 ,1,0,1
sizeof(x)==sizeof(y),1,0,1
 ovflPgno==0 || nOvfl>0 ,1,0,1
 nIncr==1 ,1,0,1
 pPgHdr->pgno==pgno ,1,0,1
 pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey ,1,0,1
 p->pSchema==p->pTabSchema || p->pSchema==pParse->db->aDb[1].pSchema ,1,0,1
 c==0 ,1,0,1
 sz==info.nPayload ,1,0,1
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,1,0,1
 memIsValid(&u.bv.r.aMem[i]) ,1,0,1
imgs0->step == steps[0],1,0,1
 nDestTruncate>0 ,1,0,1
 pgno!=0 || rc==SQLITE_CORRUPT ,1,0,1
 i>=0 && i<db->nDb ,1,0,1
 sqlite3KeyInfoIsWriteable(pKey) ,1,0,1
 addr<p->nOp ,1,0,1
 pColExpr!=0 ,1,0,1
rows == convnet->input.height || cols == convnet->input.width,1,0,1
 v->db->init.busy==0 ,1,0,1
 pEList->a[0].pExpr ,1,0,1
 aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG ,1,0,1
 (pLower->eOperator & (WO_GT|WO_GE))!=0 ,1,0,1
 iPage>0 ,1,0,1
 pOut->flags==MEM_Null ,1,0,1
 db->nStatement>0 ,1,0,1
 !pParent || !pNode->pParent || pNode->pParent==pParent ,1,0,1
 u.bi.pKey->flags & MEM_Int ,1,0,1
"r2 && ""validate-list doesn't exists""",1,0,1
 (pNode->a[0]=='\0')==(aDoclist!=0) ,1,0,1
 pParent==p ,1,0,1
 rc==SQLITE_OK || pList==0 ,1,0,1
 nKeyCol>0 ,1,0,1
 j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) ,1,0,1
 (p->btreeMask & (((yDbMask)1)<<u.az.iDb))!=0 ,1,0,1
 (*ppPage)->pgno==pgno ,1,0,1
pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0 || pVal->db->mallocFailed ,1,0,1
 pVal==0 || pVal->db==db ,1,0,1
"r1 && ""test-list doesn't exists""",1,0,1
 u.bf.pC->isTable==0 ,1,0,1
 pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.aj.n ,1,0,1
offset + i < categorizeds->rnum,1,0,1
 u.az.p2<=(p->nMem-p->nCursor) ,1,0,1
" iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) ",1,0,1
 (pSpace - (u8*)p)==n ,1,0,1
 winMutex_isInit==1 ,1,0,1
 bDescDoclist==0 || bDescDoclist==1 ,1,0,1
 pPage->aData == sqlite3PagerGetData(pPage->pDbPage) ,1,0,1
 (balance_quick_called++)==0 ,1,0,1
 p->aList==&aList[iList&~((2<<iSub)-1)] ,1,0,1
 pIdx->aiColumn[j]>=0 ,1,0,1
 u.bw.iCnt==1 ,1,0,1
channels == CCV_GET_CHANNEL(patch->type),1,0,1
params.track_deform > 0,1,0,1
 piLeaf || piLeaf2 ,1,0,1
 nData==(pRtree->nDim*2 + 3) ,1,0,1
 nCellKey==intKey ,1,0,1
node->prev == er->tail,1,0,1
 pFd->mmapSizeActual>=pFd->mmapSize ,1,0,1
 u.bb.pCx->pKeyInfo->db==db ,1,0,1
" hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) ",1,0,1
 offset>=c ,1,0,1
 p->nRef==0 && p->owner==0 ,1,0,1
 i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 ,1,0,1
 u.au.desiredAutoCommit==1 ,1,0,1
 winMemGetHeap()!=NULL ,1,0,1
 nList<=HASHTABLE_NPAGE && nList>0 ,1,0,1
 EIGHT_BYTE_ALIGNMENT(pNew) ,1,0,1
 sizeof(Pgno)==4 ,1,0,1
 !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) ,1,0,1
feature_size == state->params.feature_size,1,0,1
 u.bv.pC->pCursor!=0,1,0,1
 aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH ,1,0,1
CCV_GET_CHANNEL(r1->type) == CCV_C1 && CCV_GET_DATA_TYPE(r1->type) == CCV_8U,1,0,1
 pOrig!=0 ,1,0,1
 newi > mem3.iMaster+1 ,1,0,1
 pagerUseWal(pPager)==0 || szJ==0 ,1,0,1
 pSub!=0 ,1,0,1
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, p) ",1,0,1
 pOrTerm->u.leftColumn==iColumn ,1,0,1
state->negatives->rsize == state->positives->rsize,1,0,1
 p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal ,1,0,1
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) ,1,0,1
 pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) ,1,0,1
 OP_ShiftRight==OP_ShiftLeft+1 ,1,0,1
 aff1==0 || aff2==0 ,1,0,1
 pName1!=0 ,1,0,1
 (u.ch.pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,1,0,1
 pNode->nRef>0 ,1,0,1
 MX_CELL_SIZE(pBt) >= nCell ,1,0,1
 !pLeft->bDeferred || !pRight->bDeferred ,1,0,1
 zFilename==0 || zFilename[0]=='/' || pVfs->pAppData==(void*)&autolockIoFinder ,1,0,1
 eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK ,1,0,1
 pE->aMI==0 ,1,0,1
tD[k] == 0,1,0,1
 pParent==0 || pParent->pLeft==p ,1,0,1
 SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS ,1,0,1
 zBuffer ,1,0,1
 *ppDb || rc==SQLITE_NOMEM ,1,0,1
 v->aVar[0].flags&MEM_Int ,1,0,1
 start<=iLast ,1,0,1
 db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 ,1,0,1
 u.bj.pC->deferredMoveto==0 ,1,0,1
 u.ap.p2<u.ap.pC->nHdrParsed ,1,0,1
 key>=aEntry[iRes] ,1,0,1
 pLevel->iIdxCur>=0 ,1,0,1
 pTab->nCol==j ,1,0,1
 mem5.currentOut>0 || mem5.currentCount==0 ,1,0,1
box.rect.x + box.rect.width <= a->cols,1,0,1
 pLock->eLock==READ_LOCK || pLock->pBtree==p ,1,0,1
 p->bIgnoreSavepoint==0 ,1,0,1
 pNew->n<=pNew->nAlloc ,1,0,1
 pOp->p5==0 || pOp->p5==1 ,1,0,1
 nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt) && (int)MX_CELL(pPage->pBt)<=10921,1,0,1
params.negative_cache_size <= negnum && params.negative_cache_size > REGQ && params.negative_cache_size > MINI_BATCH,1,0,1
 pCache->szExtra<512 ,1,0,1
size >= SFMT_N32,1,0,1
 SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE ,1,0,1
 pOp->p2>0 && pOp->p2+pOp->p3<=(p->nMem-p->nCursor)+1 ,1,0,1
 (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) ,1,0,1
" DbHasProperty(db, u.bz.iDb, DB_SchemaLoaded) ",1,0,1
CCV_GET_DATA_TYPE(b->type) == CCV_8U || CCV_GET_DATA_TYPE(b->type) == CCV_32S || CCV_GET_DATA_TYPE(b->type) == CCV_64S,1,0,1
 pCache->nRef==0 && pCache->pDirty==0 ,1,0,1
 p==pColl ,1,0,1
 sqlite3PcacheRefCount(pPager->pPCache)>0 ,1,0,1
 p->aData[p->nData]==0 ,1,0,1
 pCursor->pNode==pChild ,1,0,1
 iRight>=nRight || aContent[aRight[iRight]]>dbpage ,1,0,1
 pExpr->pPhrase->iDoclistToken==0 ,1,0,1
 pFree!=0 ,1,0,1
 iIdx<=pParent->nCell ,1,0,1
 pParent->pHaving==0 ,1,0,1
 pTopNC!=0 ,1,0,1
 iReg>0 ,1,0,1
 op!=TK_IN || c==WO_IN ,1,0,1
 pIdx->nColumn>=j ,1,0,1
 pFrom->a[0].pOn==0 ,1,0,1
repeat >= 0,1,0,1
 affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL || affinity==SQLITE_AFF_NUMERIC ,1,0,1
 pNode->block.nAlloc>=p->nNodeSize ,1,0,1
 isDirectMode==0 ,1,0,1
 (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter ,1,0,1
 rc!=SQLITE_ROW && rc!=SQLITE_DONE ,1,0,1
 (pIn3->flags & MEM_Zero)==0 ,1,0,1
 pCsr->isIncrblobHandle ,1,0,1
params.rotation >= 0,1,0,1
 iDb<pParse->db->nDb ,1,0,1
 db->aDb[iDb].pBt!=0 ,1,0,1
old_branch != branch,1,0,1
 CURSOR_FAULT > CURSOR_REQUIRESEEK ,1,0,1
 pTab->nCol>0 ,1,0,1
 !pBt->pWriter ,1,0,1
 pBt && pBt->pPager ,1,0,1
 db->nVdbeActive>=db->nVdbeRead ,1,0,1
 iStart<=pSrc->nSrc ,1,0,1
 pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED ,1,0,1
 to_op==OP_ToReal || aff!=SQLITE_AFF_REAL ,1,0,1
 jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) & SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN ),1,0,1
 d<nMaxCells ,1,0,1
 iParam==STAT_GET_STAT1 ,1,0,1
 pOp[-1].opcode==OP_Integer ,1,0,1
 !db || pRet ,1,0,1
 p->nPgsz>0 || rc!=SQLITE_OK ,1,0,1
 p->pPage==0 ,1,0,1
 u.bn.pC->pCursor!=0 ,1,0,1
 pExpr->op!=TK_LE || op==OP_Gt ,1,0,1
 p1>=0 && p2>=0 ,1,0,1
 TK_MINUS==OP_Subtract ,1,0,1
 pRoot->bStart ,1,0,1
CCV_GET_CHANNEL(mean_activity->type) == channels,1,0,1
 locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK ,1,0,1
 rc==SQLITE_OK || *ppExpr==0 ,1,0,1
 iVersion==1 || iVersion==2 ,1,0,1
 !isOpen(pJournal) ,1,0,1
params.top_n > 0,1,0,1
params.min_eigen > 0,1,0,1
 p->cnt==0 ,1,0,1
 pIdxInfo->idxStr==0 ,1,0,1
 isDeferred==0 || isDeferred==1 ,1,0,1
params.structs > 0,1,0,1
 pPager->pWal==0 && pPager->tempFile==0 ,1,0,1
" sz==cellSize(pPage, idx) ",1,0,1
 pPager->journalMode==PAGER_JOURNALMODE_WAL ,1,0,1
 u.ar.i==u.ar.nByte ,1,0,1
 (pMem->flags & (MEM_Blob|MEM_Str))!=0 ,1,0,1
 pBt->nRef>0 ,1,0,1
 pParse->iCacheLevel>=N ,1,0,1
 p->iGet<p->nSample ,1,0,1
 pRtree->eCoordType==RTREE_COORD_INT32 ,1,0,1
 iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) ,1,0,1
 iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL ,1,0,1
 HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) ,1,0,1
sat->rows == bordered->rows + 1 && sat->cols == bordered->cols + 1,1,0,1
weigh[0] <= aweigh0 + 1e-10 && weigh[1] <= aweigh1 + 1e-10,1,0,1
 pMem->enc!=desiredEnc ,1,0,1
 pgno>0 ,1,0,1
type == 0,1,0,1
 pPrg || pParse->nErr || pParse->db->mallocFailed ,1,0,1
 pExpr->op==TK_FUNCTION ,1,0,1
 nBuf==(nBuf&0x1ffff) ,1,0,1
 pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 ,1,0,1
 k<nNew ,1,0,1
 pIndexedBy!=0 ,1,0,1
 pWal->ckptLock==0 ,1,0,1
 nEntry==idx ,1,0,1
 pNode->pNext==0 ,1,0,1
 p->pDestDb ,1,0,1
 (isTemp & 1)==isTemp ,1,0,1
 u.bq.pCrsr ,1,0,1
(da->type & CCV_32F) || (da->type & CCV_64F),1,0,1
params.new_deform_angle > 0,1,0,1
 p->isTable ,1,0,1
CCV_GET_DATA_TYPE(dvector->type) == CCV_GET_DATA_TYPE(dlambda->type),1,0,1
 pSchema ,1,0,1
 u.br.pC->pCursor ,1,0,1
 pCsr->pFilter==0 ,1,0,1
 *pbFound==0 ,1,0,1
 pCur->iPage>0 ,1,0,1
 pMem->zMalloc ,1,0,1
!CONNECTION_HAS_SOMETHING_TO_WRITE,1,0,1
 pNC ,1,0,1
!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage,1,0,1
 pPager->fullSync==0 ,1,0,1
 pCsr->nTerm==0 ,1,0,1
 pX->op==TK_COLUMN ,1,0,1
 p->flags==PGHDR_MMAP ,1,0,1
 isOpen(pPager->jfd) || pPager->pInJournal==0 ,1,0,1
 inodeList==pInode ,1,0,1
 iOvflSpace <= (int)pBt->pageSize ,1,0,1
 (pTerm->wtFlags & TERM_ORINFO)!=0 ,1,0,1
 pWInfo->untestedTerms ,1,0,1
 EIGHT_BYTE_ALIGNMENT(*ppFrom) ,1,0,1
 WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ ,1,0,1
 iCol==0 ,1,0,1
 u.bd.oc!=OP_SeekLe || u.bd.r.flags==UNPACKED_INCRKEY ,1,0,1
 (pUpper->eOperator & (WO_LT|WO_LE))!=0 ,1,0,1
 PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 ,1,0,1
 iCol<0 || iCol<p->nColumn ,1,0,1
 pPager->errCode || pPager->eState!=PAGER_ERROR ,1,0,1
 u.bg.pCrsr!=0 ,1,0,1
 pRoot->bEof==0 ,1,0,1
 db->init.iDb==0 || db->init.busy ,1,0,1
 u.at.pSavepoint==db->pSavepoint ,1,0,1
 aPragmaNames[mid].ePragTyp==PragTyp_BUSY_TIMEOUT ,1,0,1
 u.az.pKeyInfo->db==db ,1,0,1
isfinite(c),1,0,1
 strlen(argv[0])==4 ,1,0,1
 pTo->db==pFrom->db ,1,0,1
 pFile->pShm==0 ,1,0,1
 u.bz.iDb>=0 && u.bz.iDb<db->nDb ,1,0,1
 *pbFirst || *piPrev==0 ,1,0,1
 pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,1,0,1
 mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock ,1,0,1
 !p || p->iLastDocid<=iDocid ,1,0,1
 bufpt>zOut ,1,0,1
 u.bi.pC->iDb>=0 ,1,0,1
multiscale_cascade[i]->count % multiscale_cascade[i]->octave == 0,1,0,1
 pList==0 || IsVirtual(pTab)==0 ,1,0,1
 pIn1<=&aMem[(p->nMem-p->nCursor)] ,1,0,1
 p->xUnlockNotify ,1,0,1
 resetSchemaOnFault==0 || resetSchemaOnFault==u.bw.iDb+1 ,1,0,1
 rc!=SQLITE_SCHEMA ,1,0,1
gridDim.x == out_cols,1,0,1
 nFarg>=1 ,1,0,1
 (mem5.aCtrl[iBlock] & CTRL_FREE)==0 ,1,0,1
 pWinMemData->bOwned ,1,0,1
 (pList->flags&PGHDR_NEED_SYNC)==0 ,1,0,1
 p->explain==0 ,1,0,1
 sqlite3PagerRefcount(pBt->pPager)==1 ,1,0,1
 u.cn.pCur->pVtabCursor ,1,0,1
 u.cd.pProgram->nOp>0 ,1,0,1
 pcache1.isInit!=0 ,1,0,1
 sqlite3OpcodeProperty[pOut->opcode] & OPFLG_JUMP ,1,0,1
 u.bo.pC!=0 ,1,0,1
 pCtx==0 ,1,0,1
 pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) ,1,0,1
 pParse->pTriggerTab && pParse->pToplevel ,1,0,1
 pOp->p1+pOp->p2<=(p->nMem-p->nCursor)+1 ,1,0,1
 (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 ,1,0,1
 ((u8*)pSpace)-nByte==(u8*)(pIdx->aSample) ,1,0,1
 pcacheCheckSynced(pCache) ,1,0,1
 pCache->nHash>0 && pCache->apHash ,1,0,1
params.nnc_thres > 0.5 && params.nnc_thres < 1,1,0,1
 p->pNext==0 || p->pNext->db==p->db ,1,0,1
z[k + 1] >= db->rows - 1,1,0,1
 u.cd.pProgram->nCsr==u.cd.pFrame->nChildCsr ,1,0,1
 nData+nReq<=pWriter->nSize ,1,0,1
 zData!=0 ,1,0,1
 pagerUseWal(pPager)==0 ,1,0,1
 pCache->nPage==nPage ,1,0,1
 pGroup->nMaxPage >= pCache->nMax ,1,0,1
 !isRowid ,1,0,1
 nKey==0 ,1,0,1
 p->explain ,1,0,1
 pFarg->a[0].pExpr!=0 ,1,0,1
 zTerm && nTerm>0 ,1,0,1
 action==OE_None ,1,0,1
 pPager->mxPgno>=pPager->dbSize ,1,0,1
 pOp->opcode==OP_IdxGE ,1,0,1
 pNew->pInode==NULL ,1,0,1
 pOp->p1<=(p->nMem-p->nCursor) ,1,0,1
 aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH ,1,0,1
 ppStmt ,1,0,1
 n==4-4*pPage->leaf ,1,0,1
 pDbPage->pBt==pBt ,1,0,1
 pFile->locktype==SHARED_LOCK ,1,0,1
 pPage->pLruPrev==0 && pPage->pLruNext==0 ,1,0,1
bdy->rows == a->rows - 1,1,0,1
 pInfo->aReadMark[0]==0 ,1,0,1
 (PAGER_JOURNALMODE_OFF & 5)==0 ,1,0,1
 pSelect!=0 ,1,0,1
 pTab->addColOffset>0 ,1,0,1
 pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 ,1,0,1
 pPager->dbOrigSize<=pPager->dbHintSize ,1,0,1
 pItem->u.x.iOrderByCol>0 && pItem->u.x.iOrderByCol<=p->pEList->nExpr ,1,0,1
 pCsr->nSegment==0 ,1,0,1
 u.am.p2>0 && u.am.p2+mx<=(p->nMem-p->nCursor)+1 ,1,0,1
 get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild ,1,0,1
params.size.width > 0 && params.size.height > 0,1,0,1
 aArg==aDyn || (aDyn==0 && aArg==aStatic) ,1,0,1
 u.ax.pDb->pBt!=0 ,1,0,1
z.pw,1,0,1
 pPager->pWal==0 || rc==SQLITE_OK ,1,0,1
 READ_LOCK+1==WRITE_LOCK ,1,0,1
CCV_GET_DATA_TYPE(b->type) == CCV_32F || CCV_GET_DATA_TYPE(b->type) == CCV_64F,1,0,1
 pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,1,0,1
 db==0 || p->pUnlockConnection!=db ,1,0,1
 eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 ,1,0,1
 TK_LSHIFT==OP_ShiftLeft ,1,0,1
 pLeft->iColumn!=(-1) ,1,0,1
 nLocal<=nKey ,1,0,1
 fd>=0 ,1,0,1
 TK_BITNOT==OP_BitNot ,1,0,1
params.acceptance > 0 && params.acceptance < 1.0,1,0,1
test_size % case_size == 0,1,0,1
 biasRight==0 || biasRight==1 ,1,0,1
 pagerUseWal(p)==0 ,1,0,1
 z[0]!=0 ,1,0,1
 PAGER_JOURNALMODE_MEMORY==4 ,1,0,1
 pSubWInfo || pParse->nErr || db->mallocFailed ,1,0,1
 sqlite3_mutex_held(p->s.db->mutex) ,1,0,1
 nFToken>0 ,1,0,1
 p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol ,1,0,1
hull.x >= 0 && hull.x < a->cols,1,0,1
 0==pCur->pKey ,1,0,1
 pLock->pBtree->inTrans>=pLock->eLock ,1,0,1
 EIGHT_BYTE_ALIGNMENT(sWLB.pNew) ,1,0,1
 (pSubLoop->wsFlags & WHERE_AUTO_INDEX)==0 ,1,0,1
 iType-2 < ArraySize(winMutex_staticMutexes) ,1,0,1
 sqlite3VdbeCurrentAddr(v)==iJump ,1,0,1
 u.am.p1>0 && u.am.p1+u.am.n<=(p->nMem-p->nCursor)+1 ,1,0,1
 pFile->locktype==NO_LOCK ,1,0,1
 (mCovered&mSeen)==mCovered ,1,0,1
point_a->rnum > 0,1,0,1
 p->pSchema!=0 ,1,0,1
 p->iStatement==(db->nStatement+db->nSavepoint) ,1,0,1
"p <= pe && ""buffer overflow after parsing execute""",1,0,1
 pRec!=0 ,1,0,1
 (p->btreeMask & (((yDbMask)1)<<u.bw.iDb))!=0 ,1,0,1
 PAGER_JOURNALMODE_TRUNCATE==3 ,1,0,1
 left<=right ,1,0,1
 mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch ,1,0,1
 pGroup->nMinPage >= pCache->nMin ,1,0,1
 nPrefix<nTerm ,1,0,1
 TK_GE==TK_EQ+4 ,1,0,1
params.validate_set > 0 && params.validate_set < 1,1,0,1
 zColl!=0 ,1,0,1
 pParse->iCacheLevel==0 ,1,0,1
 pBt->nPage>0 ,1,0,1
 pzOrigTab && pzOrigCol ,1,0,1
 SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 ,1,0,1
 pPage->nCell>0 ,1,0,1
 u.bn.pC!=0 ,1,0,1
 pEType!=0 ,1,0,1
 pBt->usableSize>32 ,1,0,1
 cbrk+size<=usableSize && cbrk>=iCellFirst ,1,0,1
 nSize==debuginfo.nSize ,1,0,1
 size>=0 ,1,0,1
 pcache1.nFreeSlot<=pcache1.nSlot ,1,0,1
softmax->rows == category_count && softmax->cols == 1,1,0,1
 iWrite2==0 ,1,0,1
 nKey==1 ,1,0,1
 a ,1,0,1
 useJournal || pPager->tempFile ,1,0,1
gcap > 0,1,0,1
rows <= a[i]->rows && cols <= a[i]->cols,1,0,1
0 <= REMAINING,1,0,1
params.min_area > 100,1,0,1
 u.bt.pC!=0 ,1,0,1
 pbegin>addr ,1,0,1
 !zName || xDel!=SQLITE_DYNAMIC ,1,0,1
 cnt==db->nVdbeActive ,1,0,1
 pOther->szExtra<512 ,1,0,1
 u.bu.pC->isTable==0 ,1,0,1
 (pVal->flags & (MEM_Ephem|MEM_Static))!=0 ,1,0,1
 eStat==SQLITE_DBSTATUS_CACHE_HIT || eStat==SQLITE_DBSTATUS_CACHE_MISS || eStat==SQLITE_DBSTATUS_CACHE_WRITE ,1,0,1
 nTries>1 ,1,0,1
 pPgHdr->pData==pPage->pBuf ,1,0,1
 iStart>=0 ,1,0,1
 EXPR_FULLSIZE<=0xfff ,1,0,1
 p->pRight==0 ,1,0,1
 p->zText!=0 || p->nChar==0 ,1,0,1
 pName1->z ,1,0,1
 pIter ,1,0,1
SQLITE_DONE == sqlite3_step(layer_params_insert_stmt),1,0,1
nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1,1,0,1
params.deform_scale >= 0 && params.deform_scale < 1,1,0,1
 top+nByte <= (int)pPage->pBt->usableSize ,1,0,1
 sizeof(unsigned short)==2 && sizeof(unsigned char)==1 ,1,0,1
 (combined_flags & MEM_RowSet)==0 ,1,0,1
"r0 && ""train-list doesn't exists""",1,0,1
 OP_SeekGt==(OP_SeekGe+1) ,1,0,1
 zFilename==0 || zFilename[0]=='/' ,1,0,1
 43==sqlite3LogEst(20) ,1,0,1
active_count > 0,1,0,1
 pPager->eLock>=eLock ,1,0,1
 (pVal->flags & MEM_RowSet)==0 ,1,0,1
 (pIdxKey==0)==(pCur->pKeyInfo==0) ,1,0,1
"0 && ""ccv_scd_classifier_cascade_new requires GSL library and support""",1,0,1
" pCol->affinity==SQLITE_AFF_NONE || pCol->affinity==sqlite3AffinityType(zType, 0) ",1,0,1
 chngRowid==0 || chngRowid==1 ,1,0,1
params.track_deform_shift > 0,1,0,1
 nWrite==db->nVdbeWrite ,1,0,1
PROXY_HOSTIDLEN == sizeof(uuid_t),1,0,1
 !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 ,1,0,1
 p->bHasStat==p->bFts4 ,1,0,1
 pOld==pIndex || pOld==0 ,1,0,1
 pPager->journalMode==PAGER_JOURNALMODE_DELETE || pPager->journalMode==PAGER_JOURNALMODE_MEMORY || pPager->journalMode==PAGER_JOURNALMODE_WAL ,1,0,1
 pCsr->nRowAvg>0 ,1,0,1
v->id >= 0 && v->id < model->count,1,0,1
 *pp==pId ,1,0,1
params.iterations >= 0,1,0,1
 idx>=0 && idx<pPage->nCell ,1,0,1
 z[i] ,1,0,1
 memIsValid(&u.bf.r.aMem[i]) ,1,0,1
 pPgOld ,1,0,1
 (p->selFlags & SF_Expanded)!=0 ,1,0,1
 regRow!=pDest->iSdst+i ,1,0,1
 pPager->eState==PAGER_READER || pPager->eState==PAGER_OPEN || pPager->eState==PAGER_ERROR ,1,0,1
 (piTab==0)==(piCol==0) ,1,0,1
 eDest==SRT_Discard ,1,0,1
 *pRc || pNode->block.nAlloc==0 ,1,0,1
 u.br.pC!=0 ,1,0,1
 p->owner==tid ,1,0,1
dtheta && dm,1,0,1
 iValue>=0 ,1,0,1
 p && p->pPrior ,1,0,1
 pOut->flags & MEM_Dyn ,1,0,1
!pExpr,1,0,1
 regChng==(regStat4+1) ,1,0,1
 isSavepnt || pDone==0 ,1,0,1
 pOp->p4.ai ,1,0,1
 allowedOp(pExpr->op) && pExpr->op!=TK_IN ,1,0,1
 (h>='0' && h<='9') || (h>='a' && h<='f') || (h>='A' && h<='F') ,1,0,1
pX->pLeft,1,0,1
b->cols > 0 && b->step > 0,1,0,1
 pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext ,1,0,1
 sqlite3PagerIswriteable(pNew->pDbPage) ,1,0,1
 u.be.pC->isTable ,1,0,1
 p->usesStmtJournal ,1,0,1
 pDb!=0 ,1,0,1
 nBytes>0 ,1,0,1
 pNextTo->pPrevTo==0 ,1,0,1
 nArg>=(-2) ,1,0,1
 errcode!=SQLITE_OK ,1,0,1
 (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 ,1,0,1
 ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 ,1,0,1
 pPgHdr->pExtra==(void *)&pPgHdr[1] ,1,0,1
 flags==EXPRDUP_REDUCE || flags==0 ,1,0,1
 pTableName->nSrc==1 ,1,0,1
 iDb>=2 ,1,0,1
 isIgnoreErrors==0 || (regOld!=0 && regNew==0) ,1,0,1
 u.bt.pC->deferredMoveto==0 ,1,0,1
 j+1 < ArraySize(apCopy) ,1,0,1
n == _n,1,0,1
 p->eLock>=EXCLUSIVE_LOCK ,1,0,1
 sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff ,1,0,1
 pInfo->nBackfill==pWal->hdr.mxFrame ,1,0,1
 u.ba.pKeyInfo->db==db ,1,0,1
(CCV_GET_CHANNEL(a->type) == CCV_C1) && ((a->type & CCV_8U) || (a->type & CCV_32S) || (a->type & CCV_64S)),1,0,1
 (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 ,1,0,1
 pParent->pParent==0 || pParent->pParent->pLeft==pParent ,1,0,1
 (u32)n==pLoop->u.btree.nEq ,1,0,1
 MAX_SECTOR_SIZE>=512 ,1,0,1
 rc==SQLITE_OK || pFile->pMethods==0 ,1,0,1
 (pExpr->iTable&0x0000FFFF)==pExpr->iTable ,1,0,1
 (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree ,1,0,1
 iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) ,1,0,1
 count>=0 ,1,0,1
 yyact == YY_ERROR_ACTION ,1,0,1
 iCol>=0 && iCol<pEList->nExpr ,1,0,1
 p2==0 ,1,0,1
 pParse->cookieGoto==0 || pParse->cookieGoto==-1 ,1,0,1
 pNew->nLSlot>=nConstraint ,1,0,1
 pExpr->bEof==0 ,1,0,1
 !winMemGetOwned() ,1,0,1
 u.bj.pC->pCursor!=0 ,1,0,1
 (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) || zUtf8Name[sqlite3Strlen30(zUtf8Name)+1]==0 ,1,0,1
 u.br.pC->deferredMoveto==0 ,1,0,1
 pOp->p4.pI64!=0 ,1,0,1
 isDelete && !isOpenJournal ,1,0,1
 pOp->p1<p->nOnceFlag ,1,0,1
 pIter->pFile ,1,0,1
 db->aDb[i].zName ,1,0,1
 mxSafeFrame==pWal->hdr.mxFrame ,1,0,1
 n>5 && n<=9 ,1,0,1
 db->flags&SQLITE_CountRows ,1,0,1
 u<=pKeyInfo->nField + 1 ,1,0,1
 idx>=1 && idx<=15 ,1,0,1
 zSql!=0 ,1,0,1
 p->bIsReader!=0 || p->btreeMask==0 ,1,0,1
 (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE) && (iHash>=1 || iFrame<=HASHTABLE_NPAGE_ONE) && (iHash<=1 || iFrame>(HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE)) && (iHash>=2 || iFrame<=HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE) && (iHash<=2 || iFrame>(HASHTABLE_NPAGE_ONE+2*HASHTABLE_NPAGE)) ,1,0,1
 (nBytes&(nBytes-1))==0 ,1,0,1
 memIsValid(u.cn.pQuery) ,1,0,1
 rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE ,1,0,1
 PAGER_LOCKINGMODE_QUERY<0 ,1,0,1
uPattern!=0,1,0,1
"k == positives->rnum + negatives->rnum - 1, !skip",1,0,1
BtCursor *pCur,1,0,1
 OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 ,1,0,1
"0 <= r && ""Setting socket non-block failed!""",1,0,1
 pWal->exclusiveMode==0 ,1,0,1
 pOffset==0 || pLimit!=0 ,1,0,1
 mem3.szMaster>=nBlock ,1,0,1
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)==0 ,1,0,1
 pNew->u.btree.nEq<=pProbe->nKeyCol ,1,0,1
 db->nProgressOps!=0 ,1,0,1
 op!=TK_LT || c==WO_LT ,1,0,1
 z<=zTerm ,1,0,1
 1==sqlite3BtreeIsInTrans(pMain) ,1,0,1
 nNew<=pFd->mmapSizeMax ,1,0,1
 p->isEof==0 ,1,0,1
ch > 0,1,0,1
 sqlite3_mutex_held(pBt->db->mutex) ,1,0,1
 pIdx->nKeyCol==1 ,1,0,1
" i==0 || sqlite3VdbeRecordCompare(aSample[i-1].n, aSample[i-1].p, pRec)<0 || pParse->db->mallocFailed ",1,0,1
 (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len ,1,0,1
 pBlob->pStmt || db->mallocFailed ,1,0,1
 sqlite3BtreeIsInTrans(u.av.pBt) ,1,0,1
 n==0 ,1,0,1
 TK_LE>TK_EQ && TK_LE<TK_GE ,1,0,1
 sqlite3PagerIswriteable(pBt->pPage1->pDbPage) ,1,0,1
 desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE || desiredEnc==SQLITE_UTF16BE ,1,0,1
 j+nStr-i+1==nOut ,1,0,1
 pItem && pSrc->nSrc==1 ,1,0,1
pParse->nTab==1,1,0,1
 sqlite3_mutex_held(p->pGroup->mutex) ,1,0,1
 sqlite3BtreeCursorIsValid(u.bh.pC->pCursor) ,1,0,1
parser->resource == s_param_start,1,0,1
p->iSize<=p->nBuf,1,0,1
 p->iTable>=0 ,1,0,1
 (rc&0xff)!=SQLITE_BUSY ,1,0,1
parser->body == s_param_start,1,0,1
 p->pTabSchema!=0 ,1,0,1
 *pRc || pNode->key.nAlloc==0 ,1,0,1
total_recall < truth->rnum + 0.1,1,0,1
 pExpr->pRight==0 ,1,0,1
 SLOT_2_0 == ((0x7f<<14) | (0x7f)) ,1,0,1
 pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE ,1,0,1
 op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE ,1,0,1
 op!=TK_GE || c==WO_GE ,1,0,1
 pNew->anEq[pNew->iCol]>0 ,1,0,1
 p->pEList!=0 ,1,0,1
 p->iForeGuard==(int)FOREGUARD ,1,0,1
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE || nNumberOfBytesToUnlockLow == 1,1,0,1
 i+size<=usableSize ,1,0,1
 sqlite3BtreeHoldsMutex(p->pSrc) ,1,0,1
 rc==SQLITE_OK || db->nDeferredCons>0 || db->nDeferredImmCons>0 ,1,0,1
 nOut==0 || rc==SQLITE_OK ,1,0,1
 seenVar ,1,0,1
" (x = va_arg(ap,int))!=0 ",1,0,1
params.new_deform > 0,1,0,1
"0 && ""You need a BLAS compatible library for this function, e.g. libatlas.""",1,0,1
 pMem->enc!=0 ,1,0,1
 ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint ,1,0,1
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)!=0 ,1,0,1
 y<=pWal->hdr.mxFrame ,1,0,1
 pInfo->estimatedCost>1000000.0 ,1,0,1
 u.bm.pC!=0 ,1,0,1
 isSorter(u.bs.pC)==(pOp->opcode==OP_SorterInsert) ,1,0,1
 pSorter->pUnpacked==(UnpackedRecord *)d ,1,0,1
 pMinMax==0 || pMinMax->nExpr==1 ,1,0,1
 u.bf.pC!=0 ,1,0,1
rows > 0 && cols > 0 && scanline > 0,1,0,1
 eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF ,1,0,1
" 0==sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec) || pParse->db->mallocFailed ",1,0,1
 var<COLNAME_N ,1,0,1
 iPage==0 || *ppPage || rc!=SQLITE_OK ,1,0,1
 !pTable || pTable->nRef>0 ,1,0,1
 WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE ,1,0,1
 pPk->nColumn==j ,1,0,1
 pRec->nField>0 && iCol<pIdx->nSampleCol ,1,0,1
" sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) ",1,0,1
 pLoop->aLTermSpace==pLoop->aLTerm ,1,0,1
 op==TK_CASE ,1,0,1
" pCur->apPage[pCur->iPage-1], pCur->aiIdx[pCur->iPage-1], pCur->apPage[pCur->iPage]->pgno ",1,0,1
 (pVal->flags&MEM_Blob)==0 ,1,0,1
 u.bz.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bz.iDb].pBt) ,1,0,1
 memIsValid(&aMem[pOp->p2]) ,1,0,1
 PAGER_JOURNALMODE_DELETE==0 ,1,0,1
 u.bf.pC->pCursor!=0 ,1,0,1
categorized->c < category_count && categorized->c >= 0,1,0,1
" pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, pParse->azVar[pExpr->iColumn-1])==0 ",1,0,1
" walFramePgno(pWal, iFrame)!=1 ",1,0,1
(size_t)nBuf>=(sizeof(time_t)+sizeof(int)),1,0,1
 iDelta>0 || (nDoclist==0 && iDelta==iDocid) ,1,0,1
watcher == &connection->write_watcher,1,0,1
 zFile[0]!=0 ,1,0,1
 nByte>=0 ,1,0,1
" sqlite3ExprIsInteger(pE, &i)==0 ",1,0,1
gridDim.y == out_rows,1,0,1
 p->pgno>0 ,1,0,1
 get2byteNotZero(&data[hdr+5])==nUsable ,1,0,1
" !ExprHasProperty(p, EP_MemToken) ",1,0,1
" countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE ",1,0,1
 pParse->nErr==0 || rc ,1,0,1
 u.bi.pData->flags & (MEM_Blob|MEM_Str) ,1,0,1
 z[0]=='?' ,1,0,1
 (p->btreeMask & (((yDbMask)1)<<u.aw.iDb))!=0 ,1,0,1
 (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 ,1,0,1
 p->iPrevDocid==*pRowid ,1,0,1
 pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) ,1,0,1
 pBlob==sqlite3_value_blob(argv[0]) ,1,0,1
 p->pPrev==0 || p->pPrev->db==p->db ,1,0,1
 wctrlFlags & WHERE_ONEPASS_DESIRED ,1,0,1
 (u.ca.pnErr->flags & MEM_Int)!=0 ,1,0,1
 zAff==0 || (int)strlen(zAff)>=nEq ,1,0,1
 pTab && !pTab->pSelect && pExpr ,1,0,1
 iIdxCur!=0 || (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 ,1,0,1
 !pBt->pCursor ,1,0,1
 pE->pLeft!=0 ,1,0,1
 pIdx->onError!=OE_None ,1,0,1
 (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 ,1,0,1
 rc==SQLITE_OK || iHash>0 ,1,0,1
 pItem->isCorrelated==0 && nRef<=0 ,1,0,1
 (u.cn.pQuery->flags&MEM_Int)!=0 && u.cn.pArgc->flags==MEM_Int ,1,0,1
 nExtra>=1 ,1,0,1
 pCol->affinity-SQLITE_AFF_TEXT >= 0 ,1,0,1
 p->eType==FTSQUERY_AND ,1,0,1
 (u.ag.pMem[u.ag.i].flags & MEM_Ephem)==0 || (u.ag.pMem[u.ag.i].flags & (MEM_Str|MEM_Blob))==0 ,1,0,1
tops <= softmax->cols,1,0,1
 pColl ,1,0,1
 pPage->pDirtyNext || pPage==p->pDirtyTail ,1,0,1
 pIx->pSchema==pTab->pSchema ,1,0,1
 pExpr->pTab && j<pExpr->pTab->nCol ,1,0,1
 cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) ,1,0,1
 nTemp==0 ,1,0,1
 db->nStatement>=0 && db->nSavepoint>=0 ,1,0,1
 sqlite3_mutex_held(p->pBt->mutex) ,1,0,1
 (pPg->flags&PGHDR_NEED_SYNC)==0 ,1,0,1
 pBt->nTransaction>0 ,1,0,1
 db->nVdbeWrite>=0 ,1,0,1
 pRight==0 || p->zMalloc==0 ,1,0,1
 nExtra<1000 ,1,0,1
 pLater->sharable ,1,0,1
 pTerm->eOperator & WO_OR ,1,0,1
 !pLater->locked || pLater->wantToLock>0 ,1,0,1
 MEM_Str==(MEM_Blob>>3) ,1,0,1
 pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage ,1,0,1
 pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage ,1,0,1
x + cols <= a->cols,1,0,1
 SizeofArray(azSql)==SizeofArray(p->aStmt) ,1,0,1
 *p2!=POS_END && *p2!=POS_COLUMN ,1,0,1
 isMainJrnl || pDone ,1,0,1
 sqlite3_value_type(argv[1])==SQLITE_NULL || sqlite3_context_db_handle(context)->mallocFailed ,1,0,1
 pTable->pSchema==pTrigger->pSchema || iDb==1 ,1,0,1
 iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) ,1,0,1
 pIndex->onError!=OE_None ,1,0,1
 pOp->opcode==OP_OpenRead || p->readOnly==0 ,1,0,1
CCV_GET_CHANNEL(a->type) == count,1,0,1
 ConstFactorOk(pParse) ,1,0,1
 u.aj.apVal || u.aj.n==0 ,1,0,1
 checkSavepointCount(db) ,1,0,1
 locktype<=SHARED_LOCK ,1,0,1
 createFlag==1 || createFlag==0 ,1,0,1
 *pnOut<=n1+n2+FTS3_VARINT_MAX-1 ,1,0,1
 pPk->tnum=pTab->tnum ,1,0,1
 p->op==TK_UNION ,1,0,1
 pExpr->eType==FTSQUERY_PHRASE ,1,0,1
 pRoot->nOverflow>0 ,1,0,1
 !pReader->pOffsetList ,1,0,1
 k<=n ,1,0,1
 p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK ,1,0,1
pArg->z < p->z,1,0,1
 p->pSrc!=0 ,1,0,1
params.alpha > 0 && params.alpha < 1,1,0,1
params.nnc_collect >= 0.5 && params.nnc_collect < 1,1,0,1
"0 && ""ccv_icf_classifier_cascade_new requires GSL library support""",1,0,1
 pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) ,1,0,1
a->cols > 0 && cols0 > 0,1,0,1
 zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' ,1,0,1
 n<=9 ,1,0,1
 pCur->apPage[pCur->iPage]->leaf ,1,0,1
posex[i]->rnum == posex[i + 1]->rnum && negex[i]->rnum == negex[i + 1]->rnum,1,0,1
 p->pLimit==0 ,1,0,1
nKey==elem->nKey,1,0,1
 csr.nSegment>0 ,1,0,1
 *p==0 ,1,0,1
 pRec->pKeyInfo->enc==ENC(db) ,1,0,1
z.nw,1,0,1
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 ,1,0,1
 db->aDb[iDb].pBt!=0 || iDb==1 ,1,0,1
(*a)->cols == convnet->cols,1,0,1
 pInode->pPrev->pNext==pInode ,1,0,1
 pListItem->pExpr->op==TK_COLLATE ,1,0,1
 pOut->zMalloc==pOut->z ,1,0,1
 pVfs!=0 ,1,0,1
 sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 ,1,0,1
context->image_net[1].words,1,0,1
 pParse->pNewTable==pTab ,1,0,1
" !ExprHasProperty(pE, EP_xIsSelect) ",1,0,1
 leafCorrection==0 ,1,0,1
 pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 ,1,0,1
 n>0 && tokenType!=TK_ILLEGAL ,1,0,1
 i > mem3.aPool[i-1].u.hdr.prevSize ,1,0,1
 pRec->pKeyInfo->nField+pRec->pKeyInfo->nXField==nCol ,1,0,1
 rc==SQLITE_OK || sCur.n==0 ,1,0,1
 pKeyInfo->nField+pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB ,1,0,1
box.rect.y + box.rect.height <= a->rows,1,0,1
 rc!=SQLITE_OK || ( pPhrase->pList==0 && pPhrase->pHead==0 && pPhrase->pTail==0 ),1,0,1
 !pSelect && pCons && pEnd ,1,0,1
 p->pParent && p->pParent->pLeft==p ,1,0,1
 u.bm.pC->pseudoTableReg==0 ,1,0,1
 iLimit>0 ,1,0,1
 nDb>0 ,1,0,1
 pParent->nOverflow==0 || pParent->nOverflow==1 ,1,0,1
 pItem->pExpr->pLeft==pE ,1,0,1
 pWriter->zTerm==pWriter->zMalloc ,1,0,1
 rc!=SQLITE_OK || a[p->nToken-1].bIgnore==0 ,1,0,1
 (pDest->tabFlags & TF_Autoincrement)==0 ,1,0,1
start_y < detail->rows,1,0,1
v->root.w->rows == root_classifier->root.w->rows && v->root.w->cols == root_classifier->root.w->cols,1,0,1
 p->nData<p->nSpace ,1,0,1
"0 && ""ccv_write requires libpng support for PNG format""",1,0,1
 iHeight>=0 ,1,0,1
pEList == 0 || pSelect == 0,1,0,1
 rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) ,1,0,1
 yyact == YYNSTATE + YYNRULE + 1 ,1,0,1
 (new_size & (new_size-1))==0 ,1,0,1
 r2->nField>0 ,1,0,1
 fd>2 ,1,0,1
 pList->a!=0 || pList->nExpr==0 ,1,0,1
 !pReader->pBlob || (pFrom>=pReader->aNode && pFrom<&pReader->aNode[pReader->nNode]) ,1,0,1
 iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) ,1,0,1
 rc==SQLITE_ERROR ,1,0,1
 pc>=iCellFirst && pc<=iCellLast ,1,0,1
 pPrior ,1,0,1
 pPg->pgno!=PAGER_MJ_PGNO(pPager) ,1,0,1
u.cm.pVtab && u.cm.pModule,1,0,1
 id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) ,1,0,1
 !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) ,1,0,1
 iTrigDb==iDb || iTrigDb==1 ,1,0,1
 pOp->p3<=u.bh.pFrame->nMem ,1,0,1
 len==sqlite3_value_bytes(argv[0]) ,1,0,1
max_point.x - min_point.x > 1 && max_point.y - min_point.y > 1,1,0,1
 u.bd.pC->pCursor!=0 ,1,0,1
fsz % 2 == 1,1,0,1
params.new_deform_scale > 0,1,0,1
 pLoop->u.btree.nSkip==0 ,1,0,1
 aData ,1,0,1
" !ExprHasProperty(pColExpr, EP_IntValue) ",1,0,1
 cbrk>=iCellFirst ,1,0,1
 pPage->iKey==iOld ,1,0,1
 fg&(MEM_Int|MEM_Real) ,1,0,1
 !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize ,1,0,1
 u.am.p2>0 && u.am.p2+u.am.n<=(p->nMem-p->nCursor)+1 ,1,0,1
 (pPager->eLock>=locktype) || (pPager->eLock==NO_LOCK && locktype==SHARED_LOCK) || (pPager->eLock==RESERVED_LOCK && locktype==EXCLUSIVE_LOCK) ,1,0,1
(dx == 1 && dy == 0) || (dx == 0 && dy == 1) || (dx * dy == 1) || (dx * dy == -1),1,0,1
bdxy->rows == a->rows - 1 && bdxy->cols == a->cols - 1,1,0,1
 memIsValid(u.bi.pKey) ,1,0,1
 p->bIncr==1 ,1,0,1
 pCsr->aMatchinfo ,1,0,1
 j==0 || j>i+size ,1,0,1
 pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage ,1,0,1
 pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) ,1,0,1
 yy_lookahead[i]==iLookAhead ,1,0,1
 pExpr->op!=TK_NE || op==OP_Eq ,1,0,1
s > 0,1,0,1
 db->mallocFailed || pItem->pExpr==pSpan->pExpr ,1,0,1
 (nMap % winSysInfo.dwPageSize)==0 ,1,0,1
 pSrc->a!=0 ,1,0,1
 !pPrior->pLimit ,1,0,1
 (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 ,1,0,1
 iCol>=0 && iCol<pTab->nColumn ,1,0,1
 !pTrigger ,1,0,1
 sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) ,1,0,1
i >= 0 && i < 2048,1,0,1
 (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 ,1,0,1
 pOp->p5<db->nDb ,1,0,1
 pbegin <= (int)pPage->pBt->usableSize-4 ,1,0,1
 next==0 || rc==SQLITE_DONE ,1,0,1
 mask==-1 || mask==0 ,1,0,1
 db->aDb[iDb].pSchema ,1,0,1
x->rows == rows && x->cols == cols && (CCV_GET_DATA_TYPE(x->type) & types) && (CCV_GET_CHANNEL(x->type) == CCV_GET_CHANNEL(types)),1,0,1
 p->pParent==0 || p->pParent->pLeft==p ,1,0,1
z.s,1,0,1
 memIsValid(&aMem[u.am.p1+u.am.idx]) ,1,0,1
 p->pExtra==(void *)&p[1] ,1,0,1
 i==pIndex->nColumn ,1,0,1
 pWC->op==TK_AND ,1,0,1
 rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) ,1,0,1
 u.bj.pC->iDb>=0 ,1,0,1
 zSrcData ,1,0,1
" strcmp(pDb->zName,""vacuum_db"")==0 ",1,0,1
"!""Unexpected return value from ucol_strcoll()""",1,0,1
 pMaskSet->n < ArraySize(pMaskSet->ix) ,1,0,1
 nNew==1 ,1,0,1
 pList!=0 || pParse->db->mallocFailed!=0 ,1,0,1
 pCsr->aDoclist==0 ,1,0,1
posv[i]->id >= 0 && posv[i]->id < model->count,1,0,1
pPgnoNext,1,0,1
 !db->init.busy || !pSelect ,1,0,1
 !p->pGroupBy ,1,0,1
"cascade && ""classifier cascade doesn't exists""",1,0,1
(type & 0xFF) != CCV_IO_DEFLATE_STREAM,1,0,1
 cnt==(cnt&0x1ffff) ,1,0,1
CCV_GET_CHANNEL(convnet->mean_activity->type) == convnet->channels,1,0,1
 pExpr->x.pList==0 ,1,0,1
 sqlite3PagerPageRefcount(pData)>0 ,1,0,1
 i<=usableSize-4 ,1,0,1
 v->expired==0 ,1,0,1
 pgnoRoot>=3 ,1,0,1
 zMaster[sqlite3Strlen30(zMaster)-3]=='9' ,1,0,1
 szExtra < 300 ,1,0,1
 p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE ,1,0,1
 pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) ,1,0,1
 pOp->opcode==OP_OpenWrite || pOp->p5==0 ,1,0,1
 nKey==(i64)(int)nKey ,1,0,1
 aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP ,1,0,1
 eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) ,1,0,1
 desiredEnc==SQLITE_UTF16BE ,1,0,1
 pIter->aAlloc==0 ,1,0,1
 pFrom->zErrMsg==0 || pFrom->nErr ,1,0,1
 pVdbe!=0 ,1,0,1
 p->op==SQLITE_INDEX_CONSTRAINT_MATCH ,1,0,1
 p->nToken<=MAX_INCR_PHRASE_TOKENS ,1,0,1
 p->lock.pBtree==p && p->lock.iTable==1 ,1,0,1
 u.cp.pCur->pVtabCursor ,1,0,1
 pBuilder->nRecValid==nRecValid ,1,0,1
 db->nVdbeActive>0 ,1,0,1
(pg1+nPage)>pPg->pgno,1,0,1
 pIdx->isResized==0 ,1,0,1
 p->current.anEq[i] ,1,0,1
 pCur->apPage[pCur->iPage] ,1,0,1
 p->pEList->a[0].pExpr!=0 ,1,0,1
 pList!=0 || db->mallocFailed!=0 ,1,0,1
 nString==0 ,1,0,1
 pLock->iTable!=1 || pLock==&p->lock ,1,0,1
 pCache->n90pct == pCache->nMax*9/10 ,1,0,1
 rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 ,1,0,1
 pIn!=0 ,1,0,1
 rc!=SQLITE_BUSY ,1,0,1
 p->nMem>9 ,1,0,1
 TK_NOT==OP_Not ,1,0,1
 rc!=SQLITE_OK || *ppTok ,1,0,1
 (pNew->wsFlags & WHERE_TOP_LIMIT)==0 ,1,0,1
 db->mallocFailed || pParse->nErr>0 || pParse->iCacheLevel==iCacheLevel ,1,0,1
 regRowid==(regStat4+2) ,1,0,1
iStart<=iEnd,1,0,1
 pDest->pTable!=pSrc->pTable ,1,0,1
 OP_SeekGe==(OP_SeekGt-1) ,1,0,1
 zVal[nVal]=='\'' ,1,0,1
my == 0,1,0,1
 (pPg->flags & PGHDR_MMAP)==0 ,1,0,1
 pPage == sqlite3PagerGetExtra(pPage->pDbPage) ,1,0,1
 bBulk==0 || bBulk==1 ,1,0,1
 pFrom->isInit ,1,0,1
 rc!=0 ,1,0,1
 iStatement>p->db->nSavepoint ,1,0,1
negative_cache_size == _negative_cache_size,1,0,1
 tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER ,1,0,1
 iFromCol>=0 ,1,0,1
 sqlite3_value_type(argv[1])!=SQLITE_NULL ,1,0,1
 CURSOR_VALID==pCur->eState ,1,0,1
 pCache->nMin==0 || pCache->bPurgeable ,1,0,1
 azResult!=0 ,1,0,1
 u.ap.pCrsr!=0 || u.ap.pC->pseudoTableReg>0 ,1,0,1
 p->eLock!=PENDING_LOCK ,1,0,1
scan >= 0 && scan < convnet->count,1,0,1
a->cols >= 3,1,0,1
 pPg || !MEMDB ,1,0,1
 pOld->hdrOffset==0 ,1,0,1
 !sqlite3IsNaN(*pOp->p4.pReal) ,1,0,1
 mem.pFirst==pHdr ,1,0,1
 u.aq.zAffinity!=0 ,1,0,1
 u.cq.pName->flags & MEM_Str ,1,0,1
 p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed ,1,0,1
 WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 ,1,0,1
 rc==SQLITE_OK || pPager->eState==PAGER_READER ,1,0,1
 pTC ,1,0,1
params.percentile_breakdown > 0 && params.percentile_breakdown <= 1,1,0,1
 aiCol[i]!=pTab->iPKey ,1,0,1
 argc==3 || argc==2 ,1,0,1
bdx->cols == a->cols - 1,1,0,1
 n==pPage->pgno && e==PTRMAP_OVERFLOW1 ,1,0,1
 p && p->pMem && p->pFunc && p->pFunc->xStep ,1,0,1
 (p->selFlags & SF_NestedFrom)==0 || ((flags & SQLITE_FullColNames)==0 && (flags & SQLITE_ShortColNames)!=0) ,1,0,1
 pOp->p3>=0 ,1,0,1
 (&p[1])==pEnd || p[0].db==p[1].db ,1,0,1
 !isSavepnt ,1,0,1
 memIsValid(&u.ag.pMem[u.ag.i]) ,1,0,1
 pParse->nErr>0 || pFK==0 ,1,0,1
 pB!=0 ,1,0,1
 pOp->opcode!=OP_PrevIfOpen || pOp->p4.xAdvance==sqlite3BtreePrevious,1,0,1
 pOp->p2==1 || pOp->p5==OE_Fail || pOp->p5==OE_Rollback || pOp->p5==OE_Abort || pOp->p5==OE_Ignore || pOp->p5==OE_Replace ,1,0,1
 pMatch->iCursor==pExpr->iTable ,1,0,1
 zAbsoluteName[0]=='/' ,1,0,1
 u.az.nField>=0 ,1,0,1
structs > 0 && features > 0 && scales > 0,1,0,1
 j<pPk->nColumn ,1,0,1
 pbOpen==0 || *pbOpen==0 ,1,0,1
 memIsValid(u.bi.pData) ,1,0,1
" !ExprHasProperty(pE->pLeft, EP_IntValue) ",1,0,1
 ppStmt && *ppStmt==0 ,1,0,1
 u.bd.pC->isOrdered ,1,0,1
 TK_AND==OP_And ,1,0,1
 u.bu.pC!=0 ,1,0,1
 eType!=PTRMAP_ROOTPAGE ,1,0,1
 TK_GE==TK_LE+2 ,1,0,1
hfz > 0,1,0,1
 pParse->nzVar==0 ,1,0,1
" !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) ",1,0,1
 (chngRowid & chngPk)==0 ,1,0,1
 szNew <= MX_CELL_SIZE(pBt) ,1,0,1
 q - (unsigned char *)p <= FTS3_VARINT_MAX ,1,0,1
" !ExprHasProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) ",1,0,1
 p->flags&PGHDR_DIRTY ,1,0,1
 rc!=SQLITE_OK || pPhrase->bIncr==0 ,1,0,1
params.min_forward_backward_error > 0,1,0,1
 !(u.ap.pDest->flags & (MEM_Blob|MEM_Str)) || u.ap.pDest->z==u.ap.sMem.z ,1,0,1
 pItem->pExpr->op==TK_COLLATE ,1,0,1
 u.bv.pC->deferredMoveto==0 ,1,0,1
 pPager->journalMode==PAGER_JOURNALMODE_OFF || pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,1,0,1
 u.am.p1>0 && u.am.p1+mx<=(p->nMem-p->nCursor)+1 ,1,0,1
 iScore>=0 ,1,0,1
 pParse->pToplevel==0 ,1,0,1
 nRef>=sqlite3PagerRefcount(pPager) ,1,0,1
 sqlite3Isdigit(zRawSql[1]) ,1,0,1
 pItem->addrFillSub==0 ,1,0,1
 pCsr->zTerm==0 ,1,0,1
 OP_SeekGt == OP_SeekLt+3 ,1,0,1
 PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 ,1,0,1
 pToken->pDeferred==0 || pToken->pSegcsr==0 ,1,0,1
 iFreePg<iLastPg ,1,0,1
 pMem->u.pRowSet!=0 ,1,0,1
 to_op==OP_ToBlob || aff!=SQLITE_AFF_NONE ,1,0,1
 winMemGetHeap()==NULL ,1,0,1
 p->inTransaction!=1 ,1,0,1
 (isSavepnt&~1)==0 ,1,0,1
 p!=0 && *p1!=0 && *p2!=0 ,1,0,1
 sqlite3_value_type(apVal[0])==SQLITE_INTEGER ,1,0,1
 pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) ,1,0,1
 TK_SLASH==OP_Divide ,1,0,1
 pU8[nReserve]==0x65 ,1,0,1
 u.bq.pC!=0 ,1,0,1
 pIdx==0 || pIdx->pTable==pTab ,1,0,1
 tempFile==PAGER_LOCKINGMODE_NORMAL || tempFile==PAGER_LOCKINGMODE_EXCLUSIVE ,1,0,1
 preserve==0 || pMem->flags&(MEM_Blob|MEM_Str) ,1,0,1
 *pRc!=SQLITE_OK || pRight->bStart ,1,0,1
 pNode->nAlloc>=1 ,1,0,1
a->rows * db->rows == layer->wnum,1,0,1
 iNextLeaf==iFree ,1,0,1
 IsStat4 || nEqZero==0 ,1,0,1
 pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol ,1,0,1
 pPage->nOverflow==1 ,1,0,1
 zC!=0 ,1,0,1
 pStep->op==TK_SELECT ,1,0,1
 pInode!=0 ,1,0,1
 pExpr->iTable==0 || pExpr->iTable==1 ,1,0,1
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM ,1,0,1
*pp,1,0,1
 pWriter ,1,0,1
nOverflow>0 || iOverflow<i ,1,0,1
 r<nMaxCells ,1,0,1
 sleepObj!=NULL ,1,0,1
 isSorter(u.bl.pC) ,1,0,1
 pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK ,1,0,1
 (flags&0xff)==flags ,1,0,1
 p->bIsReader || p->readOnly!=0 ,1,0,1
 nCell==get2byte(&data[hdr+3]) ,1,0,1
 SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) ,1,0,1
 idx1<=szHdr1 || CORRUPT_DB ,1,0,1
" memcmp(&info, &pCur->info, sizeof(info))==0 ",1,0,1
 pPage->intKey || nKey>=0 ,1,0,1
 p->bFts4 ,1,0,1
 u.bi.pC->pseudoTableReg==0 ,1,0,1
 pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) ,1,0,1
 u.ak.op==OP_ShiftRight || u.ak.op==OP_ShiftLeft ,1,0,1
 u.bh.pC!=0 ,1,0,1
CCV_GET_CHANNEL(a->type) == CCV_GET_CHANNEL(n->type),1,0,1
 yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) ,1,0,1
 iTerm<pNew->nLSlot ,1,0,1
y + ((mrows - rows[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 >= 0 && y + ((mrows - rows[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 + rows[j] * CCV_DPM_WINDOW_SIZE <= image->rows && x + ((mcols - cols[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 >= 0 && x + ((mcols - cols[j]) * CCV_DPM_WINDOW_SIZE + 1) / 2 + cols[j] * CCV_DPM_WINDOW_SIZE <= image->cols,1,0,1
 z!=0 || N==0 ,1,0,1
 pOffset == 0 ,1,0,1
classifier_cascade != 0,1,0,1
 pPhrase->doclist.pList[nNew]=='\0' ,1,0,1
end_x >= 0,1,0,1
 db==0 || db->pnBytesFreed==0 ,1,0,1
 pPhrase->doclist.pList ,1,0,1
 memIsValid(u.aj.pArg) ,1,0,1
 u.cr.nArg>1 && u.cr.apArg[0] && (u.cr.apArg[0]->flags&MEM_Null) ,1,0,1
 !pCur->apPage[0]->intKey || !pCur->pKey ,1,0,1
 rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile ,1,0,1
 sizeof(t)+sizeof(pid)<=(size_t)nBuf ,1,0,1
 OP_SeekLe==(OP_SeekLt+1) ,1,0,1
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)!=0 ,1,0,1
 eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK ,1,0,1
 pPager->eState>=PAGER_READER && !MEMDB ,1,0,1
 (pTerm->prereqRight & pLevel->notReady)!=0 ,1,0,1
 pWal->nWiData>walFramePage(pWal->hdr.mxFrame) ,1,0,1
 pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] ,1,0,1
 pBt->nPage!=PENDING_BYTE_PAGE(pBt) ,1,0,1
 p->tempFile==0 || pPager->changeCountDone ,1,0,1
 u.az.pKeyInfo->enc==ENC(db) ,1,0,1
 IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 ,1,0,1
error_rate > 0,1,0,1
 pSem ,1,0,1
 (pTrigger && tmask) || (pTrigger==0 && tmask==0) ,1,0,1
 pPager->eState!=PAGER_OPEN || pPg==0 ,1,0,1
" get4byte(findCell(pParent, iIdx))==iChild ",1,0,1
 pPager->eState==PAGER_READER || rc!=SQLITE_OK ,1,0,1
 pSub->pSrc!=0 ,1,0,1
 pCache->bPurgeable || pCache->nMin==0 ,1,0,1
 yymsp[-2].minor.yy203!=0 ,1,0,1
 u.bd.pC!=0 ,1,0,1
"SQLITE_OK == sqlite3_prepare_v2(db, convnet_params_insert_qs, sizeof(convnet_params_insert_qs), &convnet_params_insert_stmt, 0)",1,0,1
 pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) ,1,0,1
 j<nOld ,1,0,1
 pCache->bPurgeable==0 || pCache->nMin==10 ,1,0,1
 isOpen(pPager->fd) || pPager->exclusiveMode ,1,0,1
 nOrderBy>=nExpr || db->mallocFailed ,1,0,1
 u.by.pDb->pBt!=0 ,1,0,1
 u.az.iDb>=0 && u.az.iDb<db->nDb ,1,0,1
 pPage->pDirtyPrev || pPage==p->pDirty ,1,0,1
 p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft ,1,0,1
 pDatabase==0 || pTable!=0 ,1,0,1
 (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 ,1,0,1
 encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE ,1,0,1
 matchSet<0x80 ,1,0,1
 sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile ,1,0,1
 (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 ,1,0,1
 iDb==1 ,1,0,1
 (pSelect->selFlags & SF_Resolved)!=0 ,1,0,1
 flag==0 ,1,0,1
 p==pOld ,1,0,1
 db->aDb[i].zName!=0 ,1,0,1
 nFarg==1 ,1,0,1
 !isView ,1,0,1
params.bad_patches > 0,1,0,1
 p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE ,1,0,1
 pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) ,1,0,1
 i<nMaxCells ,1,0,1
 zFilename ,1,0,1
 !p->pUnused ,1,0,1
 rc!=SQLITE_OK || zErr==0 ,1,0,1
 locktype!=PENDING_LOCK ,1,0,1
 pPk || iIdxCur==iDataCur+1 ,1,0,1
 p->pOffset==0 || p->pLimit!=0 ,1,0,1
 pTree->aData==(char *)&pTree[1] ,1,0,1
 sizeof(u16)==2 ,1,0,1
 !db || sqlite3_mutex_held(db->mutex) ,1,0,1
 pLoop->addrOpenEphm[1]<0 ,1,0,1
CCV_GET_CHANNEL(r0->type) == CCV_C1 && CCV_GET_DATA_TYPE(r0->type) == CCV_8U,1,0,1
 (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) ,1,0,1
 !aPgno[idx] ,1,0,1
CCV_GET_CHANNEL((*a)->type) == convnet->channels,1,0,1
 pRet && pPrev ,1,0,1
 (p->selFlags & SF_Aggregate)==0 ,1,0,1
" sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) ",1,0,1
 zName ,1,0,1
 PAGER_JOURNALMODE_OFF==2 ,1,0,1
 (m-1)==toTheLeft ,1,0,1
 pCur->wrFlag && pBt->inTransaction==TRANS_WRITE && (pBt->btsFlags & BTS_READ_ONLY)==0 ,1,0,1
min_dim >= rows && min_dim >= cols,1,0,1
 (p->locked==0 && p->sharable) || p->pBt->db==p->db ,1,0,1
 u.bt.pCrsr!=0 ,1,0,1
 pTab->iPKey<pTab->nCol ,1,0,1
 idx<p->nResColumn ,1,0,1
 db->pSavepoint || db->isTransactionSavepoint==0 ,1,0,1
 p1>=0 && p1<db->nDb ,1,0,1
context->image_net[0].convnet,1,0,1
 p->selFlags & SF_Resolved ,1,0,1
 (pNew->wsFlags & (WHERE_COLUMN_NULL|WHERE_COLUMN_IN|WHERE_SKIPSCAN))!=0 || nInMul==0 ,1,0,1
" !pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)",1,0,1
 !pPager->tempFile && isOpen(pPager->fd) ,1,0,1
 p->nSample==0 || pNew->anLt[p->nCol-1] > p->a[p->nSample-1].anLt[p->nCol-1] ,1,0,1
params.deform_angle >= 0,1,0,1
hog->rows == rows[j] && hog->cols == cols[j] && CCV_GET_CHANNEL(hog->type) == 31 && CCV_GET_DATA_TYPE(hog->type) == CCV_32F,1,0,1
 pDel==0 || pDel==pMod ,1,0,1
 u.au.desiredAutoCommit==1 || u.au.iRollback==0 ,1,0,1
 k>=0 && k<pSrc->nSrc ,1,0,1
a->rows == rows,1,0,1
 pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,1,0,1
 (rc & (v->db->errMask))==rc ,1,0,1
 pCache!=0 ,1,0,1
 p->pLeft && p->pRight ,1,0,1
params.balance > 0,1,0,1
 u.ap.pReg->flags & MEM_Blob ,1,0,1
 nIter>0 ,1,0,1
 nColumn==nKeyCol+1 || !HasRowid(pIndex->pTable) ,1,0,1
 PAGER_JOURNALMODE_WAL==5 ,1,0,1
 pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) ,1,0,1
 iCol>=0 && iCol<=p->nColumn+2 ,1,0,1
 mask==BTREE_BULKLOAD || mask==0 ,1,0,1
 n>=1 && n<SQLITE_SHM_NLOCK ,1,0,1
 p->locked==1 ,1,0,1
 i<nTemp ,1,0,1
 EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) ,1,0,1
" ExprHasProperty(p, EP_Reduced)==0 ",1,0,1
v->root.w,1,0,1
 pCur->apPage[pCur->iPage]->nCell>0 ,1,0,1
 pMaskSet->n<=(int)sizeof(Bitmask)*8 ,1,0,1
 rc!=SQLITE_OK || pSorter->pTemp1 ,1,0,1
 u.ap.pC!=0 ,1,0,1
 UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET ,1,0,1
 TK_GT>TK_EQ ,1,0,1
 iLeft<iRight ,1,0,1
 *p1!=POS_END && *p1!=POS_COLUMN ,1,0,1
 rc==SQLITE_CORRUPT ,1,0,1
 sqlite3VdbeDb(v)==db ,1,0,1
 pFKey->isDeferred==0 || pFKey->isDeferred==1 ,1,0,1
 (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0 && pCsr->pBt->inTransaction==TRANS_WRITE ,1,0,1
 IsPowerOfTwo(chngToIN) ,1,0,1
 &db->pVtabCtx ,1,0,1
 pVtab!=0 ,1,0,1
 b.rc!=SQLITE_OK ,1,0,1
 pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) ,1,0,1
 wrFlag==0 ,1,0,1
 pMem->n<=nBuf ,1,0,1
 rc==SQLITE_OK || p->pStmt==0 ,1,0,1
 u.ae.p1+u.ae.n<=u.ae.p2 || u.ae.p2+u.ae.n<=u.ae.p1 ,1,0,1
 pCsr->apPage[pCsr->iPage]->intKey ,1,0,1
total_precision < words->rnum + 0.1,1,0,1
 pPage->aData ,1,0,1
 (PAGER_JOURNALMODE_MEMORY & 5)==4 ,1,0,1
 pHdr->pPrev->pNext==pHdr ,1,0,1
 n>3 && n<=9 ,1,0,1
 (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef ,1,0,1
 pSrc->a[iRight].pTab ,1,0,1
 noContent==0 || bMmapOk==0 ,1,0,1
"SQLITE_OK == sqlite3_prepare_v2(db, layer_data_insert_qs, sizeof(layer_data_insert_qs), &layer_data_insert_stmt, 0)",1,0,1
 u.am.i<u.am.pKeyInfo->nField ,1,0,1
 win_mem_data.magic1==WINMEM_MAGIC1 ,1,0,1
 pOp->p1>0 && pOp->p1<=p->nVar ,1,0,1
 SQLITE_CkptFullFSync==PAGER_CKPT_FULLFSYNC ,1,0,1
 j<=nOut ,1,0,1
 pFKey->nCol==1 || (aiFree && pIdx) ,1,0,1
 rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) ,1,0,1
 pIter>=&pDL->aAll[pDL->nAll] || *pIter ,1,0,1
a[i]->rows >= convnet->input.height && a[i]->cols >= convnet->input.width,1,0,1
 pOp!=0 ,1,0,1
 pCol->iMem>0 ,1,0,1
 i<ArraySize(aTable) ,1,0,1
 pTop->pVdbe ,1,0,1
 (op==TK_UPDATE)==(pChanges!=0) ,1,0,1
 zTabName ,1,0,1
 xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) ,1,0,1
 precision>0 ,1,0,1
 pExpr->bDeferred || pPhrase->doclist.bFreeList==0 ,1,0,1
v->count == root_classifier->count || (v->count == 0 && v->part == 0),1,0,1
 pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) ,1,0,1
a && b && a->rows == b->rows && a->cols == b->cols,1,0,1
 pCsr->eState!=CURSOR_REQUIRESEEK ,1,0,1
 pIndex->pSchema==pTable->pSchema ,1,0,1
 pOld->iCol>pNew->iCol ,1,0,1
 pBt->pPage1!=0 ,1,0,1
 pPage->leaf || !pPage->intKey ,1,0,1
 iIdx==nVal ,1,0,1
j<=nBuf,1,0,1
 (balance_deeper_called++)==0 ,1,0,1
"0 && ""ccv_write requires libjpeg support for JPEG format""",1,0,1
 SQLITE_FullFSync==PAGER_FULLFSYNC ,1,0,1
!(flag & CCV_L2_NORM) && (flag & CCV_GSEDT),1,0,1
 pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL ,1,0,1
server->loop == EV_A,1,0,1
 u.ap.pC->pseudoTableReg>0 ,1,0,1
nData>=1,1,0,1
 zRep==sqlite3_value_text(argv[2]) ,1,0,1
 N >= ROUND8(sizeof(*p)) ,1,0,1
 (p->selFlags & SF_Resolved)==0 ,1,0,1
 memIsValid(u.ap.pReg) ,1,0,1
 (rc==SQLITE_OK)==(pMod!=0) ,1,0,1
 p->aMem[i].flags==MEM_Invalid ,1,0,1
 pVtab->pModule!=0 ,1,0,1
 lwr==upr+1 || (pPage->intKey && !pPage->leaf) ,1,0,1
 sqlite3BtreeCursorIsValid(u.bm.pCrsr) ,1,0,1
 iBuddy>=0 ,1,0,1
 pNode->n>0 ,1,0,1
 pCsr->nDoc>0 ,1,0,1
 stateno<=YY_REDUCE_COUNT ,1,0,1
 db->nDb<=2 ,1,0,1
 pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER ,1,0,1
" sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 ",1,0,1
 iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage ,1,0,1
 eLock!=NO_LOCK || pagerUseWal(pPager)==0 ,1,0,1
 u.be.pC->pCursor!=0 ,1,0,1
 IsStat4 || (pNew->iCol==0 && pOld->iCol==0) ,1,0,1
 pStr->z!=0 && (pStr->nAlloc >= pStr->n+nAppend+1) ,1,0,1
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID ,1,0,1
(params.win_size.width & 1) == 1 && (params.win_size.height & 1) == 1,1,0,1
 wrFlag==0 || wrFlag==1 ,1,0,1
 (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 ,1,0,1
 sqlite3PcacheRefCount(pPager->pPCache)==0 ,1,0,1
 pNew!=&standin ,1,0,1
 level>=1 && level<=3 ,1,0,1
 iRes<0 || c>=aEntry[iRes].iCode ,1,0,1
 u.bs.pC->isTable==0 ,1,0,1
 pExpr->op>=TK_GT && pExpr->op<=TK_GE ,1,0,1
max_dim >= min_dim,1,0,1
 iStatement>0 ,1,0,1
 nUri>=0 ,1,0,1
 pTrigger->pSchema==pTab->pSchema || pTrigger->pSchema==db->aDb[1].pSchema ,1,0,1
 pExpr->op!=TK_ISNULL || op==OP_NotNull ,1,0,1
mx == 0,1,0,1
 pPager->errCode!=SQLITE_OK ,1,0,1
 pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db ,1,0,1
 sqlite3_mutex_notheld(pcache1.mutex) ,1,0,1
 pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) ,1,0,1
 db->aDb[1].pSchema ,1,0,1
 eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 || eType==PTRMAP_BTREE || eType==PTRMAP_ROOTPAGE ,1,0,1
 eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_TRUNCATE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF || eMode==PAGER_JOURNALMODE_WAL || eMode==PAGER_JOURNALMODE_MEMORY ,1,0,1
 pDest->eDest==SRT_Output ,1,0,1
 nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE ,1,0,1
variance >= 0,1,0,1
CCV_GET_DATA_TYPE(sqsat->type) == CCV_64S,1,0,1
 !pPrior->pOrderBy ,1,0,1
 (mem3.aPool[i-1].u.hdr.size4x&1)==1 ,1,0,1
positive_count == z->positives->rnum,1,0,1
 pOp->p2<SQLITE_N_BTREE_META ,1,0,1
feature->count <= CCV_ICF_SAT_MAX,1,0,1
 pName1 && pName2 ,1,0,1
 pIn1!=pOut ,1,0,1
" iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) ",1,0,1
 !pSubParse->pAinc && !pSubParse->pZombieTab ,1,0,1
 pSorter->iWriteOff>iStart ,1,0,1
 pCur->pVtabCursor ,1,0,1
 rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) ,1,0,1
 rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT ,1,0,1
 (isMainJrnl&~1)==0 ,1,0,1
 sizeof(i64)==8 || sizeof(i64)==4 ,1,0,1
 nSuspect<=nSegment ,1,0,1
params.include_overlap > 0.1,1,0,1
 zWalName && zWalName[0] ,1,0,1
 j<pTabList->nSrc ,1,0,1
 p->pCache->pGroup==pGroup ,1,0,1
CCV_GET_DATA_TYPE(a->type) == CCV_8U,1,0,1
 SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 ,1,0,1
 to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC ,1,0,1
 pP1!=0 ,1,0,1
 pTerm->pExpr!=0 ,1,0,1
 !fts3SegReaderIsPending(pReader) ,1,0,1
 u.bd.oc!=OP_SeekLt || u.bd.r.flags==0 ,1,0,1
params.symmetric == 0 || params.symmetric == 1,1,0,1
CCV_GET_DATA_TYPE(dc->type) == CCV_GET_DATA_TYPE(da->type) && CCV_GET_CHANNEL(dc->type) == 1 && ((transpose & CCV_A_TRANSPOSE) ? da->cols : da->rows) == dc->rows && ((transpose & CCV_B_TRANSPOSE) ? db->rows : db->cols) == dc->cols,1,0,1
pBt[0],1,0,1
 pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) ,1,0,1
 iCurrent<=iMinPos ,1,0,1
 !p->pFirst ,1,0,1
 key>=aDia[iRes] ,1,0,1
 j<p->nLabel ,1,0,1
 iBlock+size-1<(u32)mem5.nBlock ,1,0,1
 pReader->aDoclist ,1,0,1
 eState==3 ,1,0,1
 PAGER_JOURNALMODE_PERSIST==1 ,1,0,1
 (pNew->wsFlags & WHERE_COLUMN_IN)==0 || iCol<0 ,1,0,1
 pBt->pPage1 && pBt->pPage1->aData ,1,0,1
 reader.aNode ,1,0,1
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 ,1,0,1
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) ,1,0,1
 nLookaside==0 || nLookaside==db->lookaside.nOut ,1,0,1
 iBlock>=0 && iBlock<mem5.nBlock ,1,0,1
convnet->mean_activity->rows == convnet->input.height,1,0,1
 WIN_SHM_BASE==WALINDEX_LOCK_OFFSET ,1,0,1
 pStepList ,1,0,1
 op!=0 ,1,0,1
pg1<=pPg->pgno,1,0,1
 iOfst==p->endpoint.iOffset ,1,0,1
" !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) ",1,0,1
 idx>0 ,1,0,1
 iSavepoint>=0 || op==SAVEPOINT_ROLLBACK ,1,0,1
 memIsValid(u.cg.pRec) ,1,0,1
 SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART ,1,0,1
 u.ap.i<=u.ap.p2 && u.ap.zHdr<u.ap.zEndHdr ,1,0,1
 pSelect->pOffset==0 ,1,0,1
 (pLoop->wsFlags & WHERE_MULTI_OR)==0 ,1,0,1
 aMerge==aList ,1,0,1
params[i].output.convolutional.partition >= params[i].input.matrix.partition,1,0,1
 u.az.p2>0 ,1,0,1
 contentOffset<=usableSize ,1,0,1
 pTo->zErrMsg==0 || pTo->nErr ,1,0,1
 p->nOp>0 || p->aOp==0 ,1,0,1
 pList==0 ,1,0,1
pSelect->pSrc,1,0,1
 sqlite3_mutex_notheld(p->pBt->mutex) ,1,0,1
 unionTab==dest.iSDParm || dest.eDest!=priorOp ,1,0,1
 pLower || pUpper ,1,0,1
 sqlite3_data_count(pStmt)==1 ,1,0,1
 p->pRightmost!=p ,1,0,1
" sampleIsBetter(p, pNew, pOld) ",1,0,1
 pOrderBy!=0 ,1,0,1
 p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ,1,0,1
 pnBlob ,1,0,1
 u.au.desiredAutoCommit==1 || u.au.desiredAutoCommit==0 ,1,0,1
 op!=TK_EQ || c==WO_EQ ,1,0,1
 argc==1 || p==0 || p->n>0x7fffffff || p->n==sqlite3_aggregate_count(context) ,1,0,1
 (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 ,1,0,1
 pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) ,1,0,1
 iPrev>=0 ,1,0,1
 pExpr->op!=TK_GT || op==OP_Le ,1,0,1
 aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED ,1,0,1
 pParent==pRoot ,1,0,1
 pPager->eState==PAGER_READER || !pbOpen ,1,0,1
 u.bd.oc!=OP_SeekGe || u.bd.r.flags==0 ,1,0,1
 pPager->syncFlags==0 ,1,0,1
" sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",1,0,1
 i>=0 && i<YY_ACTTAB_COUNT ,1,0,1
 p->sharable || 0==*ppIter ,1,0,1
 pToken->z!=0 || pToken->n==0 ,1,0,1
 memIsValid(&aMem[pOp->p1]) ,1,0,1
 rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr ,1,0,1
 pTabItem->iCursor==pLevel->iTabCur ,1,0,1
 p->sharable || (p->pNext==0 && p->pPrev==0) ,1,0,1
 n==(db->nSavepoint + db->isTransactionSavepoint) ,1,0,1
feature != 0,1,0,1
