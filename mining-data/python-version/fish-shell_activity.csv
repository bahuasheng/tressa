x_val,y_added,y_removed,y_combined
src2 == TMP_REG2,68,34,102
src1 == TMP_REG1 && !(flags & SRC2_IMM),44,22,66
arg & SLJIT_MEM,34,17,51
src1 == TMP_REG1,28,14,42
!(flags & SET_FLAGS) && arg1 == TMP_REG1,24,12,36
jump->flags & JUMP_LABEL,18,9,27
out_buffer.get() != NULL,13,13,26
inp_flags & LOAD_DATA,16,8,24
!const_,16,8,24
!label,16,8,24
!jump,16,8,24
!(flags & INV_IMM),16,8,24
cc != NULL,14,7,21
!(inst & (INT_ALIGNED | UPDATE_REQ)),12,6,18
!label || label->size >= word_count,12,6,18
!jump || jump->addr >= word_count,12,6,18
!const_ || const_->addr >= word_count,12,6,18
"(SLJIT_UDIVMOD & 0x2) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD, bad_div_opcode_assignments",10,5,15
arg1 == TMP_REG1,10,5,15
code_ptr - code <= (sljit_sw)compiler->size,10,5,15
dst == src2,10,5,15
(arg & SLJIT_MEM) && (next_arg & SLJIT_MEM),8,4,12
has_alternatives,8,4,12
common->first_line_end != 0,6,6,12
common->control_head_ptr != 0,8,4,12
dst & SLJIT_MEM,6,3,9
src2_r == TMP_REG2,6,3,9
src1 == TMP_REG1 && !(flags & ARGS_SWAPPED),6,3,9
private_data_ptr != 0,6,3,9
common->mark_ptr != 0,6,3,9
*cc == XCL_PROP || *cc == XCL_NOTPROP,6,3,9
val >> 16 == 0,4,3,7
PRIVATE_DATA(cc + 1) != 0,4,2,6
!(flags & LOAD_DATA) && DR(TMP_REG1) != reg_ar,4,2,6
srcw[0] != 0,4,2,6
(arg & REG_MASK) || !(inst & UPDATE_REQ),4,2,6
size <= 256,4,2,6
x,4,2,6
(flags & (EX86_PREF_F2 | EX86_PREF_F3)) != (EX86_PREF_F2 | EX86_PREF_F3) && (flags & (EX86_PREF_F2 | EX86_PREF_66)) != (EX86_PREF_F2 | EX86_PREF_66) && (flags & (EX86_PREF_F3 | EX86_PREF_66)) != (EX86_PREF_F3 | EX86_PREF_66),4,2,6
!(flags & ARGS_SWAPPED),4,2,6
!(a & SLJIT_IMM) || !(flags & EX86_SSE2),4,2,6
compiler->local_size > 0,4,2,6
local_size > 0,4,2,6
!(src2 & SRC2_IMM),4,2,6
private_data_ptr == OVECTOR(offset + 0),4,2,6
!(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) || (flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) == 0,4,2,6
size > 0,4,2,6
saved_reg_list[1] < 8,4,2,6
!(arg & OFFS_REG_MASK),4,2,6
!first_patch,4,2,6
private_data_ptr == 0,4,2,6
!(flags & EX86_SHIFT_INS) || a == SLJIT_PREF_SHIFT_REG,4,2,6
(flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) != (EX86_BYTE_ARG | EX86_HALF_ARG),4,2,6
prev == -1,4,2,6
cc == ccend,4,2,6
src2 & SRC2_IMM,4,2,6
"common, current",4,2,6
"common, cc, BACKTRACK_AS(assert_backtrack), FALSE",4,2,6
(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) != (EX86_BIN_INS | EX86_SHIFT_INS),4,2,6
!(op & SLJIT_INT_OP),4,2,6
length > 1,4,2,6
addr <= 0x7fffffff,4,2,6
src_r == TMP_REG2 && (src & SLJIT_MEM),4,2,6
0,3,3,6
(*cc >= OP_ASSERT && *cc <= OP_ASSERTBACK_NOT) || (*cc >= OP_ONCE && *cc <= OP_SCOND),4,2,6
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x2), float_transfer_bit_error",4,2,6
(inst[0] & 0xfff00000) == MOVW && (inst[1] & 0xfff00000) == MOVT,4,2,6
argw,4,2,6
common->has_set_som,4,2,6
*cc >= OP_KET && *cc <= OP_KETRPOS,4,2,6
type >= SLJIT_JUMP && type <= SLJIT_CALL3,4,2,6
!(flags & SET_FLAGS) && (flags & ARG2_IMM) && arg1 == TMP_REG1,4,2,6
!has_alternatives,4,2,6
saved_reg_list[2] < 8,4,2,6
fast_str_ptr == 0,6,0,6
reg_map[PIC_ADDR_REG] == 16 && PIC_ADDR_REG == TMP_REG2,4,2,6
DR(PIC_ADDR_REG) == 25 && PIC_ADDR_REG == TMP_REG2,4,2,6
!(flags & SRC2_IMM),4,2,6
"(SLJIT_SINGLE_OP == 0x100), float_transfer_bit_error",4,2,6
!(inp_flags & WRITE_BACK),4,2,6
common->utf,3,2,5
 end >= begin ,2,2,4
 pb >= pa ,2,2,4
magic_file != NULL,2,2,4
 *begin < (in+wcslen(in) ) ,2,2,4
 *end >= *begin ,2,2,4
directory != NULL,2,2,4
state != NULL,2,2,4
 *end < (in+wcslen(in) ) ,2,2,4
repeat_type != 0 && repeat_count != 0,2,1,3
!current->nextbacktracks && !current->topbacktracks,2,1,3
stackpos >= stacktop + 2,2,1,3
!conditional,2,1,3
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) >= -128 && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) <= 127,2,1,3
!(common->req_char_ptr != 0 && common->start_used_ptr != 0),2,1,3
delay_slot == MOVABLE_INS || delay_slot >= UNMOVABLE_INS || delay_slot == ((ins >> 11) & 0x1f) || delay_slot == ((ins >> 16) & 0x1f),2,1,3
*ccend != OP_END && common->control_head_ptr != 0,2,1,3
!(a & SLJIT_IMM) || compiler->mode32 || IS_HALFWORD(imma),2,1,3
common->positive_assert_quit == NULL,2,1,3
node != &mouth,2,1,3
!label || label->size >= half_count,2,1,3
!(flags & INV_IMM) && !(src2 & SRC2_IMM),2,1,3
common->optimized_cbracket[offset >> 1] == 0,2,1,3
counter <= 31,2,1,3
TMP1 == SLJIT_R0 && STACK_TOP == SLJIT_R1 && TMP2 == SLJIT_R2,2,1,3
dst == SLJIT_MEM1(SLJIT_SP),2,1,3
repeat_length != 0 && repeat_type != 0 && repeat_count != 0,2,1,3
" sizeof(sljit_sb) == 1 && sizeof(sljit_ub) == 1 && sizeof(sljit_sh) == 2 && sizeof(sljit_uh) == 2 && sizeof(sljit_si) == 4 && sizeof(sljit_ui) == 4 && (sizeof(sljit_p) == 4 || sizeof(sljit_p) == 8) && sizeof(sljit_p) <= sizeof(sljit_sw) && (sizeof(sljit_sw) == 4 || sizeof(sljit_sw) == 8) && (sizeof(sljit_uw) == 4 || sizeof(sljit_uw) == 8), invalid_integer_types",2,1,3
high_short && high_short <= 0x7fffffffl && high_short >= -0x80000000l,2,1,3
"reg_map[SLJIT_R1] == 2 && reg_map[SLJIT_R0] < 8 && reg_map[SLJIT_R2] < 8, args_registers",2,1,3
addr <= 0x7fffffffffffl,2,1,3
(sljit_sw)addr <= 0x1ffffff && (sljit_sw)addr >= -0x2000000,2,1,3
"common, matchingpath, assert, TRUE",2,1,3
addr <= 0x03ffffff,2,1,3
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,2,1,3
((inst[0] & 0xfbf0) == (MOVW >> 16)) && ((inst[2] & 0xfbf0) == (MOVT >> 16)) && dst == (inst[3] & 0x0f00),2,1,3
nltype == NLTYPE_FIXED && common->newline < 256,2,1,3
"reg_map[SLJIT_R1] == 6 && reg_map[SLJIT_R0] < 8 && reg_map[SLJIT_R2] < 8, args_registers",2,1,3
stackpos == STACK(stacktop),2,1,3
private_data_ptr == OVECTOR(offset),2,1,3
flags & ARG2_IMM,2,1,3
this->source_start != SOURCE_OFFSET_INVALID || this->source_length == 0,2,1,3
"reg_map[TMP_REG3] == 9, tmp3_is_9_second",2,1,3
common->capture_last_ptr != 0,2,1,3
rootbacktrack.prev == NULL,2,1,3
FAST_IS_REG(src),2,1,3
diff <= 8388607 && diff >= -8388608,2,1,3
"scode, &dflags, op == OP_ASSERT",2,1,3
which < child_count,2,1,3
common->req_char_ptr != 0,2,1,3
"ctype_word == 0x10, ctype_word_must_be_16",2,1,3
(total_size && free_blocks) || (!total_size && !free_blocks),2,1,3
const_pool - code_ptr <= CONST_POOL_ALIGNMENT,2,1,3
"(INT_SIZE ^ 0x100) == WORD_SIZE, must_be_one_bit_difference",2,1,3
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x4), float_transfer_bit_error",2,1,3
opcode == OP_COND || opcode == OP_SCOND,2,1,3
reg_map[TMP_REG2] <= 7 && dst != TMP_REG2,2,1,3
buf_ptr == buf_end,2,1,3
other_cases[0] < other_cases[1] && other_cases[1] < other_cases[2],2,1,3
addr <= 0xffff,2,1,3
!tmp1empty,2,1,3
"reg_map[2] == 1 && reg_map[3] == 2 && reg_map[4] == 12, bad_register_mapping",2,1,3
code_ptr - code <= (sljit_sw)compiler->size - (sizeof(struct sljit_function_context) / sizeof(sljit_ins)),2,1,3
!(jump->flags & IS_BL),2,1,3
" reg_map[SLJIT_R0] == 0 && reg_map[SLJIT_R1] == 2 && reg_map[TMP_REG1] > 7, invalid_register_assignment_for_div_mul",2,1,3
diff <= 1023 && diff >= -1024 && !(jump->flags & IS_COND),2,1,3
"ICC_IS_SET == SET_FLAGS, icc_is_set_and_set_flags_must_be_the_same",2,1,3
!(imm & 0xff),2,1,3
(len == 32 && imm != 0 && imm != -1) || (len == 16 && (sljit_si)imm != 0 && (sljit_si)imm != -1),2,1,3
"SLJIT_MOV + 8 == SLJIT_MOVU, movu_offset",2,1,3
(type & 0xff) == SLJIT_EQUAL || (type & 0xff) == SLJIT_NOT_EQUAL,2,1,3
*opcode == OP_CLASS || *opcode == OP_NCLASS || *opcode == OP_XCLASS,2,1,3
mode < JIT_NUMBER_OF_COMPILE_MODES,2,1,3
!(jump->flags & IS_JAL),2,1,3
(jump->flags & PATCH_ABS64) || addr <= 0xffffffffffffl,2,1,3
compiler->args >= 0,2,1,3
"SLJIT_LOCALS_OFFSET >= (2 + 4) * sizeof(sljit_uw), require_at_least_two_words",2,1,3
(sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,2,1,3
srcw[0] != 0 && srcw[1] != 0,2,1,3
((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,1,3
"reg_map[SLJIT_R0] < 8, temporary_reg1_is_loreg",2,1,3
has_alternatives && *matchingpath >= OP_ASSERT && *matchingpath <= OP_ASSERTBACK_NOT,2,1,3
common->optimized_cbracket[offset] == 0,2,1,3
IS_HALFWORD(srcw),2,1,3
!(inp_flags & LOAD_DATA),2,1,3
"A(0) == 0, a0_must_be_0",2,1,3
compares > 0,2,1,3
min <= max,2,1,3
*opcode == OP_CRRANGE || *opcode == OP_CRMINRANGE || *opcode == OP_CRPOSRANGE,2,1,3
flags & HALF_SIZE,2,1,3
compiler->cpool_diff == CONST_POOL_EMPTY || compiler->size - compiler->cpool_diff < MAX_DIFFERENCE(4092),2,1,3
imm < 0,2,1,3
high_short && !(inst & (INT_ALIGNED | UPDATE_REQ)),2,1,3
(argw & 0x3) && !(max_delta & 0xf00),2,1,3
"SLJIT_INT_OP == SLJIT_SINGLE_OP, int_op_and_single_op_must_be_the_same",2,1,3
(charpos_othercasebit >> 9) == 0,2,1,3
!current->nextbacktracks,2,1,3
"reg_map[SLJIT_R0] == 0, scratch_reg1_must_be_eax",2,1,3
tables,2,1,3
PRIVATE_DATA(cc) != 0,2,1,3
jump->flags & IS_COND,2,1,3
diff <= 0xfff,2,1,3
*cc != OP_BRAMINZERO,2,1,3
found == &backtrack->common.topbacktracks,2,1,3
other_cases[0] != NOTACHAR && other_cases[1] != NOTACHAR && other_cases[2] != NOTACHAR,2,1,3
"common, current->cc, &backtrack, FALSE",2,1,3
jump->u.target & 0x1,2,1,3
(code_ptr[-3] & 0xfc00ffff) == 0x780007c6,2,1,3
(uimm & 0x8000000000000000l) && (shift2 > 0) && (shift2 <= 16),2,1,3
shift > 0,2,1,3
!(saved_register_size & 0x7),2,1,3
!const_ || const_->addr >= half_count,2,1,3
offs == local_size - (sljit_sw)(sizeof(sljit_sw)),2,1,3
"reg_map[TMP_REG3] == 9, tmp3_is_9_first",2,1,3
?!,2,1,3
cc == ccend && stackptr == stacktop && (save || (tmp1empty && tmp2empty)),2,1,3
*common->start == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,2,1,3
extrasize == 2,2,1,3
(delay_slot & DST_INS_MASK) == UNMOVABLE_INS || (delay_slot & DST_INS_MASK) == MOVABLE_INS || (delay_slot & DST_INS_MASK) == ((ins >> 25) & 0x1f),2,1,3
argw != 0,2,1,3
(sljit_sw)addr <= 0x3ffff && (sljit_sw)addr >= -0x40000,2,1,3
*ccend == OP_END || (*ccend >= OP_ALT && *ccend <= OP_KETRPOS),2,1,3
condemned_node != NULL && condemned_node != &mouth,2,1,3
!force || common->mode != PCRE2_JIT_COMPLETE,2,1,3
node != NULL && node != &mouth,2,1,3
framesize != no_stack,2,1,3
code_ptr <= code + compiler->size,2,1,3
common->start_used_ptr != 0 && common->start_ptr != 0 && (common->mode == PCRE2_JIT_PARTIAL_SOFT ? common->hit_start != 0 : common->hit_start == 0),2,1,3
"offs == -(sljit_si)GET_SAVED_REGISTERS_SIZE(compiler->scratches, compiler->saveds, 1)",2,1,3
!(flags & LOAD_DATA) && reg_map[TMP_REG1] != reg_ar,2,1,3
"STR_END == SLJIT_S1, str_end_must_be_saved_reg2",2,1,3
(sljit_sw)addr <= 0x7fff && (sljit_sw)addr >= -0x8000,2,1,3
ket == OP_KET || ket == OP_KETRMAX || ket == OP_KETRMIN,2,1,3
!((bra == OP_BRAZERO && ket == OP_KETRMIN) || (bra == OP_BRAMINZERO && ket == OP_KETRMAX)),2,1,3
(addr & ~0x3FFFFFFFL) == ((jump->addr + sizeof(sljit_ins)) & ~0x3FFFFFFFL),2,1,3
sizeof(PCRE2_SIZE) == 4 || sizeof(PCRE2_SIZE) == 8,2,1,3
"(OP_CRSTAR & 0x1) == 0, crstar_opcode_must_be_even",2,1,3
current->topbacktracks == NULL,2,1,3
!(inp_flags & WRITE_BACK) && !(inst & UPDATE_REQ),2,1,3
c != oc,2,1,3
"common, *cc, cc + 1, parent->top != NULL ? &parent->top->nextbacktracks : &parent->topbacktracks",2,1,3
src2 == 0,3,0,3
dst != TMP_REG1,2,1,3
"!(SLJIT_CONVW_FROMD & 0x1) && !(SLJIT_CONVD_FROMW & 0x1), invalid_float_opcodes",2,1,3
offs == -(sljit_sw)(sizeof(sljit_sw)),2,1,3
(sljit_sw) addr <= SIMM_17BIT_MAX && (sljit_sw) addr >= SIMM_17BIT_MIN,2,1,3
((uimm & 0xc000000000000000l) == 0x4000000000000000l) && (shift > 0) && (shift <= 32),2,1,3
"reg_map[2] == 1 && reg_map[3] == 2, bad_register_mapping",2,1,3
diff >= 1,2,1,3
src & SLJIT_MEM,2,1,3
diff <= 127 && diff >= -128 && (jump->flags & IS_COND),2,1,3
UCD_BLOCK_SIZE == 128 && sizeof(ucd_record) == 8,2,1,3
common->currententry->entry == NULL && common->recursive_head_ptr != 0,2,1,3
(sljit_sw)addr <= 0x1fffffff && (sljit_sw)addr >= -0x20000000,2,1,3
argw >= 0 && (argw & 0xff) <= 0xff,2,1,3
diff <= 524287 && diff >= -524288 && (jump->flags & IS_COND),2,1,3
idx <= line_datas.size(),2,1,3
"SLJIT_REWRITABLE_JUMP != SLJIT_SINGLE_OP, rewritable_jump_and_single_op_must_not_be_the_same",2,1,3
SLOW_IS_REG(dst),2,1,3
save && common->recursive_head_ptr != 0,2,1,3
" reg_map[SLJIT_R0] == 0 && reg_map[SLJIT_R1] < 7 && reg_map[TMP_REG1] == 2, invalid_register_assignment_for_div_mul",2,1,3
*cc == OP_DNREF || *cc == OP_DNREFI,2,1,3
free_blocks == free_block,2,1,3
ccbegin + 1 + LINK_SIZE,2,1,3
!(inst & 0xffff0000),2,1,3
code_ptr - code <= (sljit_si)size,2,1,3
dst_r == TMP_REG1,2,1,3
(sljit_sw)addr <= MAX_DISP && (sljit_sw)addr >= MIN_DISP,2,1,3
"codestart, &firstcuflags, FALSE",2,1,3
*cc == OP_BRA || *cc == OP_CBRA || *cc == OP_CBRAPOS || *cc == OP_SCBRA || *cc == OP_SCBRAPOS,2,1,3
((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,1,3
"JIT_NUMBER_OF_COMPILE_MODES == 3, number_of_compile_modes_changed",2,1,3
!tmp2empty,2,1,3
code_ptr - code <= (sljit_si)compiler->size,2,1,3
addr <= 0x7fffffffffff,2,1,3
opcode >= OP_ASSERT && opcode <= OP_ASSERTBACK_NOT,2,1,3
(sljit_sw)addr <= 0x01ffffff && (sljit_sw)addr >= -0x02000000,2,1,3
(inst[0] & 0xffe00000) == MOVZ && (inst[1] & 0xffe00000) == (MOVK | (1 << 21)),2,1,3
cpool_size == 0,2,1,3
(jump->flags & (PATCH_ABS48 | PATCH_ABS64)) || addr <= 0xffffffffl,2,1,3
(charpos_othercasebit >> 8) == 0,2,1,3
!(flags & LOAD_DATA) && TMP_REG1_mapped != reg_ar,2,1,3
(addr & ~0xfffffff) == ((jump->addr + sizeof(sljit_ins)) & ~0xfffffff),2,1,3
(inst & 0xfff) == 0,2,1,3
compiler->cpool_fill > 0 && compiler->cpool_fill <= CPOOL_SIZE,2,1,3
"common, OP_EODN, cc, backtracks",2,1,3
compiler->cpool_fill < CPOOL_SIZE && (inst & 0xfff) == 0,2,1,3
"OP_DNRREF == OP_RREF + 1 && OP_FALSE == OP_RREF + 2 && OP_TRUE == OP_RREF + 3, compile_time_checks_must_be_grouped_together",2,1,3
(sljit_sw)addr <= SIMM_MAX && (sljit_sw)addr >= SIMM_MIN,2,1,3
!jump || jump->addr >= half_count,2,1,3
ind < cpool_size && !(*last_pc_patch & (1 << 25)) && (*last_pc_patch & (1 << 20)),2,1,3
cpool_size > 0,2,1,3
"emit_lea_binary(compiler, SLJIT_KEEP_FLAGS, dst, dstw, SLJIT_SP, 0, TMP_REG1, 0) != SLJIT_ERR_UNSUPPORTED",2,1,3
othercasebit,2,1,3
argv != NULL,2,1,3
range_right >= 0 || offsets[0] >= 0,1,1,2
 len >= 0 ,1,1,2
 pos >= 0 ,1,1,2
! locked,1,1,2
glob != NULL,1,1,2
 pa <= (buff+wcslen(buff) ) ,1,1,2
 end <= (data->buff+wcslen(data->buff) ) ,1,1,2
 data->buff_pos <= data->buff_len ,1,1,2
 a ,1,1,2
 begin <= (data->buff+wcslen(data->buff) ) ,1,1,2
glob_hash != NULL,1,1,2
 pa >= buff ,1,1,2
 data->buff_pos >= 0 ,1,1,2
k == parse_keyword_none || k == parse_keyword_command || k == parse_keyword_builtin,1,1,2
 pa <= (data->buff+wcslen(data->buff) ) ,1,1,2
offsets[1] == -1 || (offsets[0] < offsets[1]),1,1,2
 begin <= (buff+wcslen(buff) ) ,1,1,2
 pgr > 0 ,1,1,2
type == type_named,1,1,2
 i!=pos ,1,1,2
 !wcslen( b->buff) ,1,1,2
locked,1,1,2
common->forced_quit_label == NULL,2,0,2
 pb <= (data->buff+wcslen(data->buff) ) ,1,1,2
 begin >= data->buff ,1,1,2
byte_set[0] > 0 && byte_set[0] < 255,1,1,2
 begin >= buff ,1,1,2
 pa >= data->buff ,1,1,2
common->match_end_ptr != 0,2,0,2
file_name != NULL,1,1,2
 pb <= (buff+wcslen(buff) ) ,1,1,2
 pgr > 1 ,1,1,2
 count >= 0 ,1,1,2
 !wcslen( (wchar_t *)b->buff) ,1,1,2
match != NULL,1,1,2
 cursor_pos >= 0 ,1,1,2
offsets[2] == -1 || (offsets[0] < offsets[2] && offsets[1] > offsets[2]),1,1,2
 c == c2 ,1,1,2
 end <= (buff+wcslen(buff) ) ,1,1,2
common->mode == PCRE2_JIT_COMPLETE,1,0,1
(ranges[0] & (ranges[2] - ranges[0])) == 0 && (ranges[2] & ranges[3] & (ranges[2] - ranges[0])) != 0,1,0,1
chars[i * MAX_DIFF_CHARS] > 0,1,0,1
tmp1_ind < 8 && tmp2_ind == 1,1,0,1
max > 0,1,0,1
fast_str_ptr == 0 || opcode == OP_STAR,1,0,1
common->fast_fail_start_ptr <= common->fast_fail_end_ptr,1,0,1
common->fast_forward_bc_ptr == NULL || fast_str_ptr == 0 || cc == common->fast_forward_bc_ptr,1,0,1
current > (sljit_sw*)current[-1],1,0,1
common->mode == PCRE2_JIT_COMPLETE || offset == 0,1,0,1
*cc == OP_BRA || *cc == OP_CBRA,1,0,1
range_right >= 0,1,0,1
chars[offset * MAX_DIFF_CHARS] >= 1 && chars[offset * MAX_DIFF_CHARS] <= 2,1,0,1
common->fast_forward_bc_ptr != NULL || fast_str_ptr == 0 || (fast_str_ptr >= common->fast_fail_start_ptr && fast_str_ptr <= common->fast_fail_end_ptr),1,0,1
common->fast_fail_start_ptr < common->fast_fail_end_ptr,1,0,1
char_set[0] > 0 && char_set[0] < 255,1,0,1
offset == -1 || (chars[offset * MAX_DIFF_CHARS] >= 1 && chars[offset * MAX_DIFF_CHARS] <= 2),1,0,1
(chr & 0x7) == 0,1,0,1
