x_val,y_added,y_removed,y_combined
HasSSE2(),277,137,414
0,153,150,303
allow_macro_instructions_,140,140,280
!rd.IsZero(),141,76,217
false,110,102,212
!done(),127,66,193
cond == Equal || cond == NotEqual,134,59,193
!empty(),118,61,179
IsValid(),59,32,91
is_valid(),42,42,84
(index >= 0) && (index < this->length()),40,40,80
table,52,26,78
src2 == TMP_REG2,34,34,68
"FUNCTION, kind()",30,30,60
!mEntered,40,20,60
size == kInt32Size,29,29,58
mIsSome,36,18,54
temp == InvalidReg,36,18,54
!rn.IsZero(),52,1,53
isFinished(),34,19,53
atom,26,25,51
 (int)secs >= 0 ,25,25,50
!Done(),28,22,50
cc != NULL,28,21,49
index->type() == MIRType_Int32,32,16,48
isLive(),32,14,46
index >= 0 && index < this->length(),23,23,46
IsCodeTarget(rmode_) || rmode_ == EMBEDDED_OBJECT,23,23,46
index == 0,29,15,44
cx,26,17,43
type_ != kUninitialized,21,21,42
generation == table_->generation(),28,14,42
HasSSE41(),28,14,42
IsSimdType(type),27,13,40
(IsJSReturn(rmode()) && IsPatchedReturnSequence()) || (IsDebugBreakSlot(rmode()) && IsPatchedDebugBreakSlotSequence()),20,20,40
 s >= 0 ,21,19,40
isTotals,28,12,40
isLocked(),26,13,39
!isUndefined(),19,18,37
OBJ_IS_NATIVE(obj),18,18,36
empty(),19,17,36
aBegin <= aEnd,24,12,36
"!IsReference<D>::value, ""must provide a deleter instance""",24,12,36
"!IsPointer<D>::value, ""must provide a deleter instance""",24,12,36
!denseElementsAreCopyOnWrite(),23,12,35
src1 == TMP_REG1,17,17,34
"msgid, msg",18,16,34
i == 0,19,15,34
output == eax,20,14,34
!isInvalid(),27,7,34
(cond != al) && (cond != nv),20,13,33
initialized(),22,11,33
 fileNo != -1 ,16,16,32
isDynamicallyLinked(),21,11,32
mReserved <= mCapacity,20,10,30
 !isNull() ,15,15,30
data == 0,15,15,30
"sizeof(T) <= 4, ""not available for 8-byte values yet""",30,0,30
*this == *this,20,10,30
has_alternatives,17,13,30
common->first_line_end != 0,18,12,30
"session, !F_ISSET(S2C(session), WT_CONN_READONLY)",15,14,29
!isFinished(),27,1,28
addr,19,9,28
GetMode(stub) == STORE_BUFFER_ONLY,14,14,28
index >= 0 && index < length(),14,14,28
initialized_,14,14,28
(size_t)(emitStateSP - emitStateStack) <= treeDepth,14,14,28
!isFinishedWithModulePrologue(),14,14,28
!initialized(),18,9,27
values >= 0 && values <= 2,19,8,27
"(status.location() != 0 ? status.location() : status.code()), status.reason()",14,13,27
obj,15,12,27
rmode_ == RelocInfo::CELL,13,13,26
descriptor_number < number_of_descriptors(),13,13,26
isFinishedWithModulePrologue(),13,13,26
arg & SLJIT_MEM,13,13,26
 dl.a() != -1 ,13,13,26
sizeof(T) < 8 || isLockfree8(),25,0,25
index >= 0,13,12,25
isFunctionFrame(),18,7,25
!invalid(),16,8,24
fp->fun,12,12,24
aValue != 0,16,8,24
aIndex < mLength,16,8,24
sizeof(v) == (n),12,12,24
"IsValidElementsType(elements, offsetAdjustment)",16,8,24
cg->stackDepth == depth,12,12,24
aBytes[aLength] == '\0',16,8,24
!pendingLazyEvaluation,16,8,24
"SOCK_FAMILY_UNKNOWN_ERROR, ""unsupported address family"", false",12,12,24
rmode_ == RelocInfo::CODE_AGE_SEQUENCE,12,12,24
emitStateSP,12,12,24
IsFound(),12,12,24
!isEmpty(),16,8,24
cond == Zero || cond == NonZero || cond == Signed || cond == NotSigned,18,6,24
JS_FALSE,12,12,24
"this != &rhs, ""self-move assignment is prohibited""",17,6,23
expr,14,8,22
next_.literal_chars,11,11,22
"msgid, msg.c_str()",11,11,22
"void *, int len",11,11,22
isFunction(),14,7,21
ret == 0,14,7,21
ok,12,9,21
currentThreadHasExclusiveAccess(),14,7,21
cacheLockHolder_,15,6,21
isInterpreted(),13,8,21
!rm.IsZero(),21,0,21
map,14,7,21
slot < (uintN)depth,10,10,20
IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_),10,10,20
_key == BalancerDocKey,10,10,20
length > 0,10,10,20
fp->argsobj,10,10,20
 type() == BinData ,10,10,20
a->base <= a->avail && a->avail <= a->limit,10,10,20
CURRENT_THREAD_IS_ME(me),10,10,20
size_ >= 0,10,10,20
Sign() > 0,12,8,20
IsRuntimeEntry(rmode_),10,10,20
buffer_pos < kBufferSize,10,10,20
 _freeIt ,10,10,20
common->control_head_ptr != 0,12,8,20
 ofs != 0 ,10,10,20
sprop->flags & SPROP_HAS_SHORTID,10,10,20
transition_number < number_of_transitions(),10,10,20
scope->ownercx != cx,10,10,20
pn->pn_arity == PN_LIST,10,10,20
void *p,10,10,20
map() == GetHeap()->constant_pool_array_map(),10,10,20
index >= 0 && index < kMaxNumAllocatableRegisters,10,10,20
!CurrentThreadIsIonCompiling(),11,8,19
isInList(),13,6,19
index < length_,11,8,19
p.found(),13,6,19
!IsEmpty(),12,6,18
type() == RegEx,9,9,18
current_.literal_chars,9,9,18
 !bucket.isNull() ,9,9,18
_isNameSet,9,9,18
!IsTransition(),9,9,18
index >= 0 && index < kNumAllocatableRegisters,9,9,18
sizeof(NamespaceDetails) == 496,9,9,18
"session, F_ISSET(session, WT_SESSION_HANDLE_LIST_LOCKED)",9,9,18
scratch != ScratchReg,12,6,18
!mBytes,12,6,18
isJs(),12,6,18
"detail::IsSupported<T>::value && detail::IsSupported<U>::value, ""This type is not supported by CheckedInt""",12,6,18
defined(),12,6,18
 _a != -1 ,9,9,18
 !e.eoo() ,9,9,18
mutationCount == table_->mutationCount,12,6,18
isAsmJS(),12,6,18
isDouble(),13,5,18
script()->needsArgsObj(),12,6,18
JSVAL_IS_DOUBLE_IMPL(l),12,6,18
width >= 1,12,6,18
aSrcStart <= aSrcEnd,12,6,18
"sizeof(HashNumber) == 4, ""subsequent code assumes a four-byte hash""",12,6,18
JSString::isLinear(),12,6,18
slot < numFixedSlots(),12,6,18
p,10,7,17
value() > 0.0,10,7,17
HasSSE3(),12,5,17
ns,8,8,16
sizeof(NamespaceDetails::Extra) == 496,8,8,16
"session, !fh->direct_io || S2C(session)->buffer_alignment == 0 || (!((uintptr_t)buf & (uintptr_t)(S2C(session)->buffer_alignment - 1)) && len >= S2C(session)->buffer_alignment && len % S2C(session)->buffer_alignment == 0)",8,8,16
id < kJSBuiltinsCount,8,8,16
len_ == 1 || len_ == 2,8,8,16
"R2 == ValueOperand(r1, r0)",11,5,16
index < GetInternalFieldCount() && index >= 0,8,8,16
srcw[0] != 0,9,7,16
 f.channel >= 0 ,8,8,16
scope->u.count == 0,8,8,16
 _conn ,8,8,16
!IsCompilingAsmJS(),12,4,16
object->IsHeapObject(),8,8,16
ATOM_IS_OBJECT(atom),8,8,16
0 <= value && value < 256,8,8,16
pn->pn_type == TOK_NAME,8,8,16
rt->gcUnscannedArenaStackTop,8,8,16
pc_ <= buffer_.length(),8,8,16
!is_lazy(),8,8,16
!(flags & INV_IMM),8,8,16
!is_finalized() && position_ < buffer_.length(),10,6,16
rt->gcUnscannedBagSize == 0,8,8,16
"match, node.isOp(JSOP_NOP)",11,5,16
pn->pn_count == 1,8,8,16
sizeof(Node) == 628,8,8,16
a,9,7,16
other.length() == length(),8,8,16
CHAR_BIT == 8,8,8,16
pnkey,8,8,16
isRematerializedFrame(),10,5,15
private_data_ptr != 0,9,6,15
(code_ & 1) == 0,10,5,15
!ins->isCall(),10,5,15
isNative(),10,5,15
n < PROXY_EXTRA_SLOTS,10,5,15
"session, session->split_gen != 0",8,7,15
index < JSSLOT_FREE(getClass()),10,5,15
wrapped,10,5,15
pod.which_ == Variable,10,5,15
common->mark_ptr != 0,9,6,15
slotInRange(slot),10,5,15
pn_arity == PN_LIST,10,5,15
tag == MEM,10,5,15
UseHardFpABI(),10,5,15
thing,9,6,15
isJit(),10,5,15
elements->type() == MIRType_Elements,10,5,15
key == (key & kKeyMask),9,6,15
key <= JSProto_LIMIT,10,5,15
size_t(reg) < mozilla::ArrayLength(names),10,5,15
isTenured(),10,5,15
0 <= index && index < length_,9,6,15
NIndexesMax <= 64,7,7,14
 !_releasedEarly.get() ,7,7,14
 x ,7,7,14
codegen_->expected_safepoint_kind_ == Safepoint::kSimple,7,7,14
offset >= 0,8,6,14
R == 0 || R == 1,7,7,14
dstStart + count <= getDenseCapacity(),9,5,14
GetMode(stub) == mode,7,7,14
"sizeof(SetType) == 4, ""SetType must be 32 bits""",9,5,14
obj->IsHashTable(),7,7,14
 Lock::isLocked() ,7,7,14
cc == ccend,8,6,14
JSID_IS_SYMBOL(id),9,5,14
 dbMutexInfo.isLocked() ,7,7,14
!src1.is(src2),7,7,14
!flags.hadError,9,5,14
!code_object_.is_null(),7,7,14
GetMode(stub) == INCREMENTAL || GetMode(stub) == INCREMENTAL_COMPACTION,7,7,14
instr->IsGap(),7,7,14
lookup_type_ == DESCRIPTOR_TYPE,7,7,14
i < Total,9,5,14
"session, F_ISSET(session, WT_SESSION_SCHEMA_LOCKED)",7,7,14
sizeof(NAME) == sizeof(WTYPE),7,7,14
CanUsePointerImmediates(),7,7,14
inp_flags & LOAD_DATA,7,7,14
 database ,7,7,14
!has_alternatives,8,6,14
NIndexesMax <= NIndexesBase + NIndexesExtra * 2,7,7,14
"common, current",8,6,14
aliasIdx == 1,10,4,14
_isNsSet,7,7,14
!(inst & (ADDR_MODE2 | UPDATE_REQ)),7,7,14
"13118, ""unexpected or missing type value in BSON object"", expr",7,6,13
!isChangeHeap(),8,5,13
!bound(),9,4,13
i >= 0,8,5,13
slot < fp->fun->u.i.nvars,6,6,12
last_ != NULL,6,6,12
mLength + aIncr <= mCapacity,8,4,12
"session, ret == 0",7,5,12
u <= &operands_[numOperands() - 1],8,4,12
JSVAL_IS_STRING(v),6,6,12
aLength <= size_t(-1) / sizeof(T),8,4,12
!js::GCMethods<T>::poisoned(newPtr),6,6,12
array != NULL,6,6,12
*pc == JSOP_IFEQ || *pc == JSOP_IFEQX,6,6,12
 !s.empty() ,6,6,12
u >= &operands_[0],8,4,12
aNode == mRoot,8,4,12
"checkAliasing, !script()->argsObjAliasesFormals()",8,4,12
type > JSVAL_TYPE_DOUBLE,8,4,12
!is_mmapped(p),8,4,12
*pc_ == kCallOpcode,6,6,12
_isServerSet,6,6,12
LOCKED_OBJ_GET_CLASS(obj) == &js_BlockClass,6,6,12
"IsUnsigned<T>::value, ""Rotates require unsigned values""",8,4,12
i < numSuccessors(),8,4,12
cx->localRootStack,6,6,12
pn->pn_arity == PN_BINARY,6,6,12
!aV.usingInlineStorage(),8,4,12
js::CurrentThreadCanAccessRuntime(runtime_),8,4,12
!(oldSize & mozilla::tl::MulOverflowMask<sizeof(T)>::value),8,4,12
rt.IsFPRegister(),6,6,12
JSID_IS_STRING(id),8,4,12
16 == sizeof(DeletedRecord),6,6,12
sn && SN_TYPE(sn) == SRC_SWITCH,6,6,12
"moz_static_assert, __LINE__",8,4,12
script(),8,4,12
JSObject* obj,8,4,12
op == JSGENOP_CLOSE,6,6,12
cx->dormantFrameChain == fp,6,6,12
!cx->throwing,6,6,12
_isPingSet,6,6,12
slow != fast1,8,4,12
valid(),10,2,12
parenIndex < gData->regexp->parenCount,6,6,12
is<T>(),10,2,12
 _didInit ,6,6,12
!this->usedRval_,8,4,12
scope->object == obj,6,6,12
!other.isTotals,8,4,12
_isTimeSet,6,6,12
"aDst + aNElem <= aSrc || aSrc + aNElem <= aDst, ""destination and source must not overlap""",8,4,12
slot < JSCLASS_RESERVED_SLOTS(GetObjectClass(obj)) || IsProxy(obj),8,4,12
state_ == TwoByte,8,4,12
*cc >= OP_KET && *cc <= OP_KETRPOS,7,5,12
uintptr_t(obj) > 0x1000 || uintptr_t(obj) == 0x42,8,4,12
xml->xml_class != JSXML_CLASS_LIST,6,6,12
 best.end() != best.begin() ,6,6,12
i >= 0 && i < length(),6,6,12
 objsize() ,6,6,12
"!IsReference<D>::value, ""rvalue deleter can't be stored by reference""",8,4,12
sprop != child,6,6,12
i < size_t(tag_),8,4,12
i < N,8,4,12
*pc == JSOP_SETSP,6,6,12
_isWhatSet,6,6,12
JSVAL_IS_INT(id),6,6,12
" atest.count(""bar"") == 0 ",6,6,12
Marking::MarkBitFrom(obj) == mark_bit,6,6,12
(l.asBits >> JSVAL_TAG_SHIFT) <= JSVAL_TAG_OBJECT,8,4,12
other->IsNumber(),6,6,12
slot < fp->nvars,6,6,12
 locked >= 1 ,6,6,12
lane < 4,8,4,12
cell,8,4,12
jump->flags & JUMP_LABEL,6,6,12
JSVAL_IS_BOOLEAN(v),6,6,12
"aDest, aSrc, aCount * sizeof(T)",8,4,12
 _pos <= _theend ,6,6,12
_isDetailsSet,6,6,12
reinterpret_cast<uintptr_t>(mRangeStart) + aLength * sizeof(T) >= reinterpret_cast<uintptr_t>(mRangeStart),8,4,12
(ptrBits & 0x7) == 0,8,4,12
Token::IsCompareOp(token),6,6,12
from < to,7,5,12
pn->pn_count != 0,6,6,12
!JSVAL_IS_PRIMITIVE(v),6,6,12
arity_ == 4,8,4,12
isInt32(),8,4,12
uintptr_t(sym) > 0x1000,8,4,12
state == Type2State<T>::result,8,4,12
 sizeof(NamespaceDetails::ExtraOld) == 496 ,6,6,12
n >= 0,8,4,12
!rt->gcRunning,6,6,12
slot == 0,8,4,12
tok < NUM_TOKENS,6,6,12
" ""too much data for sort() with no index"", b.len() < 4000000 ",6,6,12
JSVAL_IS_NUMBER(v),6,6,12
 x < MemoryMappedFile::NChunks ,6,6,12
"!AreAliased(object_, address_, scratch1_, scratch0_)",6,6,12
isMagic(),8,4,12
STRING_BUFFER_OK(sb),6,6,12
" atest.count(""foo"") == 1 ",6,6,12
" atest[""foo""] == 3 ",6,6,12
"!AreAliased(scratch0, object, address, no_reg)",6,6,12
!CapacityHasExcessSpace<T>(aNewCap),8,4,12
!rt.IsZero(),8,4,12
IsStarted(),6,6,12
name->isTenured(),7,5,12
(type_ & kIsNotStringMask) == kStringTag,6,6,12
!isJs(),8,4,12
aliasIdx == 0,7,5,12
c,6,6,12
isObject(),8,4,12
!fp->blockChain,6,6,12
" 10333 , ""Invalid field name"", size != -1 ",6,6,12
JSID_IS_ATOM(sprop->id),6,6,12
!shared()->bound(),6,6,12
 locked >= 0 ,6,6,12
JSVAL_IS_OBJECT(lval),6,6,12
aIndex < Length,8,4,12
value.valueReg() != scratch,12,0,12
digit < (uint32)base,6,6,12
rmode_ == RelocInfo::GLOBAL_PROPERTY_CELL,6,6,12
isSuspended(),8,4,12
slot < JSCLASS_RESERVED_SLOTS(GetObjectClass(obj)),8,4,12
slot < fp->fun->nargs,6,6,12
 ok() ,6,6,12
rt->requestCount > 0,6,6,12
" 10348 , ""$extra: ns name too long"", s.size() < MaxNsLen",6,6,12
IsTransition(),6,6,12
slow != fast2,8,4,12
(*cc >= OP_ASSERT && *cc <= OP_ASSERTBACK_NOT) || (*cc >= OP_ONCE && *cc <= OP_SCOND),7,5,12
"aShift < sizeof(T) * CHAR_BIT, ""Shift value is too large!""",8,4,12
"IsFloatingPoint<T>::value, ""floating point type required""",8,4,12
lsb + width <= rn.SizeInBits(),6,6,12
!fp->dormantNext,6,6,12
"sizeof(MutableHandle<T>) == sizeof(T*), ""MutableHandle must be binary compatible with T*.""",8,4,12
"match, node.isArity(PN_NULLARY)",8,4,12
index < length(),7,5,12
obj->IsDictionary(),6,6,12
"JS_IS_SCOPE_LOCKED(cx, scope)",6,6,12
is_function_scope(),6,6,12
stat != PR_FAILURE,6,6,12
sizeof(Value) == sizeof(Layout),6,6,12
containsPC(pc) && containsPC(pc + sizeof(uint32_t)),8,4,12
isFinishedWithModulePrologue() && !isFinishedWithFunctionBodies(),6,6,12
var != kNoVar,6,6,12
string->IsExternalString(),6,6,12
 _fields ,6,6,12
 i < NIndexesMax ,6,6,12
"sizeof(JSValueTag) == sizeof(uint32_t), ""compiler typed enum support is apparently buggy""",8,4,12
sp - fp->spbase >= 2,6,6,12
mLength <= mReserved,8,4,12
!handle_.is_null(),6,6,12
i < n,6,6,12
"sizeof(T) > 0, ""T must be complete""",8,4,12
usingInlineStorage(),8,4,12
flag != IS_CPP_ENTRY,8,4,12
!listElem->isInList(),8,4,12
kind() == OPTIMIZED_FUNCTION,6,6,12
!(keyHash & sCollisionBit),8,4,12
*pc == JSOP_POP,6,6,12
uintptr_t(str) > 0x1000,8,4,12
"10064, ""not a dbref"", type() == DBRef",6,5,11
IsPowerOfTwo(alignment),7,4,11
"10063, ""not a dbref"", type() == DBRef",6,5,11
!xn.IsZero(),8,3,11
data,6,5,11
address.base != scratch,11,0,11
IsValidOrNone(),6,5,11
isOwned(),7,4,11
length != 0,6,5,11
"13273, ""single data buffer expected"", _buf",6,5,11
imm < 32,8,3,11
index < 0,6,5,11
shape,8,3,11
_intents.size() < 2000000,6,5,11
"session, ref->state == WT_REF_LOCKED",7,4,11
hasTrackedOptimizations(),8,3,11
mir->type() == MIRType_Value,8,3,11
" 13075 , ""db name can't be empty"" , i > 0 ",5,5,10
"CodeAlignment % SimdMemoryAlignment == 0, ""Code alignment should be larger than any of the alignments which are used for "" ""the constant sections of the code buffer. Thus it should be larger than the "" ""alignment for SIMD constants.""",7,3,10
"common, cc, BACKTRACK_AS(assert_backtrack), FALSE",6,4,10
 x > 0 ,5,5,10
result,6,4,10
 h > 0 ,5,5,10
arrayType >= 0 && arrayType < Scalar::MaxTypedArrayViewType,6,4,10
i < length_,6,4,10
!pattern.isEmpty(),5,5,10
msgid,6,4,10
CpuFeatures::VerifyCrossCompiling(SSE2),5,5,10
!(cond & DoubleConditionBitSpecial),7,3,10
"__VA_ARGS__, __FILE__, __LINE__",5,5,10
reg.is_valid(),5,5,10
cond == Assembler::Equal || cond == Assembler::NotEqual,7,3,10
" ""too much key data for sort() with no index"", approxSize < 1 * 1024 * 1024 ",5,5,10
Tag == MEM,7,3,10
 atLeastReadLocked() ,5,5,10
src.index != scratch,10,0,10
this,5,5,10
"msgid, status",6,4,10
ptr,7,3,10
code < kNumberOfRegisters,6,4,10
codegen_->info()->is_calling(),5,5,10
ProtoChainDepth == protoChainDepth(),7,3,10
IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_) || rmode_ == EMBEDDED_OBJECT || rmode_ == EXTERNAL_REFERENCE,5,5,10
"13142, ""timeout getting readlock"", got()",5,5,10
"13095, ""HostAndPort: bad port #"", port > 0",5,5,10
private_data_ptr == 0,6,4,10
details_.type() != NONEXISTENT,5,5,10
 haveClient() ,5,5,10
InstructionType() == kRegisterType || InstructionType() == kImmediateType,5,5,10
sizeof(T) == kPointerSize,5,5,10
JSID_IS_INT(id),6,4,10
kind() == STUB,5,5,10
 !haveCursor() ,5,5,10
" 13074 , ""db name can't be empty"" , ns.size() ",5,5,10
"MatchContext<Context>::valid, ""Invalid cx type in VMFunction""",6,4,10
 a < 64 * 1024 * 1024 ,5,5,10
!const_,5,5,10
src.base != scratch,10,0,10
flags & JSITER_ENUMERATE,6,4,10
aRefCount != DEAD,6,4,10
has_constant_parameter_count(),5,5,10
!is_finalized(),6,4,10
c != '\0',6,4,10
!label,5,5,10
object->IsMap() || object->IsUndefined(),5,5,10
 r._freeIt ,5,5,10
cellp,6,4,10
 !dl.isNull() ,5,5,10
 dl.sameFile(myLoc) ,5,5,10
!(flags & SET_FLAGS) && arg1 == TMP_REG1,5,5,10
 kn.isUsed() ,5,5,10
" 13280 , (string)""invalid db name: "" + ns , NamespaceString::validDBName( d ) ",5,5,10
!jump,5,5,10
magic == 0x41424344,5,5,10
!GCMethods<T>::poisoned(v),5,5,10
length == static_cast<size_t>(static_cast<int>(length)),6,4,10
 z >= 0 ,5,5,10
" 10062 , ""not code"" , 0 ",5,5,10
"Ordering::make(orderObj),force",5,5,10
!IsSpecial(),6,4,10
private_data_ptr == OVECTOR(offset + 0),6,4,10
 _operation == opReply ,5,5,10
script,6,4,10
map() != HEAP->fixed_cow_array_map(),5,5,10
common->has_set_som,6,4,10
 r.freeIt ,5,5,10
!target->IsConsString(),5,5,10
to <= length_,6,4,10
 responseTo > 0 ,5,5,10
 x == 0 ,5,5,10
descriptor->environment_length() + 1 == operands.length(),5,5,10
0 <= from,6,4,10
CurrentThreadCanAccessRuntime(runtime_),7,3,10
map() != GetHeap()->fixed_cow_array_map(),5,5,10
length > 1,6,4,10
value == (value & kValueMask),6,4,10
slot <= SHAPE_INVALID_SLOT,6,3,9
"endpointA.shardVersion.epoch(), endpointB.shardVersion.epoch()",5,4,9
hasArgs(),6,3,9
compilingAsmJS(),6,3,9
Valid(),6,3,9
isEmpty(),6,3,9
literal->isArity(PN_LIST),6,3,9
"ok_address(m, p)",6,3,9
chunksize(p) == small_index2size(idx),6,3,9
hasLatin1Chars(),6,3,9
isExtended(),6,3,9
x % Alignment == 0,5,4,9
i < numFormalArgs(),6,3,9
imm < 64,6,3,9
(flags & OBJECT_FLAG_DYNAMIC_MASK) == flags,6,3,9
left->type() == right->type(),6,3,9
!isCompactFormat(),5,4,9
"13111, ss.str()",5,4,9
 _keyData > (const unsigned char *) 1 ,5,4,9
last_ != nullptr,6,3,9
"endpointA.shardVersion.toLong(), endpointB.shardVersion.toLong()",5,4,9
hasTwoByteChars(),6,3,9
_itemIndex < static_cast<int>(_request->sizeWriteOps()),6,3,9
pod.which_ == Constant,6,3,9
!types->unknown(),6,3,9
matchesInput,6,3,9
modifyCount_ == owner_->modifyCount_,6,3,9
"session, !F_ISSET(S2C(session), WT_CONN_IN_MEMORY)",5,4,9
!p.found(),6,3,9
item->next == nullptr,6,3,9
(is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD),6,3,9
"session, bytes_to_allocate != 0",6,3,9
"session, F_ISSET(session, WT_SESSION_LOCKED_HANDLE_LIST)",8,1,9
state_ == Absolute,6,3,9
refCount <= 0,5,4,9
"_txn, txn",5,4,9
more(),6,3,9
!v.isMagic(),6,3,9
offset <= target->length(),6,3,9
"JitStackAlignment % SimdMemoryAlignment == 0, ""Stack alignment should be larger than any of the alignments which are used for "" ""spilled values. Thus it should be larger than the alignment for SIMD accesses.""",6,3,9
this->is<T>(),6,3,9
found(),6,3,9
value < numBits_,6,3,9
index < numOperands(),6,3,9
bits_,6,3,9
res,6,3,9
tag_ >= 0,6,3,9
IsFloatingPointType(type),6,3,9
common->utf,5,4,9
(offset & 0x3) == 0,6,3,9
cur_ <= end_,6,3,9
!script()->isDebuggee(),6,3,9
i < script()->nfixed(),6,3,9
!isInline(),6,3,9
catchingException(),6,3,9
status == PR_SUCCESS,6,3,9
kind() == MEM_SCALE,6,3,9
"n, n->isTenured()",6,3,9
allocated(),6,3,9
"checkAliasing && i < numFormalArgs(), !script()->formalIsAliased(i)",6,3,9
isRope(),6,3,9
which < mozilla::ArrayLength(toExtended()->extendedSlots),6,3,9
dataType == DataCompressed,6,3,9
!isGenerator(),6,3,9
SomeTypedArray::is(args.thisv()),6,3,9
isMemoryOrEffectiveAddress(),6,3,9
count < 32,6,3,9
pod.which_ == SimdOperation,6,3,9
i < numActualArgs(),6,3,9
type == TOK_NUMBER,6,3,9
(uintptr_t(t) & 1) == 0,6,3,9
kind < PNK_LIMIT,6,3,9
specialization_ == MIRType_Int32,6,3,9
chunksize(p) == small_index2size(i),6,3,9
i < data()->numArgs,6,3,9
 isABSONObj() ,4,4,8
sfe,4,4,8
" 12001 , ""E12001 can't sort with $snapshot"", _order.isEmpty() ",4,4,8
HasTransitionArray(),4,4,8
pn->pn_type == TOK_RC,4,4,8
scope->ownercx == cx,4,4,8
"size, answer->Size()",4,4,8
code < kNumberOfFPRegisters,4,4,8
IsReserved(),4,4,8
(JSInt32)outlen > 0,4,4,8
location != 0,5,3,8
scope->u.count > 0,4,4,8
" 10080 , ""ns name too long, max size is 128"", ns.size() < MaxNsLen - 1",4,4,8
pnp != &pn1->pn_next,4,4,8
 pos >= 0 && pos <= n ,4,4,8
" 0, W.n == 0 ",4,4,8
"SPROP_HAS_VALID_SLOT(sprop, OBJ_SCOPE(pobj))",4,4,8
lrc != &lrs->firstChunk,4,4,8
 n >= 0 && n < DiskLoc::MaxFiles ,4,4,8
cx->exception != JSVAL_HOLE,4,4,8
is_compare_ic_stub(),4,4,8
*pc2 == JSOP_CASE || *pc2 == JSOP_DEFAULT || *pc2 == JSOP_CASEX || *pc2 == JSOP_DEFAULTX,4,4,8
FUN_INTERPRETED(fun),4,4,8
is_empty(),4,4,8
 d.a() >= Base ,4,4,8
" 10105 , ""bad skip value in query"", _ntoskip >= 0",4,4,8
" 12527 , ""not okForStorage"" , e.embeddedObject().okForStorage() ",4,4,8
fp->callobj,4,4,8
*state->prevp == state,4,4,8
addr.offset == 0,6,2,8
filelength > 32768 ,4,4,8
!object_.handle().is_null(),4,4,8
scope->object == pobj,4,4,8
msg.c_str(),4,4,8
 Lock::isW() ,4,4,8
!rt->gcRunning || rt->gcLevel > 0,4,4,8
cx->thread,4,4,8
!obj->IsFailure(),4,4,8
len > 0,4,4,8
!js::gc::IsInsideNursery(thing.asCell()),6,2,8
size >= static_cast<size_t>(Page::kPageSize),4,4,8
(data_ & kTagMask) != kEmptyTag,4,4,8
sprop->getter == js_GetLocalVariable,4,4,8
index >= 0 && index < NumAllocatableRegisters(),4,4,8
"OBJ_GET_CLASS(cx, obj) == &js_BlockClass",4,4,8
sequence_start_ != kNoSequence,4,4,8
 queue.capacity() == oldCap ,4,4,8
!src1.is(src3),4,4,8
"16686, ""error converting js type to Utf8Value"", *_str",4,4,8
nodes[0].hash == 0,4,4,8
"OBJ_GET_CLASS(cx, obj) == &js_RegExpClass",4,4,8
!JSVAL_IS_PRIMITIVE(sp[-1]),4,4,8
"!AreAliased(object_, address_orig_, scratch1_, scratch0_)",4,4,8
this->data()->IsFixedArray(),4,4,8
" d, idxNo ",4,4,8
 pos < 32 ,4,4,8
1 <= length,4,4,8
"OBJ_GET_CLASS(cx, obj)->flags & JSCLASS_HAS_PRIVATE",4,4,8
sizeof(*x),4,4,8
index < gData->regexp->classCount,4,4,8
0 <= index && index < parameters_count(),4,4,8
"(JSVAL_TAG_STRING & 0x03) == JSTRACE_STRING, ""Value type tags must correspond with JSGCTraceKinds.""",4,4,8
" 10161 , ""Invalid modifier specified "" + string( fn ), false ",4,4,8
index >= 0 && index < array->length(),4,4,8
pn->pn_arity == PN_NULLARY,4,4,8
" 10334 , s , 0 ",4,4,8
occupancy_ < capacity_,4,4,8
!GetHeap()->InNewSpace(GetHeap()->empty_fixed_array()),4,4,8
!fp || (fp->fun != fun && fp->varobj != funobj && fp->scopeChain != funobj),4,4,8
Smi::IsValid(value),4,4,8
"sFreeKey == 0, ""newly-calloc'd tables have to be considered empty""",6,2,8
which < js_SrcNoteSpec[SN_TYPE(sn)].arity,4,4,8
!address_orig_.is(object_),4,4,8
str1,4,4,8
reportp,4,4,8
"JS_InstanceOf(cx, obj, &js_BlockClass, NULL)",4,4,8
JSVAL_TO_PRIVATE(iterobj->slots[JSSLOT_CLASS]) == &js_IteratorClass,4,4,8
sp - fp->spbase >= 3,4,4,8
" 10349 , ""E12000 idxNo fails"", false",4,4,8
index < properties()->length(),4,4,8
pn2->pn_op == JSOP_SETXMLNAME,4,4,8
InstructionType() == kRegisterType,4,4,8
"detail::IsVariant<T, Ts...>::value, ""provided a type not found in this Variant's type list""",8,0,8
pn2,4,4,8
 headerSize() == 8192 ,4,4,8
 ofs >= headerSize() ,4,4,8
 preceeding[m] >= 0 ,4,4,8
parent != xml,4,4,8
is_simple_api_call(),4,4,8
first_instruction == kTwoByteNopInstruction,4,4,8
other.type() == type_,6,2,8
sp > fp->spbase,4,4,8
OBJ_IS_NATIVE(pobj),4,4,8
!js::GCMethods<T>::poisoned(value),4,4,8
kid->parent == sprop,4,4,8
!gen->arena.next,4,4,8
offset + nbytes <= GC_THINGS_SIZE,4,4,8
ndefs == 0,4,4,8
!has_error_,4,4,8
offset < limit,4,4,8
sizeof(unsigned int) == sizeof(JSUint32),4,4,8
reg.code() != 0,4,4,8
 client->name == buf ,4,4,8
lookup_type_ == DICTIONARY_TYPE,4,4,8
sprop != overwriting,4,4,8
*flagp != GCF_FINAL,4,4,8
"(JSVAL_TAG_OBJECT & 0x03) == JSTRACE_OBJECT, ""Value type tags must correspond with JSGCTraceKinds.""",4,4,8
rmode_ == RelocInfo::EXTERNAL_REFERENCE,4,4,8
!IsPoisonedValue(v),4,4,8
 dbLocked == 1 ,4,4,8
kHeapObjectTag == 1,4,4,8
"IndexDetails& idx, vector<BSONObj*>& addedKeys, DiskLoc head, DiskLoc self, const Ordering& ordering",4,4,8
OBJ_SCOPE(obj) == scope,4,4,8
unprocessed_columns != 0,4,4,8
"14802, ""index v field should be Integer type"", v == 0",4,4,8
n != 0,4,4,8
"OBJ_GET_CLASS(cx, funobj) == &js_FunctionClass",4,4,8
cg->stackDepth > 0,4,4,8
elements_kind < kElementsKindCount,4,4,8
offset >= 6,4,4,8
pnprop->pn_type == TOK_COLON,4,4,8
has_next(),4,4,8
precision > 0,4,4,8
bytes_generated < assembler_->kGap,4,4,8
ATOM_IS_STRING(*atomp),4,4,8
hasValue(),5,3,8
*pnp == pn1,4,4,8
IsSimdType(obj->type()),5,3,8
GetType(descriptor_number) == CALLBACKS,4,4,8
IsCodeTarget(rmode_) || rmode_ == RUNTIME_ENTRY,4,4,8
nuses == 0,4,4,8
id == ATOM_KEY(atom),4,4,8
" 13492, ""mod must be RENAME_TO type"", op == Mod::RENAME_TO ",4,4,8
"!""You must overwrite one of the accepted methods""",4,4,8
!JS::IsPoisonedPtr(l),4,4,8
page->owner() == owner(),4,4,8
!MAP_IS_NATIVE(map) || ((JSScope *)map)->object == obj,4,4,8
*pc == JSOP_DUP,4,4,8
aCur <= aEnd,6,2,8
codegen_->expected_safepoint_kind_ == Safepoint::kWithRegisters,4,4,8
JSVAL_IS_OBJECT(v),4,4,8
"IsAligned(reinterpret_cast<intptr_t>(list), kPointerAlignment)",4,4,8
JSVAL_IS_INT(rval),4,4,8
pos < ss->top,4,4,8
IsOpen(),4,4,8
"session, F_ISSET(r, WT_SKIP_UPDATE_RESTORE)",4,4,8
pn2->pn_type == TOK_XMLNAME || pn2->pn_type == TOK_LC,4,4,8
pn->pn_type == TOK_XMLLIST || pn->pn_count != 0,4,4,8
rt->gcUnscannedArenaStackTop->prevUnscanned,4,4,8
kSmiTag == 0,4,4,8
TypeTag() != NOT_COMPILED,4,4,8
!rs.Aliases(dst.base()),8,0,8
 !testIntent || MongoMMF::switchToPrivateView(p) != p ,4,4,8
 _pos < _theend ,4,4,8
to_space_.Capacity() == from_space_.Capacity(),4,4,8
" 10103 , ""bad order array [2]"", e.isNumber()",4,4,8
 type()==Object || type()==Array ,4,4,8
context->IsTest(),4,4,8
ss->top >= 2,4,4,8
top == sd->before,4,4,8
is_crankshafted(),4,4,8
map() != GetHeap()->fixed_cow_array_map() && map() != GetHeap()->fixed_array_map(),4,4,8
*pc == JSOP_GOTO || *pc == JSOP_GOTOX,4,4,8
IsPowerOf2(unit_size),4,4,8
(kIsIndirectStringMask & kStringEncodingMask) == 0,4,4,8
 getState() > 0 ,4,4,8
!src2.is(src3),4,4,8
 type() == CodeWScope ,4,4,8
obj->slots && slot < obj->map->freeslot,4,4,8
sn && SN_TYPE(sn) == SRC_PCDELTA,4,4,8
pn2->pn_type != TOK_RP,4,4,8
"!AreAliased(object_orig_, address_, scratch1_, scratch0_)",4,4,8
"17184, !_isolate",4,4,8
!js::GCMethods<T>::poisoned(v),4,4,8
!rs.Aliases(rt),8,0,8
"!OBJ_GET_PARENT(cx, obj)",4,4,8
"length_, 0",4,4,8
curState->u.quantifier.min <= curState->u.quantifier.max,4,4,8
"AreSameSizeAndType(rt, rt2)",4,4,8
"session, !F_ISSET(r, WT_EVICTING)",6,2,8
(uintN)op < (uintN)JSOP_LIMIT,4,4,8
newscope->ownercx == cx || (!newscope->ownercx && newscope->u.count == 1),4,4,8
" 10437 , ""unknown boost failed"" , false ",4,4,8
shared()->bound(),4,4,8
mir_->isDiv() || mir_->isMod(),6,2,8
" 10102 , ""bad order array"", !e.eoo()",4,4,8
 (data-(char*)this) == headerSize() ,4,4,8
(uintN)slot < fp->script->depth,4,4,8
address,4,4,8
"this != &aOther, ""Self-moves are prohibited""",6,2,8
"OBJ_GET_CLASS(cx, parent) == &js_BlockClass",4,4,8
o <= h.leof && o >= sizeof(RecStoreHeader),4,4,8
min <= max,5,3,8
"IsAddressAligned(start, MemoryChunk::kAlignment)",4,4,8
map() != HEAP->fixed_cow_array_map() && map() != HEAP->fixed_array_map(),4,4,8
 _done ,4,4,8
"10320 , msg.c_str(),false",4,4,8
ShouldBeSweptLazily(p),4,4,8
object_.is(object_orig_) || address_.is(address_orig_),4,4,8
offset < JSSTRING_LENGTH(gData->regexp->source),4,4,8
arena->prevUnscanned,4,4,8
HasEnumCache(),4,4,8
 ! _other.isEmpty() ,4,4,8
scope->table,4,4,8
Token::IsCompareOp(op),4,4,8
nelem != 0,4,4,8
"IsAligned(offset, static_cast<unsigned>(kIntSize))",4,4,8
0 <= index && index < expression_count(),4,4,8
forelem_tail > pc,4,4,8
" 10107 , ""not master"" , expr ",4,4,8
is_binary_op_stub(),4,4,8
kSmiTagSize == 1,4,4,8
IsFlat(),4,4,8
delta >= 1 + JUMP_OFFSET_LEN,4,4,8
length <= JSSTRING_LENGTH(gData->regexp->source) - offset,4,4,8
 nodes[i].hash == k.hash() ,4,4,8
cx->thread->id == js_CurrentThreadId(),4,4,8
nvars++ <= fun->u.i.nvars,4,4,8
ov != nv,4,4,8
cg->current == &cg->main,4,4,8
!JSSTRING_IS_DEPENDENT(str),4,4,8
"(JSVAL_TAG_SYMBOL & 0x03) == JSTRACE_SYMBOL, ""Value type tags must correspond with JSGCTraceKinds.""",4,4,8
n < ARRAY_SIZE(double_registers_),4,4,8
kIsIndirectStringTag != 0,4,4,8
map->depth > 0,4,4,8
"sizeof(SetType) == 8, ""SetType must be 64 bits""",6,2,8
op == JSOP_GETELEM || op == JSOP_CALLELEM,5,3,8
"session, txn_global->scan_count > 0",4,4,8
getter == js_GetLocalVariable,4,4,8
" 10104 , ""too many ordering elements"", *p <= '9'",4,4,8
 local && local[0] != '.' ,4,4,8
n >= 2,4,4,8
!parent,4,4,8
cs->length > ATOM_INDEX_LEN,4,4,8
isFinishedWithFunctionBodies(),4,4,8
nodes[n-1].hash == 0,4,4,8
code >= 0,4,4,8
from <= to,5,3,8
 s > 1 ,4,4,8
 _r.x == NilState ,4,4,8
pn->pn_count > 2,4,4,8
IsMovT(Memory::int32_at(pc + kInstrSize)),4,4,8
prop,4,4,8
"13513, ""sort must be an object or array""",4,4,8
 database->name == buf ,4,4,8
(sprop->flags & SPROP_HAS_SHORTID) && (uint16) sprop->shortid < fun->u.i.nvars,4,4,8
 s == -1 ,4,4,8
SN_TYPE(sn) == SRC_LABEL,4,4,8
forelem_done > pc,4,4,8
sizeof(T) == sizeof(v8::internal::Address),4,4,8
" 10330 , ""Element extends past end of object"", e.size() + offset <= this->objsize() ",4,4,8
IsNumber(),4,4,8
x != 0,4,4,8
nargs++ <= fun->nargs,4,4,8
len_ == 1,4,4,8
"JS_IS_OBJ_LOCKED(cx, obj)",4,4,8
hasScript(),5,3,8
SN_TYPE(sn) != SRC_XDELTA,4,4,8
pn2->pn_op == JSOP_CALL || pn2->pn_op == JSOP_EVAL,4,4,8
length == 0 || (length > 0 && data != NULL),4,4,8
!pn4->pn_expr,4,4,8
UsesSeed,4,4,8
second_instruction == kFiveByteNopInstruction,4,4,8
noteIndex != -1,4,4,8
str2,4,4,8
"session, !F_ISSET(S2C(session), WT_CONN_READONLY) || WT_STRING_MATCH(fh->name, WT_SINGLETHREAD, strlen(WT_SINGLETHREAD))",4,4,8
base.Is64Bits() && !base.IsZero(),4,4,8
slots_buffer_ == NULL,4,4,8
q != XML_NOT_FOUND,4,4,8
 _self ,4,4,8
gData->stateStackTop,4,4,8
IsKeyword(),4,4,8
charSet->converted,4,4,8
" 12002 , ""E12002 can't use hint with $snapshot"", _hint.eoo() ",4,4,8
DPML_DEBUG_ABS(x) < t,7,0,7
" 15911, ""Doesn't have cursor for reading oplog"", cursor.get() ",4,3,7
--mutex_ == -1,4,3,7
 !mockEndpoints.empty() ,4,3,7
mutex_++ == -1,4,3,7
e_ == other.e_,4,3,7
othercasebit,4,3,7
stackpos == STACK(stacktop),4,3,7
tt != TOK_EOL,4,3,7
"session, F_ISSET(session, WT_SESSION_LOCKED_SLOT)",6,1,7
!((bra == OP_BRAZERO && ket == OP_KETRMIN) || (bra == OP_BRAMINZERO && ket == OP_KETRMAX)),4,3,7
?!,4,3,7
nltype == NLTYPE_FIXED && common->newline < 256,4,3,7
extra_ <= MAX_PROTO_CHAIN_DEPTH,5,2,7
cc == ccend && stackptr == stacktop && (save || (tmp1empty && tmp2empty)),4,3,7
scratch != lhs.base,7,0,7
*cc == XCL_PROP || *cc == XCL_NOTPROP,4,3,7
!tmp1empty,4,3,7
"16471, ""UnorderedFastKeyTable couldn't add entry after growing many times""",4,3,7
"13103, ""too many compound keys"", n <= 31",4,3,7
"0, mutex_lock_decl_missing_var_name",4,3,7
args % sizeof(intptr_t) == 0,4,3,7
ket == OP_KET || ket == OP_KETRMAX || ket == OP_KETRMIN,4,3,7
 _wi._writes.size() < 20000000 ,3,4,7
scratch32.asUnsized() != address.base,7,0,7
"ctype_word == 0x10, ctype_word_must_be_16",4,3,7
 _pos >= _start ,4,3,7
index < characters_,4,3,7
key->isKind(PNK_NUMBER) || key->isKind(PNK_OBJECT_PROPERTY_NAME) || key->isKind(PNK_STRING) || key->isKind(PNK_COMPUTED_NAME),5,2,7
opcode >= OP_ASSERT && opcode <= OP_ASSERTBACK_NOT,4,3,7
 _wi._writes.size() < 2000000 ,3,4,7
!other.isInvalid(),5,2,7
k >> BITS == 0,4,3,7
exn < JSEXN_LIMIT,4,3,7
f_ >= other.f_,4,3,7
index != 0,4,3,7
!tmp2empty,4,3,7
FALSE,7,0,7
++mutex_ > 0,4,3,7
 !queryRange[LT.l_].eoo() ,4,3,7
"13294, ss.str()",4,3,7
(extra->flags & PCRE_EXTRA_STUDY_DATA) != 0,4,3,7
mutex_ == 0,4,3,7
mutex_-- > 0,4,3,7
(0 <= i) && (i < length()),4,3,7
stackpos >= stacktop + 2,4,3,7
 !queryRange[GTE.l_].eoo() ,4,3,7
offset_ == offset,4,3,7
*cc == OP_BRA || *cc == OP_CBRA || *cc == OP_CBRAPOS || *cc == OP_SCBRA || *cc == OP_SCBRAPOS,4,3,7
JSFunction::offsetOfNargs() % sizeof(uint32_t) == 0,5,2,7
JSFunction::offsetOfFlags() == JSFunction::offsetOfNargs() + 2,5,2,7
isEvalFrame(),5,2,7
opcode == OP_COND || opcode == OP_SCOND,4,3,7
"0, rmutex_lock_decl_missing_var_name",4,3,7
((size_t)buf) % 8 == 0,4,3,7
!conditional,4,3,7
"10011, ""no collection name"", coll.size()",4,3,7
*cc != OP_BRAMINZERO,4,3,7
!label->bound(),4,3,7
value == 1,4,3,7
type() == Function,5,2,7
"13348, ""connection died"", this",4,3,7
info()->replacement_calculated,4,3,7
UCD_BLOCK_SIZE == 128 && sizeof(ucd_record) == 8,4,3,7
"10335, ""builder does not own memory"", owned()",4,3,7
c != oc,4,3,7
"session, start_chunk + nchunks <= lsm_tree->nchunks",5,2,7
args_.empty(),5,2,7
" 15910, ""Doesn't have cursor for reading oplog"", cursor.get() ",4,3,7
f_ != 0,4,3,7
"0, wmutex_lock_decl_missing_var_name",4,3,7
args <= saveds,3,3,6
wrappedArg.isString() || wrappedArg.isObject(),4,2,6
iter.isBaselineJS(),4,2,6
mRangeEnd == aOther.mRangeEnd,4,2,6
"detail::GeqZero<IntType>::check(aEnd), ""Should never have negative value here""",4,2,6
"offsetof(SelfHostedWrapper, funname) == offsetof(JSNativeWrapper, info), ""JS_SELF_HOSTED* macros below require that "" ""SelfHostedWrapper::funname overlay "" ""JSNativeWrapper::info""",4,2,6
 curr.isNull() ,3,3,6
instruction_,4,2,6
lhs->type() == rhs->type(),4,2,6
" 12600, ""invalid _findingStartMode"", false ",3,3,6
"JSContext* cx, JSObject* obj, jsid id, BaseProxyHandler::Action act",4,2,6
funObj,4,2,6
"_data, oldBuffer",3,3,6
"!IsNaN(aValue), ""NaN does not have a sign""",4,2,6
last == mRoot,4,2,6
aPtr,4,2,6
significand & Traits::kSignificandBits,4,2,6
pod.which_ == FFI,4,2,6
"13082, getAddrInfoStrError(ret), ret == 0",3,3,6
state_ == Relative,4,2,6
"(Base::kExponentBits & Base::kSignificandBits) == 0, ""exponent bits shouldn't overlap significand bits""",4,2,6
num_words > 0,3,3,6
!(p.keyHash & sCollisionBit),4,2,6
rmode_ == EXTERNAL_REFERENCE,3,3,6
type() != MIRType_None,4,2,6
aNode->mRight->mParent == aNode,4,2,6
rhs.value,4,2,6
" 10299 , ""can't temprelease nested read lock"", _locktype == -1",3,3,6
 x <= 0x7fffffff ,3,3,6
JSID_IS_VOID(id) || JSID_IS_EMPTY(id) || JSID_IS_STRING(id) || JSID_IS_SYMBOL(id),4,2,6
"Comparator::compare(*leftMaximum, *aNode) < 0",4,2,6
"(detail::IsInBounds<From, To>(aFrom))",4,2,6
"!IsArray<U>::value, ""can't assign from UniquePtr holding an array""",4,2,6
reinterpret_cast<Object*>(value)->IsSmi(),3,3,6
FUNCTION_CHECK_IS_REG(((p) >> 4) & 0xf),3,3,6
"aNElem <= SIZE_MAX / sizeof(T), ""trying to move an impossible number of elements""",4,2,6
excludingMongoVersions.hasDefault(),3,3,6
aP <= end(),4,2,6
n < ARRAY_SIZE(registers_),3,3,6
!inDictionary(),4,2,6
"13282, ""missing Extra"", e",3,3,6
isDummy(),4,2,6
"sizeof(char16_t) == 2, ""Is char16_t type 16 bits?""",4,2,6
!stack,4,2,6
isMonitoredFallback(),4,2,6
i < numSlots(),4,2,6
base,4,2,6
literal->isKind(PNK_OBJECT),4,2,6
" 10438 , ""ReadFile error - truncated file?"", read == len",3,3,6
"codestart, &temp_options, FALSE",3,3,6
type < JSEXN_LIMIT,4,2,6
"match, node.isArity(PN_NAME)",4,2,6
" 13335, ""yield not supported"", false ",3,3,6
"mozilla::IsPointer<T>::value || mozilla::IsIntegral<T>::value, ""mozilla::ThreadLocal must be used with a pointer or "" ""integral type""",4,2,6
left->type() == t,4,2,6
!entry->isRemoved(),4,2,6
" 10306 , ""Client Error: Next object larger than space left in message"", js.objsize() < ( theEnd - data ) ",3,3,6
pn->pn_pos.begin <= pn->pn_pos.end,4,2,6
isBaselineJS(),4,2,6
"session, F_ISSET(session, WT_SESSION_LOCKED_SCHEMA)",4,2,6
state_ == Latin1,4,2,6
isConstructing(),4,2,6
slots->type() == MIRType_Slots,4,2,6
SupportsSimd,4,2,6
size == 4,3,3,6
mRangeStart <= mRangeEnd,4,2,6
isLoopHeader(),4,2,6
pod.which_ == MathBuiltinFunction,4,2,6
is_finalized(),4,2,6
bound(),5,1,6
group->clasp() == shape->getObjectClass(),4,2,6
state == None,4,2,6
"MOZ_ALIGNOF(T) == MOZ_ALIGNOF(Storage), ""SegmentedVector provides incorrect alignment""",4,2,6
" 10323 , ""Invalid CodeWScope string size"", totalSize >= strSizeWNull + 4 + 4 ",3,3,6
isObjectOrNull(),4,2,6
mLength + aNeeded <= mReserved,4,2,6
"sizeof(T) <= sizeof(void*), ""mozilla::ThreadLocal can't be used for types larger than "" ""a pointer""",4,2,6
location_ != NULL,3,3,6
_isWaitingSet,3,3,6
i < length(),3,3,6
"this != &aRhs, ""self-move assignment is prohibited""",4,2,6
mutatingBackedgeList_,4,2,6
lsb + width <= rn.size(),6,0,6
"sizeof(Dest) == sizeof(Source), ""BitCast's source and destination types must be the same size""",4,2,6
" ""invalid parameter: expected an object"", type()==Object || type()==Array ",3,3,6
scratch != src.base,6,0,6
 cmdLine.dur ,3,3,6
isSymbol(),4,2,6
*pc == JSOP_LOOPENTRY,4,2,6
!label || label->size >= word_count,3,3,6
hasMore(),4,2,6
size_ < capacity_,4,2,6
mNeedNewlines.resizeUninitialized(mDepth + 1),4,2,6
"!JSID_IS_EMPTY(id), id == IdToTypeId(id)",4,2,6
 details->_objsize <= 1024 * 1024 * 16 ,3,3,6
"session, ref->key.recno > recno",3,3,6
entryCount_ + removedCount_ <= capacity(),4,2,6
"13110, ""HostAndPort: bad config string"", *p",3,3,6
!setter.selfHosted.unused,4,2,6
!resolved,4,2,6
IsInRange(offset),4,2,6
JSString::isInline(),4,2,6
aVersion != JSVERSION_UNKNOWN,4,2,6
size_in_bytes <= sizeof(T),3,3,6
static_cast<size_t>(n) <= strlen(s),4,2,6
initLength->type() == MIRType_Int32,4,2,6
chars[length] == '\0',4,2,6
*stack == reinterpret_cast<Rooted<void*>*>(this),4,2,6
"sizeof(MOZ_UTF16("""")[0]) == 2, ""Is string char 16 bits?""",4,2,6
op != JS_PropertyStub,4,2,6
parent->mRight == aNode,4,2,6
i < argc(),4,2,6
"session, (p == NULL && bytes_allocated == 0) || (p != NULL && (bytes_allocated_ret == NULL || bytes_allocated != 0))",4,2,6
_isClientAddrSet,3,3,6
"offsetof(JSClass, resolve) == offsetof(Class, resolve), ""Class and JSClass must be consistent""",4,2,6
_isMaxSet,3,3,6
(l.asBits & 0x8000000000000000LL) == 0,4,2,6
textId < uint32_t(1<<31),4,2,6
" 10298 , ""can't temprelease nested write lock"", _locktype == 1",3,3,6
newCapacity <= sMaxCapacity,4,2,6
"sizeof(JSJitInfo) == (sizeof(void*) + 2 * sizeof(uint32_t)), ""There are several thousand instances of JSJitInfo stored in "" ""a binary. Please don't increase its space requirements without "" ""verifying that there is no other way forward (better packing, "" ""smaller datatypes for fields, subclassing, etc.).""",4,2,6
"ExclusiveContext* cx, const T1& t1",4,2,6
"!IsFunction<ValueT>::value, ""Expected boolean assertion condition, got a function! Did "" ""you intend to call that function?""",4,2,6
"!alreadyThrowing, !cx->isExceptionPending()",4,2,6
_isProcessSet,3,3,6
aheader,4,2,6
_isMinSet,3,3,6
" 10316 , ""Insufficient bytes to calculate element size"", maxLen == -1 || remain > 3 ",3,3,6
code_ptr - code <= (int)compiler->size,3,3,6
"mozilla::detail::AssertionConditionType<decltype(x)>::isValid, ""invalid assertion condition""",4,2,6
!RuntimeFromMainThreadIsHeapMajorCollecting(shadowZone),4,2,6
"13113, ""bad replset heartbeat option"", heartbeatTimeoutMillis >= 10",3,3,6
!idempotent_,4,2,6
!GetHeap()->InNewSpace(value),3,3,6
"Comparator::compare(aValue, *last) == 0",4,2,6
"!IsFloatingPoint<T>::value, ""floating-point types are unsupported due to rounding "" ""errors""",4,2,6
"sizeof(MOZ_UTF16('A')) == 2, ""Is char literal 16 bits?""",4,2,6
isJSContext(),4,2,6
"(uintptr_t(aPtr) % MOZ_ALIGNOF(AlignType)) == 0, ""performing a range-check with a misaligned pointer""",4,2,6
count < 64,4,2,6
prev_,4,2,6
isUpdated(),4,2,6
"JSContext* cx, JSObject* proxy, jsid id, Action act",4,2,6
"16912, ""Couldn't fetch obj from query plan"", WorkingSetCommon::fetch(member)",3,3,6
!field.hasDefault(),4,2,6
JSString::isFlat(),4,2,6
!(arenaAddr & ArenaMask),4,2,6
!hasDelayedMarking && !allocatedDuringIncremental && !markOverflow,4,2,6
isolate == Isolate::Current(),3,3,6
((p) & 0xf0) != (SLJIT_LOCALS_REG << 4) && !(i & ~0x3),3,3,6
"(sMaxInit * sAlphaDenominator) / sAlphaDenominator == sMaxInit, ""multiplication in numerator below could overflow""",4,2,6
" 10315 , ""Insufficient bytes to calculate element size"", maxLen == -1 || remain > 3 ",3,3,6
_isStateSet,3,3,6
u == getUseFor(0),4,2,6
(sz & CHUNK_ALIGN_MASK) == 0,4,2,6
configVersion.hasDefault(),3,3,6
dtmActive,4,2,6
" 10314 , ""Insufficient bytes to calculate element size"", maxLen == -1 || remain > 3 ",3,3,6
"offsetof(JSClass, construct) == offsetof(Class, construct), ""Class and JSClass must be consistent""",4,2,6
 details->_objsize > 0 ,3,3,6
"Any & String, ""Any must include String.""",4,2,6
"sizeof(T) == sizeof(Bits), ""Bits must be same size as T""",4,2,6
i < pairCount_,4,2,6
cur->mPrev == prev,4,2,6
IsShiftedRegister() || IsExtendedRegister(),4,2,6
"this != &rhs, ""Self-move is prohibited""",4,2,6
shape_,4,2,6
_isMigrationWriteConcernSet,3,3,6
"get(), ""dereferencing a UniquePtr containing nullptr""",4,2,6
usedFloatArgs >= NumFloatArgRegs,4,2,6
"N == 0, ""still need to implement this for N != 0""",4,2,6
mStatementDone,4,2,6
pod.which_ == SimdCtor,4,2,6
!(expr),4,2,6
INT_FITS_IN_JSID(i),4,2,6
"js::detail::IdMatchesAtom(id, atom)",4,2,6
"15912, ""out of memory StackAllocator::Realloc""",3,3,6
(significand & ~Traits::kSignificandBits) == 0,4,2,6
_isCurrentVersionSet,3,3,6
"0, W.n == 1",3,3,6
mPtr <= mRangeEnd,4,2,6
deprecated_secondaryThrottle.hasDefault(),3,3,6
pod.which_ == AtomicsBuiltinFunction,4,2,6
v.whyMagic() == JS_OPTIMIZED_ARGUMENTS || v.whyMagic() == JS_OPTIMIZED_OUT,4,2,6
slot < GetObjectSlotSpan(obj),4,2,6
item->prev == nullptr,4,2,6
mLength + 1 <= mReserved,4,2,6
isIonCache(),4,2,6
local_size >= 0 && local_size <= SLJIT_MAX_LOCAL_SIZE,3,3,6
!iFree,3,3,6
stubCode != nullptr,4,2,6
"consumer, ""Initializing to null consumer""",4,2,6
"IsIntegral<IntegerType>::value, ""PositionOfSignBit is only for integral types""",4,2,6
hasSetterValue(),4,2,6
 !dbMutex._remapPrivateViewRequested ,3,3,6
isMultiple(),4,2,6
!isMap(),4,2,6
isOK(),4,2,6
"14824, ""missing Extra"", e",3,3,6
needsIncrementalBarrier_,4,2,6
_doc != NULL,4,2,6
 x == UpgradableState ,3,3,6
index >= 0 && index <= length_,3,3,6
" aIdealSegmentSize != 0, (sizeof(Segment) > aIdealSegmentSize && kSegmentCapacity == 1) || aIdealSegmentSize - sizeof(Segment) < sizeof(T)",4,2,6
result != NULL,3,3,6
upgradeId.hasDefault(),3,3,6
!isCopyOnWrite(),4,2,6
P != F,4,2,6
" 10327 , ""Object does not end with EOO"", i.moreWithEOO() ",3,3,6
" MOZ_PASTE_PREFIX_AND_ARG_COUNT(MOZ_ASSERT_HELPER, __VA_ARGS__), (__VA_ARGS__)",4,2,6
l.asBits <= JSVAL_SHIFTED_TAG_MAX_DOUBLE,4,2,6
 _state.get() < 0 ,3,3,6
" 15889, ""FindingStartCursor::recoverFromYield() failed to recover"" ",3,3,6
!js::gc::IsInsideNursery(asCell()),4,2,6
IsSimdType(toType),4,2,6
"13111, ""unexpected or missing type value in BSON object"", t == type()",3,3,6
sizeof(Value) == 8,4,2,6
bit < js::gc::ChunkMarkBitmapBits,4,2,6
!recorded_ast_id_.IsNone(),3,3,6
code_ < NumAliasedDoubles,4,2,6
isQuery(),4,2,6
((p) >> 9) == 0,3,3,6
!elem->mIsSentinel,4,2,6
mongoVersion.hasDefault(),3,3,6
"11601,""interrupted""",3,3,6
(objBits >> JSVAL_TAG_SHIFT) == 0,4,2,6
v,4,2,6
sizeof(jsval_layout) == 8,4,2,6
" 13266, ""not implemented for $or query"", !_or ",3,3,6
GetObjectClass(obj)->flags & JSCLASS_HAS_PRIVATE,4,2,6
index != noIndex,4,2,6
!stopRequested,4,2,6
uintptr_t(v) > 32,4,2,6
"sMaxInit * sAlphaDenominator <= UINT32_MAX - sMaxAlphaNumerator, ""numerator calculation below could potentially overflow""",4,2,6
(flag & ~flagsMask) == 0,4,2,6
isNumber(),4,2,6
src1 == TMP_REG1 && !(flags & ARGS_SWAPPED),3,3,6
buffer_ < end_,4,2,6
!mRoot->mParent,4,2,6
it,4,2,6
dest != ScratchDoubleReg,4,2,6
type == TOK_STRING || type == TOK_TEMPLATE_HEAD || type == TOK_NO_SUBS_TEMPLATE,4,2,6
indexBuildInProgress,3,3,6
i < argc_,4,2,6
mValues.length() <= mMaxValues,4,2,6
!getter.selfHosted.unused,4,2,6
JS_StringIsFlat(str),4,2,6
imm < 16,4,2,6
!unknownProperties(),4,2,6
"IsConvertible<typename UniquePtr<U, E>::Pointer, Pointer>::value, ""incompatible UniquePtr pointees""",4,2,6
"JSProto_Null == 0, ""zeroed key must be null""",4,2,6
validEntry,4,2,6
 _servers.size() == 1 ,3,3,6
(kind & Safepoint::kWithRegisters) != 0,3,3,6
"sMaxCapacity <= UINT32_MAX / sMaxAlphaNumerator, ""multiplication below could overflow""",4,2,6
UINT32_MAX - JS_WHY_MAGIC_COUNT > ARGS_LENGTH_MAX,4,2,6
 _element.type() == NumberLong ,3,3,6
index < VREG_MASK,4,2,6
sym != nullptr,4,2,6
"isMagic(), data.s.payload.why == why",4,2,6
!IsInsideNursery(cell),4,2,6
thingSize == Arena::thingSize(kind),3,3,6
aMaxValues > 0,4,2,6
 locked == 0 ,3,3,6
proto_,4,2,6
aSrc,4,2,6
other.mPrev->mNext == &other,4,2,6
"aValue <= (size_t(1) << (sizeof(size_t) * CHAR_BIT - 1)), ""can't round up -- will overflow!""",4,2,6
upgradeState.hasDefault(),3,3,6
isInlineRange(),4,2,6
type() == CONSTANT,3,3,6
isResumePoint(),4,2,6
_isUpSet,3,3,6
(kSmiTagSize == 1) && (kSmiTag == 0),3,3,6
value_,4,2,6
is_uint2(imm2),4,2,6
"false, ""MOZ_ASSERT_UNREACHABLE: "" reason",4,2,6
!js::gc::IsInsideNursery(cell),4,2,6
"10000, ""out of memory BufBuilder""",3,3,6
lengthIsWritable(),4,2,6
"offsetof(JSClass, name) == offsetof(Class, name), ""Class and JSClass must be consistent""",4,2,6
!(inp_flags & WRITE_BACK),3,3,6
begin() <= aBegin,4,2,6
 pthread_rwlock_destroy( &_lock ) == 0 ,3,3,6
"offsetof(JSClass, call) == offsetof(Class, call), ""Class and JSClass must be consistent""",4,2,6
idx < numScripts(),4,2,6
"!IsLvalueReference<T>::value, ""misuse of Forward detected! try the other overload""",4,2,6
i < numSuccessors_,4,2,6
"offsetof(JSClass, delProperty) == offsetof(Class, delProperty), ""Class and JSClass must be consistent""",4,2,6
"!find(*aValue), ""Duplicate elements are not allowed.""",4,2,6
"sizeof(word) == 8, ""unexpected word size, new hashing strategy required to "" ""properly incorporate all bits""",4,2,6
(byteDestPtr <= byteSrcPtr && byteDestPtr + aCount <= byteSrcPtr) || (byteSrcPtr <= byteDestPtr && byteSrcPtr + aCount <= byteDestPtr),4,2,6
i < numEntries(),4,2,6
hasSetterObject(),4,2,6
stores_.initialized(),4,2,6
mPtr >= mRangeStart,4,2,6
" 10065 , ss.str() ",3,3,6
 n >= 0 && n < 10000 ,3,3,6
"sizeof(SelfHostedWrapper) == sizeof(JSNativeWrapper), ""JSPropertySpec::getter/setter must be compact""",4,2,6
base_ == base,4,2,6
"scode, options, op == OP_ASSERT",3,3,6
"!IsArray<ValueT>::value, ""Expected boolean assertion condition, got an array or a "" ""string!""",4,2,6
"((size_t)JSID_BITS(id) & JSID_TYPE_MASK) == JSID_TYPE_VOID, JSID_BITS(id) == JSID_TYPE_VOID",4,2,6
"sizeof(JSClass) == sizeof(Class), ""Class and JSClass must be consistent""",4,2,6
mSize >= other.mSize,4,2,6
hasGetterValue(),4,2,6
"(sizeof(JSValueType) * 8) <= JITINFO_RETURN_TYPE_BITS, ""Not enough space for JSValueType""",4,2,6
index == this->index(),3,3,6
hasBaselineScript(),4,2,6
!mIsSome,4,2,6
IsInitialized(),3,3,6
aBits < 32,4,2,6
uintptr_t(zone_.pointer) > uintptr_t(JS::SystemZone),4,2,6
aDest,4,2,6
 ((size_t) p) % Alignment == 0 ,3,3,6
"sizeof(T) == sizeof(Heap<T>), ""Heap<T> must be binary compatible with T.""",4,2,6
"last, ""This tree must contain the element being removed.""",4,2,6
"OpTypeCount <= (1 << JITINFO_OP_TYPE_BITS), ""Not enough space for OpType""",4,2,6
state == SomeT1 || state == SomeT2,4,2,6
"(Base::kSignBit & Base::kExponentBits) == 0, ""sign bit shouldn't overlap exponent bits""",4,2,6
"IsObjectValueInCompartment(value, compartment())",4,2,6
hasGetterObject(),4,2,6
"IsIntegral<IntegerType>::value, ""MaxValue is only for integral types""",4,2,6
!allowed(),4,2,6
"_loc, oldLocation",3,3,6
scratch != ICTailCallReg,6,0,6
this->hasSetterObject(),4,2,6
 cursor.get() ,3,3,6
iter.type() == JitFrame_Exit,4,2,6
isMonitored(),4,2,6
&rhs != this,4,2,6
reserved() <= mCapacity,4,2,6
index >= kDataIndex,3,3,6
"slotInRange(slot, SENTINEL_ALLOWED)",4,2,6
isBoolean(),4,2,6
!mRoot,4,2,6
aEnd >= aBegin,4,2,6
IsNativeContext(),3,3,6
"cx, res",4,2,6
!lir->isCall(),4,2,6
mRangeStart <= mPtr,4,2,6
"frame.script()->isDebuggee(), frame.isDebuggee()",4,2,6
type < Scalar::MaxTypedArrayViewType,4,2,6
icEntry_ == nullptr,4,2,6
!isPhi(),4,2,6
"offsetof(JSClass, flags) == offsetof(Class, flags), ""Class and JSClass must be consistent""",4,2,6
!isIndex(&dummy),4,2,6
!js::gc::IsInsideNursery(reinterpret_cast<js::gc::Cell*>(sym)),4,2,6
!already_resolved(),3,3,6
IsLdrPpImmediateOffset(Memory::int32_at(pc)),3,3,6
"sizeof(ValueAlignmentTester) == 16, ""JS::Value must be 16-byte-aligned""",4,2,6
strlen(buffer_.start()) == static_cast<size_t>(position_),4,2,6
lengthFits<char16_t>(length),4,2,6
"strftime(buf, sizeof(buf), fmt, &t) == 19",3,3,6
"15913, ""out of memory BufBuilder::reset""",3,3,6
asUintptr() + aInc * sizeof(T) >= asUintptr(),4,2,6
!isElementDeleted(i),4,2,6
hasDelayedMarking,4,2,6
 !last.isNull() ,3,3,6
 magic == 0x12345678 ,3,3,6
s2_limit >= s2,4,2,6
runtime_,4,2,6
object,4,2,6
srcStart_ < funcSrcBegin,4,2,6
index_ < set_.numBits_,4,2,6
 _servers.size() == 2 ,3,3,6
 _servers.size() > 0 ,3,3,6
recorded_ast_id_.IsNone(),3,3,6
(flagsToSet & ~flagsMask) == 0,4,2,6
temporaries >= 0 && temporaries <= SLJIT_NO_TMP_REGISTERS,3,3,6
 !initiated() ,3,3,6
!existingStub_,4,2,6
aNode->mLeft->mParent == aNode,4,2,6
version == VERSION,3,3,6
PRIVATE_DATA(cc + 1) != 0,4,2,6
"sizeof(Handle<T>) == sizeof(T*), ""Handle must be binary compatible with T*.""",4,2,6
"offsetof(JSClass, enumerate) == offsetof(Class, enumerate), ""Class and JSClass must be consistent""",4,2,6
(((p) >> 4) & 0xf) == 0,3,3,6
" mIsOwned, mOwnedStr.get() && !mUnownedStr",4,2,6
ownsChars_,4,2,6
!dtmActive,4,2,6
LinearStringHasLatin1Chars(linear),4,2,6
tag != JSVAL_TAG_CLEAR,4,2,6
(shift) != 0,6,0,6
"13523, ""out of memory AlignedBuilder""",3,3,6
"aEnd >= aBegin, ""End value should be larger than begin value""",4,2,6
internal_key.size() >= 8,4,2,6
mLength <= reserved(),4,2,6
mPtr >= aOther.mPtr,4,2,6
v.toInt32() >= 0,4,2,6
dst.Is64Bits() && src.Is64Bits(),3,3,6
 _element.type() == NumberInt ,3,3,6
IsProxy(obj),4,2,6
"attrs & (JSPROP_GETTER | JSPROP_SETTER), attrs & JSPROP_SHARED",4,2,6
"Any & Double, ""Any must include Double.""",4,2,6
isString(),4,2,6
i < numSlots_,4,2,6
local < nlocals(),4,2,6
" 10317 , ""Insufficient bytes to calculate element size"", maxLen == -1 || remain > 3 ",3,3,6
sorted(),4,2,6
"IsBaseOf<SupportsWeakPtr<T>, T>::value, ""T must derive from SupportsWeakPtr<T>""",4,2,6
"11600,""interrupted at shutdown""",3,3,6
asUintptr() - aDec * sizeof(T) <= asUintptr(),4,2,6
"13112, ""bad replset heartbeat option"", heartbeatSleepMillis >= 10",3,3,6
has_operand_positions(),3,3,6
hasEnsuredTwoByteChars_,4,2,6
"sizeof(From) == sizeof(To), ""To and From must have the same size""",4,2,6
!is_union(type),3,3,6
other.mNext->mPrev == &other,4,2,6
"std::is_trivially_copyable<T>::value, ""The generic DataType implementation requires values "" ""to be trivially copyable. You may specialize the "" ""template to use it with other types.""",4,2,6
 state != TailPoint ,3,3,6
"IsIntegral<IntegerType>::value, ""MinValue is only for integral types""",4,2,6
 js.objsize() < ( theEnd - data ) ,3,3,6
isCopyOnWrite(),4,2,6
std::is_standard_layout<WTYPE>::value,3,3,6
!canNotPlacePool_,4,2,6
!*parentPointer,4,2,6
object->type() == MIRType_Object,4,2,6
"offsetof(JSClass, addProperty) == offsetof(Class, addProperty), ""Class and JSClass must be consistent""",4,2,6
lengthFits<JS::Latin1Char>(length),4,2,6
!iter1_.done(),4,2,6
"checkAliasing, !script()->argsObjAliasesFormals() && !script()->formalIsAliased(i)",4,2,6
begin() <= aP,4,2,6
 le ,3,3,6
" 10313 , ""Insufficient bytes to calculate element size"", maxLen == -1 || remain > 3 ",3,3,6
" 10328 , ""Invalid element size"", e.size() > 0 ",3,3,6
!JSID_IS_VOID(propid_),4,2,6
state_ != Uninitialized,4,2,6
_isClusterIdSet,3,3,6
numDefs() == 1,4,2,6
"cx, args.rval()",4,2,6
isDrained(),4,2,6
HasFastSmiOrObjectElements(),3,3,6
*scopeChain() == scope.enclosingScope() || *scopeChain() == scope.as<CallObject>().enclosingScope().as<DeclEnvObject>().enclosingScope(),4,2,6
"sizeof(T) == sizeof(TenuredHeap<T>), ""TenuredHeap<T> must be binary compatible with T.""",4,2,6
length->type() == MIRType_Int32,4,2,6
 _setName.size() ,3,3,6
start < end,4,2,6
thingSize % CellSize == 0,4,2,6
isInterpretedLazy(),4,2,6
"(status.location() != 0 ? status.location() : status.code()), status.reason(), status.isOK()",4,2,6
!is_finalized() && position_ + n < buffer_.length(),4,2,6
mNeedComma.resizeUninitialized(mDepth + 1),4,2,6
ResourceTypesCount <= (1 << resourceTypeBits),3,3,6
max > aInputSize,4,2,6
hasBase(),4,2,6
"mRoot, ""No min to remove!""",4,2,6
hasSourceData(),4,2,6
kind() == MEM_REG_DISP || kind() == MEM_SCALE,4,2,6
hasArgsObj(),4,2,6
swt.getStatus(),4,2,6
!isDouble(),4,2,6
" ""ConfigServer not setup"" , _primary.size() ",3,3,6
 _queues[toDrain].empty() ,3,3,6
"allowGC == NoGC, ""the constructor not taking a context should only be "" ""used in NoGC code""",4,2,6
!hasDenseStub(),4,2,6
isGCThing(),4,2,6
"JitStackAlignment % sizeof(Value) == 0 && JitStackValueAlignment >= 1, ""Stack alignment should be a non-zero multiple of sizeof(Value)""",6,0,6
"16477, ""An AuthorizationManager has already been set up for this connection"", _authorizationManager == NULL",3,3,6
"&aRhs != this, ""self-move-assignment not allowed""",4,2,6
funcSrcBegin < funcSrcEnd,4,2,6
code < kNumRegisters,3,3,6
"Comparator::compare(*aMinimum, *aNode) < 0",4,2,6
pool_.numEntries() == 0,4,2,6
" 0, R.n == 0 ",3,3,6
"sizeof(JSValueType) == 1, ""compiler typed enum support is apparently buggy""",4,2,6
byte <= 0xFF,4,2,6
(size_t(sym) & JSID_TYPE_MASK) == 0,4,2,6
"offsetof(JSClass, trace) == offsetof(Class, trace), ""Class and JSClass must be consistent""",4,2,6
mLength + aIncr > mCapacity,4,2,6
index < getDenseInitializedLength(),4,2,6
!pn_used,4,2,6
 spec._finishedInit ,3,3,6
at->block() == this,4,2,6
 ! mDone ,3,3,6
 o.objsize() == 20 ,3,3,6
use->producer() == this,4,2,6
 a < 0x20000000 ,3,3,6
FUNCTION_CHECK_IS_REG((p) & 0xf),3,3,6
flags && !(flags & Store_),4,2,6
"setter.native.info, setter.native.op",4,2,6
((size_t)atom & 0x7) == 0,4,2,6
mPtr < mRangeEnd,4,2,6
obj == *static_cast<JSObject**>(cellp),3,3,6
(type_ & ~MembarAllbits) == MembarNobits,4,2,6
T* aPtr,4,2,6
slots_ > 0 && slots_ <= kMaximumSlots,3,3,6
"sizeof(Concrete<T>) == sizeof(*base()), ""ubi::Base specializations must be the same size as ubi::Base""",4,2,6
why.hasDefault(),3,3,6
"session, F_ISSET(session, WT_SESSION_TABLE_LOCKED)",3,3,6
!traversalBegun,4,2,6
type == TOK_NAME,4,2,6
mLength + aInsLength <= mReserved,4,2,6
"sizeof(jsval_layout) == sizeof(JS::Value), ""jsval_layout and JS::Value must have identical layouts""",4,2,6
startIndex + len <= values.length(),4,2,6
isMarkable(),4,2,6
"offsetof(JSClass, hasInstance) == offsetof(Class, hasInstance), ""Class and JSClass must be consistent""",4,2,6
flags && !(flags & ~ValidFlags()),4,2,6
saveds >= 0 && saveds <= SLJIT_NO_GEN_REGISTERS,3,3,6
" 12599, ""internal error: attempt to unlock when wasn't in a write lock"", false",3,3,6
" strcmp(e.fieldName(), ""$err"") != 0 ",3,3,6
data <= DATA_MASK,4,2,6
"AliasSetCount <= (1 << JITINFO_ALIAS_SET_BITS), ""Not enough space for AliasSet""",4,2,6
"HashPolicy::match(*p, new_value)",4,2,6
isFallback(),4,2,6
" 10322 , ""Invalid CodeWScope size"", totalSize >= 8 ",3,3,6
isFree(),4,2,6
"aValue >= 0 || -(aValue + 1) != T((1ULL << (CHAR_BIT * sizeof(T) - 1)) - 1), ""You can't negate the smallest possible negative integer!""",4,2,6
(ptrBits & 1) == 0,4,2,6
!isFree(),4,2,6
!jump || jump->addr >= word_count,3,3,6
"cx, args",4,2,6
idempotent(),4,2,6
allowGC == CanGC,4,2,6
this == *stackTop,4,2,6
is_aligned(chunk2mem(p)),4,2,6
aIncr <= mLength,4,2,6
mLength <= mCapacity,4,2,6
(expr),4,2,6
&thing.owner == this,4,2,6
!detail::CapacityHasExcessSpace<T>(aNewCap),4,2,6
js::RuntimeLock which,4,2,6
isBaseline(),4,2,6
getter.native.op,4,2,6
t->next == nullptr,4,2,6
hasSlot() && !hasMissingSlot(),4,2,6
 _data.empty() ,3,3,6
"KeySize <= kKeyShift, ""KeySize too big""",4,2,6
"sizeof(JSValueShiftedTag) == sizeof(uint64_t), ""compiler typed enum support is apparently buggy""",4,2,6
NodeType::test(*this),4,2,6
&k != &HashPolicy::getKey(this->cur->get()),4,2,6
aDec <= size_t(-1) / sizeof(T),4,2,6
IsNaN(t),4,2,6
"char16_t(-1) > char16_t(0), ""Is char16_t type unsigned?""",4,2,6
sizeof(JSValueType) == 1,4,2,6
pos <= mLength,4,2,6
IsSimdType(obj->type()) && fromType == obj->type(),4,2,6
kind == BarrierKind::TypeTagOnly || kind == BarrierKind::TypeSet,4,2,6
SimdTypeToLength(type) == 4,4,2,6
 !h.empty() ,3,3,6
"offsetof(JSClass, finalize) == offsetof(Class, finalize), ""Class and JSClass must be consistent""",4,2,6
block->id(),4,2,6
"Any & Boolean, ""Any must include Boolean.""",4,2,6
0 <= i,3,3,6
"Any & Integer, ""Any must include Integer.""",4,2,6
aNode,4,2,6
"Any & Null, ""Any must include Null.""",4,2,6
IsEmbeddedObject(rmode_) || IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_) || IsExternalReference(rmode_),3,3,6
aPtr.mPtr <= mRangeEnd,4,2,6
aliasIdx <= 2,4,2,6
empty,4,2,6
reason,4,2,6
JSString* str,4,2,6
lockID.hasDefault(),3,3,6
(reinterpret_cast<uintptr_t>(newPtr) & flagsMask) == 0,4,2,6
"(uintptr_t(aPtr) % sizeof(T)) == 0, ""Unaligned pointer!""",4,2,6
n != size_t(-1),4,2,6
newCapacity >= length,4,2,6
"sizeof(ResultType) <= sizeof(uint64_t), ""Left-shifting below would lose upper bits""",4,2,6
_isMinCompatibleVersionSet,3,3,6
this->hasGetterObject(),4,2,6
signbit == 0 || signbit == 1,4,2,6
"aSize >= sizeof(uintptr_t), ""poisoning this object has no effect""",4,2,6
" 10326 , ""Invalid CodeWScope object size"", totalSize == 4 + 4 + strSizeWNull + objSize ",3,3,6
instr->IsLdrLiteralX(),3,3,6
isIon(),4,2,6
!isRegister_,4,2,6
"AtomicOperations::loadSeqCst(&spinlock) == 1, ""releasing unlocked region lock""",6,0,6
asT(),4,2,6
"Any & Object, ""Any must include Object.""",4,2,6
pod.u.var.initKind_ == InitImport,4,2,6
"session, !F_ISSET(dhandle, WT_DHANDLE_DEAD)",4,2,6
vp,4,2,6
"sizeof(aA) == sizeof(uintptr_t), ""Strange pointer!""",4,2,6
" 10329 , ""Element too large"", e.size() < ( 1 << 30 ) ",3,3,6
mLength < SegmentCapacity,4,2,6
who.hasDefault(),3,3,6
undefined->IsUndefined(),3,3,6
uint32_t(int32_t(ui)) == ui,4,2,6
aA > IntegerType(0),4,2,6
is<ArrayObject>() && !hasEmptyElements(),4,2,6
_isChangeIDSet,3,3,6
IsNumberType(type),4,2,6
pn_dflags == 0,4,2,6
sizeof(JSValueTag) == 4,4,2,6
 locked == 1 ,3,3,6
regionIndex < numRegions(),4,2,6
aIt < end(),4,2,6
kind != FIXED && kind != MUST_REUSE_INPUT,4,2,6
"moz_static_assert, __COUNTER__",4,2,6
prepareHash(l) == p.keyHash,4,2,6
"offsetof(JSClass, setProperty) == offsetof(Class, setProperty), ""Class and JSClass must be consistent""",4,2,6
type == TOK_REGEXP,4,2,6
args >= 0 && args <= 3,3,3,6
result != 0,3,3,6
aEnd <= end(),4,2,6
off + len <= base->length(),4,2,6
"session, p <= end",5,1,6
" 10334 , ss.str() , 0 ",3,3,6
Tag == OP2,4,2,6
this->is<MIRType>(),4,2,6
chunksize(P) == small_index2size(I),4,2,6
!const_ || const_->addr >= word_count,3,3,6
!isClosed(),4,2,6
" 10325 , ""Invalid CodeWScope size"", totalSize >= strSizeWNull + 4 + 4 + 4 ",3,3,6
"13283, ""missing Extra"", e",3,3,6
" 10324 , ""Invalid CodeWScope string size"", strSizeWNull > 0 && (strSizeWNull - 1) == mongo::strnlen( codeWScopeCode(), strSizeWNull ) ",3,3,6
sizeof(ResourceId) == sizeof(uint64_t),3,3,6
 _servers.size() >= 1 ,3,3,6
sizeof(int) == 4,3,3,6
" h != ""localhost"" ",3,3,6
"sMaxCapacity <= UINT32_MAX / sMinAlphaNumerator, ""multiplication below could overflow""",4,2,6
collisionBit == 0 || collisionBit == sCollisionBit,4,2,6
" 10321 , buf.str() ",3,3,6
freeList->isSameNonEmptySpan(aheader->getFirstFreeSpan()),4,2,6
"sizeof(T) == sizeof(JS::Heap<T>), ""T and Heap<T> must be compatible.""",4,2,6
JSID_IS_VOID(id),4,2,6
 _qp != NULL ,3,3,6
aInc <= size_t(-1) / sizeof(T),4,2,6
ValidSlotLocation(topSlotLoc),4,2,6
" 10331 , ""EOO Before end of object"", end ",3,3,6
!value,4,2,6
!isLive(),4,2,6
"detail::IsSupported<T>::value, ""This type is not supported by CheckedInt""",4,2,6
 getState() == 1 ,3,3,6
 fn[0] == '$' ,3,3,6
localptr != 0,3,3,6
sizeof(JSWhyMagic) <= 4,4,2,6
"!IsFloatingPoint<ValueT>::value, ""It's often a bad idea to assert that a floating-point number "" ""is nonzero, because such assertions tend to intermittently "" ""fail. Shouldn't your code gracefully handle this case instead "" ""of asserting? Anyway, if you really want to do that, write an "" ""explicit boolean condition, like !!x or x!=0.""",4,2,6
fp_,4,2,6
(reg_size == kWRegSizeInBits) || (reg_size == kXRegSizeInBits),3,3,6
" 12601 , ""CurOp not marked done yet"" , ! _active ",3,3,6
sljit_is_fpu_available(),3,3,6
"sizeof(char16_t) == sizeof(wchar_t), ""char16_t and wchar_t sizes differ""",4,2,6
currentStub_,4,2,6
"!mIsOwned, !mOwnedStr.get() && mUnownedStr",4,2,6
allocatedDuringIncremental,4,2,6
 _type == SET || _type == SYNC ,3,3,6
!HEAP->InNewSpace(value),3,3,6
pc != nullptr,4,2,6
(flagsToUnset & ~flagsMask) == 0,4,2,6
pinuse(p),4,2,6
isFloat(),4,2,6
tmp == thing,4,2,6
"(uintptr_t)aPtr % sizeof(uintptr_t) == 0, ""bad alignment""",4,2,6
" 12521, ""internal error: use of an unlocked ClientCursor"", c == 0 || c->_pinValue ",3,3,6
!value_.is_null(),3,3,6
!isProxy(),4,2,6
"mozilla::IsUnsigned<ResultType>::value, ""ResultType must be an unsigned type""",4,2,6
!mRawPtr,4,2,6
"offsetof(JSClass, getProperty) == offsetof(Class, getProperty), ""Class and JSClass must be consistent""",4,2,6
"aDst + 1 <= aSrc || aSrc + 1 <= aDst, ""destination and source must not overlap""",4,2,6
group,4,2,6
(mNext == this) == (mPrev == this),4,2,6
dataType == DataUncompressed,4,2,6
prev->mNext == cur,4,2,6
" 13000 , (string)""invalid keyNode: "" + BSON( ""i"" << i << ""n"" << this->n ).jsonString() , i < this->n ",3,3,6
isInitialized(),4,2,6
 i <= DiskLoc::MaxFiles ,3,3,6
(strBits >> JSVAL_TAG_SHIFT) == 0,4,2,6
"14045, ""missing Extra"", e",3,3,6
op != JS_StrictPropertyStub,4,2,6
((flags & EMIT_TRAILING_DECIMAL_POINT) != 0) || !((flags & EMIT_TRAILING_ZERO_AFTER_POINT) != 0),4,2,6
index < arr->length,4,2,6
chunksize(v) == rsize + nb,4,2,6
"""bad port #"", remotePort > 0 && remotePort < 0x10000 ",3,3,6
mRangeStart == aOther.mRangeStart,4,2,6
(needs_backwards % backwards_multiple) == 0,4,2,6
(uint32_t)l.s.tag <= (uint32_t)JSVAL_TAG_OBJECT,4,2,6
isInstruction(),4,2,6
"sizeof(LayoutAlignmentTester) == 16, ""jsval_layout must be 16-byte-aligned""",4,2,6
" 0, w.n > 0 ",3,3,6
!result.is_null(),3,3,6
&owner == &rhs.owner,4,2,6
uint32_instructions_ == NULL || !uint32_instructions_->is_empty(),3,3,6
mRangeStart <= aPtr.mPtr,4,2,6
 ! pDone ,3,3,6
self->is<U>(),4,2,6
(needs_backwards_lcmed % lcm) == 0,4,2,6
(symBits >> JSVAL_TAG_SHIFT) == 0,4,2,6
"this != &aOther, ""self-assignment is forbidden""",4,2,6
!fixed.isBogus() && !fixed.isUse(),4,2,6
nbytes <= dataSlots * sizeof(Value),4,2,6
fun()->isHeavyweight(),3,3,6
addr % CellSize == 0,4,2,6
" 10293 , (string)""internal error: locks are not upgradeable: "" + sayClientState() , s == 0 ",3,3,6
start <= end,4,2,6
!LinearStringHasLatin1Chars(linear),4,2,6
"mozilla::IsSigned<ResultType>::value, ""ResultType must be a signed type""",4,2,6
isLiveHash(keyHash),4,2,6
!current_part_.is_null(),3,3,6
oldval_and_result.code() == X86Encoding::rax,3,3,6
asCell(),4,2,6
bitNumber < 32,4,2,6
size_t(aIndex > 0 ? aIndex : -aIndex) <= size_t(-1) / sizeof(T),4,2,6
"session, bytes_allocated < bytes_to_allocate",4,2,6
((uint32_t)ptr & 1) == 0,4,2,6
"IsSigned<IntType1>::value == IsSigned<IntType2>::value, ""signed/unsigned mismatch""",4,2,6
"checkAliasing, staticBlock().isAliased(i)",4,2,6
prev,4,2,6
m_formatter.isAligned(16),4,2,6
scratch != BaselineTailCallReg,3,3,6
sizeof(jsid) == sizeof(void*),4,2,6
P != B,4,2,6
"mIsValid, ""Invalid checked integer (division by zero or integer overflow)""",4,2,6
!ra.IsZero(),6,0,6
"(Base::kSignBit | Base::kExponentBits | Base::kSignificandBits) == ~Bits(0), ""all bits accounted for""",4,2,6
aB > IntegerType(0),4,2,6
found() && rhs.found(),4,2,6
index < numOperands_,4,2,6
" sizeof(MOZ_MACROARGS_STRINGIFY_HELPER((__VA_ARGS__))) != sizeof(""()"") && (MOZ_PASTE_PREFIX_AND_ARG_COUNT(1, __VA_ARGS__)) > 10 && (int)(MOZ_PASTE_PREFIX_AND_ARG_COUNT(0.0, __VA_ARGS__)) == 0, ""MOZ_STATIC_ASSERT_VALID_ARG_COUNT requires 1 to 50 arguments""",4,2,6
"13524, ""out of memory AlignedBuilder"", res == 0",3,3,6
"(Base::kSignBit & Base::kSignificandBits) == 0, ""sign bit shouldn't overlap significand bits""",4,2,6
hasTyped(),4,2,6
"10000, ""BufBuilder grow() > 64MB""",3,3,6
shape && group,4,2,6
process.hasDefault(),3,3,6
"usingInlineStorage(), mCapacity == kInlineCapacity",4,2,6
_isWaitForDeleteSet,3,3,6
begin() <= aIt,4,2,6
JSVAL_IS_DOUBLE_IMPL(data),4,2,6
 batchResponse->isValid( NULL ) ,3,2,5
"IsBaseOf<AtomicRefCounted, T>::value, ""T must derive from AtomicRefCounted<T>""",3,2,5
save && common->recursive_head_ptr != 0,3,2,5
common->req_char_ptr != 0,3,2,5
other_cases[0] != NOTACHAR && other_cases[1] != NOTACHAR && other_cases[2] != NOTACHAR,3,2,5
kUseWholeKeys || KeyToUpper(i) == 0,3,2,5
list_ != NULL,3,2,5
"10348, ""$extra: ns name too long"", s.size() <= MaxNsLen",3,2,5
"session, WT_INTL_INDEX_GET_SAFE(parent) == pindex",3,2,5
*opcode == OP_CRRANGE || *opcode == OP_CRMINRANGE || *opcode == OP_CRPOSRANGE,3,2,5
*opcode == OP_CLASS || *opcode == OP_NCLASS || *opcode == OP_XCLASS,3,2,5
framesize != no_stack,3,2,5
strlen(buf)+1 < sizeof(buf),3,2,5
"__atomic_always_lock_free(sizeof(int16_t), 0)",5,0,5
!uninlinedIsProxy(),3,2,5
"__atomic_always_lock_free(sizeof(int8_t), 0)",5,0,5
hash != NULL,5,0,5
isNonEvalFunctionFrame(),4,1,5
max - min > 0,3,2,5
"EQ, ==",3,2,5
int32_t(mRefCnt) >= 0,3,2,5
"STATEMENT, EXCEPTION_TYPE, ([](const EXCEPTION_TYPE& ex) { return (EXPECTED_CODE) == ex.getCode(); })",3,2,5
d0 != ScratchRegister,3,2,5
size > 0,3,2,5
(uint32_t)code_ < FloatRegisters::Total,3,2,5
"kKeybits <= sizeof(K) * 8, key_size",3,2,5
size == Static::sizemap()->ByteSizeForClass(cl),3,2,5
"session, __wt_ref_is_root(ref) || ref->state == WT_REF_LOCKED",3,2,5
d>0,3,2,5
isForwarded(),4,1,5
mRefCnt > 0,3,2,5
"GT, >",3,2,5
"session, fh == NULL",3,2,5
"sizeof(Dest) == sizeof(Source), bitcasting_unequal_sizes",3,2,5
ptr != list->Next(),3,2,5
byte_set[0] > 0 && byte_set[0] < 255,3,2,5
"session, ref->state != WT_REF_SPLIT",3,2,5
"sizeof(Atomic64) == sizeof(PVOID), atomic_word_is_atomic",3,2,5
!current->nextbacktracks,3,2,5
 _r._state.get() < 0 ,3,2,5
"session, !__wt_page_is_modified(page)",3,2,5
!rt->isHeapBusy(),3,2,5
"endpointA.shardName, endpointB.shardName",3,2,5
!current->nextbacktracks && !current->topbacktracks,3,2,5
"session, !F_ISSET_ATOMIC(page, WT_PAGE_EVICT_LRU)",3,2,5
name,4,1,5
common->capture_last_ptr != 0,3,2,5
repeat_length != 0 && repeat_type != 0 && repeat_count != 0,3,2,5
rootbacktrack.prev == NULL,3,2,5
offsets[2] == -1 || (offsets[0] < offsets[2] && offsets[1] > offsets[2]),3,2,5
t,3,2,5
"STR_END == SLJIT_S1, str_end_must_be_saved_reg2",3,2,5
text_type() == CHAR_CLASS,3,2,5
"false && ""You must specify a module name and function name.""",3,2,5
offsets[1] == -1 || (offsets[0] < offsets[1]),3,2,5
"session, !F_ISSET_ATOMIC(ref->page, WT_PAGE_EVICT_LRU)",3,2,5
range_right >= 0 || offsets[0] >= 0,3,2,5
"0 == ""unexpected instruction in __kernel_vsyscall""",3,2,5
"kHashbits <= kKeybits, hash_function",3,2,5
"__atomic_always_lock_free(sizeof(int32_t), 0)",5,0,5
"10080, ""ns name too long, max size is 127 bytes"", ns.size() <= MaxNsLen",3,2,5
module_name && function_name,3,2,5
*ccend != OP_END && common->control_head_ptr != 0,3,2,5
ret >= 0,3,2,5
mode == JIT_PARTIAL_HARD_COMPILE,3,2,5
"16177, ""not codeWScope"", type() == CodeWScope",3,2,5
"sizeof(T) <= sizeof(AtomicWord), T_should_fit_in_AtomicWord",3,2,5
"(OP_CRSTAR & 0x1) == 0, crstar_opcode_must_be_even",3,2,5
 s < 0 ,3,2,5
has(reg),4,1,5
"session, !__wt_fair_islocked(session, &page->page_lock)",3,2,5
"14043, ss.str()",3,2,5
0 <= s,3,2,5
"scode, &dflags, op == OP_ASSERT",3,2,5
repeat_type != 0 && repeat_count != 0,3,2,5
mRefCnt == detail::DEAD,3,2,5
"17380, ""ns name can't contain embedded '\0' byte"", ns.find('\0') == std::string::npos",3,2,5
 s <= 0 ,3,2,5
Type == elementType(),5,0,5
!(common->req_char_ptr != 0 && common->start_used_ptr != 0),3,2,5
fds == NULL,3,2,5
sizeof(HeapSlot) == sizeof(Value),3,2,5
!(objectFlags & ~OBJECT_FLAG_MASK),3,2,5
ICTailCallReg == lr,5,0,5
"0 == ""VDSO is present, but doesn't have expected symbols""",3,2,5
"msgid, s",3,2,5
common->start_ptr != OVECTOR(0),3,2,5
"codestart, &firstcharflags, FALSE",3,2,5
"session, chunk != NULL",5,0,5
current->topbacktracks == NULL,3,2,5
"IsBaseOf<RefCounted, T>::value, ""T must derive from RefCounted<T>""",3,2,5
TMP1 == SLJIT_R0 && STACK_TOP == SLJIT_R1 && TMP2 == SLJIT_R2,3,2,5
"0, spin_lock_decl_missing_var_name",3,2,5
obj_ == holder_,4,1,5
!regs.has(BaselineStackReg),4,1,5
index < initializedLength(),5,0,5
found == &backtrack->common.topbacktracks,3,2,5
"16845, ""UnorderedFastKeyTable::_grow couldn't add entry after growing many times""",3,2,5
*common->start == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,3,2,5
pn_arity == PN_CODE || pn_arity == PN_NAME,3,2,5
i < FloatRegisters::Total,3,2,5
!force || common->mode != JIT_COMPILE,3,2,5
common->positive_assert_quit == NULL,3,2,5
done(),3,2,5
"session, cmp < 0",3,2,5
isValid(),4,1,5
common->start_ptr == OVECTOR(0),3,2,5
*ccend == OP_END || (*ccend >= OP_ALT && *ccend <= OP_KETRPOS),3,2,5
"0 == ""did not find SYSENTER or SYSCALL in __kernel_vsyscall""",3,2,5
"session, __wt_compare( session, btree->collator, last, next, &cmp) == 0",3,2,5
type,3,2,5
module != NULL,3,2,5
*max != 0,3,2,5
"11004, ""connection was returned to the pool already"", _conn",3,2,5
isGeneralRegPair(),5,0,5
srcw[0] != 0 && srcw[1] != 0,3,2,5
!IsNone(),3,2,5
"false && ""Invalid module name.""",3,2,5
nfds == 0,3,2,5
size <= kMaxSize,3,2,5
"kValuebits <= sizeof(V) * 8, value_size",3,2,5
common->optimized_cbracket[offset] == 0,3,2,5
"16178, ""not codeWScope"", type() == CodeWScope",3,2,5
common->start_used_ptr != 0 && common->start_ptr != 0 && (common->mode == JIT_PARTIAL_SOFT_COMPILE ? common->hit_start != 0 : common->hit_start == 0),3,2,5
lhs->type() == type,3,2,5
IsShiftedRegister(),3,2,5
"NE, !=",3,2,5
text_type() == ATOM,3,2,5
"sizeof(d) == sizeof(uint64_t), DoubleMustBe64Bits",3,2,5
result == 0,3,2,5
d1 != ScratchRegister,3,2,5
common->optimized_cbracket[offset >> 1] == 0,3,2,5
"common, matchingpath, assert, TRUE",3,2,5
" 12601 , ""CurOp not marked done yet"" , _end ",3,2,5
offset < length_,3,2,5
"session, S2BT_SAFE(session) != NULL",5,0,5
"11005, ""connection was returned to the pool already"", _conn",3,2,5
common->currententry->entry == NULL && common->recursive_head_ptr != 0,3,2,5
!gc::IsAboutToBeFinalized(&k),3,2,5
"13383, ""BatchIterator empty"", moreInCurrentBatch()",3,2,5
sizeof(T) <= kAllocIncrement,3,2,5
"Database* db, StringData ns",3,2,5
"session, id == WT_TXN_NONE || !WT_TXNID_LT(id, oldest_id)",3,2,5
i < getPathLength(),3,2,5
s <= kMaxSize,3,2,5
"common, current->cc, &backtrack, FALSE",3,2,5
*cc == OP_DNREF || *cc == OP_DNREFI,3,2,5
(0 < n) && (n < 64),4,1,5
"LTE, <=",3,2,5
IsValidRegister(),3,2,5
has_alternatives && *matchingpath >= OP_ASSERT && *matchingpath <= OP_ASSERTBACK_NOT,3,2,5
 !mockRanges.empty() ,3,2,5
"LT, <",3,2,5
"GTE, >=",3,2,5
hasIonScript(),3,2,5
"13102, ""connection was returned to the pool already"", _conn",3,2,5
"16446, ""BSONElement has bad size"", esize > 0",3,2,5
"10336, ""No subobject started"", _s.subobjStarted()",3,2,5
"0 == ""Not yet implemented""",3,2,5
private_data_ptr == OVECTOR(offset),3,2,5
"compiler_common *common, pcre_uchar *cc, assert_backtrack *backtrack, BOOL conditional",3,2,5
"session, ref->state == WT_REF_LOCKED && ref->page != NULL",3,2,5
"16020, mongoutils::str::stream() << ""Expression "" << this->getOpName() << "" takes exactly "" << NArgs << "" arguments. "" << args.size() << "" were passed in."", args.size() == NArgs",3,2,5
" false && ""Did not find any function with that name in the module.""",3,2,5
length_ >= N,3,2,5
other_cases[0] < other_cases[1] && other_cases[1] < other_cases[2],3,2,5
"kKeybits - kHashbits + kValuebits <= kTbits, entry_size_must_be_big_enough",3,2,5
int32_t(mRefCnt) > 0,3,2,5
SPROP_FETCH(spp) == sprop,2,2,4
(flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) != (EX86_BYTE_ARG | EX86_HALF_ARG),2,2,4
"JS_InstanceOf(cx, obj, &js_XMLClass, NULL)",2,2,4
info->minCapacity <= linear,2,2,4
 W.n == 0 ,2,2,4
labels == NULL || labels->length() > 0,2,2,4
"tail + GetJumpOffset(pc+tail, pc+tail) == 0",2,2,4
day->IsEmpty(),2,2,4
" 10304 , ""Client Error: Remaining data too small for BSON object"", theEnd - nextjsobj > 3 ",2,2,4
"""interrupted""",2,2,4
!(src2 & SRC2_IMM),2,2,4
JSTYPE_LIMIT == sizeof js_type_strs / sizeof js_type_strs[0],2,2,4
!front_page->prev_page()->is_anchor(),2,2,4
newCount <= table->count,2,2,4
forInVar,2,2,4
"session, !F_ISSET(conn, WT_CONN_READONLY) || WT_STRING_MATCH(name, WT_SINGLETHREAD, strlen(WT_SINGLETHREAD))",2,2,4
op == JSOP_POP,2,2,4
is_uint3(code),2,2,4
(uintN)depth <= cg->maxStackDepth,2,2,4
obj->slots,2,2,4
is_int8(offset),2,2,4
pointer_ != NULL,2,2,4
divisor > 0 && divisor <= 65536,2,2,4
key != JSProto_Null,2,2,4
FIRST_FAST_ELEMENTS_KIND == 0,2,2,4
size_in_bytes >= kHeaderSize,2,2,4
" 10335 , ""builder does not own memory"", own ",2,2,4
!has_pending_message_,2,2,4
 n->hash == k.hash() ,2,2,4
(JS_PTR_TO_UINT32(he->value) & SHARP_BIT) == 0,2,2,4
!Scalar::isSimdType(type),2,2,4
0 < patlen && patlen <= BMH_PATLEN_MAX,2,2,4
"OBJ_GET_CLASS(cx, fp->scopeChain) != &js_BlockClass || JS_GetPrivate(cx, fp->scopeChain) != fp",2,2,4
this->getTail() != nullptr,2,2,4
rt->nativeIteratorStates,2,2,4
op == JSOP_LEAVEBLOCK,2,2,4
fp->spbase <= sp && sp <= fp->spbase + depth,2,2,4
decPt <= nDigits,2,2,4
SPROP_IS_FREE(*spp),2,2,4
!result_.is(index_),2,2,4
JSVAL_IS_STRING(*vp),2,2,4
!SCOPE_HAD_MIDDLE_DELETE(scope),2,2,4
!al->table,2,2,4
op == JSOP_ADD,2,2,4
index < numVariables(),3,1,4
HasDoubleValue(),2,2,4
(jsval *) cx->stackPool.current->base <= sp && sp <= limit,2,2,4
loc != NULL,2,2,4
"16747, ""coarsestIndexedLevel must be >= 0"", out->coarsestIndexedLevel >= 0",2,2,4
IsApiFunction(),2,2,4
sizeof(JSTempValueUnion) == sizeof(JSObject *),2,2,4
deferred_handles_ == NULL,2,2,4
DR(PIC_ADDR_REG) == 25 && PIC_ADDR_REG == TMP_REG2,2,2,4
"session, !F_ISSET(session, WT_SESSION_SCHEMA_LOCKED)",2,2,4
v == JSVAL_VOID,2,2,4
static_cast<size_t>(length) == rv,2,2,4
pn->pn_left,2,2,4
lir->isCall(),3,1,4
cx->requestDepth,2,2,4
src1 == TMP_REG1 && !(flags & SRC2_IMM),2,2,4
" 13307, ""cannot convert empty string to long long"", *n != 0 ",2,2,4
 _c->_pinValue >= 100 ,2,2,4
index >= 0 && index < size_,2,2,4
time->IsEmpty(),2,2,4
"13110, ""HostAndPort: bad host:port config string"", *p",2,2,4
rt->state != JSRTS_LANDING,2,2,4
IsFlagSet(HAS_PROGRESS_BAR),2,2,4
sizeof(instruction) == kInstructionSize,3,1,4
flagp,2,2,4
(c2 <= cs->length) && (c1 <= c2),2,2,4
cache_->empty,2,2,4
!(isolate)->has_pending_exception(),2,2,4
!didRemove || RECURSION_LEVEL(table) == 1,2,2,4
result == GetThreadLocal(key),2,2,4
"idx, added, idx.head, curObjLoc, ordering",2,2,4
num > 0,2,2,4
"session, state == WT_CHILD_MODIFIED",2,2,4
"session, dhandle->session_inuse > 0",3,1,4
kNotInternalizedTag != 0,2,2,4
CheckFlag(kFlexibleRepresentation),2,2,4
serial <= n,2,2,4
"VALUE_IS_FUNCTION(cx, argv[-2])",2,2,4
cx->requestDepth == 0,2,2,4
cx->fp->argv == argv,2,2,4
"IsAligned(object_size, kPointerSize)",2,2,4
"SD_SPAN(sd, pivot) == span",2,2,4
SPROP_FETCH(spp2) == spvec[i],2,2,4
HEAP->always_allocate_scope_depth_ == 0,2,2,4
nchar != 1,2,2,4
Isolate::Current() == isolate_,2,2,4
CG_NOTE_COUNT(cg) == 0 || CG_LAST_NOTE_OFFSET(cg) != CG_OFFSET(cg) || !GettableNoteForNextOp(cg),2,2,4
" ""did you call done already"" , _conn ",2,2,4
((jsid)obj & JSID_TAGMASK) == 0,2,2,4
(ptrdiff_t)(cnt) >= 0,2,2,4
" 10380 , ""basicrecstore write io error"", !f.bad()",2,2,4
"chainp != &fp->blockChain || !*chainp || OBJ_GET_CLASS(cx, *chainp) == &js_BlockClass",2,2,4
-depth <= spindex,2,2,4
"13650, str::stream() << ""Couldn't open directory '"" << dir.string() << ""' for flushing: "" << errnoWithDescription(), fd >= 0",2,2,4
tt == TOK_XMLNAME,2,2,4
!a->prevUnscanned,2,2,4
"session, !WT_PAGE_IS_INTERNAL(page)",2,2,4
sd->before >= offset && (lo == 0 || sd[-1].before < offset),2,2,4
!heap_->code_space()->Contains(addr),2,2,4
JS_DHASH_ENTRY_IS_LIVE(entry),2,2,4
 _nlocksByMe.get() == 1 ,2,2,4
"GET_HEADER(pool, b) == &a->next",2,2,4
!pn2->pn_expr && !let,2,2,4
 dbLocked == 0 ,2,2,4
_cm,2,2,4
target()->is_keyed_load_stub(),2,2,4
obj2 != obj,2,2,4
!result->IsReturn() && !result->IsSimulate() && !result->IsDeoptimize(),2,2,4
"traceKind >= JSTRACE_OUTOFLINE, (traceKind & JSTRACE_OUTOFLINE) == JSTRACE_OUTOFLINE",2,2,4
pn->pn_count >= 1,2,2,4
" ""not a dbref"" , type() == DBRef ",2,2,4
kStackSlotsFirstBit + kStackSlotsBitCount <= 32,2,2,4
pn->pn_op == JSOP_CALL || pn->pn_op == JSOP_EVAL,2,2,4
GCX_EXTERNAL_STRING <= type && type < (intN) GCX_NTYPES,2,2,4
HeapObject::cast(obj)->Size() == JSValue::kSize,2,2,4
scope->lastProp,2,2,4
Thin_GetWait(o) != 0,2,2,4
has_scheduled_exception(),2,2,4
!Code::IsYoungSequence(pc_),2,2,4
" 0, areGlobalWritesGreedy ",2,2,4
static_cast<int64_t>(static_cast<double>(number)) == number,2,2,4
RECURSION_LEVEL(table) == 0,2,2,4
!charSet->converted,2,2,4
SN_TYPE(sn) == SRC_DESTRUCT,2,2,4
"(JSVAL_TAG_STRING & 0x03) == size_t(JS::TraceKind::String), ""Value type tags must correspond with JS::TraceKinds.""",4,0,4
begin->second->getManager() == _manager,2,2,4
JSVAL_IS_STRING(*rval),2,2,4
charSet->u.src.length <= JSSTRING_LENGTH(gData->regexp->source) - 1 - charSet->u.src.startIndex,2,2,4
(version & ~JSVERSION_MASK) == 0,2,2,4
NUMBER_OF_TYPES <= 8,2,2,4
lower_limit <= higher_limit,2,2,4
rt->gcLevel > 0,2,2,4
cur != nullptr,2,2,4
type == kMessage || type == kKeyboard || type == kDisconnect,2,2,4
 _name.size() ,2,2,4
" 14049, ""FieldRangeSetPair invalid index specified"", idxNo >= -1 ",2,2,4
pn->pn_count >= 3,2,2,4
!IsSimpleTransition(),2,2,4
pn->pn_arity == PN_UNARY,2,2,4
"JSContext* cx, unsigned argc, Value* vp",3,1,4
 pthread_mutex_lock(&_lock) == 0 ,2,2,4
type <= LAST_TYPE,2,2,4
**current == *substring,2,2,4
lhs != ScratchReg,2,2,4
"IsBootstrappingOrValidParentContext(result, this)",2,2,4
construct_stub_deopt_pc_offset() == Smi::FromInt(0),2,2,4
capacity == 0,2,2,4
gen->state == JSGEN_NEWBORN,2,2,4
!(fun->flags & JS_FUNCTION_INTERPRETED_BIT),2,2,4
is_one_byte_,2,2,4
getType() == Array,2,2,4
"session, ikey.size > 0",3,1,4
index >= first_int64_index() && index < first_code_ptr_index(),2,2,4
IsGlobalContext(),2,2,4
*next_flagp != GCF_FINAL,2,2,4
gross > aoff,2,2,4
name_->Equals(isolate()->heap()->length_string()),2,2,4
root_points_to_gcArenaList,2,2,4
ts->lookahead < NTOKENS_MASK,2,2,4
he,2,2,4
vp >= fp->spbase,2,2,4
target->data_length_ > 0,2,2,4
(BitCast<uint64_t>(OS::nan_value()) >> 32) != kHoleNanUpper32,2,2,4
length >= 1,2,2,4
clasp != &js_CallClass,2,2,4
a.isMemory(),2,2,4
pn1->pn_type == TOK_NUMBER && pn2->pn_type == TOK_NUMBER,2,2,4
op != JSOP_DESCENDANTS || right->pn_type != TOK_STRING || right->pn_op == JSOP_QNAMEPART,2,2,4
(reinterpret_cast<intptr_t>(owner_) & kFailureTagMask) == kFailureTag,2,2,4
is_int8(disp),2,2,4
GetHeadPage() == Page::FromAllocationTop(limit),2,2,4
OBJ_IS_NATIVE(fp->fun->object),2,2,4
value->IsPhi(),2,2,4
mode == this->mode(),2,2,4
heap != NULL,2,2,4
"strftime(buf, sizeof(buf), fmt, &t) == 20",2,2,4
"session, !__wt_page_is_modified(page) || LF_ISSET(WT_SKIP_UPDATE_RESTORE)",2,2,4
!(cx->fp->flags & (JSFRAME_EVAL | JSFRAME_COMPILE_N_GO)),2,2,4
frame->is_java_script() || frame->is_arguments_adaptor(),2,2,4
obj_ != holder_,3,1,4
offset < frame_size_,2,2,4
length != 1 || *start != '*',2,2,4
JT_HAS_TAG(sd->target),2,2,4
end[0] == ']',2,2,4
!is_empty(),2,2,4
"session, exclusive || ref->state == WT_REF_LOCKED",2,2,4
" 10211 , ""only readOnly setObject supported in java"" , readOnly ",2,2,4
e < 0,2,2,4
sp - fp->spbase >= 1,2,2,4
length_ >= capacity_,2,2,4
!is_near_linked(),2,2,4
!regs.has(BaselineTailCallReg),2,2,4
new_type.IsSubtypeOf(type_),2,2,4
!(pi->unscannedBitmap & bit),2,2,4
this->language_mode() == CLASSIC_MODE || this->language_mode() == language_mode || language_mode == EXTENDED_MODE,2,2,4
flat.IsAscii(),2,2,4
(value->IsUndefined() && GetBackPointer()->IsMap()) || (value->IsMap() && GetBackPointer()->IsUndefined()),2,2,4
Thin_GetWait(tl->owner),2,2,4
"rm_reg.code() & 0xf, rm_reg.code()",2,2,4
!IsPoisonedPtr(str),2,2,4
"session, LF_ISSET(WT_DHANDLE_LOCK_ONLY) || F_ISSET(session->dhandle, WT_DHANDLE_OPEN)",2,2,4
value_->HasFastObjectElements(),2,2,4
 rsbase._lockedByMe.get() ,2,2,4
attributes == this->attributes(),2,2,4
holder::offset % kPointerSize == kIntSize,2,2,4
"session, alloc_refp - alloc_index->index == alloc_index->entries - SPLIT_CORRECT_1",2,2,4
 oldest || nnodes == 1 ,2,2,4
is_ascii_,2,2,4
!scope->table,2,2,4
JSFunction::kCodeEntryOffset + kPointerSize == JSFunction::kPrototypeOrInitialMapOffset,2,2,4
"""arbiter parm is missing, use '-' for none"", arb",2,2,4
 d.dbMutex.isWriteLocked() ,2,2,4
sizeof(JSGCThing) >= sizeof(JSObject),2,2,4
new_state >= 0,2,2,4
isStarted(),2,2,4
" ""write failed"", left == write(fd, buf, left) ",2,2,4
SN_TYPE(sn) == SRC_PCBASE,2,2,4
"msgid, status, file, line",2,2,4
values[T::kIsolateIndex]->IsSmi(),2,2,4
numEnd < buffer + bufferSize,2,2,4
GCMethods<T>::needsPostBarrier(this->value),2,2,4
instance_type == CODE_TYPE,2,2,4
!encoded,2,2,4
!fp->script && !(fp->fun && FUN_INTERPRETED(fp->fun)),2,2,4
"JS_IS_SCOPE_LOCKED(cx, oldscope)",2,2,4
switchOp == JSOP_LOOKUPSWITCH,2,2,4
pn->pn_type == TOK_RB,2,2,4
op->IsUnallocated(),2,2,4
extra != 0,2,2,4
op == JSOP_FORPROP || op == JSOP_FORNAME,2,2,4
(size_t)(uint16)thingSize == thingSize,2,2,4
gen->state == JSGEN_NEWBORN || gen->state == JSGEN_OPEN || gen->state == JSGEN_CLOSED,2,2,4
"JS_IS_SCOPE_LOCKED(cx, newscope)",2,2,4
tc->blockChain == ATOM_TO_OBJECT(scopeStmt->atom),2,2,4
tt < TOK_LIMIT,2,2,4
rt->gcStats.nclose,2,2,4
xml->object != obj,2,2,4
CG_NEXT(cg) == CG_BASE(cg),2,2,4
!(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) || (flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) == 0,2,2,4
multiplier > part,2,2,4
a->avail <= a->limit,2,2,4
!fp->script && fp->fun && fp->fun->u.n.native == Function,2,2,4
gData->cpend >= x->cp,2,2,4
charSet->sense == JS_FALSE,2,2,4
JT_HAS_TAG((sd)->target),2,2,4
value != NULL,2,2,4
 _state.get() == 0 ,2,2,4
 len < (unsigned) BSONObjMaxUserSize ,2,2,4
(kExternalStringTag & kIsIndirectStringMask) == 0,2,2,4
!rt->scriptFilenameTableLock,2,2,4
 batchResponse->isValid( &errMsg ) ,2,2,4
_isBalancerWriteConcernSet,2,2,4
 fabs(cross_prod)-1 < 1e-6 ,2,2,4
(*flagp & (GCF_MARK|GCF_FINAL)) == (GCF_MARK|GCF_FINAL),2,2,4
mark < n,2,2,4
flbase,2,2,4
children_index_ >= 0,2,2,4
priv->stackElems + stackDepth == elem,2,2,4
type != CODE_TYPE,2,2,4
ATOM_IS_STRING(pn->pn_atom),2,2,4
!JSVAL_IS_PRIMITIVE(rval),2,2,4
!(details_.type() == NORMAL && !IsFound()),2,2,4
offset < kInvalidLocalOffsetInMs,2,2,4
!JS::IsPoisonedPtr(k),2,2,4
"*OFF2STR(&ss->sprinter, head) == '['",2,2,4
delta == JUMPX_OFFSET_LEN - JUMP_OFFSET_LEN,2,2,4
" 13044, ""no ts field in query"", !tsElt.eoo() ",2,2,4
ni == newlength,2,2,4
cx->insideGCMarkCallback,2,2,4
kSymbolTag != 0,2,2,4
"OBJECT_IS_XML(cx, vobj)",2,2,4
pc < endpc,2,2,4
 _addr.size() ,2,2,4
flag == HT_FREE_ENTRY,2,2,4
!JT_HAS_TAG((sd)->target),2,2,4
offset >= 2,2,2,4
 !_p._p.empty() ,2,2,4
"session, btree->evict_ref == NULL",2,2,4
mode != ALLOW_COPIED_DOUBLE_ELEMENTS,2,2,4
!popScope || let,2,2,4
z,2,2,4
!requires_slow_elements(),2,2,4
"endpointA.shardVersion.getVersion().epoch(), endpointB.shardVersion.getVersion().epoch()",2,2,4
b->wds <= n,2,2,4
JS_DHASH_ENTRY_IS_FREE(newEntry),2,2,4
pn2->pn_arity == PN_BINARY,2,2,4
(value == GetHeap()->empty_fixed_array()) || (map()->has_fast_double_elements() == value->IsFixedDoubleArray()),2,2,4
"session, page == NULL || !WT_PAGE_IS_INTERNAL(page)",2,2,4
"11501, ""not yet implemented recstoreremove""",2,2,4
((JSGCPageInfo *)(firstPage + offset))-> unscannedBitmap == 0,2,2,4
ancestorCount == scope->entryCount,2,2,4
"16886, ""nsToCollectionSubstring: no ."", i != string::npos ",2,2,4
length > BYTECODE_CHUNK,2,2,4
hasConfigurable(),3,1,4
diff >= 0,2,2,4
"allocation_info_, to_space_",2,2,4
paramStatus,2,2,4
" 10080 , ""ns name too long, max size is 128"", len < MaxNsLen",2,2,4
top == limit || Page::FromAddress(top) == Page::FromAddress(limit - 1),2,2,4
!STMT_MAYBE_SCOPE(scopeStmt),2,2,4
i == n,2,2,4
kind >= 0 && unsigned(kind) < FINALIZE_LIMIT,2,2,4
!result_.is(object_),2,2,4
is_near_linked(),2,2,4
n < nlimit,2,2,4
value->IsNull() || value->IsJSReceiver(),2,2,4
!GetHeap()->InNewSpace(empty_array),2,2,4
"condition, line",2,2,4
"strncmp(ce->name, name, sizeof ce->name) == 0",2,2,4
arguments_adaptor_deopt_pc_offset() == Smi::FromInt(0),2,2,4
Token::IsBinaryOp(op),2,2,4
!cx->insideGCMarkCallback,2,2,4
 f->internals->channel == to.channel ,2,2,4
callback_ != NULL,2,2,4
IsModule() && IsFrozen(),2,2,4
GC_FLAGS_SIZE >= GC_PAGE_SIZE,2,2,4
value_ > 1,2,2,4
callnew_feedback_slot_ != kInvalidFeedbackSlot,2,2,4
gen->state == JSGEN_NEWBORN || gen->state == JSGEN_OPEN,2,2,4
yml->xml_class == JSXML_CLASS_ELEMENT,2,2,4
jump < esp2->nextTermFixup,2,2,4
op == JSOP_PUSH || op == JSOP_GETLOCAL,2,2,4
state->next->prevp == &state->next,2,2,4
jt->balance != 0,2,2,4
flat.IsTwoByte(),2,2,4
sizeof(Value*) == sizeof(void*),2,2,4
base >= 2 && base <= 36,2,2,4
cursor + filenameSize == (uint8 *)copy + mallocSize,2,2,4
 _bits <= 32 ,2,2,4
thingIndex < GC_PAGE_SIZE,2,2,4
tvr->count >= 0,2,2,4
this->elements_kind() == elements_kind,2,2,4
CURRENT_TOKEN(ts).type == TOK_XMLETAGO,2,2,4
has_prototype(),2,2,4
 info().isLocked() ,2,2,4
sprop,2,2,4
" 10127 , ""arbiter parm is empty"", !arbHost.empty()",2,2,4
!cg->treeContext.topStmt,2,2,4
i < jit::AsmJSImm_Limit,2,2,4
"JS_GetPrivate(cx, obj) == qn",2,2,4
object->IsTransitionArray(),2,2,4
survived >= 0,2,2,4
 encode[i] == toupper( encode[i+26] ) ,2,2,4
ticks < 256,2,2,4
"OBJ_BLOCK_DEPTH(cx, obj) == pcdepth",2,2,4
 c.curop() ,2,2,4
pi->unscannedBitmap,2,2,4
 f->fragmentLen == n ,2,2,4
format[1] == '\n' || format[1] == ' ',2,2,4
nchar == 1,2,2,4
survival_rate_trend != FLUCTUATING,2,2,4
StatusWith<T> sw,2,2,4
IsField(),2,2,4
cx->stackPool.current != &gen->arena,2,2,4
max <= ((uintN)-1 - 9) / 10,2,2,4
ts->ungetpos < sizeof ts->ungetbuf / sizeof ts->ungetbuf[0],2,2,4
stmt->flags & SIF_SCOPE,2,2,4
 !_element.eoo() ,2,2,4
pn->pn_op == JSOP_FORIN || pn->pn_op == JSOP_FOREACHKEYVAL || pn->pn_op == JSOP_FOREACH,2,2,4
kind() == FUNCTION,2,2,4
!first,2,2,4
(uint16)sprop->shortid < data->u.let.index,2,2,4
tz->IsEmpty(),2,2,4
MAP_IS_NATIVE(&scope->map),2,2,4
"IsAligned(OffsetFrom(addr), kPointerSize) || IsAligned(OffsetFrom(addr) - 1, kPointerSize)",2,2,4
fragmentNo == 0,2,2,4
!table->array,2,2,4
*returnop == JSOP_RETURN,2,2,4
" 13474, ""no _getInterruptSpecCallback"", _getInterruptSpecCallback ",2,2,4
CURRENT_TOKEN(ts).type == TOK_AT,2,2,4
type >= SLJIT_JUMP && type <= SLJIT_CALL3,2,2,4
GetPrototypeTransitions() != proto_transitions,2,2,4
!map.is_null(),2,2,4
ptr_ != NULL,4,0,4
!external_caught_exception_,2,2,4
hasEnumerable(),3,1,4
tc->blockChain == ATOM_TO_OBJECT(stmt->atom),2,2,4
ss->top != 0,2,2,4
pn3->pn_type == TOK_CASE,2,2,4
"CHAR_BIT == 8, ""CHAR_BIT == 8""",4,0,4
sizeof(JSGCThing) >= sizeof(jsdouble),2,2,4
"10088, ""nsToDatabase: ns too long"", i < static_cast<size_t>(MaxDatabaseNameLen)",2,2,4
obj->IsJSModule(),2,2,4
*dp == '$',2,2,4
!stmt->downScope,2,2,4
rsbase._locked == 0,2,2,4
tvr.u.value == OBJECT_TO_JSVAL(obj),2,2,4
"!OBJECT_IS_XML(cx, origobj)",2,2,4
(jsuint)-1 == 4294967295U,2,2,4
rt.IsValid(),2,2,4
 len <= 4*1024*1024 + 128 ,2,2,4
"IsAligned(byte_size, kPointerSize)",2,2,4
!cx->fp,2,2,4
 s <= 0xffffffff ,2,2,4
frame->is_construct(),2,2,4
!Serializer::enabled() || (CpuFeatures::found_by_runtime_probing_ & mask) == 0,2,2,4
 Lock::isRW() ,2,2,4
"16777, ""need bucketSize"", e.isNumber()",2,2,4
sizeof(Dest) == sizeof(Source),2,2,4
bufferSize >= (size_t)(mode <= DTOSTR_STANDARD_EXPONENTIAL ? DTOSTR_STANDARD_BUFFER_SIZE : DTOSTR_VARIABLE_BUFFER_SIZE(precision)),2,2,4
i <= ida->length,2,2,4
 pthread_mutex_destroy(&_lock) == 0 ,2,2,4
pn->pn_op == JSOP_FORIN || pn->pn_op == JSOP_FOREACH,2,2,4
!forelem_done,2,2,4
lookahead != 0,2,2,4
type != ODDBALL_TYPE,2,2,4
0 <= idx_ && idx_ < kNumberOfElements,2,2,4
HasBeenSetUp(),2,2,4
extraUnused == 0,2,2,4
pn2->pn_type == TOK_COLON,2,2,4
!continuation_captured_,2,2,4
InitField::is_valid(init_flag),2,2,4
" 10190 , ""ConfigServer not setup"" , _primary.ok() ",2,2,4
cur < current->limit,2,2,4
"!AreAliased(scratch0_, object_, address_, rcx)",2,2,4
!oldfp->dormantNext,2,2,4
flags_ & HAS_SCOPECHAIN,3,1,4
 z < maxSize ,2,2,4
" 13048, (string)""can't append to array using string field name ["" + name.data() + ""]"" ",2,2,4
map->vector && i < map->length,2,2,4
kGrowICDelta == STORE_AND_GROW_TRANSITION_SMI_TO_DOUBLE - STORE_TRANSITION_SMI_TO_DOUBLE,2,2,4
body->pn_type == TOK_LEXICALSCOPE,2,2,4
 n >= 0 && n < 100000 ,2,2,4
" ""db name is empty"", L > 0 ",2,2,4
 JSArrayBuffer::kWeakFirstViewOffset == JSArrayBuffer::kWeakNextOffset + kPointerSize,2,2,4
*bytesptr >= GC_ARENA_SIZE,2,2,4
 !string( nm ).empty() ,2,2,4
op == JSOP_ENUMELEM || op == JSOP_ENUMCONSTELEM,2,2,4
scope->lock.owner == 0,2,2,4
" 13280 , (string)""invalid db name: "" + ns , Database::validDBName( d ) ",2,2,4
!lrc,2,2,4
kElementsKindCount <= (1 << kElementsKindBitCount),2,2,4
"!XMLARRAY_HAS_MEMBER(&ancdecls, ns2, namespace_identity)",2,2,4
" 12600, ""releaseAndWriteLock: unlock_shared failed, probably recursive"" ",2,2,4
seplen == 1 || seplen == 2,2,2,4
!ObjectIsDuplicateAt(index),2,2,4
kVisitorIdCount <= 256,2,2,4
"endpointA.shardVersion.getVersion().toLong(), endpointB.shardVersion.getVersion().toLong()",2,2,4
(uintN)i < ss->top,2,2,4
name == errorNumber++,2,2,4
rt->gcUnscannedBagSize != 0,2,2,4
array->IsSortedNoDuplicates(),2,2,4
"JS_IS_OBJ_LOCKED(cx, pobj)",2,2,4
 itemIndex < static_cast<int>( request->sizeWriteOps() ) ,2,2,4
off != -1,2,2,4
bound() || used(),3,1,4
low <= high,2,2,4
kMinObjectSizeInWords * kPointerSize <= object_size,2,2,4
JSVAL_IS_GCTHING(lrc->roots[m]),2,2,4
CURRENT_TOKEN(ts).type == TOK_DBLCOLON,2,2,4
!heap->InNewSpace(heap->null_value()),2,2,4
!((attrs ^ sprop->attrs) & JSPROP_SHARED) || !(attrs & JSPROP_SHARED),2,2,4
!argc || JSVAL_IS_NULL(argv[0]) || JSVAL_IS_VOID(argv[0]),2,2,4
"16772, ""geoSearch can only have 1 non-geo field for now"", otherFieldsOut->size() == 0",2,2,4
INT_FITS_IN_JSVAL(length),2,2,4
JSDOUBLE_IS_FINITE(d) && !JSDOUBLE_IS_NEGZERO(d),2,2,4
!mark_bit.Get(),2,2,4
thread_local_.memory_size_ != 0,2,2,4
IsPowerOf2(x),2,2,4
pn3->pn_arity == PN_LIST && pn3->pn_count == 1,2,2,4
target->is_inline_cache_stub() || target->is_compare_ic_stub(),2,2,4
s + 1 <= quoted_buffer + MIN_QUOTED_CHAR_BUFFER,2,2,4
pn->pn_type == TOK_RB || pn->pn_type == TOK_RC,2,2,4
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == TO_BOOLEAN_IC,2,2,4
"!AreAliased(scratch0_, object_, address_, ecx)",2,2,4
!(bxe[1] & ~mask),2,2,4
"length_, kMaximumClonedLength",2,2,4
"gross <= JS_UPTRDIFF(a->limit, a)",2,2,4
"sMaxCapacity <= SIZE_MAX / sizeof(Entry), ""would overflow allocating max number of entries""",2,2,4
(sprop)->slot != SPROP_INVALID_SLOT || !SPROP_HAS_STUB_SETTER(sprop),2,2,4
"msgid, msg, __FILE__, __LINE__",2,2,4
offset.offset() <= UINT32_MAX,2,2,4
slot >= 0,2,2,4
_created,2,2,4
!heap_->InNewSpace(string),2,2,4
slot < fp->script->depth,2,2,4
bv != JSVAL_VOID,2,2,4
GetHeadPage() == Page::FromAllocationTop(reinterpret_cast<Address>(limit_)),2,2,4
_key == ChunkSizeDocKey,2,2,4
kind() == JSTRACE_STRING,2,2,4
gen->state == JSGEN_NEWBORN || gen->state == JSGEN_CLOSED || gen->state == JSGEN_OPEN,2,2,4
handle_scope_implementer_,2,2,4
(int16)script->version != JSVERSION_UNKNOWN,2,2,4
repeats >= 1 && repeats <= kMaxRepeats,2,2,4
!JS::IsPoisonedPtr(sym),2,2,4
!stackbuf,2,2,4
sizeof(T) == sizeof(uint32_t),2,2,4
" 10307 , ""Client Error: bad object in message"", false",2,2,4
s < buf + bufsize,2,2,4
isolate_ == Isolate::Current(),2,2,4
JSVAL_IS_NUMBER(pn3->pn_val) || JSVAL_IS_STRING(pn3->pn_val) || JSVAL_IS_BOOLEAN(pn3->pn_val),2,2,4
JSID_IS_ATOM(propid),2,2,4
"13548, ""BufBuilder grow() > 64MB""",2,2,4
!value->representation().Equals(to),2,2,4
getAllocKind() != js::gc::FINALIZE_FAT_INLINE_STRING,2,2,4
min.getShard() == max.getShard(),2,2,4
a->unscannedPages == 0,2,2,4
*pop == JSOP_POP || *pop == JSOP_POPV,2,2,4
is_valid(value),2,2,4
n != (uint32)-1,2,2,4
"session, __wt_verify_dsk_image( session, ""[raw evict split]"", tmp->data, dsk->mem_size, 0) == 0",2,2,4
"BodyDescriptor::SizeOf(map, object) == object_size",2,2,4
ht->nentries < nlimit,2,2,4
v.isMarkable(),2,2,4
T::installType == InstallType::OverNative || T::construct != BaseInfo::construct,4,0,4
op == JSOP_NUMBER,2,2,4
rxml->object,2,2,4
sizeof(jsatomid) * JS_BITS_PER_BYTE >= ATOM_INDEX_LIMIT_LOG2 + 1,2,2,4
pos != 0,2,2,4
instance_type() >= FIRST_JS_RECEIVER_TYPE,2,2,4
*pc == JSOP_EXCEPTION,2,2,4
acx->thread == cx->thread,2,2,4
JS_HASH_BITS - ht->shift > newlog2,2,2,4
newtop <= oldtop,2,2,4
(n) != 0,2,2,4
scratch != address.base,4,0,4
!JS_IsExceptionPending(cx),2,2,4
lval,2,2,4
JS_DHASH_ENTRY_IS_FREE(hdr),2,2,4
value >= root_index_wave_front_,2,2,4
IsMovW(Memory::int32_at(pc)),2,2,4
 oldest == 0 ,2,2,4
mode == 0 || op == JSOP_SETCONST || op == JSOP_GETMETHOD || op == JSOP_SETMETHOD,2,2,4
pn->pn_count == 1 || pn->pn_count == 2,2,2,4
!maybe->IsFailure(),2,2,4
list->xml_class == JSXML_CLASS_LIST,2,2,4
"OBJ_GET_CLASS(cx, obj) == &js_IteratorClass",2,2,4
"offsetof(JSClass, convert) == offsetof(Class, convert), ""Class and JSClass must be consistent""",2,2,4
cg->stackDepth == stackDepth,2,2,4
sizeof(Value) == 16,2,2,4
arg1 == TMP_REG1,2,2,4
ICTailCallReg == ra,4,0,4
!src2.is(src4),2,2,4
HeapObject::cast(obj)->Size() == JSDate::kSize,2,2,4
op2 == JSOP_GOSUB || op2 == JSOP_EXCEPTION,2,2,4
 rs->fileNumber == n ,2,2,4
shortid >= 0,2,2,4
hasWritable(),3,1,4
*xval != '\0',2,2,4
Contains(addr),2,2,4
map_ <= p && p < end,2,2,4
_a->avail <= _a->limit,2,2,4
sprop->getter == js_GetArgument,2,2,4
" 13305, ""could not convert string to long long"", *endPtr == 0 && errno == 0 ",2,2,4
 t->_next == 0 ,2,2,4
buffer_pos == 0,2,2,4
target()->is_keyed_store_stub(),2,2,4
frame->is_internal(),2,2,4
"session, dhandle->session_ref > 0",2,2,4
buffer_cursor_ > raw_data_,2,2,4
pc[len] == JSOP_LEAVEBLOCKEXPR,2,2,4
scope_ < kNumberOfScopes,2,2,4
unchecked_transition_array()->HasPrototypeTransitions(),2,2,4
JSVAL_IS_OBJECT((jsval)thing),2,2,4
isDataDescriptor(),2,2,4
!SPROP_FETCH(spp),2,2,4
IsInConstantPool(),2,2,4
other.length() <= length(),2,2,4
CG_OFFSET(cg) == top,2,2,4
(kHeapObjectTag & kNotMarkedBit) != 0,2,2,4
result != kAbsent,2,2,4
cell_index_ == Bitmap::IndexToCell(Bitmap::CellAlignIndex( chunk_->AddressToMarkbitIndex(cell_base_))),2,2,4
2 <= sizeof table->array[0],2,2,4
"session, cache->evict[0].ref != NULL",2,2,4
_ns,2,2,4
lrs && lrs->rootCount,2,2,4
" 10440 , ""failure creating new datafile"", filelen == 0 ",2,2,4
SD_GET_BPDELTA(sd) == 0,2,2,4
"&aRhs != this, ""self-assign disallowed""",4,0,4
" ""bad db name [2]"", nm[L-1] != '.' ",2,2,4
secs <= std::numeric_limits<int>::max(),2,2,4
kidIndex != XML_NOT_FOUND,2,2,4
op == Token::BIT_AND || op == Token::BIT_OR || op == Token::BIT_XOR,2,2,4
aprop,2,2,4
fp->flags & JSFRAME_COMPILING,2,2,4
is_lazy(),2,2,4
 _created == 0 ,2,2,4
"errMsg, """"",2,2,4
!heap_->cell_space()->Contains(addr),2,2,4
index >= 0 && (index * kIntSize) < this->length(),2,2,4
src2 & SRC2_IMM,2,2,4
caller->fun && !JSFUN_HEAVYWEIGHT_TEST(caller->fun->flags),2,2,4
cx->lockedSealedScope != newscope,2,2,4
"OBJECT_IS_XML(cx, obj)",2,2,4
body_size,2,2,4
to_space_.MaximumCapacity() == from_space_.MaximumCapacity(),2,2,4
!dest.is_null(),2,2,4
chunk->owner() == owner,2,2,4
IsFailure(),2,2,4
sizeof(JSGCThing) >= sizeof(JSString),2,2,4
!fp->script,2,2,4
" 13066 , ""Message contains no documents"", theEnd > nextjsobj ",2,2,4
HeapObject::cast(obj)->Size() == JSMessageObject::kSize,2,2,4
"!SCOPE_LAST_PROP(scope) || SCOPE_HAS_PROPERTY(scope, SCOPE_LAST_PROP(scope))",2,2,4
sp <= argv + argc,2,2,4
(unsigned) delta < (unsigned) SN_XDELTA_LIMIT,2,2,4
count >= 0,2,2,4
sprop->shortid < argc,2,2,4
dst & SLJIT_MEM,2,2,4
JS_DHASH_MIN_SIZE - (maxAlpha * JS_DHASH_MIN_SIZE) >= 1,2,2,4
!forelem_tail,2,2,4
AllowHandleAllocation::IsAllowed(),2,2,4
sizeof(Key*) == sizeof(void*),2,2,4
 magic == 0x12345677 ,2,2,4
table->count > 0,2,2,4
init_flag == this->initialization_flag(),2,2,4
 strlen(src) < len ,2,2,4
" 13310, ""could not convert string to long long"", (*endPtr == 0) && (ret != _I64_MAX) && (ret != _I64_MIN) ",2,2,4
FUN_INTERPRETED(fun) && !FUN_SCRIPT(fun),2,2,4
" endpointA.shardHost.toString(), endpointB.shardHost.toString() ",2,2,4
 ! _progressMeter.isActive() ,2,2,4
chunkIndex < JS_BITS_PER_WORD,2,2,4
 _locktype ,2,2,4
 (data-(char*)this) == HeaderSize ,2,2,4
(size == kXRegSizeInBits) || (size == kWRegSizeInBits),2,2,4
(uint16) sprop->shortid < nargs,2,2,4
!writing,2,2,4
idArray,2,2,4
pn3->pn_type == TOK_RB || pn3->pn_type == TOK_RC,2,2,4
!(desc().attrs & (JSPROP_GETTER | JSPROP_SETTER)),4,0,4
Code::GetStrictMode(code->extra_ic_state()) == Code::GetStrictMode(target()->extra_ic_state()),2,2,4
!reg.IsSP(),2,2,4
bits != 0,3,1,4
entry >= 0,2,2,4
"OBJ_GET_CLASS(cx, exnObject) == &js_ErrorClass",2,2,4
lithium_position_ == -1,2,2,4
pn2->pn_slot >= 0 || !let,2,2,4
cx->fp->script,2,2,4
tmp->tvr.u.marker == mark_temp_ns_array,2,2,4
!JSVAL_IS_PRIMITIVE(nsval),2,2,4
HasNumberValue(),2,2,4
byte_code >= kConstantRepeat && byte_code <= 0x7f,2,2,4
!PCE_PROPERTY(entry_),2,2,4
JS_STACK_SEGMENT(sh) + sh->nslots == argv + argc,2,2,4
 HeaderSize == 8192 ,2,2,4
pn3->pn_type == TOK_STRING || pn3->pn_type == TOK_NAME,2,2,4
src[-1] == '[',2,2,4
arena->next == &gen->arena,2,2,4
!let,2,2,4
pc[oplen] == JSOP_POP || pc[oplen] == JSOP_SETSP,2,2,4
JS_ARRAY_LENGTH(map) == FINALIZE_LIMIT,2,2,4
bool(asCell()) == (kind() != JSTRACE_NULL),2,2,4
BitCast<uint64_t>(OS::nan_value()) != kHoleNanInt64,2,2,4
!parent || child->parent != parent,2,2,4
log != JS_BITS_PER_WORD,2,2,4
x <= 0x80000000u,2,2,4
CURRENT_TOKEN(ts).type == TOK_LC,2,2,4
pos == 0,2,2,4
"strcmp(rval, retsub_pc_cookie) == 0",2,2,4
HeapObject::cast(obj)->Size() == JSModule::kSize,2,2,4
 U.n == 0 ,2,2,4
"16800, ""can't have 2 geo fields"", out->geo.size() == 0",2,2,4
tt == TOK_XMLCDATA || tt == TOK_XMLCOMMENT || tt == TOK_XMLPI,2,2,4
Chunk::withinArenasRange(addr),2,2,4
n != 0 || lrc == &lrs->firstChunk,2,2,4
JUMP_OFFSET_MIN <= span && span <= JUMP_OFFSET_MAX,2,2,4
JSVAL_IS_NULL(lval) || JSVAL_IS_VOID(lval),2,2,4
"""ReadFile error - truncated file?"", read == len",2,2,4
 f == 0 ,2,2,4
basic_policy() == EXTENDED_POLICY,2,2,4
" 13336, ""yield not supported"", false ",2,2,4
transition_number == kSimpleTransitionIndex,2,2,4
"16070, ""out of memory BufBuilder::grow_reallocate""",2,2,4
is_constant_call(),2,2,4
ss->opcodes[pos] == JSOP_NEWINIT,2,2,4
 views.size() == 1 ,2,2,4
HAS_FAILURE_TAG(obj),2,2,4
pobj == obj,2,2,4
mode_ != TEMPORARY,2,2,4
js::CurrentThreadCanAccessZone(this),4,0,4
variable->IsStackAllocated(),2,2,4
HasInteger32Value(),2,2,4
pre_allocated * kPointerSize + kHeaderSize <= size,2,2,4
sizeof(JSStackHeader) >= 2 * sizeof(jsval),2,2,4
function_ == NULL,2,2,4
begin <= end,3,1,4
value->IsUndefined() || value->IsContext(),2,2,4
heap_->always_allocate_scope_depth_ == 0,2,2,4
HasDictionaryElements(),2,2,4
sp - 2 >= fp->spbase,2,2,4
!IsStarted(),2,2,4
"OBJ_GET_PROTO(cx, parent) == OBJ_GET_PARENT(cx, obj)",2,2,4
obj != heap_->the_hole_value(),2,2,4
(size_t)i >= sep->length,2,2,4
((info << kFailureTagSize) >> kFailureTagSize) == info,2,2,4
!should_postpone_interrupts(lock),2,2,4
 name.size() ,2,2,4
" 14044 , string(""unknown boost failed "") + msg ",2,2,4
" 10442 , ""Unable to allocate file of desired size"", 1 == write(fd, """", 1) ",2,2,4
quotientHi <= 0xFFFF && remainder < divisor,2,2,4
xdr->mode == JSXDR_ENCODE || !atoms[index],2,2,4
thingLimit <= GC_PAGE_SIZE,2,2,4
" 10305 , ""Client Error: Invalid object size"", js.objsize() > 3 ",2,2,4
pn != tc->nodeList,2,2,4
global_scope_ == NULL,2,2,4
!JSSTRING_IS_DEPENDENT(base),2,2,4
rt->state == JSRTS_UP || rt->state == JSRTS_LAUNCHING,2,2,4
"cmp(&data_[i - 1], &data_[i]) <= 0",2,2,4
rt->gcStats.closelater > 0,2,2,4
!errorMessageString,2,2,4
 isWriteLocked() ,2,2,4
PAGE_INDEX(pi) < JS_BITS_PER_WORD,2,2,4
"strcmp(lval, exception_cookie) == 0",2,2,4
(uint32)i < tableLength,2,2,4
number != 0,2,2,4
kTagMask + 1 <= kPointerAlignment,2,2,4
(int)h->refCount > 0,2,2,4
"!FindWatchPoint(rt, OBJ_SCOPE(obj), propid)",2,2,4
"JS_UPTRDIFF(*markp, fp->spbase) >= depthdiff",2,2,4
capacity >= count,2,2,4
IS_POWER_OF_TWO(kSlicedNotConsMask) && kSlicedNotConsMask != 0,2,2,4
" ""db name too long"", L < 64 ",2,2,4
0 <= id && id < 256,2,2,4
tl->owner == 0,2,2,4
w <= 2,2,2,4
left != NULL && right != NULL,2,2,4
!caller || fp->scopeChain == caller->scopeChain,2,2,4
counters_ != NULL,2,2,4
is_uint2(mod),2,2,4
"13436, ""not master or secondary, can't read"", theReplSet && theReplSet->isSecondary() ",2,2,4
cursor == (uint8 *)copy->messageArgs[0] + argsCopySize,2,2,4
size() - offset.offset() == ToggledCallSize(nullptr),2,2,4
!jp->pretty || bp[offset+2] == '\n',2,2,4
RESOURCE_LAST < 8,2,2,4
l != 0,2,2,4
!HasBeenRegistered(),2,2,4
!_isInvalid && !_isMissing,3,1,4
"0, static_cast<int>( reinterpret_cast<intptr_t>(backing_store) % sizeof(unsigned))",2,2,4
nvars == 0,2,2,4
1 <= num && num <= 0x10000,2,2,4
Token::IsUnaryOp(op),2,2,4
IsForwardingAddress(),2,2,4
"13334, ""Shard Key must be less than 512 bytes"", k.objsize() < 512",2,2,4
JSVAL_IS_INT(v) && JSVAL_TO_INT(v) >= 0,2,2,4
kGrowICDelta == STORE_AND_GROW_TRANSITION_DOUBLE_TO_OBJECT - STORE_TRANSITION_DOUBLE_TO_OBJECT,2,2,4
side_effect == kNewSpacePromotion,2,2,4
!result->IsSimulate(),2,2,4
CURRENT_TOKEN(ts).type == TOK_NAME,2,2,4
cx->dormantFrameChain == oldfp,2,2,4
kid->pn_op == JSOP_CALL,2,2,4
 nLocksByMe > 0 ,2,2,4
index >= 0 && index < first_code_ptr_index(),2,2,4
" 10443 , errnoWithPrefix(""write failed"" ), written > 0 ",2,2,4
 (generic - base + StaticVisitorBase::kMinObjectSizeInWords) == 10,2,2,4
CURRENT_TOKEN(ts).type == TOK_LET,2,2,4
xml->object == obj,2,2,4
FLAG_randomize_hashes || raw_running_hash_ == 0,2,2,4
(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) != (EX86_BIN_INS | EX86_SHIFT_INS),2,2,4
op == JSOP_SETSP,2,2,4
sh,2,2,4
JSSTRING_IS_PREFIX(str),2,2,4
vp <= fp->spbase + depth,2,2,4
i != 0,2,2,4
lhs->pn_type == TOK_COLON,2,2,4
type == JSXDR_FUNARG || type == JSXDR_FUNVAR || type == JSXDR_FUNCONST,2,2,4
oldscope->ownercx == cx,2,2,4
prevEpoch == localEpoch && localEpoch != remoteEpoch,2,2,4
!value->IsHeapObject() || !GetHeap()->InNewSpace(value),2,2,4
nslots == JS_INITIAL_NSLOTS,2,2,4
mode_ == DYNAMIC_LOCAL && local_if_not_shadowed_ != NULL,2,2,4
JSVAL_IS_PRIMITIVE(vp[0]),2,2,4
!IsReserved(),2,2,4
tl->fat != NULL,2,2,4
fl->susp >= 0,2,2,4
amount_of_external_allocated_memory_ >= 0,2,2,4
delta > 0,2,2,4
pn2->pn_type == TOK_NAME,2,2,4
"session, tolower(pv.type) == tolower(vpv.type)",2,2,4
!rt->gcUnscannedArenaStackTop->prevUnscanned,2,2,4
"IsAddressAligned(result, kAlignment, 0)",2,2,4
end != -1 && catchStart != -1,2,2,4
gen->state == JSGEN_RUNNING,2,2,4
type_ != StackFrame::MANUAL && type_ != StackFrame::NONE,2,2,4
pn2->pn_type == TOK_XMLATTR,2,2,4
nslots >= JS_INITIAL_NSLOTS,2,2,4
q < 36,2,2,4
 d.dbMutex.atLeastReadLocked() ,2,2,4
"16769, ""bucketSize cannot be zero"", *bucketSizeOut != 0.0",2,2,4
"session, !F_ISSET(txn, TXN_HAS_ID) || !__wt_txn_visible(session, txn->id)",2,2,4
 followers[m].count(*i) == 0 ,2,2,4
kFirstTypeCode <= type && type < kTypeCodeCount,2,2,4
IsFullTransitionArray(),2,2,4
!current_iterator_.Done(),2,2,4
"String::IsAscii(string->GetChars(), string->length())",2,2,4
kind() == JSTRACE_SCRIPT,2,2,4
!(arena->unscannedPages & bit),2,2,4
tc->flags & TCF_COMPILING,2,2,4
pn2 == pn3,2,2,4
"session, final || F_ISSET(session, WT_SESSION_HANDLE_LIST_LOCKED)",2,2,4
next_chunk()->owner() == owner(),2,2,4
kFirstGeneration < generations_,2,2,4
(atom->flags & (ATOM_PINNED | ATOM_INTERNED)) == 0,2,2,4
span != 0,2,2,4
pn3->pn_type == TOK_LEXICALSCOPE,2,2,4
HasBuiltinFunctionId(),2,2,4
context->IsContext(),2,2,4
value()->HasFastObjectElements(),2,2,4
tt != TOK_XMLETAGO || i == 0,2,2,4
(0 <= index) && (index <= MapSpace::kMaxMapPageIndex),2,2,4
newshift < JS_HASH_BITS,2,2,4
" ""Unable to allocate file of desired size"", size - 1 == lseek(fd, size - 1, SEEK_SET) ",2,2,4
!(details_.type() == FIELD && !IsFound()),2,2,4
strlen(fout) < sizeof(fout),2,2,4
scope->ownercx == cx || scope->ownercx->thread == cx->thread,2,2,4
(map()->has_fast_smi_or_object_elements() || (value == GetHeap()->empty_fixed_array())) == (value->map() == GetHeap()->fixed_array_map() || value->map() == GetHeap()->fixed_cow_array_map()),2,2,4
sizeof(BtreeBucketV0) - sizeof(static_cast<BtreeBucketV0*>(NULL)->data) == BtreeBucketV0::HeaderSize,2,2,4
!(flags & ARGS_SWAPPED),2,2,4
pn->pn_op == JSOP_GETELEM || pn->pn_op == JSOP_IMPORTELEM,2,2,4
type < 32,2,2,4
!o->IsScript(),2,2,4
!pre_allocated_value->IsHeapObject() || !GetHeap()->InNewSpace(pre_allocated_value),2,2,4
CURRENT_TOKEN(ts).type == TOK_XMLSTAGO,2,2,4
reg.is_valid() && !reg.is(esp) && !reg.is(ebp),2,2,4
-1 <= jt->balance && jt->balance <= 1,2,2,4
FLAG_randomize_hashes || seed == 0,2,2,4
_isTagSet,2,2,4
pn3->pn_arity == PN_LIST,2,2,4
i == d,2,2,4
offset,2,2,4
"VALUE_IS_FUNCTION(cx, ATOM_KEY(atom))",2,2,4
cg->treeContext.flags & TCF_COMPILING,2,2,4
CAN_SIGN_EXTEND_8_32(imm),3,1,4
jt->balance == rh - lh,2,2,4
CpuFeatures::IsSupported(f),2,2,4
" 8041 , (string)""no primary shard configured for db: "" + _name , _primary.ok() ",2,2,4
JSVAL_IS_STRING(rval),2,2,4
top == limit_,2,2,4
"12051, ""clientcursor already in use? driver problem?""",2,2,4
!heap_->InNewSpace(obj),2,2,4
Assembler::IsLdrPcImmediateOffset(Memory::int32_at(pc_)),2,2,4
!fp->callobj && !fp->argsobj,2,2,4
"static_cast<int>(instruction_start() - address()), Code::kHeaderSize",2,2,4
min.getManager() == max.getManager(),2,2,4
value->HasValidElements(),2,2,4
count == numfmtspecs,2,2,4
newval == ebx || newval == ecx || newval == edx,2,2,4
"16722, _error",2,2,4
 _lock ,2,2,4
"length_, kMaximumClonedProperties",2,2,4
"!js_GetSrcNote(jp->script, pc)",2,2,4
(size_t)(endPC - re->program) < state.progLength + 1,2,2,4
*sxe <= 0x7FFFFFFF,2,2,4
"c0_, '['",2,2,4
"session, exclusive || child->state == WT_REF_LOCKED",2,2,4
_isKeySet,2,2,4
op == JS_DHASH_LOOKUP || RECURSION_LEVEL(table) == 0,2,2,4
HasDependency(),2,2,4
"session, !WT_IS_METADATA(dhandle)",2,2,4
!(flags & JSITER_KEYVALUE) || (flags & JSITER_FOREACH),2,2,4
&cx->runtime->propertyCache,2,2,4
top == sd2->before,2,2,4
(a)->avail <= (a)->limit,2,2,4
!result || gc_state_ != NOT_IN_GC || InToSpace(object),2,2,4
2 + argc + nslots == nalloc,2,2,4
0 <= index && index <= length_,2,2,4
"session, parent_ref->home == parent",2,2,4
op == JSOP_GETELEM,2,2,4
*pc == JSOP_TRAP,2,2,4
frame->is_arguments_adaptor(),2,2,4
((jsuword)(p) & HEADER_BASE_MASK(pool)) == 0,2,2,4
sd == sdlimit,2,2,4
!array->cursors,2,2,4
"session, usecs >= 0",2,2,4
growth == (size_t)-1 || (nchars + 1) * sizeof(jschar) == growth,2,2,4
!prop,2,2,4
JSVAL_IS_BOOLEAN(thisv),2,2,4
 f->channel >= 0 ,2,2,4
"0, U.n == 0",2,2,4
!IsScopeObject(obj),2,2,4
kid2->parent == xml || !kid2->parent,2,2,4
sz < BSONObjMaxInternalSize * 3,2,2,4
cx->runtime->gcLevel > 0,2,2,4
ret == WT_NOTFOUND,4,0,4
mode == JSACC_READ || mode == JSACC_WRITE,2,2,4
(jsword)buf % sizeof(jschar) == 0,2,2,4
"!JS_GetParent(cx, obj)",2,2,4
size <= kSizeInBytes,2,2,4
!(flags & LOAD_DATA) && DR(TMP_REG1) != reg_ar,2,2,4
spindex < 0,2,2,4
scope->lastProp == NULL,2,2,4
"session, session->dhandle == NULL",3,1,4
"condition, __LINE__",2,2,4
" ""RecCache file too large?"", recnum <= 0x7fffffff ",2,2,4
IsMarked(object),2,2,4
"IsAligned(reinterpret_cast<intptr_t>(pointer), kPointerAlignment)",2,2,4
KindBits::kSize == 4,2,2,4
charSet->sense == JS_TRUE,2,2,4
!caller || caller->pc,2,2,4
rval[strlen(rval)-1] == '}',2,2,4
obj2 == scope->object,2,2,4
secs <= static_cast<unsigned>(std::numeric_limits<int>::max()),2,2,4
kind != PNK_VAR,4,0,4
 (kConsStringTag & kIsIndirectStringMask) == kIsIndirectStringTag,2,2,4
index >= 0 && index < 3,2,2,4
kEntriesPerBucket == -kHashMask,2,2,4
copy->object == obj,2,2,4
length == static_cast<unsigned>(string->length()),2,2,4
obj.is_null() || !obj->IsTheHole(),2,2,4
SN_TYPE(sn) == SRC_CATCH,2,2,4
!isolate()->heap()->InNewSpace(obj),2,2,4
LAST_KIND < (1 << kKindWidth),2,2,4
frame->is_standard(),2,2,4
sizeof(const char *) % sizeof(jschar) == 0,2,2,4
current->level > 0,2,2,4
"mozilla::IsPointer<T>::value, ""js::NullPtr overload not valid for non-pointer types""",2,2,4
pn->pn_kid2->pn_arity == PN_LIST,2,2,4
sizeof(argument) <= sizeof(bits_),2,2,4
fun != NULL,2,2,4
pointer_ == NULL && value != NULL,2,2,4
slot + 1 < (uintN)depth,2,2,4
!rt->gcUnscannedArenaStackTop,2,2,4
value,3,1,4
R2 == ValueOperand(r0),4,0,4
"17395, mongoutils::str::stream() << ""unsupported geo index version { "" << kIndexVersionFieldName << "" : "" << out->indexVersion << "" }, only support versions: ["" << S2_INDEX_VERSION_1 << "","" << S2_INDEX_VERSION_2 << ""]"", out->indexVersion == S2_INDEX_VERSION_2 || out->indexVersion == S2_INDEX_VERSION_1",2,2,4
!(atom->flags & ATOM_HIDDEN),2,2,4
to_space_.InitialCapacity() == from_space_.InitialCapacity(),2,2,4
(Page::kObjectStartOffset <= offset) && (offset <= Page::kPageSize),2,2,4
IsMarking(),2,2,4
secondaryThrottle.hasDefault(),2,2,4
KeywordTable::kPrefixLength == 3,2,2,4
sequence_start_ == kNoSequence,2,2,4
e != NULL,4,0,4
exponent <= 9,2,2,4
argCount <= 10,2,2,4
" 14808, str::stream() << ""point "" << p.toString() << "" must be in earth-like bounds of long : [-180, 180), lat : [-90, 90] "", p._x >= -180 && p._x < 180 && p._y >= -90 && p._y <= 90 ",2,2,4
!data->table.ops,2,2,4
action == -1 || action == -2,2,2,4
"!GC_THING_IS_DEEP(flags & GCF_TYPEMASK, thing)",2,2,4
d < argCount,2,2,4
entered_contexts_.length() == 0,2,2,4
obj->IsJSDate(),2,2,4
script->length >= JSOP_STOP_LENGTH,2,2,4
stackDepth != 0,2,2,4
holder::offset % kPointerSize == 0,2,2,4
0 <= major && major < 256,2,2,4
!ranges_.empty(),2,2,4
"session, txn_global->scan_count == -1",2,2,4
JSXML_HAS_KIDS(parent),2,2,4
JS_DHASH_ENTRY_IS_BUSY(&entry->hdr),2,2,4
"XMLARRAY_MEMBER(&copy->xml_kids, j, JSXML) == kid2",2,2,4
" 10116 , ""recstore file too big for 32 bit"", len <= 0x7fffffff || sizeof(std::streamoff) > 4 ",2,2,4
!index.is(esp) || base.is(esp),2,2,4
" 12002 , ""E12002 can't use hint with $snapshot"", _hint.isEmpty() ",2,2,4
key.id == ATOM_TO_JSID(rt->atomState.classAtoms[JSProto_Function]),2,2,4
compiler->temporaries != -1 && compiler->saveds != -1,2,2,4
"13435, ""not master and slaveok=false"", pq.hasOption(QueryOption_SlaveOk)",2,2,4
"maybeFieldName, maybeFieldName->isTenured()",2,2,4
 la == -1 ,2,2,4
!SPROP_IS_REMOVED(*spp),2,2,4
(blocks_.is_empty() && prev_limit == NULL) || (!blocks_.is_empty() && prev_limit != NULL),2,2,4
BaselineTailCallReg == lr,2,2,4
 len == foo[0] ,2,2,4
" 10115 , ""file io error in BasicRecStore [1]"", !f.bad()",2,2,4
(value & kHeapObjectTag) == 0,2,2,4
i <= j,2,2,4
"STATEMENT, EXCEPTION_TYPE, ::mongo::stdx::bind(std::equal_to<std::string>(), (EXPECTED_WHAT), ::mongo::stdx::bind(&EXCEPTION_TYPE::what, ::mongo::stdx::placeholders::_1))",2,2,4
capacity >= 0,2,2,4
"15891, ""can't backfill array to larger than 1,500,000 elements"", upTo <= maxElems",2,2,4
!value.isGCThing(),2,2,4
iterobj->slots[JSSLOT_ITER_STATE] == JSVAL_NULL,2,2,4
(kEntriesPerBucket & (kEntriesPerBucket - 1)) == 0,2,2,4
pnid,2,2,4
"0, R.n > 0",2,2,4
map->nrefs > 0,2,2,4
!JSVAL_IS_PRIMITIVE(sp[i]),2,2,4
var->IsContextSlot(),2,2,4
" ""bad db name [1]"", *nm != '.' ",2,2,4
"endpointA.shardVersion.getOpTime(), endpointB.shardVersion.getOpTime()",2,2,4
current != end,2,2,4
 _c->ok() && _queryPlan ,2,2,4
argc < ARRAY_INIT_LIMIT,2,2,4
qc == '\'',2,2,4
(data_ & kTagMask) == kSingletonTag,2,2,4
 mark ,2,2,4
"JS_ObjectIsFunction(cx, obj)",2,2,4
"aShift > 0, ""Rotation by value length is undefined behavior, but compilers "" ""do not currently fold a test into the rotate instruction. "" ""Please remove this restriction when compilers optimize the "" ""zero case (http://blog.regehr.org/archives/1063).""",4,0,4
LAST_JS_OBJECT_TYPE == LAST_TYPE,2,2,4
!(a & SLJIT_IMM) || !(flags & EX86_SSE2),2,2,4
av != JSVAL_VOID,2,2,4
IS_POWER_OF_TWO(kStep),2,2,4
" 10293 , string(""internal error: locks are not upgradeable: "") + sayClientState() , s == 0 ",2,2,4
ATOM_IS_STRING(atom),2,2,4
!JOF_TYPE_IS_EXTENDED_JUMP(type) || bigspans != 0,2,2,4
*rval != '\0',2,2,4
loop_depth_ > 0,2,2,4
" 13306, ""could not convert string to long long"", endLen != 0 && n[ endLen ] == 0 ",2,2,4
"JS_NewObject(_context, &_jsclass, JS::NullPtr())",2,2,4
"13047,""wrong type for geo index. if you're using a pre-release version, need to rebuild index"",0",2,2,4
frame->is_exit(),2,2,4
cg->stackDepth >= 0,2,2,4
index > JSVAL_INT_MAX,2,2,4
tt == TOK_XMLSPACE || tt == TOK_XMLTEXT,2,2,4
cg->stackDepth == depth + 2,2,2,4
((reg_size == kXRegSizeInBits) && is_uint6(immr)) || ((reg_size == kWRegSizeInBits) && is_uint5(immr)),2,2,4
"11500, ""deleted not yet implemented recstoreinsert""",2,2,4
sprop->getter == js_GetArgument || sprop->getter == js_GetLocalVariable,2,2,4
"Isolate::UncheckedCurrent(), isolate_",2,2,4
-s2 < e,2,2,4
-max_exponent / 2 <= exponent && exponent <= max_exponent / 2,2,2,4
!hasLazyPrototype(),3,1,4
"session, !final || ret == 0",2,2,4
!(flags & JSITER_ENUMERATE),2,2,4
exponent >= 1,2,2,4
(OffsetFrom(address) & kObjectAlignmentMask) == 0,2,2,4
"CountSetBits(bit_pattern, bits) > 0",2,2,4
!JSVAL_IS_VOID(v),2,2,4
usedFloatArgs == 0,3,1,4
"13106, ""nextSafe() returns $err"", false",2,2,4
"TWO_BYTE, state_",2,2,4
len == js_CodeSpec[op].length,2,2,4
fp,2,2,4
mode == SKIP_WRITE_BARRIER,2,2,4
IsCodeTarget(rmode_) || rmode_ == RUNTIME_ENTRY || rmode_ == EMBEDDED_OBJECT || rmode_ == EXTERNAL_REFERENCE,2,2,4
(space & ~kSpaceTagMask) == 0,2,2,4
(fs->extra & 0xFFFF0000) == 0,2,2,4
capacity <= kMaxCapacity,2,2,4
INT_FITS_IN_JSVAL(i),2,2,4
op == JSOP_NOP,2,2,4
!IsLinked(),2,2,4
number < ((int64_t)1 << 53),2,2,4
"JS_GetPrivate(cx, obj) == ns",2,2,4
JSVAL_NULL == 0,2,2,4
catchStart >= 0,2,2,4
type == GCX_STRING || type == GCX_MUTABLE_STRING,2,2,4
hasSet(),2,2,4
scope->hashShift == JS_DHASH_BITS - MIN_SCOPE_SIZE_LOG2,2,2,4
is<CallObject>() || is<ClonedBlockObject>(),2,2,4
!rt->emptyString,2,2,4
type == this->type(),2,2,4
"session, !F_ISSET(conn, WT_CONN_READONLY)",2,2,4
"RETRY_AFTER_GC, type()",2,2,4
HasAssignedIndexAt(index),2,2,4
has_pending_exception(),2,2,4
String::kMaxLength <= Smi::kMaxValue,2,2,4
body->pn_arity == PN_NAME,2,2,4
"16748, ""finestIndexedLevel must be <= 30"", out->finestIndexedLevel <= 30",2,2,4
JSSTRDEP_BASE(str),2,2,4
(cx)->tempValueRooters != (tvr),2,2,4
 f ,2,2,4
GetStackTraceValueBuffer(priv) + valueCount == values,2,2,4
next != right,2,2,4
StringShape(this).IsIndirect(),2,2,4
"OBJ_GET_CLASS(cx, obj) == &js_ArrayClass",2,2,4
"match, node.isArity(PN_BINARY)",4,0,4
"0, i",2,2,4
" pthread_mutex_init(&_lock,0) == 0 ",2,2,4
IsOptimizable(),2,2,4
IsPowerOf2(m),2,2,4
!JSVAL_IS_PRIMITIVE(gen->frame.argv[-2]),2,2,4
amount <= framePushed_,2,2,4
SharedFunctionInfo::kCompilerHintsCount <= SharedFunctionInfo::kCompilerHintsSize * kBitsPerByte,2,2,4
charSet->u.src.startIndex < JSSTRING_LENGTH(gData->regexp->source),2,2,4
ida,2,2,4
!(funtc.flags & TCF_FUN_USES_NONLOCALS),2,2,4
size % 16 == 0,2,2,4
"(uint32)slot < JS_MIN((map)->freeslot, (map)->nslots)",2,2,4
!Scalar::isSimdType(type_),2,2,4
stmt->downScope,2,2,4
" ""failure mapping new file"", filelen == 0 ",2,2,4
JSVAL_IS_OBJECT((jsval)fp->thisp) || (fp->fun && JSFUN_THISP_FLAGS(fp->fun->flags)),2,2,4
" ""write failed"", z == write(fd, buf, z) ",2,2,4
sizeof(JSTempValueUnion) == sizeof(jsval),2,2,4
" 10117 , ""file io error in BasicRecStore [2]"", !f.bad()",2,2,4
"(JSVAL_TAG_OBJECT & 0x03) == size_t(JS::TraceKind::Object), ""Value type tags must correspond with JS::TraceKinds.""",4,0,4
sparse || (sprop->flags & SPROP_IS_DUPLICATE),2,2,4
"Code::kPrologueOffsetNotSet, prologue_offset_",2,2,4
slot < Internals::kNumIsolateDataSlots,2,2,4
(pnkey)->pn_arity == PN_NULLARY && ((pnkey)->pn_type == TOK_NUMBER || (pnkey)->pn_type == TOK_STRING || (pnkey)->pn_type == TOK_NAME),2,2,4
pn2->pn_op == JSOP_GETPROP,2,2,4
next != right || pn->pn_count == 3,2,2,4
"NULL, null",2,2,4
start.Value() < end.Value(),2,2,4
 x < (MemoryMappedFile::NChunks*2/3) ,2,2,4
"this, codegen_->nesting_stack_",2,2,4
static_cast<unsigned>(live_byte_count_) <= size_,2,2,4
length != 0 && *start != '@',2,2,4
 !sp.state.primary() ,2,2,4
sizeof(JSStackTraceElem) % sizeof(jsval) == 0,2,2,4
"isolate_->relocatable_top(), this",2,2,4
!(keyHash & COLLISION_FLAG),2,2,4
trc_->contextIndex_ != CallbackTracer::InvalidIndex,4,0,4
" 13655 , msg.c_str(),false",2,2,4
kCharacterLookaheadBufferSize == 1,2,2,4
dest.size() == 16,4,0,4
result->is_inline_cache_stub(),2,2,4
sizeof(*pc_) == 1,2,2,4
fp->sp == sp,2,2,4
!chain->dormantNext,2,2,4
type & JSVAL_INT,2,2,4
JSVAL_IS_OBJECT(rval),2,2,4
optimizing_compiler_thread_ == NULL || FLAG_concurrent_recompilation,2,2,4
INT_FITS_IN_JSVAL(index),2,2,4
state.classBitmapsMem <= CLASS_BITMAPS_MEM_LIMIT,2,2,4
"0, U.n == 1",2,2,4
 objdata ,2,2,4
!IS_EMPTY(uri),2,2,4
op->IsStackSlot(),2,2,4
 isASupportedIndexVersionNumber(v) ,2,2,4
pn->pn_type == TOK_SEMI || pn->pn_op == JSOP_LEAVEBLOCKEXPR,2,2,4
origobj != obj,2,2,4
" 13271, ""no more clauses"", hasMoreClauses() ",2,2,4
kDoubleSize == kInt64Size,2,2,4
top >= depth,2,2,4
!ida,2,2,4
" 14050 , ""List1: item to orphan not in list"", n ",2,2,4
*fp->pc == JSOP_CALL || *fp->pc == JSOP_NEW,2,2,4
 size > 4 && size < 100000000 ,2,2,4
IsArithmeticCompareOp(op),2,2,4
*todop != NO_SCOPE_SHARING_TODO,2,2,4
(base == kVisitDataObject) || (base == kVisitStruct) || (base == kVisitJSObject),2,2,4
type == JOF_JUMP || type == JOF_JUMPX || type == JOF_TABLESWITCH || type == JOF_TABLESWITCHX || type == JOF_LOOKUPSWITCH || type == JOF_LOOKUPSWITCHX,2,2,4
!page->is_anchor(),2,2,4
ucs4Char <= 0x7FFFFFFF,2,2,4
sizeof(JSErrorReport) % sizeof(const char *) == 0,2,2,4
" 0 , ""assertion failure in bson library"" ",2,2,4
kHasFunctionCacheFirstBit + kHasFunctionCacheBitCount <= 32,2,2,4
position_ < length_,2,2,4
lrs && lrs->rootCount != 0,2,2,4
gen->state == JSGEN_CLOSED,2,2,4
"session, parent_refp - pindex->index == pindex->entries - SPLIT_CORRECT_1",2,2,4
 _nlocksByMe.get() == 0 ,2,2,4
id != JSVAL_VOID,2,2,4
fp->fun && !JSFUN_HEAVYWEIGHT_TEST(fp->fun->flags),2,2,4
0 <= index && index < kMaxSlots,2,2,4
index < natoms,2,2,4
isnan(num),2,2,4
(nb & pool->mask) == 0,2,2,4
pcdepth <= depth,2,2,4
"13106, s",2,2,4
tn->catchStart != 0,2,2,4
IndexField::is_valid(index),2,2,4
to == LAST_TYPE,2,2,4
1 << kPointerSizeLog2 == kPointerSize,2,2,4
thisns,2,2,4
kSmiTag == 0 && kSmiTagSize < kPointerSizeLog2,2,2,4
smi.Is64Bits(),2,2,4
pn2->pn_type == TOK_ASSIGN,2,2,4
sizeof(HeapValue) == sizeof(Value),2,2,4
clasp->flags & JSCLASS_HAS_PRIVATE,2,2,4
reg.IsAllocatable(),2,2,4
c <= cs->length,2,2,4
!*genTodoTail,2,2,4
"js_GetSrcNoteOffset(sn, 0) != 0",2,2,4
((jsuword)chunk & CHUNKY_KIDS_TAG) == 0,2,2,4
"session, TXNID_LE(prev_oldest_id, snap_min)",2,2,4
!(flags & EX86_SHIFT_INS) || a == SLJIT_PREF_SHIFT_REG,2,2,4
"!OBJ_GET_PROTO(cx, ctor)",2,2,4
!code_.is(result_),2,2,4
"1 << bits, original_x",2,2,4
prop && pobj == obj,2,2,4
"ConnectionString::parse(std::string(""$"") + shardName + "":12345"")",2,2,4
 _size < _capacity ,2,2,4
 pos < _bits * 2 ,2,2,4
cache,2,2,4
index >= first_code_ptr_index() && index < first_heap_ptr_index(),2,2,4
kind() == JSTRACE_OBJECT,2,2,4
HasExpressionAt(index),2,2,4
JSOP_FORIN_LENGTH == js_CodeSpec[op].length,2,2,4
"1, search->pattern_.length()",2,2,4
!is_the_hole_nan(result),2,2,4
i > 0,2,2,4
index < static_cast<unsigned>(NumAllocatableRegisters()),2,2,4
" 16765, ""error: no hashed index field"", firstElt.str().compare(IndexNames::HASHED) == 0",2,2,4
(jsval *)cx->stackPool.current->avail >= frame.vars,2,2,4
fl->susp > 0,2,2,4
" ss.str(), fd <= 0 ",2,2,4
"SLJIT_MOV + 7 == SLJIT_MOVU, movu_offset",2,2,4
is_reg(),2,2,4
file->path != NULL,2,2,4
 cc->_pinValue < 100 ,2,2,4
!TOKEN_TYPE_IS_DECL(tt) || pn1->pn_type == tt,2,2,4
saved_contexts_.length() == 0,2,2,4
obj->IsJSValue(),2,2,4
" 0, w.n == 0 ",2,2,4
stmt->type == STMT_TRY || stmt->type == STMT_FINALLY,2,2,4
Token::IsAssignmentOp(op_),2,2,4
sizeof(ValueStorage) == 16,2,2,4
"session, slot->slot_state != 0 || slot->slot_release_lsn.file >= log->write_lsn.file",2,2,4
" 10126 , ""arbiter parm is missing, use '-' for none"", arb",2,2,4
top >= Start(),2,2,4
block_ != NULL,2,2,4
capacity > 0,2,2,4
js_CodeSpec[*fp->pc].length == 3,2,2,4
cx->requestDepth > 0,2,2,4
ModeField::is_valid(mode),2,2,4
!HasAstId(),2,2,4
sizeof(unsigned long long) == sizeof(uint64_t),2,2,4
AllowHeapAllocation::IsAllowed(),2,2,4
"common, cc, FALLBACK_AS(assert_fallback), FALSE",2,2,4
IsValidFPRegister(),2,2,4
 W.n == 1 ,2,2,4
(*bytes == '\0' && JSSTRING_LENGTH(str) == 0) || *bytes == (char) JSSTRING_CHARS(str)[0],2,2,4
 _mp ,2,2,4
pageIndex < GC_PAGE_COUNT,2,2,4
"static_cast<unsigned>(live_byte_count_), size_",2,2,4
script->length != 0,2,2,4
pn->pn_type == TOK_XMLLIST,2,2,4
(fp)->script || !(fp)->spbase || (sp) == (fp)->spbase,2,2,4
!first_patch,2,2,4
SRC_LABEL == SRC_METHODBASE,2,2,4
entry->key.obj == obj,2,2,4
ns2 == match,2,2,4
"JS_InstanceOf(cx, iterobj, &js_IteratorClass, NULL)",2,2,4
js::GCMethods<T>::needsPostBarrier(ptr),2,2,4
!src1.is(src4),2,2,4
" 10125 , ""bad port #"", remotePort > 0 && remotePort < 0x10000 ",2,2,4
!JSVAL_IS_INT(idval),2,2,4
kind == PNK_VAR || kind == PNK_CONST || kind == PNK_LET,4,0,4
result == !HasExternalArrayElements(),2,2,4
pn->isKind(PNK_FUNCTION),3,1,4
scopeStmt,2,2,4
state_ == STOPPED || FLAG_incremental_marking,2,2,4
sizeof(BtreeBucketV1) - sizeof(static_cast<BtreeBucketV1*>(NULL)->data) == BtreeBucketV1::HeaderSize,2,2,4
"cx, obj, id, vp",3,1,4
new_action->next_ == NULL,2,2,4
prev_chunk()->owner() == owner(),2,2,4
IsCompilingAsmJS(),2,2,4
 d.a() == 9999 ,2,2,4
a->base == (jsuword)p,2,2,4
tl->fat == NULL,2,2,4
IsPowerOf2(capacity_),2,2,4
"13436, ""not master or secondary; cannot currently read from this replSet member"", theReplSet && theReplSet->isSecondary() ",2,2,4
overwriting,2,2,4
top < limit_,2,2,4
" 10382 , ""basicrestore::get I/O error"", !f.bad()",2,2,4
*pc == JSOP_GETARG,2,2,4
cross_compile_ == 0,2,2,4
qn->uri,2,2,4
" 10052 , ""not sorted"" , _sorted ",2,2,4
" ""Invalid BSONObj spec size"" , isValid() ",2,2,4
(OffsetFrom(address) & Page::kPageAlignmentMask) == 0,2,2,4
"!XMLARRAY_HAS_MEMBER(&xml->xml_namespaces, ns, namespace_identity)",2,2,4
JSSTRING_IS_DEPENDENT(str),2,2,4
"!XMLARRAY_HAS_MEMBER(&decls, ns2, namespace_identity)",2,2,4
heap_->InNewSpace(obj),2,2,4
"session, prev_oldest_id == txn_global->oldest_id",3,1,4
!IsMapped(obj),2,2,4
obj != iterobj,2,2,4
 bits <= 32 ,2,2,4
index_ + min_capacity <= current_chunk_.length(),2,2,4
" ""bad char(s) in db name"", strchr(nm, ' ') == 0 ",2,2,4
block != NULL,2,2,4
 _queues[_which].empty() ,2,2,4
 _bits ,2,2,4
!is_linked(),2,2,4
op == TO_SOURCE,2,2,4
slot < nbits,2,2,4
shift < rd.SizeInBits(),2,2,4
"strcmp(rval, forelem_cookie) == 0",2,2,4
isolate->external_reference_redirector() == NULL,2,2,4
pn->pn_type == TOK_ASSIGN,2,2,4
anchor_.next_page() != &anchor_,2,2,4
*flagp & GCF_MARK,2,2,4
" 10441 , ""Unable to allocate file of desired size"", size - 1 == lseek(fd, size - 1, SEEK_SET) ",2,2,4
mark != JSLRS_NULL_MARK,2,2,4
scratch64.asUnsized() != src.base,4,0,4
sizeof(JSAtomState) <= (size_t)(uint16)-1,2,2,4
type == JOF_TABLESWITCHX || type == JOF_LOOKUPSWITCHX,2,2,4
 nextOfs ,2,2,4
pn2->pn_type == TOK_XMLETAGO,2,2,4
yield_kind() == DELEGATING,2,2,4
" 13271, ""can't run more ops"", mayRunMore() ",2,2,4
"0, value & (kPointerSize - 1)",2,2,4
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP)),2,2,4
PreallocCount < 32,2,2,4
0.5 <= maxAlpha && maxAlpha < 1 && 0 <= minAlpha,2,2,4
pn3->pn_type == TOK_LC,2,2,4
 index < vFieldName.size() ,2,2,4
!rear_page->prev_page()->is_anchor(),2,2,4
(reinterpret_cast<intptr_t>(address) & HeapObjectTagMask()) == 0,2,2,4
is_unary_op_stub(),2,2,4
divider_ != last_,2,2,4
(isolate)->has_pending_exception(),2,2,4
tracer_->indent_ >= 0,2,2,4
table->count == 0,2,2,4
length <= INT32_MAX,3,1,4
left->pn_type == TOK_RC,2,2,4
nchars - onchars == 1 + classnchars,2,2,4
 d <= 1 && d>= -1 ,2,2,4
isFinishedWithFunctionBodies() && !isFinished(),2,2,4
usedArgSlots >= NumIntArgRegs,3,1,4
(kSeqStringTag & kIsIndirectStringMask) == 0,2,2,4
tvr.u.object,2,2,4
off < -1,2,2,4
call_depth_ == 0,2,2,4
 len - 4 == foo[0] ,2,2,4
JSXML_LENGTH(xml) == 1,2,2,4
"0, kStringTag",2,2,4
JS::Value::isNumberRepresentable(id),4,0,4
 !details->owned() ,2,2,4
rhs != ScratchRegister,3,1,4
JSID_IS_ATOM(id),2,2,4
defaultOffset != -1,2,2,4
*pc == JSOP_SETLOCALPOP,2,2,4
!(details_.type() == CALLBACKS && !IsFound()),2,2,4
type != MAP_TYPE,2,2,4
"session, __wt_verify_dsk_image(session, ""[evict split]"", buf->data, buf->size, 1) == 0",2,2,4
is_to_boolean_ic_stub(),2,2,4
get_immediate(argw & 0x3fc00),2,2,4
kNumRepresentations <= (1 << kBitsPerByte),2,2,4
!PCE_OBJECT(entry_),2,2,4
" 13657 , str::stream() << ""unknown type for ShardChunkVersion: "" << elem , 0 ",2,2,4
 !_remapPrivateViewRequested ,2,2,4
IsMapped(obj),2,2,4
pn3->pn_op == JSOP_BINDXMLNAME,2,2,4
sizeof(double) == 8,2,2,4
*flagp & GCF_FINAL,2,2,4
op != saveop,2,2,4
has_major_key(),2,2,4
IsPropertyName(),2,2,4
!ss->inArrayInit,2,2,4
"sizeof(PrimType) == sizeof(T), ""Selection of PrimitiveIntrinsics was wrong""",2,2,4
callbackStatus,2,2,4
(0 < n) && (n < (sizeof(x) * kBitsPerByte)),2,2,4
principals->refcount,2,2,4
 other._bits <= _bits ,2,2,4
(size_t)(ncp - nstart) == length,2,2,4
cx->throwing,2,2,4
 (kSlicedStringTag & kIsIndirectStringMask) == kIsIndirectStringTag,2,2,4
kSafepointTableOffsetFirstBit + kSafepointTableOffsetBitCount <= 32,2,2,4
 _got ,2,2,4
draining.hasDefault(),2,2,4
nbytes != 0,2,2,4
pod.which_ == ArrayView || pod.which_ == SharedArrayView || pod.which_ == ArrayViewCtor,2,2,4
SN_TYPE(sn) == SRC_IF,2,2,4
(RelocInfo::IsJSReturn(rinfo->rmode()) && rinfo->IsPatchedReturnSequence()) || (RelocInfo::IsDebugBreakSlot(rinfo->rmode()) && rinfo->IsPatchedDebugBreakSlotSequence()),2,2,4
(*flagp & (GCF_MARK | GCF_FINAL)) == GCF_MARK,2,2,4
other._pool.size() == 0,2,2,4
!(stmt->flags & SIF_SCOPE),2,2,4
" !statvfs( path.c_str() , &info ) ",2,2,4
p < buffer + DTOBASESTR_BUFFER_SIZE,2,2,4
!(flags & ~(JSITER_ENUMERATE | JSITER_FOREACH | JSITER_KEYVALUE)),2,2,4
numclasses && numclasses < maxclasses,2,2,4
!parent || !parent->kids || KIDS_IS_CHUNKY(parent->kids),2,2,4
!JSID_IS_OBJECT(id),2,2,4
length == nsarray->length,2,2,4
isSelfHostedBuiltin(),3,1,4
slot < fp->fun->COUNT,2,2,4
this->IsFlat(),2,2,4
bindings == GetHeap()->empty_fixed_array() || bindings->map() == GetHeap()->fixed_cow_array_map(),2,2,4
is_mutable_,2,2,4
lhe->count >= 1,2,2,4
representation_.IsNone() && !r.IsNone(),2,2,4
 sizeof(BtreeBucketV0) - sizeof(reinterpret_cast<BtreeBucketV0*>(NULL)->data) == BtreeBucketV0::HeaderSize,2,2,4
try_catch_handler_address_ == NULL,2,2,4
mode == 0 || op == JSOP_SETCONST,2,2,4
 ! j.more() ,2,2,4
q-client<256,2,2,4
(*utf8Buffer & 0xC0) == 0x80,2,2,4
stmt->type == STMT_CATCH,2,2,4
pn3->pn_type == TOK_DEFAULT,2,2,4
fp->pc == pc,2,2,4
-1 <= index && index < param_count,2,2,4
trap->script == script && trap->pc == pc,2,2,4
!has_position(),2,2,4
 u < 1000000 ,2,2,4
array->map() != HEAP->raw_unchecked_fixed_cow_array_map(),2,2,4
"session, session->ncursors == 0",3,1,4
kGrowICDelta == STORE_AND_GROW_TRANSITION_SMI_TO_OBJECT - STORE_TRANSITION_SMI_TO_OBJECT,2,2,4
"sprop != child && SPROP_MATCH(sprop, child)",2,2,4
OBJ_SCOPE(pobj)->object == pobj,2,2,4
(uintptr_t(p) & JSTRACE_OUTOFLINE) == 0,2,2,4
array->map() != array->GetHeap()->fixed_cow_array_map(),2,2,4
fp->fun && (!(fp->fun->flags & JSFUN_HEAVYWEIGHT) || fp->varobj),2,2,4
obj->IsJSMessageObject(),2,2,4
"13435, ""not master and slaveOk=false"", pq.hasOption(QueryOption_SlaveOk)",2,2,4
1 <= charSet->u.src.startIndex,2,2,4
slot < nslots,2,2,4
chunksize.hasDefault(),2,2,4
out->length() >= OUTPUT_SIZE,2,2,4
top != 0,2,2,4
Page::kPageSize % kRegionSize == 0,2,2,4
jp->spaceOffset < 0,2,2,4
off >= 1 + JUMP_OFFSET_LEN,2,2,4
" 13285, ""manual matcher config not allowed"", false ",2,2,4
cx->runtime->gcThread->id == js_CurrentThreadId(),2,2,4
i != mark,2,2,4
index >= 0 && index < buffer->length(),2,2,4
op == JSOP_LOOKUPSWITCH,2,2,4
 _addrs.size() == _lastErrors.size() ,2,2,4
"13646, str::stream() << ""stat() failed for file: "" << path << "" "" << errnoWithDescription()",2,2,4
pn3->pn_op == JSOP_SETCALL,2,2,4
map->table,2,2,4
priv,2,2,4
properties()->IsDictionary() == map()->is_dictionary_map(),2,2,4
unswept_free_bytes_ == 0,2,2,4
"16770, ""can't have more than one geo field"", geoFieldOut->size() == 0",2,2,4
(uint32)JSXDR_MAGIC_SCRIPT_5 - (uint32)JSXDR_MAGIC_SCRIPT_1 == 4,2,2,4
" ""Unable to allocate file of desired size"", 1 == write(fd, """", 1) ",2,2,4
"(JSVAL_TAG_SYMBOL & 0x03) == size_t(JS::TraceKind::Symbol), ""Value type tags must correspond with JS::TraceKinds.""",4,0,4
sizeof(PatternChar) == 2,2,2,4
cx->runtime->propertyCache.disabled,2,2,4
"fp->fun == (JSFunction *) JS_GetPrivate(cx, varobj)",2,2,4
 ofs >= DataFileHeader::HeaderSize ,2,2,4
(type == -1) || ((FIRST_IC_MARKER <= type) && (type < LAST_CODE_MARKER)),2,2,4
!IsPoisonedPtr(ptr),2,2,4
obj_size,2,2,4
cg->tryBase <= cg->tryNext,2,2,4
static_cast<uint32_t>(frame_size_) == frame_size_,2,2,4
"16749, ""finestIndexedLevel must be >= coarsestIndexedLevel"", out->finestIndexedLevel >= out->coarsestIndexedLevel",2,2,4
(position_ & 0x1) == 0,2,2,4
(n & 1) == 0,2,2,4
"VALUE_IS_FUNCTION(cx, cval)",2,2,4
finallyCatch != -1,2,2,4
!JS_IS_RUNTIME_LOCKED(rt),2,2,4
src != dest,3,1,4
!js::GCMethods<T>::poisoned(ptr),2,2,4
answer != NULL,2,2,4
ns->object == obj,2,2,4
"""arbiter parm is empty"", !arbHost.empty()",2,2,4
"JS_UPTRDIFF(sp, fp->spbase) <= depth * sizeof(jsval)",2,2,4
vxml->xml_class == JSXML_CLASS_LIST,2,2,4
thingLimit > thingOffset,2,2,4
"!""don't destroy me""",2,2,4
sep == NULL,2,2,4
"13651, str::stream() << ""Couldn't fsync directory '"" << dir.string() << ""': "" << errnoWithDescription(e), false",2,2,4
js::GetObjectClass(&v.toObject()) == js::FunctionClassPtr,2,2,4
!HasFastProperties(),2,2,4
sprop->getter == js_BlockClass.getProperty,2,2,4
pc[len] == JSOP_LEAVEBLOCK,2,2,4
OpBits::is_valid(Token::NUM_TOKENS),2,2,4
obj->IsHeapObject(),2,2,4
addrmode == Offset,2,2,4
"OBJ_BLOCK_DEPTH(cx, obj) < i || OBJ_BLOCK_COUNT(cx, obj) == 0",2,2,4
IsInitialized() && other.IsInitialized(),2,2,4
!filler_value->IsHeapObject() || !GetHeap()->InNewSpace(filler_value),2,2,4
j == taglen,2,2,4
mode == VAR || mode == LET,2,2,4
obj == JSVAL_TO_OBJECT(argv[0]),2,2,4
is_call_stub() || is_keyed_call_stub(),2,2,4
child.slot == SPROP_INVALID_SLOT,2,2,4
pos == 0 || pos == 1,2,2,4
cm,2,2,4
!this->IsFailure(),2,2,4
nslots == 0,2,2,4
 sizeof(BtreeBucketV1) - sizeof(reinterpret_cast<BtreeBucketV1*>(NULL)->data) == BtreeBucketV1::HeaderSize,2,2,4
StringShape(this).IsSequential(),2,2,4
stmt->type == STMT_BLOCK || stmt->type == STMT_SWITCH || stmt->type == STMT_TRY || stmt->type == STMT_FINALLY,2,2,4
array,2,2,4
balancerActiveWindow.hasDefault(),2,2,4
" 16771, ""the geo field has to be first in index"", otherFieldsOut->size() == 0",2,2,4
fp->scopeChain,2,2,4
isOk(),2,2,4
qn->object == obj,2,2,4
 _objsize == 0 || _objdata ,2,2,4
"!""shouldn't destroy CommitJob!""",2,2,4
 strlen( (char*)encode ) == 64 ,2,2,4
 n == a ,2,2,4
op == JSOP_UINT24 || op == JSOP_LITERAL,2,2,4
type() == CONSTANT_FUNCTION,2,2,4
pcdepth >= 0,2,2,4
map->nrefs >= 0,2,2,4
"13640, str::stream() << ""DataFileHeader looks corrupt at file open filelength:"" << filelength << "" fileno:"" << fileno, false",2,2,4
"OBJ_GET_CLASS(cx, varobj) == &js_FunctionClass",2,2,4
cx->stackPool.current == &gen->arena,2,2,4
JSXML_HAS_KIDS(rxml),2,2,4
"OBJ_GET_CLASS(cx, reobj) == &js_RegExpClass",2,2,4
rm.code() != kSPRegInternalCode,3,1,4
!entry->key.obj && entry->flags == 0,2,2,4
fl != NULL,2,2,4
isolate != NULL,2,2,4
!ExpressionStackIsEmpty(),2,2,4
!IsMarked(object),2,2,4
 _dynName.empty() ,2,2,4
j < n,2,2,4
source_ != NULL || destination_ == NULL,2,2,4
"IsAligned(size_in_bytes, kPointerSize)",2,2,4
" 10439 , ss.str(), fd <= 0 ",2,2,4
op == JSOP_IMPORTALL,2,2,4
!OptimizingCompilerThread::IsOptimizerThread(isolate()),2,2,4
head == ss->sprinter.offset - 1,2,2,4
"16802, ""no geo field specified"", out->geo.size()",2,2,4
"op == JSOP_LEAVEBLOCKEXPR ? fp->spbase + OBJ_BLOCK_DEPTH(cx, obj) == sp - 1 : fp->spbase + OBJ_BLOCK_DEPTH(cx, obj) == sp",2,2,4
(value & 0xC0000000) == 0xC0000000 || (value & 0xC0000000) == 0x000000000,2,2,4
!fp->fun || !(fp->fun->flags & JSFUN_HEAVYWEIGHT) || fp->callobj,2,2,4
(tempList)->tvr.u.marker == mark_temp_close_list,2,2,4
sprop && JSID_IS_ATOM(sprop->id),2,2,4
nentries != 0,2,2,4
pn3->pn_type == TOK_NAME,2,2,4
cache->length() != 0,2,2,4
!reg.is(kDoubleRegZero),2,2,4
sequence_length < new_chunk.length(),2,2,4
js_CodeSpec[saveop].length == oplen,2,2,4
rm_.is(no_reg),2,2,4
(jsval *)mark >= sp,2,2,4
code_ % 2 == 0,2,2,4
!IsPoisonedPtr(&obj),2,2,4
kind() == JSTRACE_SYMBOL,2,2,4
kLastFlag < kBitsPerInt,2,2,4
static_cast<int>(MajorKey()) < NUMBER_OF_IDS,2,2,4
!rt->jsNaN,2,2,4
"VALUE_IS_FUNCTION(cx, rval)",2,2,4
(JSUint32)(ss->cur - ss->base) <= ss->maxlen,2,2,4
code_unit < 0x10000u,2,2,4
"ASCII, state_",2,2,4
!hep,2,2,4
context == NULL || context->IsContext(),2,2,4
number_ < map->NumberOfOwnDescriptors(),2,2,4
kStubMajorKeyFirstBit + kStubMajorKeyBits <= 32,2,2,4
 i < 32 && i <MaxIndexes ,2,2,4
"mozilla::IsPointer<T>::value, ""JS::NullPtr overload not valid for non-pointer types""",2,2,4
sizeof(Atomic64) == sizeof(PVOID),2,2,4
top == -1 || !JOF_TYPE_IS_EXTENDED_JUMP(type) || bigspans != 0,2,2,4
"!fp->blockChain || OBJ_GET_PARENT(cx, obj) == fp->blockChain",2,2,4
zone_,2,2,4
"CPURegister::Create(code, size_, type_).IsValid()",2,2,4
PreallocCount > 0,2,2,4
res.objsize() != 0,2,2,4
 pthread_mutex_unlock(&_lock) == 0 ,2,2,4
"(JSFunction *) JS_GetPrivate(cx, funobj) == fp->fun",2,2,4
cg->stackDepth == stackDepth + 1,2,2,4
kSingletonTag == 0,2,2,4
pobj == obj && OBJ_IS_NATIVE(pobj),2,2,4
(index >= 0) && (index < NumAllocatableRegisters()),2,2,4
ts->linebuf.base[len] == '\n',2,2,4
frame->is_java_script(),2,2,4
frame->is_entry(),2,2,4
"sizeof(PtrT) <= sizeof(AtomicWord), PtrT_should_fit_in_AtomicWord",2,2,4
JSID_IS_GCTHING(id),2,2,4
"sizeof(unsigned) == sizeof(uint32_t), ""unsigned must be uint32""",2,2,4
id < StaticVisitorBase::kVisitorIdCount,2,2,4
transitions->IsFixedArray(),2,2,4
fp->scopeChain == parent,2,2,4
!cx->runtime->propertyCache.disabled,2,2,4
sp + nslots > limit,2,2,4
IsSymbol(),2,2,4
sizeof(unsigned long long) == sizeof(JSUword),2,2,4
utf8Length >= 1 && utf8Length <= 6,2,2,4
is_uint2(scale),2,2,4
begin->second->getShard() == _shard,2,2,4
" 13048, ""can't append to array using string field name"", !*r ",2,2,4
scratch64.asUnsized() != address.base,4,0,4
!IsPoisonedPtr(sym),2,2,4
GC_FREELIST_INDEX(sizeof(JSGCThing)) == 0,2,2,4
(cx)->tempValueRooters == (tvr),2,2,4
!pn1 || pn1->pn_type != TOK_LEXICALSCOPE,2,2,4
!rt->deflatedStringCacheLock,2,2,4
arena->unscannedPages & ((size_t)1 << PAGE_INDEX(pi)),2,2,4
operatorSP,2,2,4
listc>0,2,2,4
!newscope->ownercx,2,2,4
stmtInfo.type == STMT_ELSE,2,2,4
 begin != end ,2,2,4
!(ts->flags & TSF_XMLTEXTMODE),2,2,4
quotientLo <= 0xFFFF && remainder < divisor,2,2,4
growth_factor > 1,2,2,4
position != RelocInfo::kNoPosition,2,2,4
!has_osr_entry_,2,2,4
(data_ & kTagMask) == kListTag,2,2,4
version == JSVERSION_DEFAULT || version >= JSVERSION_ECMA_3,2,2,4
LAST_JS_RECEIVER_TYPE == LAST_TYPE,2,2,4
first,2,2,4
other.RegisterSizeInBits() == size_,3,1,4
operandSP,2,2,4
!ts || ts->linebuf.limit < ts->linebuf.base + JS_LINE_LIMIT,2,2,4
ConsString::kFirstOffset == SlicedString::kParentOffset,2,2,4
(FIRST_IC_MARKER <= type) && (type < LAST_CODE_MARKER),2,2,4
output_handle_ != NULL,2,2,4
fp && fp->script->filename,2,2,4
sizeof(T) == sizeof(uint64_t),2,2,4
scratch32.asUnsized() != dest.base,4,0,4
" 10381 , ""bad len"", reclen == h.recsize",2,2,4
BaselineTailCallReg == ra,2,2,4
!(arg & 0xf0),2,2,4
!GCMethods<T>::poisoned(value),2,2,4
"10078, ""nsToDatabase: ns too long"", ns.size() < MaxDatabaseNameLen ",2,2,4
map_ - 1 <= p && p < end,2,2,4
!index.is(rsp) || base.is(rsp) || base.is(r12),2,2,4
error_message_ != NULL,2,2,4
 len == recsize ,2,2,4
pn->pn_op != JSOP_ARGUMENTS,2,2,4
"OBJ_GET_CLASS(cx, OBJ_GET_PARENT(cx, parent)) == &js_CallClass",2,2,4
"SCOPE_HAS_PROPERTY(scope, ancestorLine)",2,2,4
(*utf8Buffer & (0x100 - (1 << (7-utf8Length)))) == (0x100 - (1 << (8-utf8Length))),2,2,4
bp[offset+2] == '\n',2,2,4
op != JSGENOP_CLOSE,2,2,4
min.getMax() == max.getMin(),2,2,4
"OBJ_GET_SLOT(cx, obj, JSSLOT_ITER_STATE) == JSVAL_NULL",2,2,4
(reinterpret_cast<intptr_t>(space) & kFailureTagMask) == 0,2,2,4
Code::NUMBER_OF_KINDS <= KindField::kMax + 1,2,2,4
pattern.length() > 1,2,2,4
frame->is_entry_construct(),2,2,4
" 10080 , ""ns name too long, max size is 128"", strlen(ns) < MaxNsLen",2,2,4
"OBJ_GET_CLASS(cx, setCallerScopeChain) == &js_WithClass",2,2,4
"(uintN)js_GetSrcNoteOffset(sn, 0) == ss->top",2,2,4
"session, WT_BLOCK_FITS(r->first_free, size, r->dsk.mem, r->page_size)",2,2,4
!resource->is_reserved_,2,2,4
"16801, ""2d has to be first in index"", out->other.size() == 0",2,2,4
top <= Limit(),2,2,4
(amount > 0) && (amount < (int)sizeof(fin)),2,2,4
" 10336 , ""No subobject started"", s_.subobjStarted() ",2,2,4
ns2->declared,2,2,4
!rt->scriptFilenameTable,2,2,4
location_ == NULL || !(*location_)->IsFailure(),2,2,4
(mod & -4) == 0,2,2,4
 _locktype >= 1 ,2,2,4
parent_loop_header_ == NULL,2,2,4
has_instance_prototype(),2,2,4
!(flags & JSINVOKE_CONSTRUCT),2,2,4
arena->list->last != arena || arena->list->lastLimit >= (pageIndex * GC_PAGE_SIZE + thingLimit),2,2,4
ptr != ScratchReg,2,2,4
maxElems < (BSONObjMaxUserSize/10),2,2,4
iterable,2,2,4
 x >= 0 && x < _capacity ,2,2,4
pn2->pn_type == TOK_XMLNAME,2,2,4
 !( less && more ) ,2,2,4
"!xml->parent || !xml->parent->object || JS_IS_OBJ_LOCKED(cx, xml->parent->object)",2,2,4
this->strict_mode() == SLOPPY || this->strict_mode() == strict_mode,2,2,4
" 10319 , ""Invalid regex options string"", len2 != -1 ",2,2,4
" 10440 , ss.str(), filelen == 0 ",2,2,4
elapsed.InMicroseconds() >= 0,2,2,4
"obj, obj->is<StaticBlockObject>() || obj->is<StaticWithObject>() || obj->is<StaticEvalObject>() || obj->is<JSFunction>()",2,2,4
!(ucs4Char & 0x80),2,2,4
dest != ScratchReg,2,2,4
"sizeof(T) == 4 || (sizeof(uintptr_t) == 8 && sizeof(T) == 8), ""mozilla/Atomics.h only supports 32-bit and pointer-sized types""",2,2,4
(scale & -4) == 0,2,2,4
top < ss->printer->script->depth,2,2,4
aoff > pool->arenasize,2,2,4
sprop->setter != js_watch_set || pobj != obj,2,2,4
CurrentThreadCanAccessRuntime(this),3,1,4
size_ <= destination.length(),2,2,4
IsPowerOf2(capacity),2,2,4
minAlpha < maxAlpha / 2,2,2,4
!JSVAL_IS_PRIMITIVE(lval),2,2,4
length <= length_,2,2,4
atom->flags & ATOM_HIDDEN,2,2,4
pn->pn_type != TOK_DEFSHARP,2,2,4
MAP_SPACE == space,2,2,4
" 10065 , ""invalid parameter: expected an object"", isABSONObj() ",2,2,4
expandedArgs == argCount,2,2,4
!js::gc::IsInsideNursery((js::gc::Cell*)thing),2,2,4
"match, node.isArity(PN_TERNARY)",3,1,4
(jsuword)a->base + offset == FIRST_THING_PAGE(a),2,2,4
offsetInArena < GC_THINGS_SIZE,2,2,4
dp == bp + length,2,2,4
"JS_GET_CLASS(cx, outer) == &split_global_class.base",2,2,4
is_immediate(),2,2,4
attrns,2,2,4
list->thingSize == sizeof(JSGCThing),2,2,4
js_CodeSpec[*pc].length == JSOP_CALL_LENGTH,2,2,4
condition,3,1,4
let || tt == TOK_VAR,2,2,4
!isValid(),3,1,4
pn2->pn_type == TOK_RB || pn2->pn_type == TOK_RC,2,2,4
stmt->type == STMT_BLOCK && (stmt->flags & SIF_SCOPE),2,2,4
!src3.is(src4),2,2,4
**rve == '\0',2,2,4
this->index() == index,2,2,4
reservation,2,2,4
mode == ALLOW_COPIED_DOUBLE_ELEMENTS,2,2,4
version != JSVERSION_UNKNOWN,2,2,4
sizeof(long long) == 8,2,2,4
 len == 8 ,2,2,4
" query.firstElement().type(), Object ",2,2,4
"OBJ_GET_CLASS(cx, obj) == &js_ErrorClass",2,2,4
"c0_, '{'",2,2,4
IsLdrPcImmediateOffset(Memory::int32_at(pc)),2,2,4
op != JSOP_CASE && op != JSOP_CASEX && op != JSOP_DUP && op != JSOP_DUP2 && op != JSOP_SWAP,2,2,4
 &lk.m() == &BY ,2,2,4
IsFastSmiElementsKind(from_kind),2,2,4
obj != HEAP->raw_unchecked_the_hole_value(),2,2,4
parent->IsSeqString() || parent->IsExternalString(),2,2,4
 syncThread == 0 ,2,2,4
IsPowerOf2(size),2,2,4
noteIndex < 0 && !pn2->pn_next,2,2,4
!IS_EMPTY(nameqn->uri),2,2,4
" query.nFields(), 1 ",2,2,4
sizeof(ValueElement) == (sizeof(Value) + sizeof(Position) + sizeof(int) + 1),2,2,4
op == JSOP_GOTO || op == JSOP_GOTOX,2,2,4
!heap_->cell_space()->Contains(addr) && !heap_->code_space()->Contains(addr) && !heap_->old_data_space()->Contains(addr) && !heap_->new_space()->Contains(addr),2,2,4
JSVAL_IS_BOOLEAN(val),2,2,4
blocks_.length() == 0,2,2,4
*p != 'L',2,2,4
sizeof(unsigned) == sizeof(JSUword),2,2,4
start < base->length,2,2,4
key != NULL,2,2,4
IsCompareOp(op),2,2,4
"JS_UPTRDIFF(fp->sp, fp->spbase) <= depthdiff",2,2,4
operandSP == 1,2,2,4
 o % recsize == 0 ,2,2,4
(IsFastSmiOrObjectElementsKind(kind) && (map == GetHeap()->fixed_array_map() || map == GetHeap()->fixed_cow_array_map())) || (IsFastDoubleElementsKind(kind) && (fixed_array->IsFixedDoubleArray() || fixed_array == GetHeap()->empty_fixed_array())) || (kind == DICTIONARY_ELEMENTS && fixed_array->IsFixedArray() && fixed_array->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),2,2,4
"!AreAliased(rt, rt2)",2,2,4
"GET_HEADER(pool, b) == &(*ap)->next",2,2,4
has_error_,2,2,4
"T(double(t)) == t, ""value creation would be lossy""",2,2,4
sizeof(JSGCThing) == sizeof(JSGCPageInfo),2,2,4
code()->kind() == Code::BUILTIN,2,2,4
pn3 == pn2->pn_expr,2,2,4
level >= 0 && level <= kMaxLoopNestingMarker,2,2,4
"JS_GetPrivate(cx, obj) == xml",2,2,4
isolate()->code_range()->exists(),2,2,4
name->HasHashCode(),2,2,4
"OBJ_GET_CLASS(cx, withobj) == &js_WithClass",2,2,4
IsValidOrNone() && other.IsValidOrNone(),3,1,4
type == JOF_JUMP || type == JOF_TABLESWITCH || type == JOF_LOOKUPSWITCH,2,2,4
"session, LF_ISSET(WT_DHANDLE_EXCLUSIVE) == F_ISSET(session->dhandle, WT_DHANDLE_EXCLUSIVE)",2,2,4
hasGet(),2,2,4
logger_ != NULL,2,2,4
balancerStopped.hasDefault(),2,2,4
sizeof(long long) == sizeof(int64_t),2,2,4
IsAsciiSign(),2,2,4
kid->xml_class != JSXML_CLASS_LIST,2,2,4
is_bound(),2,2,4
kAlignment >= kPointerSize,2,2,4
"fp->spbase + OBJ_BLOCK_DEPTH(cx, obj) == sp",2,2,4
!cx->requestDepth,2,2,4
 la <= 0xffffff ,2,2,4
sizeof(short) == 2,2,2,4
 ! i.more() ,2,2,4
rsbase._locked == 1,2,2,4
thingOffset >= sizeof(JSGCPageInfo),2,2,4
!arena->next,2,2,4
"session, WT_INTL_INDEX_COPY(parent) == pindex",2,2,4
cur_addr_ <= cur_end_,2,2,4
"session, F_ISSET(chunk, WT_LSM_CHUNK_MERGING)",3,1,4
thing.kind() != JSTRACE_SHAPE,2,2,4
obj->Size() >= 2*kPointerSize,2,2,4
entryCount == scope->entryCount,2,2,4
requestDebit <= rt->requestCount,2,2,4
op == JSOP_FORVAR,2,2,4
i < ida->length,2,2,4
"strcmp(rval, with_cookie) == 0",2,2,4
(inst[0] & 0xfff00000) == MOVW && (inst[1] & 0xfff00000) == MOVT,2,2,4
"session, session->split_gen == 0",3,1,4
is_linked(),2,2,4
values[T::kHolderIndex]->IsHeapObject(),2,2,4
" ""releaseAndWriteLock: unlock_shared failed, probably recursive"" ",2,2,4
*hep == NULL,2,2,4
lastMonitorStubPtrAddr_ == nullptr,2,1,3
lhs != nullptr,2,1,3
sharedElementsOwner->getElementsHeader()->isCopyOnWrite(),2,1,3
u->bk->fd == u,2,1,3
ins->toSimdBox()->initialHeap() == initialHeap(),2,1,3
hasArguments(),2,1,3
tree_ != nullptr,2,1,3
input,2,1,3
it._area == &_area,2,1,3
aliasSet == JSJitInfo::AliasEverything,2,1,3
"fp, asRematerializedFrame() == fp",2,1,3
isCycleBegin(),2,1,3
mpiLen >= size_t(pair.limit) && pair.limit >= pair.start && pair.start >= 0,2,1,3
"TYPE_FLAGS_MASK == String::TYPE_FLAGS_MASK, ""shadow::String::TYPE_FLAGS_MASK must match JSString::TYPE_FLAGS_MASK""",2,1,3
"sizeof(JSUndependedString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
hasSourceMapURL(),2,1,3
generation <= 1,2,1,3
defined() && type_ == Float32x4,2,1,3
"ZeroIsReserved<K>::result, ""zero as tombstone requires that zero keys be invalid""",2,1,3
fun,2,1,3
sp != 0,2,1,3
which_ == Dynamic,2,1,3
(gcRegs().bits() & ~liveRegs().gprs().bits()) == 0,2,1,3
"sizeof(JSString) == (offsetof(JSString, d.inlineStorageLatin1) + NUM_INLINE_CHARS_LATIN1 * sizeof(char)), ""Inline Latin1 chars must fit in a JSString""",2,1,3
"v.isObject(), v.toObject().compartment() == compartment()",2,1,3
offset.offset() <= (size_t) UINT32_MAX,2,1,3
"offsetof(JSString, d.u1.length) == offsetof(String, length), ""shadow::String length offset must match JSString""",2,1,3
getDenseCapacity() == 0,2,1,3
stack,2,1,3
"sizeof(VType) <= sizeof(int), Abs_truncates_to_int",3,0,3
args.length() < nformal,2,1,3
"session, !F_ISSET(session, WT_SESSION_NO_DATA_HANDLES)",2,1,3
message,2,1,3
start + length >= start,2,1,3
"session, next_ref->state != WT_REF_SPLIT",2,1,3
"state != NoGC, canCollect()",2,1,3
mozilla::Abs(imm) < 256,2,1,3
!val.isMagic(JS_ELEMENTS_HOLE),2,1,3
shift < 32,2,1,3
group->clasp() == &ArrayObject::class_,2,1,3
pcDeltaOut != nullptr,2,1,3
!isForwarded(),2,1,3
bump == AlignPtr(bump),2,1,3
!(addr & ChunkMask),2,1,3
"!IsAnyTypedArray(source), ""use setFromAnyTypedArray""",2,1,3
level != Optimization_DontCompile,2,1,3
typeid(*genericRCPtr) == typeid(const RCString),2,1,3
n < size(),2,1,3
"evalTraps, frame.isDebuggee()",2,1,3
"Scalar::Float64 == JS_SCALARTYPEREPR_FLOAT64, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
value->kind() == StackValue::Stack,2,1,3
nativeStartAddr,2,1,3
type != JSVAL_TYPE_MAGIC && type != JSVAL_TYPE_NULL && type != JSVAL_TYPE_UNDEFINED,2,1,3
is_uint6(scale),2,1,3
"ROPE_FLAGS == String::ROPE_FLAGS, ""shadow::String::ROPE_FLAGS must match JSString::ROPE_FLAGS""",2,1,3
"16141, str::stream() << ""cannot translate opcode "" << op, !op",2,1,3
"!isJSContext() && !runtime_->isAtomsCompartment(comp), comp->zone()->usedByExclusiveThread",2,1,3
!d.s.u3.base->isInline(),2,1,3
!JSID_IS_EMPTY(id),2,1,3
!hasGuessedAtom(),2,1,3
(flags & AllFlags) == flags,2,1,3
"res, baseline",2,1,3
*stack == this,2,1,3
hasIntroductionType(),2,1,3
m_baselineCodeBytes < m_allocation.size,2,1,3
"2 * sizeof(Value) == sizeof(ObjectElements), ""when elements are stored inline, the first two "" ""slots will hold the ObjectElements header""",2,1,3
kind == PNK_FORIN || kind == PNK_FOROF || kind == PNK_FORHEAD,2,1,3
t != String,2,1,3
containsCodeAddress(retAddr),2,1,3
!c1->runtimeFromAnyThread()->isAtomsCompartment(c1),2,1,3
m->topsize > 0,2,1,3
!hasTable(),2,1,3
"16920, ""trying to match on unknown field: "" + path->fieldRef().dottedField().toString(), 0",2,1,3
nslots > 0,2,1,3
getReservedSlot(SCOPE_CHAIN_SLOT).isUndefined(),2,1,3
fitsInSmallChar(c2),2,1,3
mode() != Fallible,2,1,3
"cx, receiver, id",2,1,3
value <= original,2,1,3
"NumDefinitionFlagBits + NumBlockIdBits <= 32, ""This is supposed to fit in a single uint32_t""",2,1,3
offset_ == INVALID_OFFSET,2,1,3
"__atomic_always_lock_free(sizeof(int64_t), 0)",3,0,3
name != nullptr,2,1,3
lexdef()->isDefn(),2,1,3
scopeChain_->is<ClonedBlockObject>(),2,1,3
ptr->isTenured(),2,1,3
"INT_STATIC_LIMIT <= 999, ""static int strings assumed below to be at most "" ""three digits""",2,1,3
!(addr & ArenaMask),2,1,3
typedObj->type() == MIRType_Object,2,1,3
lazyInnerFunctionIndex < lazyOuterFunction()->numInnerFunctions(),2,1,3
a.isFloatReg(),2,1,3
inlCount > 0,2,1,3
fallbackStub_ == other.fallbackStub_,2,1,3
"cacheResult, obj == cacheResult",2,1,3
argsBody->isArity(PN_LIST),2,1,3
it == _ns.end(),2,1,3
fn->isKind(PNK_FUNCTION),2,1,3
extra_ <= 1,2,1,3
"session, alloc_refp - alloc_index->index == (ptrdiff_t)result_entries",2,1,3
_theend == other._theend,2,1,3
small_index(size) == i,2,1,3
cell->isTenured(),2,1,3
!IsInsideNursery(thing),2,1,3
sw.getStatus(),2,1,3
"Scalar::Uint8 == JS_SCALARTYPEREPR_UINT8, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
hasInt32UpperBound(),2,1,3
alloc.isRegister(),2,1,3
"session, nchunks == 0 || (chunk != NULL && youngest != NULL)",2,1,3
*ptr == (uintptr_t)expectedData.value,2,1,3
"comp, comp->hasBeenEntered()",2,1,3
"self->lookup(cx, NameToId(cx->names().length))->slot() == LENGTH_SLOT",2,1,3
rn.code() == unsigned(dtmLastReg) + dtmDelta,2,1,3
"session, !lsm_tree->active",3,0,3
!regRequiresRex(RegisterID(rm)),2,1,3
which < NUM_EXTENDED_SLOTS,2,1,3
u->child[0]->parent == u,2,1,3
"compartment(), js::GetCompartmentZone(compartment()) == zone_",2,1,3
sizeof(InstDTR) == sizeof(InstLDR),2,1,3
kind_ == ArgSlot,2,1,3
!isDead(),2,1,3
"obj, IsStaticScope(obj)",3,0,3
layoutFromMode(mode()).type2 == PAYLOAD_INDEX,2,1,3
(idx == NTREEBINS-1) || (tsize < minsize_for_tree_index((idx+1))),2,1,3
p->fd->bk == p,2,1,3
!templateObject->isSingleton(),2,1,3
"sizeof(NativeObject) % sizeof(Value) == 0, ""fixed slots after an object must be aligned""",2,1,3
"!mark_, ""Marking already-marked block""",2,1,3
is_uint7(imm7),2,1,3
!IsInsideNursery(name),2,1,3
mozilla::Abs(imm) < 4096,2,1,3
!JSID_IS_VOID(propid),2,1,3
!shadowZone()->needsIncrementalBarrier(),2,1,3
!osrEntryOffset_,2,1,3
HashPolicy::isCleared(entries[0]),2,1,3
!UseHardFpABI(),2,1,3
size_t(cursor - base) <= size_t(UINT32_MAX),2,1,3
analyzedArgsUsage(),2,1,3
cursor <= limit,2,1,3
!invalidateEpilogueOffset_,2,1,3
type == MIRType_Boolean || type == MIRType_Int32 || type == MIRType_Double || type == MIRType_String || type == MIRType_Symbol || type == MIRType_Object,2,1,3
current_ != def_->usesEnd(),2,1,3
(int)INITIAL_CONSTRUCT == (int)CONSTRUCTING,2,1,3
_memUsageBytes != 0,2,1,3
isInterpreter(),2,1,3
firstMonitorStub_ == this,2,1,3
pn_arity == PN_NAME || pn_arity == PN_CODE,2,1,3
"!use->isFixedRegister(), pos.subpos() == (use->usedAtStart() ? CodePosition::INPUT : CodePosition::OUTPUT)",2,1,3
otherFirst && otherLatest && otherLast,2,1,3
hasInt(i),2,1,3
!_storage || typeid(*_storage) == typeid(const DocumentStorage),2,1,3
MAX_VIRTUAL_REGISTERS <= VREG_MASK,2,1,3
"maxEnabledSSEVersion != UnknownSSE, maxSSEVersion <= maxEnabledSSEVersion",2,1,3
is_aligned(ss),2,1,3
"offsetof(BaseShape, clasp_) == offsetof(js::shadow::BaseShape, clasp_)",2,1,3
c == expect,2,1,3
IsRegister() || IsNone(),2,1,3
stack_[*size_ - 1].script() == script,2,1,3
"MAX_FIXED_SLOTS <= Shape::FIXED_SLOTS_MAX, ""verify numFixedSlots() bitfield is big enough""",2,1,3
"chunk_plus_offset(p, sz)->head == FENCEPOST_HEAD",2,1,3
"offsetof(NativeObject, group_) == offsetof(shadow::Object, group), ""shadow type must match actual type""",2,1,3
mozilla::Abs(imm) <= 255 * 4,2,1,3
which_ == Builtin,2,1,3
"sizeof(JSFunction) == sizeof(js::shadow::Function), ""shadow interface must match actual interface""",2,1,3
CallObject::RESERVED_SLOTS == BlockObject::RESERVED_SLOTS,2,1,3
u->child[1] == 0,2,1,3
logRoot.isType(mongo::Object),2,1,3
slot >= 0 && slot <= int32_t(graph.argumentSlotCount()),2,1,3
isBogus(),2,1,3
"13548, ss.str().c_str()",2,1,3
numFixedSlots() == 2,2,1,3
IsSimdType(rhs->type()),2,1,3
p <= limit,2,1,3
"YIELD_INDEX_CLOSING < YIELD_INDEX_RUNNING, ""test below should return false for YIELD_INDEX_RUNNING""",2,1,3
"!InvisibleKeysOk, !k->compartment()->options_.invisibleToDebugger()",2,1,3
runtime->exclusiveAccessOwner == PR_GetCurrentThread(),2,1,3
is_mmapped(p),2,1,3
FIXED_SLOTS_SHIFT == js::shadow::Shape::FIXED_SLOTS_SHIFT,2,1,3
result == (max == 0 ? 0 : mozilla::ExponentComponent(double(max))),2,1,3
size_t(cc) < mozilla::ArrayLength(names),2,1,3
rn.code() > dtmLastReg,2,1,3
value >= 0 ? (int32_t(y) >= int32_t(x)) : (int32_t(y) < int32_t(x)),2,1,3
"mask == xmm0, ""Legacy SSE (pre-AVX) encoding for blendv requires the mask to be "" ""in xmm0""",2,1,3
_ns[_dotIndex] == '.',2,1,3
!script_,2,1,3
i < size_,2,1,3
ValidSlotLocation(nextSlotLoc),2,1,3
mask->type() == MIRType_Int32x4,2,1,3
"enabled_, installed()",2,1,3
edge->isTenured(),2,1,3
!!firstOffset_ == !!lastOffset_,2,1,3
adding->tail,2,1,3
elementType != MIRType_None,2,1,3
lazySource,2,1,3
!pt->ionCompiling,2,1,3
fun_,2,1,3
!skipArgCheckEntryOffset_,2,1,3
isCurrentTokenType(TOK_NAME),2,1,3
genName->getOp() == JSOP_GETNAME,2,1,3
"x == head_ || compare_(x->key, key) < 0",2,1,3
"session, kpack->prefix == 0 && kpack->raw != WT_CELL_VALUE_COPY",2,1,3
block == block_,2,1,3
isFunctionBox(),2,1,3
v.isString() || v.isObject() || v.isSymbol(),2,1,3
"type == MIRType_Int32x4, op == Op_add || op == Op_sub || op == Op_mul",2,1,3
isBlockScope,2,1,3
"!producer_, ""Initializing MUse that already has a producer""",2,1,3
hadActionableAbort(),2,1,3
reg != ScratchRegister,2,1,3
"sizeof(mozilla::Atomic<void*, mozilla::Relaxed>) == sizeof(void*), ""Atomic should have same memory format as underlying type.""",2,1,3
producer_,2,1,3
"stackDepth() > 0, peek(-1)->kind() == StackValue::Stack",2,1,3
type != MIRType_Value,2,1,3
"sizeof(NativeObject) == sizeof(shadow::Object), ""shadow interface must match actual implementation""",2,1,3
kind <= 1,2,1,3
!isMultiple(),2,1,3
"sizeof(HashNumber) == sizeof(uint32_t), ""subsequent code assumes a four-byte hash""",2,1,3
!isFakeExitFrame(),2,1,3
"v.isObject(), ""attempting to access [[ThrowTypeError]] too early""",2,1,3
numLocations,2,1,3
"flags() & OBJECT_FLAG_UNKNOWN_PROPERTIES, hasAllFlags(OBJECT_FLAG_DYNAMIC_MASK)",2,1,3
!ionAbortPc_ || ionAbortMessage_,2,1,3
p->value() > 0,2,1,3
p.check(),2,1,3
pn_arity == PN_NULLARY,2,1,3
base < cursor,2,1,3
run1 >= 1,2,1,3
"runtime_->isAtomsCompartment(compartment_), runtime_->currentThreadHasExclusiveAccess()",2,1,3
!hasLazyGroup(),2,1,3
!templateObject->denseElementsAreCopyOnWrite(),2,1,3
is_uint12(imm12),2,1,3
!gc::IsAboutToBeFinalized(&r.front().value()),2,1,3
baselineGetPropReturnAddr_ != nullptr,2,1,3
hasValue() && isType(mongo::NumberDouble),2,1,3
scriptPcStack_ < end_,2,1,3
pt->ionCompiling,2,1,3
"session, WT_META_TRACKING(session) && session->meta_track_nest > 0",2,1,3
!pn_body,2,1,3
IsTypedArrayClass(getClass()),2,1,3
chunksize(u) == tsize,2,1,3
"session, session->dhandle->checkpoint == NULL",3,0,3
"sizeof(JS::Value) == 8, ""required for TimesEight and 3 below to be correct""",2,1,3
chunkno < numNurseryChunks_,2,1,3
lastStubPtrAddr_ == nullptr,2,1,3
i < numBlocks(),2,1,3
!regs.has(ICTailCallReg),3,0,3
!base->isOwned(),2,1,3
numPredecessors() >= 2,2,1,3
hasValue() && isType(mongo::Object),2,1,3
"!group->clasp()->isNative(), shape->numFixedSlots() == 0",2,1,3
i1 < ROOT_LENGTH,2,1,3
start + count >= start,2,1,3
"SomeTypedArray::sameBuffer(target, source), ""provided arrays don't actually overlap, so it's "" ""undesirable to use this method""",2,1,3
layoutFromMode(mode()).type1 == PAYLOAD_INDEX,2,1,3
hasChildren(),2,1,3
is_uint2(shift),2,1,3
16940,2,1,3
"offset > 0, SN_IS_TERMINATOR(sn) || SN_DELTA(sn) > 0",2,1,3
(uintptr_t(kind) & ~KIND_MASK) == 0,2,1,3
byteDest <= viewByteLength,2,1,3
"cur != end, cur->key != nullptr",2,1,3
fun->isTenured(),2,1,3
installed(),2,1,3
left->type() == MIRType_Int32x4 && right->type() == MIRType_Int32,2,1,3
scriptIdxOut,2,1,3
(last - first) % thingSize == 0,2,1,3
u < 100,2,1,3
pn_arity == PN_UNARY,2,1,3
next_pinuse(p),2,1,3
"i > 0, slotValue(i-1).isBoolean()",2,1,3
id.repr() == InvalidRepr,2,1,3
newRequirement.kind() == Requirement::REGISTER,2,1,3
data_.state_ == JIT,2,1,3
"dst >= src, (size_t) (dst - src) >= len",2,1,3
map.initialized() && usingMap(),2,1,3
numActiveChunks_ > 0,2,1,3
(x) >= 0.0,3,0,3
"!IsAnyTypedArray(source), ""use setFromAnyTypedArray instead of this method""",2,1,3
"isProfiling(), this != cx_->runtime()->profilingActivation_",2,1,3
!atom_,2,1,3
IsInsideNursery(*edge),2,1,3
"v.isString(), v.toString()->isAtom()",2,1,3
op_ == JSOP_ADD || op_ == JSOP_SUB || op_ == JSOP_BITOR || op_ == JSOP_BITAND || op_ == JSOP_BITXOR,2,1,3
*lastStubPtrAddr_ == this,2,1,3
stackBase % sizeof(void*) == 0,2,1,3
usingMap(),2,1,3
"roundUpAllocationSize(n, sizeof(void*)) == n",2,1,3
"(0 == FOR_EACH_OPCODE(VALUE_AND_VALUE_PLUS_ONE) FOR_EACH_TRAILING_UNUSED_OPCODE(TRAILING_VALUE_AND_VALUE_PLUS_ONE) 256), ""opcode values and trailing unused opcode values monotonically "" ""increase from zero to 255""",2,1,3
!rep_.empty(),2,1,3
invalidateEpilogueOffset_,2,1,3
!auxNextLink && !hasDelayedMarking,2,1,3
_children.size() == 1,2,1,3
!constant(),2,1,3
regs_.pc == state.script()->code(),2,1,3
"offsetof(Shape, slotInfo) == offsetof(js::shadow::Shape, slotInfo)",2,1,3
total <= m->footprint,2,1,3
stub->next() == nullptr,2,1,3
isDefn(),2,1,3
(idx_ == count_) == (cur_ == end_),2,1,3
"!condition, ""32-bit x86 should never use a REX prefix""",2,1,3
regs.sp == args.end(),2,1,3
rawSize >= 1,2,1,3
kind != Kind_Op && kind != Kind_NonOp,2,1,3
"17409, ""trying to match on unknown field: "" + path->fieldRef().dottedField().toString(), 0",2,1,3
"cx->isJSContext(), !IsInsideNursery(obj)",2,1,3
encoded(),2,1,3
!successors_.empty(),2,1,3
"!bin_find(m, q)",2,1,3
footer()->jitCode() != nullptr,2,1,3
mir->type() == MIRType_Object || mir->type() == MIRType_Slots,2,1,3
getSlotRef(EVAL).isUndefined(),2,1,3
slot - RESERVED_SLOTS < numVariables(),2,1,3
left->type() == MIRType_String || right->type() == MIRType_String,2,1,3
consumer_ != nullptr,2,1,3
"SCOPECOORD_SLOT_BITS <= 32, ""We have enough bits below""",2,1,3
(flags_ & mask) != mask,2,1,3
is_int19(imm19),3,0,3
"OperationContext* txn, const LocAndSize* records, const LocAndSize* drecs, const ExtentManager* em, const DummyRecordStoreV1MetaData* md",2,1,3
"16234, ""Invalid call to appendNull in BSONObj Builder.""",2,1,3
isMap(),2,1,3
overlay->isForwarded(),2,1,3
kind != Unknown,2,1,3
cmp,2,1,3
!maybeShared(),2,1,3
tos_ < end_,2,1,3
m_otherCodeBytes < m_allocation.size,2,1,3
"sizeof(SetType) * 8 >= Total, ""SetType should be large enough to enumerate all registers.""",3,0,3
kind() == GPR,2,1,3
!icEntries_.empty(),2,1,3
mode != ModRmRegister,2,1,3
"MaxChunkMemory == MaxWinMemory, ""Need a larger bitset to cover max process VM space""",2,1,3
state == FinishObjectMember,2,1,3
infos_[script_->pcToOffset(pc)].initialized,2,1,3
allowedToYield(),2,1,3
kind_ != DEAD,2,1,3
"index_ < set_.numBits_, set_.contains(index_)",2,1,3
!*done,2,1,3
dtmDelta == 1 || dtmDelta == -1,2,1,3
left_shift <= 4,2,1,3
regs_.fp() == frame,2,1,3
!parentPointer,2,1,3
!entrySnapshot_,2,1,3
S >= MIN_CHUNK_SIZE,2,1,3
fun_->nonLazyScript() == script_,2,1,3
*cellp,2,1,3
iter->next() != nullptr,2,1,3
JSProto_Null == 0,2,1,3
is_inuse(p),2,1,3
*ptr == 0x3D || *ptr == 0xE8,2,1,3
(usedFloatArgs % 2) == 0,2,1,3
UINT32_MAX - begin * elementSize >= arrayByteOffset,2,1,3
"sizeof(Arena) == ArenaSize, ""The hardcoded arena size must match the struct size.""",2,1,3
locIndex < runtimeSize_,2,1,3
isOp(JSOP_LAMBDA) || isOp(JSOP_LAMBDA_ARROW) || isOp(JSOP_DEFFUN) || isOp(JSOP_NOP) || isOp(JSOP_GETLOCAL) || isOp(JSOP_GETARG),2,1,3
"!""Unexpected magic constant""",2,1,3
dtmLastReg != -1,2,1,3
hasValue() && isType(mongo::NumberInt),2,1,3
"isJSContext() && comp, !comp->zone()->usedByExclusiveThread",2,1,3
!next_ && !prev_,2,1,3
"runtime_->isAtomsCompartment(comp), runtime_->currentThreadHasExclusiveAccess()",2,1,3
sp >= fp_->base(),2,1,3
"offsetof(JSString, d.s.u2.nonInlineCharsLatin1) == offsetof(String, nonInlineCharsLatin1), ""shadow::String nonInlineChars offset must match JSString""",2,1,3
"Scalar::Int32 == JS_SCALARTYPEREPR_INT32, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
"type == MIRType_Int32x4, op == neg || op == not_",2,1,3
"ExclusiveContext* cx, const T1& t1, const T2& t2, const T3& t3, const T4& t4",2,1,3
predictionKind() == Prefix,2,1,3
JSTYPE_VOID == 0,2,1,3
getKind() == PNK_NUMBER,2,1,3
canAlloc(n),2,1,3
fitsInSmallChar(c1),2,1,3
m_pools.initialized(),2,1,3
srcStart + count <= getDenseCapacity(),2,1,3
"aliasIdx == 0, ret == *this",2,1,3
chars[length] == CharT(0),2,1,3
!func.isChangeHeap(),2,1,3
JSString::isExternal(),2,1,3
argsBody->isKind(PNK_ARGSBODY),2,1,3
idx < getDenseInitializedLength(),2,1,3
argc <= ARGS_LENGTH_MAX,2,1,3
chunksize(u->child[0]) < chunksize(u->child[1]),2,1,3
spIndex == newDepth,2,1,3
indexReg != val.payloadReg(),2,1,3
kind_ == Register,2,1,3
osrEntryOffset_ == 0,2,1,3
is_uint6(imms),2,1,3
nativeEndAddr,2,1,3
"JSString::MAX_LENGTH < UINT32_MAX, ""Length must fit in 32 bits""",2,1,3
PRIVATE_DATA(cc) != 0,2,1,3
!ins->isPhi(),2,1,3
p.inlPtr->key != nullptr,2,1,3
sizeof(InterpreterFrame) % sizeof(Value) == 0,2,1,3
flags_ & HAS_ARGS_OBJ,2,1,3
postOrder.length() < UINT32_MAX,3,0,3
"existingStub_, flags_ != existingStub_->typeFlags()",2,1,3
"!canConvertInfallibly(MagicValue(JS_ELEMENTS_HOLE)), ""the following loop must abort on holes""",2,1,3
sz >= s,2,1,3
AnyTypedArrayLength(source) <= target->length() - offset,2,1,3
"session, evict->ref == NULL",2,1,3
rt2.code() != kSPRegInternalCode,2,1,3
type() != NamedLambda && type() != Eval,2,1,3
"initialized, stackDepth == depth",2,1,3
"!js::ClassCanHaveFixedData(group->clasp()), js::gc::GetGCKindSlots(kind, group->clasp()) == shape->numFixedSlots()",2,1,3
pn_type < PNK_LIMIT,2,1,3
sz > 0,2,1,3
stackBase != 0,2,1,3
*this != MAX,2,1,3
!TmpList()->IncludesAliasOf(stack_pointer),2,1,3
bytes > 0,2,1,3
lhs != ScratchRegister,2,1,3
isFlat(),2,1,3
!currentThreadOwnsGCLock(),2,1,3
hasObjects(),2,1,3
slotValue(i).isUndefined(),2,1,3
rt->keepAtoms_,2,1,3
!next_,2,1,3
!invalidated(),2,1,3
sz == m->topsize,2,1,3
i < (1 << 24),2,1,3
imm <= 0xff,2,1,3
existingStub_,2,1,3
"expr, pos.encloses(expr->pn_pos)",2,1,3
sharedElementsOwner->getElementsHeader()->ownerObject() == sharedElementsOwner,2,1,3
mozilla::FloorLog2(UINT32_MAX) == MaxUInt32Exponent,2,1,3
"offsetof(JSAtomState, Null) + JSProto_LIMIT * sizeof(ImmutablePropertyNamePtr) <= sizeof(JSAtomState)",2,1,3
!hasFallbackStub_,2,1,3
hasPrivate(),2,1,3
producer,2,1,3
!regs.has(BaselineSecondScratchReg),2,1,3
to.offset() != -1,2,1,3
!has(reg),3,0,3
hasUniqueBackedge(),2,1,3
global.compartment() == this,2,1,3
"JSString::ROPE_FLAGS == 0, ""Rope type flags must be 0""",2,1,3
byteDest <= viewByteLength - byteSize,2,1,3
IsSimdType(lhs->type()),2,1,3
props_cursor < props_end,2,1,3
isLowered(),2,1,3
i < COUNT,2,1,3
!pn_expr,2,1,3
"Simd128DataSize == 4 * sizeof(int32_t), ""SIMD data should be able to contain int32x4""",2,1,3
constant(),2,1,3
hasTrynotes(),2,1,3
!fp->runningInJit(),2,1,3
SN_OFFSET_TO_COLSPAN(offset) == colspan,2,1,3
scratch64.asUnsized() != lhs.base,3,0,3
depth <= MAX_STACK_DEPTH,2,1,3
kind_ == LocalSlot,2,1,3
type != JSVAL_TYPE_DOUBLE && type != JSVAL_TYPE_MAGIC && type != JSVAL_TYPE_NULL && type != JSVAL_TYPE_UNDEFINED,2,1,3
"osrPc, JSOp(*osrPc) == JSOP_LOOPENTRY",2,1,3
canHaveNonEmptyElements(),2,1,3
inited == classIsInitialized(JSProto_Object),2,1,3
"js::gc::ChunkLocationOffset == offsetof(Chunk, info) + offsetof(ChunkInfo, trailer) + offsetof(ChunkTrailer, location), ""The hardcoded API location offset must match the actual offset.""",2,1,3
arenaHeader()->allocated(),2,1,3
!hasGetterValue(),2,1,3
successorWithPhis(),2,1,3
isActiveEval() && !isCachedEval(),2,1,3
"!hasInt32UpperBound_, upper_ == JSVAL_INT_MAX",2,1,3
fun->nonLazyScript() == script,2,1,3
!isOK(),2,1,3
scopeChain()->is<DynamicWithObject>(),2,1,3
isAtom(),2,1,3
"session, r->space_avail >= size",2,1,3
length <= 0xff000000,2,1,3
"sizeof(JSThinInlineString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
byteSrc <= viewByteLength,2,1,3
reg.type() == MIRType_Object,2,1,3
kind_ == FPR,2,1,3
"sizeof(TypeScript) == sizeof(StackTypeSet) + offsetof(TypeScript, typeArray_)",2,1,3
m->dvsize == chunksize(m->dv),2,1,3
"&l != this, ""cannot takeElements from this""",2,1,3
idx < postOrder.length(),3,0,3
canPreTenure(),2,1,3
indexReg != val.typeReg(),2,1,3
!instruction_,2,1,3
bailoutId_ == INVALID_BAILOUT_ID,2,1,3
"limit < 0, limit == -1",2,1,3
mir_->isStoreUnboxedObjectOrNull() || mir_->isStoreUnboxedString(),2,1,3
entrySnapshot_,2,1,3
"sizeof(JSScript) % js::gc::CellSize == 0, ""Size of JSScript must be an integral multiple of js::gc::CellSize""",2,1,3
reg.isDouble(),2,1,3
freeLists[kind].isEmpty(),2,1,3
head_,2,1,3
"frame.isInterpreterFrame(), frame.asInterpreterFrame() == cx->interpreterFrame()",2,1,3
nbytes <= MaximumSize,2,1,3
isMemory(),2,1,3
isExtensible(),2,1,3
!markOverflow,2,1,3
uintptr_t(code_) % AsmJSPageSize == 0,2,1,3
typeid(*genericRCPtr) == typeid(const RCVector),2,1,3
recoverOffset_ == INVALID_RECOVER_OFFSET,2,1,3
!other.isOwned(),2,1,3
firstMonitorStub_ != nullptr,2,1,3
frameCount_ != UINT32_MAX,2,1,3
!c2->runtimeFromAnyThread()->isAtomsCompartment(c2),2,1,3
!unknownObject(),2,1,3
!isFinished,2,1,3
!adding->tail->next,2,1,3
info_->isAlwaysInSlot || info_->isLazilyCachedInSlot,2,1,3
val <= StarGenerator,2,1,3
"Scalar::Uint8Clamped == JS_SCALARTYPEREPR_UINT8_CLAMPED, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
"CalleeToken_Function == 0, ""Non-constructing call requires no tagging""",2,1,3
numOperands() == 1,2,1,3
CodeKind(kind_) == kind,2,1,3
policy() == LDefinition::MUST_REUSE_INPUT,2,1,3
_buf[1] == 0,2,1,3
yieldIndex < uint32_t(YIELD_INDEX_CLOSING),2,1,3
armHwCapFlags != HWCAP_UNINITIALIZED,2,1,3
(type1 == LDefinition::TYPE && type2 == LDefinition::PAYLOAD) || (type2 == LDefinition::TYPE && type1 == LDefinition::PAYLOAD),2,1,3
!(flags & NON_NATIVE) == getObjectClass()->isNative(),2,1,3
isThunk(),2,1,3
node,2,1,3
"session, btree->ckpt == NULL",2,1,3
(reg_zero == (reg_not_zero ^ 1)) && (reg_bit_clear == (reg_bit_set ^ 1)) && (always == (never ^ 1)),2,1,3
si->GetStatus().ok(),2,1,3
*size_ > 0,2,1,3
"Scalar::Uint16 == JS_SCALARTYPEREPR_UINT16, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
"STATEMENT, EXCEPTION_TYPE, ([&](const EXCEPTION_TYPE& ex) { return ::mongo::StringData(ex.what()) == ::mongo::StringData(EXPECTED_WHAT); })",2,1,3
zone->runtimeFromAnyThread()->isHeapBusy(),2,1,3
unsigned(entry_) < mozilla::ArrayLength(entries),2,1,3
ent.isForOp(),2,1,3
"fun->isNative(), IsAsmJSModuleNative(fun->native())",2,1,3
slot < numValueSlots(),2,1,3
isValidPC(pc),2,1,3
nfixed < FIXED_SLOTS_MAX,2,1,3
"session, tmpkey->size != 0",2,1,3
isKind(PNK_GENEXP),2,1,3
ret < 256,2,1,3
"group->clasp()->finalize, heap == gc::TenuredHeap",2,1,3
scopeChain()->compartment() == script()->compartment(),2,1,3
root,2,1,3
"src0 == invalid_xmm || src0 == dst, ""Legacy SSE (pre-AVX) encoding requires the output register to be "" ""the same as the src0 input register""",2,1,3
alloc.isMemory(),2,1,3
"!pinuse(chunk_plus_offset(p, sz))",2,1,3
size == sizeof(ParseNode),2,1,3
ptr <= limit,2,1,3
matches[0].limit >= 0,2,1,3
ShiftAmount == imm,2,1,3
!actionableAbortScript_ || (actionableAbortPc_ && actionableAbortMessage_),2,1,3
isAccessorShape(),2,1,3
type != JSVAL_TYPE_UNKNOWN,2,1,3
offset < length(),2,1,3
a.isGeneralReg(),2,1,3
!firstComponent,2,1,3
!block->lastIns()->resumePoint(),2,1,3
withinInitialFrame(),2,1,3
isInvoke(),2,1,3
pos.begin <= body->pn_pos.begin,2,1,3
"sizeof(NurseryChunkLayout) == gc::ChunkSize, ""Nursery chunk size must match gc::Chunk size.""",2,1,3
"Scalar::Uint32 == JS_SCALARTYPEREPR_UINT32, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
is_uint4(imm4),3,0,3
(needs_backwards_lcmed & (MALLOC_ALIGNMENT - 1u)) == 0,2,1,3
pinuse(q),2,1,3
isBackgroundSweeping(),2,1,3
offset >= displacement_,2,1,3
iter.isScripted(),2,1,3
unsigned(entryIndex) < mozilla::ArrayLength(entries),2,1,3
"compartment_, ""Caller needs to enter a compartment first""",2,1,3
"!callerTree, !callerPc",2,1,3
!global_,2,1,3
numVars_ == 0,2,1,3
site->tree() == trackedSite_->tree(),2,1,3
uintptr_t(position_) + size <= uintptr_t(chunk_->end()),2,1,3
"sizeof(interrupt_) == sizeof(uint32_t), ""Assumed by JIT callers""",2,1,3
"sizeof(JSLinearString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
"session, evict->btree != NULL",2,1,3
sizeof(Instruction) == 4,2,1,3
tsize >= MIN_LARGE_SIZE,2,1,3
maxSSEVersion != UnknownSSE,2,1,3
obj->getClass() == clasp,2,1,3
"!avxEnabled, !avxPresent",2,1,3
"sizeof(Value) == sizeof(Layout), ""sizeof(Value) == sizeof(Layout)""",3,0,3
nimplicit_ > 0,2,1,3
expr->isKind(PNK_NAME),2,1,3
index_ == index,2,1,3
now->producer() == this,2,1,3
!latest,2,1,3
frameClass() == FrameSizeClass::None(),2,1,3
shift == LSL || shift == LSR || shift == ASR || shift == ROR,2,1,3
is_uint16(imm16),2,1,3
*ptr == 0x3D,2,1,3
FROM_BUFFER_UINT8 <= slot && slot <= FROM_BUFFER_UINT8CLAMPED,2,1,3
"9004, std::string(""invoke failed: "") + getError()",2,1,3
!lir_,2,1,3
"sizeof(JSExternalString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
*it != map,2,1,3
!pn->isDefn(),2,1,3
"mozilla::IsConvertible<T*, TempObject*>::value, ""Placement new argument type must inherit from TempObject""",2,1,3
is_mmapped(p) || pinuse(p) || next_chunk(prev_chunk(p)) == p,2,1,3
s <= end,2,1,3
ent->fallbackStub()->kind() == expectedFallbackKind,2,1,3
hasEnteredCompartment(),2,1,3
!markCount,2,1,3
fallible(),2,1,3
frame.numUnsyncedSlots() <= 2,2,1,3
n <= size(),2,1,3
allocation_.isUse(),2,1,3
!hasDynamicElements(),2,1,3
"sizeof(JSRope) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
max_exponent_ <= MaxFiniteExponent || max_exponent_ == IncludesInfinity || max_exponent_ == IncludesInfinityAndNaN,2,1,3
"14044, std::string(""unknown exception"") + msg",2,1,3
usedIntArgs >= NumIntArgRegs,2,1,3
"SpecificArray::ArrayTypeID() == target->type(), ""calling wrong setFromTypedArray specialization""",2,1,3
"Scalar::Int8 == JS_SCALARTYPEREPR_INT8, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
nbytes <= JSObject::MAX_BYTE_SIZE,2,1,3
mozilla::FloorLog2(JSVAL_INT_MIN) == MaxInt32Exponent,2,1,3
bytecodeTypeMapOffset_,2,1,3
u->index == tindex,2,1,3
kind() == FPREG,2,1,3
contains(prevBump),2,1,3
generation <= (OBJECT_FLAG_GENERATION_MASK >> OBJECT_FLAG_GENERATION_SHIFT),2,1,3
"fp, asBaselineFrame() == fp",2,1,3
!invalidateEpilogueDataOffset_,2,1,3
next_ == nullptr,2,1,3
!isInterpretedLazy(),2,1,3
JSString::isDependent(),2,1,3
"session, len > 0",2,1,3
"sizeof(NativeObject) + MAX_FIXED_SLOTS * sizeof(Value) == JSObject::MAX_BYTE_SIZE, ""inconsistent maximum object size""",2,1,3
srcStart + count <= getDenseInitializedLength(),2,1,3
state == FinishArrayElement,2,1,3
regs.fp(),2,1,3
"JSCLASS_GLOBAL_SLOT_COUNT == RESERVED_SLOTS, ""global object slot counts are inconsistent""",2,1,3
length <= getDenseCapacity(),2,1,3
"msgid, sw.getStatus()",2,1,3
source->length() <= target->length() - offset,2,1,3
!tail->next,2,1,3
getKind() == PNK_NAME,2,1,3
"28667, mongoutils::str::stream() << ""Expression "" << this->getOpName() << "" takes at least "" << MinArgs << "" arguments, and at most "" << MaxArgs << "", but "" << args.size() << "" were passed in."", MinArgs <= args.size() && args.size() <= MaxArgs",2,1,3
dbg,2,1,3
"slotInRange(start + length, SENTINEL_ALLOWED)",2,1,3
u < JS::WellKnownSymbolLimit,2,1,3
type <= JSVAL_TYPE_OBJECT,2,1,3
kind > INVALID && kind < LIMIT,2,1,3
"mode != ObjectLiteral, !shouldUseVM()",2,1,3
hasOverridePc(),2,1,3
index <= NumHops,2,1,3
is_mmapped(p) || sz < (s + MIN_CHUNK_SIZE),2,1,3
skipArgCheckEntryOffset_ == 0,2,1,3
js::GetObjectClass(obj) == &jsclass,2,1,3
slotType != MIRType_None,2,1,3
hasFallback(),2,1,3
"Scalar::Int32x4 == JS_SCALARTYPEREPR_INT32X4, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
(uintptr_t(object) & 1) == 0,2,1,3
node->isOp(JSOP_NOP),2,1,3
isOwned() && unowned_,2,1,3
input->virtualRegister(),2,1,3
isUnknown(),2,1,3
lir->mirRaw()->isInstruction(),2,1,3
!disabled_,2,1,3
!comp.ref().done(),2,1,3
isRegister(),2,1,3
isInterpreted() && !isBeingParsed(),3,0,3
layoutFromMode(mode()).type1 == PAYLOAD_STACK_OFFSET,2,1,3
constructing_ == callInfo.constructing(),2,1,3
"session, nsnap != NULL",2,1,3
!unreachable_,2,1,3
"sizeof(JSExtensibleString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
n <= available(),2,1,3
"ExclusiveContext* cx, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5",2,1,3
currentToken().type == TOK_TEMPLATE_HEAD || currentToken().type == TOK_NO_SUBS_TEMPLATE,2,1,3
!hasIntroductionOffset(),2,1,3
hasValue() && isType(mongo::bsonTimestamp),2,1,3
matches[0].limit >= matches[0].start,2,1,3
JSEXN_ERR <= exn,2,1,3
isInline(),2,1,3
sc->isFunctionBox(),2,1,3
aheader->zone->runtimeFromAnyThread()->isHeapBusy(),2,1,3
is_int9(imm9),2,1,3
"session, ins_head->head[i] != moved_ins",2,1,3
type == MIRType_Object,2,1,3
"offsetof(JSLinearString, d.s.u2.nonInlineCharsTwoByte) == offsetof(JSLinearString, d.s.u2.nonInlineCharsLatin1), ""nonInlineCharsTwoByte and nonInlineCharsLatin1 must have same offset""",2,1,3
"sizeof(JSString) == (offsetof(JSString, d.inlineStorageTwoByte) + NUM_INLINE_CHARS_TWO_BYTE * sizeof(char16_t)), ""Inline char16_t chars must fit in a JSString""",2,1,3
r < 256,2,1,3
masm.numAsmJSAbsoluteLinks() == 0,2,1,3
"frame, UncheckedUnwrap(frame)->is<SavedFrame>()",2,1,3
kind == ICStub::SetProp_CallScripted || kind == ICStub::SetProp_CallNative,2,1,3
index < numEntries(),2,1,3
chars[length] == 0,2,1,3
contains(mark),2,1,3
isCompiled(),2,1,3
"segment_holds(sp, (char*)sp)",2,1,3
!next_pinuse(u),2,1,3
definiteSlot() == slot,2,1,3
kind() == FPU,2,1,3
isKind(PNK_FUNCTION) || isKind(PNK_NAME),2,1,3
!next_pinuse(p),2,1,3
numDominated_ != 0,2,1,3
typeid(*genericRCPtr) == typeid(const RCCodeWScope),2,1,3
HasSubregH(reg),2,1,3
!arenaIter.done(),2,1,3
tindex == idx,2,1,3
jitinfo,2,1,3
pod.codeOffset_ == UINT32_MAX,2,1,3
hasBlockScopes(),2,1,3
"src0 == dst, ""Legacy SSE (pre-AVX) encoding requires the output register to be "" ""the same as the src0 input register""",2,1,3
layoutFromMode(mode()).type1 == PAYLOAD_FPU,2,1,3
"LATIN1_CHARS_BIT == String::LATIN1_CHARS_BIT, ""shadow::String::LATIN1_CHARS_BIT must match JSString::LATIN1_CHARS_BIT""",2,1,3
key < JSProto_LIMIT,2,1,3
pod.hasArrayView_,2,1,3
lir->mirRaw(),2,1,3
type == BinData,2,1,3
"existing, vp.isObject()",2,1,3
!resume->instruction(),2,1,3
i < nargs_,2,1,3
successors_.empty(),2,1,3
"offsetof(NativeObject, elements_) == offsetof(shadow::Object, _1), ""shadow placeholder must match actual elements""",2,1,3
script_ && script_->containsPC(callerPc),2,1,3
"PNX_NONCONST < (1 << NumListFlagBits), ""Not enough bits""",2,1,3
(reinterpret_cast<uintptr_t>(hash) & TAG) == 0,2,1,3
hasKnownType(),2,1,3
"ArenasPerChunk == 252, ""Do not accidentally change our heap's density.""",2,1,3
index < natoms(),2,1,3
count > 0,2,1,3
baselineSetPropReturnAddr_ == nullptr,2,1,3
t != Number,2,1,3
kind_ == Constant,2,1,3
hasUnit(c),2,1,3
startOffset_ <= offset,2,1,3
"kind == LoadSext32, otherOperand.kind() != OtherOperand::FPR",2,1,3
(uintptr_t(ptr) & 0x1) == 0,2,1,3
"minimum, C::compare(minimum->item, node->item) < 0",2,1,3
IsAddressImmediate(address),2,1,3
!cycleEnd_,2,1,3
u >= &inputs_[0],2,1,3
"Scalar::Int16 == JS_SCALARTYPEREPR_INT16, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
deltaRun_ <= end_,2,1,3
fin->finalize,2,1,3
(bits_ & (KIND_MASK << KIND_SHIFT)) == 0,2,1,3
count < 16,2,1,3
is_uint6(amount),2,1,3
shouldRelease,2,1,3
!isFunctionPrototype(),2,1,3
isOp(JSOP_NEWINIT),2,1,3
!jrt->mutatingBackedgeList_,2,1,3
baselineGetPropReturnAddr_ == nullptr,2,1,3
snapshot_.numAllocationsRead() == numAllocations(),2,1,3
"Arena::isAligned(addr, aheader->getThingSize())",2,1,3
uintptr_t(buffer_) % sizeof(uint32_t) == 0,2,1,3
flags_ & HAS_DEBUG_MODE_OSR_INFO,2,1,3
group->clasp() != &js::ArrayObject::class_,2,1,3
id,2,1,3
defined() && rhs.defined(),2,1,3
"isInline, checkInlineRangeInvariants()",2,1,3
funCxFlags.argumentsHasLocalBinding,2,1,3
"ArenaShift >= 8 + 1 + 1 + 1, ""ArenaHeader::auxNextLink packing assumes that ArenaShift has enough bits to "" ""cover allocKind and hasDelayedMarking.""",2,1,3
byteSize <= viewByteLength,2,1,3
"MinThingSize >= 16, ""When decreasing the minimum thing size, please consider"" "" how this will affect the size of a SortedArenaList.""",2,1,3
!pc_,2,1,3
"baseobj->isTenured(), allocKind == baseobj->asTenured().getAllocKind()",2,1,3
js::GCLock,2,1,3
!p.value().isMultiple(),2,1,3
"sizeof(bool) <= sizeof(int32_t), ""bool doesn't fit in an int32 slot""",2,1,3
"mode != Integer, mode == Normal",2,1,3
index < numNurseryChunks_,2,1,3
cond != al,2,1,3
first <= last,2,1,3
"session, prev_ins->next[i] == moved_ins",2,1,3
pt->exclusiveThreadsPresent(),2,1,3
head == 0,2,1,3
index >= firstStackSlot(),2,1,3
!hasSetterValue(),2,1,3
!isDynamicallyLinked(),2,1,3
!isFloat(),2,1,3
"sizeof(uint8_clamped) == 1, ""uint8_clamped must be layout-compatible with uint8_t""",2,1,3
sz == ((sp->base + sp->size) - (char*)p) - TOP_FOOT_SIZE,2,1,3
hasValue() && isType(mongo::Symbol),2,1,3
0 == i,2,1,3
zone->arenas.isSynchronizedFreeList(kind),2,1,3
"StackTagMask <= gc::CellMask, ""The tag mask must be embeddable in a Cell*.""",2,1,3
invalidateEpilogueDataOffset_,2,1,3
uintptr_t(inl + inlNext) == uintptr_t(p.inlAddPtr),2,1,3
from <= UINT32_MAX / ElementSize,2,1,3
"JSID_IS_EMPTY(propid_), hasMissingSlot()",2,1,3
slot >= numFixedSlots(),2,1,3
!start->hasTable(),2,1,3
!pt->runtime_,2,1,3
"Capacity > 0, ""an empty fixed-size hash set is meaningless""",2,1,3
pinuse(oldfirst),2,1,3
isGroup(),2,1,3
hideScriptedCallerCount_ > 0,2,1,3
!global->compartment()->firedOnNewGlobalObject,2,1,3
nativeDeltaOut != nullptr,2,1,3
"isMemoryOrEffectiveAddress() && other.isGeneralReg(), base() != other.reg()",2,1,3
pool->m_allocation.pages,2,1,3
!callObjShape_,2,1,3
IsValidAsmJSHeapLength(mask + 1),2,1,3
(instr & kConstantPoolMarkerMask) == kConstantPoolMarker,2,1,3
u <= &inputs_[numOperands() - 1],2,1,3
"session, je2->bloom == NULL",2,1,3
result == jit::JitExec_Ok,2,1,3
!runtimeFromMainThread()->isHeapBusy(),2,1,3
index < numConstants(),2,1,3
numSimdElems <= ScalarTypeToLength(accessType),2,1,3
!needSideEffect() && mode_ != INVALID,2,1,3
start < end_,2,1,3
needsClone(),2,1,3
ion != ION_COMPILING_SCRIPT,2,1,3
"ChunkPadSize < BytesPerArenaWithHeader, ""If the chunk padding is larger than an arena, we should have one more arena.""",2,1,3
(kind_ & ~KIND_MASK) == 0,2,1,3
"sizeof(JSFlatString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
ionScript,2,1,3
"target->type() == SpecificArray::ArrayTypeID(), ""target type and NativeType must match""",2,1,3
sz >= MIN_CHUNK_SIZE,2,1,3
"p.found(), p->value() > 0",2,1,3
_data[i].nextFreeOrSelf == i,2,1,3
hasPayload(),2,1,3
hasRegexps(),2,1,3
cx->compartment() == oldCompartment,2,1,3
"session, F_ISSET_ATOMIC(e->ref->page, WT_PAGE_EVICT_LRU)",2,1,3
"other.isMemoryOrEffectiveAddress() && isGeneralReg(), other.base() != reg()",2,1,3
GetCalleeTokenTag(token) == CalleeToken_Script,2,1,3
addendumKind() == Addendum_TypeDescr,2,1,3
!k->compartment()->options_.mergeable(),2,1,3
start + length <= base->length(),2,1,3
JSVERSION_UNKNOWN == -1,2,1,3
start >= 0,2,1,3
u->fd->bk == u,2,1,3
v->gcLowLink == Undefined,2,1,3
dataViewClassInitialized(),2,1,3
is_small(DVS),2,1,3
hash,2,1,3
scratch != rhs,3,0,3
"10078, ""nsToDatabase: db too long"", ns.size() < MaxDatabaseNameLen",2,1,3
getReservedSlot(PRIMITIVE_VALUE_SLOT).isUndefined(),2,1,3
"MIRType_Last <= ELEMENT_TYPE_MASK, ""ELEMENT_TYPE_MASK should be larger than the last MIRType""",2,1,3
lk->sl != 0,2,1,3
"getFixedSlot(CALLEE_SLOT).isObject(), getFixedSlot(CALLEE_SLOT).toObject().is<JSFunction>()",2,1,3
!isEffectful() && store->isEffectful(),2,1,3
"valid, length % AsmJSPageSize == 0",2,1,3
isFloatReg(),2,1,3
Base::has(l),2,1,3
trait == ICStub::Fallback || trait == ICStub::MonitoredFallback,2,1,3
pod.u.var.initKind_ == InitConstant,2,1,3
currentEnd_ == chunk(currentChunk_).end(),2,1,3
pos.encloses(expr->pn_pos),2,1,3
sizeof(InstMovWT) == sizeof(Instruction),2,1,3
!threadData_->gcSweeping,2,1,3
"yieldIndex == 0, getFixedSlot(YIELD_INDEX_SLOT).isUndefined()",2,1,3
lookahead < maxLookahead,2,1,3
error_message_ != nullptr,2,1,3
kind_ != Unknown,2,1,3
"session, ins != moved_ins",2,1,3
value.valueReg() != SecondScratchReg,3,0,3
static_cast<const TenuredCell*>(ptr)->isTenured(),2,1,3
ra.code() != kSPRegInternalCode,2,1,3
producer_ != nullptr,2,1,3
type != JSEXN_NONE,2,1,3
"offset - startOffset_ <= mozilla::PointerRangeSize(base_, limit_)",2,1,3
list->isKind(PNK_STATEMENTLIST),2,1,3
CAN_SIGN_EXTEND_16_32(imm),2,1,3
stmtList->isKind(PNK_STATEMENTLIST),2,1,3
hideScriptedCallerCount_ == 0,2,1,3
type() == Eval,2,1,3
"ExclusiveContext* cx, const T1& t1, const T2& t2",2,1,3
_remain.insert(data).second,2,1,3
pn_count != 0,2,1,3
hasValue() && isType(mongo::NumberLong),2,1,3
"checkAliasing, !script()->formalIsAliased(i)",2,1,3
"compartment_, compartment_->hasBeenEntered()",2,1,3
"ins->type() != MIRType_Value, type != ins->type()",2,1,3
left.begin <= left.end,2,1,3
mir_->isNewCallObject() || mir_->isNewRunOnceCallObject(),2,1,3
"mozilla::IsBaseOf<JSObject, ObjectSubclass>::value, ""ObjectSubclass must be a subclass of JSObject""",2,1,3
hasValue() && isType(mongo::Bool),2,1,3
hasValue() && isType(mongo::String),2,1,3
bailoutId < bailoutEntries_,2,1,3
site,2,1,3
(reg_size == kWRegSize) || (reg_size == kXRegSize),3,0,3
"Scalar::Float32x4 == JS_SCALARTYPEREPR_FLOAT32X4, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
hasStub(),2,1,3
"idx_ == count_, cur_ == end_",2,1,3
storage_,2,1,3
"x == NULL || !Equal(key, x->key)",2,1,3
start && end,2,1,3
pcOffset <= BaselineScript::MAX_JSSCRIPT_LENGTH,2,1,3
data_.jitFrames_.isBaselineJS(),2,1,3
"!compartment(), !zone_",2,1,3
expr->pn_pos.end <= end,2,1,3
next->prev_ == nullptr,2,1,3
u->child[1]->parent == u,2,1,3
to->empty(),2,1,3
"chunk_plus_offset(p, sz+SIZE_T_SIZE)->head == 0",2,1,3
moreAllocations(),2,1,3
"ArenaShift < 16, ""Check that we can pack offsets into uint16_t.""",2,1,3
offset < base()->length(),2,1,3
(first & ~ArenaMask) == (last & ~ArenaMask),2,1,3
map.initialized(),2,1,3
adjustedExponent >= mozilla::FloorLog2(mozilla::Abs(upper_)),2,1,3
!canBeInfiniteOrNaN(),2,1,3
"start < 0, start == -1",2,1,3
!hasFallback(),2,1,3
m_ionCodeBytes < m_allocation.size,2,1,3
!numLocations_,2,1,3
"sizeof(JSObject*) == sizeof(TaggedProto), ""TaggedProto must be binary compatible with JSObject""",2,1,3
bumpBase() <= ptr,2,1,3
head != 0,2,1,3
sizeof(Binding) == sizeof(uintptr_t),2,1,3
!isSelfHostedBuiltin(),2,1,3
pn != dn->dn_uses,2,1,3
*parserPC == this,2,1,3
frameCount_ == 0,2,1,3
curSize_ >= size,2,1,3
jcx_->temp == &tempAlloc_,2,1,3
mozilla::FloorLog2(0) == 0,2,1,3
rot == rot_,2,1,3
!map_,2,1,3
JSString::isAtom(),2,1,3
"offset > 0, relpc > offset",2,1,3
!isStatic(),2,1,3
pair.limit >= pair.start,2,1,3
!matchesInput,2,1,3
"session, p != NULL",2,1,3
CurrentThreadCanAccessRuntime(fop->runtime()),2,1,3
"native != js::proxy_Construct && native != js::CallOrConstructBoundFunction && native != js::IteratorConstructor && (!callee->is<JSFunction>() || callee->as<JSFunction>().native() != obj_construct), args.rval().isObject() && callee != &args.rval().toObject()",2,1,3
hasTraceList(),2,1,3
perftools_pthread_getspecific(heap_key_),2,1,3
sz == SIZE_T_SIZE,2,1,3
"activeContext, cx == activeContext",2,1,3
whichWord < 8,2,1,3
mode_ == TRUNCATE,2,1,3
arg <= CLOSE,2,1,3
"EnableInterruptsPseudoOpcode == jsbytecode(-1), ""EnableInterruptsPseudoOpcode must be the maximum jsbytecode value""",2,1,3
"bitsPerElement == 32 || bitsPerElement == 64, ""unexpected bitsPerElement value""",2,1,3
"IsCompatibleLIRCoercion(def->type(), as->type())",2,1,3
"entry_ == makeIndex(clasp, key, kind)",2,1,3
allowWrite(),2,1,3
cycleEndSlot_ != -1,2,1,3
next->last,2,1,3
address.base != StackPointer,2,1,3
name[0] == 'v',2,1,3
enabled(),2,1,3
size >= kStackLimitSlack * sizeof(void*),2,1,3
(int)INITIAL_NONE == 0,2,1,3
!obj->getClass()->setProperty,2,1,3
kind_ == GPR,2,1,3
!obj->getClass()->getProperty,2,1,3
"pc->sc->isFunctionBox(), pc->sc->asFunctionBox()->hasExtensibleScope()",2,1,3
!another.isEmpty(),2,1,3
nelems != 0,2,1,3
parent->right == node,2,1,3
"SpecificArray::ArrayTypeID() == target->type(), ""calling wrong setFromAnyTypedArray specialization""",2,1,3
baseReg != val.typeReg(),2,1,3
"StackTagMask >= uintptr_t(LastTag), ""The tag mask must subsume the tags.""",2,1,3
getSlotRef(CREATE_DATAVIEW_FOR_THIS).isUndefined(),2,1,3
!osiCallPointOffset_,2,1,3
"oldFrameCount_ == 0, cx->runtime()->interpreterStack().allocator_.used() == 0",2,1,3
"(INLINE_EXTENSION_CHARS_TWO_BYTE * sizeof(char16_t)) % js::gc::CellSize == 0, ""fat inline strings' char16_t characters don't exactly "" ""fill subsequent cells and thus are wasteful""",2,1,3
script != nullptr,2,1,3
"numPoolEntries, !canNotPlacePool_",2,1,3
status == jit::Method_Skipped,2,1,3
hasOptimizations(),2,1,3
atAtomsZone(rt),2,1,3
"js::detail::TypedArrayLengthSlot == LENGTH_SLOT, ""bad inlined constant in jsfriendapi.h""",2,1,3
!pn->isUsed(),2,1,3
refs != 0,2,1,3
!block->successorWithPhis(),2,1,3
min >= RoundUpToNextValidAsmJSHeapLength(0),2,1,3
hasValue() && isType(mongo::Array),2,1,3
"session, slot != NULL",2,1,3
is_uint6(bit_pos),2,1,3
nextTos <= end_,2,1,3
mir->isLowered(),2,1,3
isInvalid == 0,2,1,3
frameClass() != FrameSizeClass::None(),2,1,3
"sizeof(JSInlineString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
CurrentThreadCanAccessRuntime(script->runtimeFromMainThread()),2,1,3
1 == _remain.erase(s),2,1,3
baseReg != val.payloadReg(),2,1,3
"offsetof(NativeObject, shape_) == offsetof(shadow::Object, shape), ""shadow shape must match actual shape""",2,1,3
chunkno < numActiveChunks_,2,1,3
thenExpr,2,1,3
!isTrivial(),2,1,3
mir_->isLoadUnboxedObjectOrNull() || mir_->isLoadUnboxedString(),2,1,3
mozilla::RoundUpPow2(defaultChunkSize) == defaultChunkSize,2,1,3
shape->hasSlot(),2,1,3
isExecute(),2,1,3
"sizeof(int64_t) == kInstanceUniqueSize + kIncrementSize, ""size of term must be size of instance unique + increment""",2,1,3
*sl != 0,2,1,3
elseExpr,2,1,3
index + extra <= getDenseCapacity(),2,1,3
"session, sz < bufsize",2,1,3
isFunction() || isFFI() || isInterrupt() || isThunk(),2,1,3
u->parent->child[0] == u || u->parent->child[1] == u || *((tbinptr*)(u->parent)) == u,2,1,3
"!allowPoisoned, a",2,1,3
"0, _rs->numRecords(opCtx.get())",2,1,3
"offsetof(ObjectGroup, proto_) == offsetof(js::shadow::ObjectGroup, proto)",2,1,3
uintptr_t(result) % LIFO_ALLOC_ALIGN == 0,2,1,3
regs_.fp()->script()->compartment() == compartment(),2,1,3
"!fp->script()->isGenerator(), !fp->hasPushedSPSFrame()",2,1,3
isCachedEval() && !isActiveEval(),2,1,3
JSID_INT_MIN == 0,2,1,3
"!node->parent, node == root",2,1,3
!hasDelayedMarking,2,1,3
dn->isDefn(),2,1,3
offset->type() == MIRType_Int32,2,1,3
pn_arity == PN_CODE && getKind() == PNK_FUNCTION,2,1,3
!hasTypedArrayLengthStub_,2,1,3
(flags & TYPE_FLAG_BASE_MASK) == flags,2,1,3
e == end,2,1,3
*pc == JSOP_RESUME,2,1,3
this->kind() == kind,2,1,3
op == JSOP_INITELEM_ARRAY || op == JSOP_INITELEM_INC,2,1,3
layoutFromMode(mode()).type1 == PAYLOAD_PACKED_TAG,2,1,3
hasValue() && isType(mongo::jstOID),2,1,3
reg >= 0,2,1,3
jitinfo->aliasSet() != JSJitInfo::AliasEverything,2,1,3
!method_,2,1,3
js::GetObjectClass(obj) == &ForOfPIC::jsclass,2,1,3
dest != INVALID_OFFSET,2,1,3
is_uint6(immr),2,1,3
hasVreg(),2,1,3
"ArenaBitmapBits == ArenaBitmapWords * JS_BITS_PER_WORD, ""We assume that the part of the bitmap corresponding to the arena "" ""has the exact number of words so we do not need to deal with a word "" ""that covers bits from two arenas.""",2,1,3
base != Registers::Invalid,2,1,3
!(*this)->aliased(),2,1,3
this->nextOffset().getOffset() - canNotPlacePoolStartOffset_ <= canNotPlacePoolMaxInst_ * InstSize,2,1,3
which_ == Internal,2,1,3
round_mode == FPRoundOdd,3,0,3
len <= target->length() - offset,2,1,3
!invalid,2,1,3
!hadCollision(),2,1,3
count <= TYPE_FLAG_DOMOBJECT_COUNT_LIMIT,2,1,3
 _wi._basicWrites.size() < 20000000 ,2,1,3
scratch64.asUnsized() != value.valueReg(),3,0,3
"sizeof(JSDependentString) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
other.isCursorAtEnd(),2,1,3
key != JSProto_Object,2,1,3
"MemoryMappedCOWBitset::MaxChunkBytes == sizeof(bits), ""Validate our predicted bitset size is correct""",2,1,3
laneX < 4 && laneY < 4 && laneZ < 4 && laneW < 4,2,1,3
is(args.thisv()),2,1,3
tag == FREG,2,1,3
pn->pn_pos.begin >= pn_pos.begin,2,1,3
*pc == JSOP_SETNAME || *pc == JSOP_STRICTSETNAME || *pc == JSOP_SETGNAME || *pc == JSOP_STRICTSETGNAME,2,1,3
"lock, ""Parameter should not be null!""",2,1,3
priorResumePoint_ == nullptr,2,1,3
remainder_size == element_size,2,1,3
wordIndex < length,2,1,3
addPtr == inl + inlNext,2,1,3
name->isKind(PNK_OBJECT_PROPERTY_NAME),2,1,3
"offsetof(JSString, d.u1.flags) == offsetof(String, flags), ""shadow::String flags offset must match JSString""",2,1,3
i < Registers::Total,2,1,3
rd.code() != kSPRegInternalCode,2,1,3
lhsIsBool || rhsIsBool,2,1,3
qsize >= MIN_CHUNK_SIZE,2,1,3
"!base::is_integral<VType>::value, must_be_floating_point",3,0,3
"R2 == ValueOperand(t7, t6)",2,1,3
last_reg >= first_reg,2,1,3
!allocation_.isBogus() && !allocation_.isUse(),2,1,3
sizeof(Decimal128::Value) == 16,2,1,3
!hasIonScript(),2,1,3
snapshot->bailoutKind() == Bailout_InitialState,2,1,3
IsImmAddSub(imm),2,1,3
!*pprop,2,1,3
"offsetof(Shape, base_) == offsetof(js::shadow::Shape, base)",2,1,3
"res, type() == JitFrame_Exit || type() == JitFrame_BaselineJS",2,1,3
m_end >= m_freePtr,2,1,3
hasFlags(1 << flag),2,1,3
newOffset != (uint32_t)INVALID_OFFSET,2,1,3
"match, node.isOp(JSOP_REGEXP)",2,1,3
!allocated(),2,1,3
manipulatingDeadZones,2,1,3
!hasFlags(1 << flag),2,1,3
"!bits, !node",2,1,3
fake || ((data_ & 0xf0000000) == 0),2,1,3
*this != MIN,2,1,3
type < JSVAL_TYPE_UNKNOWN,2,1,3
uint32_t(index) < arr->length,2,1,3
getAliasSet().flags() & store->getAliasSet().flags(),2,1,3
!ObjectGroup::useSingletonForClone(fun),2,1,3
type < JSTYPE_LIMIT,2,1,3
op < JSOP_LIMIT,2,1,3
inlinePropertyTable_ == nullptr,2,1,3
num < length_,2,1,3
"m_pools.initialized(), m_pools.empty()",2,1,3
context->resolvingList == this,2,1,3
"!(flags_ & HAS_SCOPECHAIN), isFunctionFrame()",2,1,3
height > 0,2,1,3
invalidationCount_,2,1,3
sizeof(LazyScript) % js::gc::CellSize == 0,2,1,3
pc_ != nullptr,2,1,3
"fp, asInterpreterFrame() == fp",2,1,3
(capacity & (capacity - 1)) == 0,2,1,3
callee->nonLazyScript() == script,2,1,3
regs_.fp()->script()->compartment() == compartment_,2,1,3
hops_ < SCOPECOORD_HOPS_LIMIT,2,1,3
IsExtendedRegister(),2,1,3
"static_cast<VType>(-1) == -1, type_must_be_signed",3,0,3
gHelperThreadState,2,1,3
definiteProperty(),2,1,3
*ptr == 0xE9,2,1,3
hasUint(u),2,1,3
recyclable.length() < all.length(),2,1,3
"!SupportsSimd, !isSimdType()",2,1,3
!frame_->isHandlingException(),2,1,3
"_loc, loc",2,1,3
activation_->isJit(),2,1,3
pairNum >= 1,2,1,3
getReservedSlot(LOCAL_OFFSET_SLOT).isUndefined(),2,1,3
JSInlineString::lengthFits<CharT>(length),2,1,3
layoutFromMode(mode()).type2 == PAYLOAD_GPR,2,1,3
"js::gc::ChunkMarkBitmapOffset == offsetof(Chunk, bitmap), ""The hardcoded API bitmap offset must match the actual offset.""",2,1,3
!isSingleton(),2,1,3
lastStub->isFallback(),2,1,3
type != LDefinition::DOUBLE && type != LDefinition::FLOAT32,2,1,3
callee->isGenerator(),2,1,3
data_,2,1,3
body->isKind(PNK_STATEMENTLIST),2,1,3
((size_t)mem & (alignment - 1)) == 0,2,1,3
"!hadException, !cx->isExceptionPending()",2,1,3
is_uint16(imm),2,1,3
isInterpreterFrame(),2,1,3
x < 4 && y < 4 && z < 4 && w < 4,2,1,3
index < str->length(),2,1,3
"ExclusiveContext* cx, const T1& t1, const T2& t2, const T3& t3",2,1,3
native,2,1,3
defined() && type_ == Int32x4,2,1,3
(first & ~ArenaMask) == (next->first & ~ArenaMask),2,1,3
"p && !p->hasMissingSlot() && !inDictionary(), p->maybeSlot() <= maybeSlot()",2,1,3
at->next == item,2,1,3
type < JSVAL_TYPE_OBJECT,2,1,3
"offsetof(JSAtomState, undefined) + JSTYPE_LIMIT * sizeof(ImmutablePropertyNamePtr) <= sizeof(JSAtomState)",2,1,3
size_t(p.limit) <= inputLength,2,1,3
vp.isObject(),2,1,3
pairCount_ > 0,2,1,3
zeroMask < 16,2,1,3
IsInsideNursery(deref()),2,1,3
data == imm,2,1,3
"cursor, cursor->hasFreeThings()",2,1,3
((uint32_t)where & SUBPOSITION_MASK) == (uint32_t)where,2,1,3
"lazy, uninlinedIsProxy()",2,1,3
"session, btree->evict_ref == NULL && F_ISSET(btree, WT_BTREE_NO_EVICTION)",2,1,3
pn_arity == PN_NAME,2,1,3
sizeof(bool) == 1,2,1,3
now->next == nullptr && now->prev == nullptr,2,1,3
(length & kConstantPoolLengthMaxMask) == length,2,1,3
containsPC(pc),2,1,3
IsNone(),2,1,3
rn.code() != kSPRegInternalCode,2,1,3
(uintptr_t(name) & ~NAME_MASK) == 0,2,1,3
"preconditionForWriteBarrierPost(owner, kind, slot, target)",2,1,3
pn->isUsed(),2,1,3
reason_,2,1,3
"17295, ""namespaces cannot have embedded null characters"", _ns.find('\0') == std::string::npos",2,1,3
"ArenasPerChunk == 62, ""Do not accidentally change our heap's density.""",2,1,3
pair.start >= 0 && pair.limit >= 0,2,1,3
arg >= NumIntArgRegs,2,1,3
isInterpretedLazy() && u.i.s.lazy_,2,1,3
"INLINE_CHARS_BIT == String::INLINE_CHARS_BIT, ""shadow::String::INLINE_CHARS_BIT must match JSString::INLINE_CHARS_BIT""",2,1,3
is<IonDOMExitFrameLayout>(),2,1,3
getSlot(slot).isUndefined(),2,1,3
offset <= (size_t) size(),2,1,3
bits_ >= other.bits_,2,1,3
tag == REG,2,1,3
"MAX_LENGTH_LATIN1 + 1 == (sizeof(JSFatInlineString) - offsetof(JSFatInlineString, d.inlineStorageLatin1)) / sizeof(char), ""MAX_LENGTH_LATIN1 must be one less than inline Latin1 "" ""storage count""",2,1,3
hasLookahead(),3,0,3
!isInlineRange(),2,1,3
lastOffset_ < ArenaSize,2,1,3
hasDisplayURL(),2,1,3
type() == With,2,1,3
"!group->clasp()->isNative(), shape->slotSpan() == 0",2,1,3
thingSize ? last + 2 * thingSize <= next->first : last < next->first,2,1,3
"sizeof(AsmJSFrame) == 2 * sizeof(void*), ""?!""",2,1,3
"mozilla::IsPod<T>::value, ""T must be POD so that constructors (and destructors, "" ""when the LifoAlloc is freed) need not be called""",2,1,3
!first && !last,2,1,3
mode_ == NORMAL,2,1,3
!root,2,1,3
p->bk == b || chunksize(p->bk) == chunksize(p),2,1,3
run2 >= 1,2,1,3
"mozilla::tl::FloorLog2<LIFO_ALLOC_ALIGN>::value == mozilla::tl::CeilingLog2<LIFO_ALLOC_ALIGN>::value, ""LIFO_ALLOC_ALIGN must be a power of two""",2,1,3
"ObjectElements::VALUES_PER_HEADER * sizeof(HeapSlot) == sizeof(ObjectElements), ""ObjectElements doesn't fit in the given number of slots""",2,1,3
buffer_ <= end_,2,1,3
hasNextCallee(),2,1,3
n <= size_t(limit - cursor),2,1,3
type() == Block,2,1,3
shape->getObjectClass() != &UnboxedPlainObject::class_,2,1,3
allowGC == NoGC,2,1,3
v.isString(),2,1,3
"Simd128DataSize == 4 * sizeof(float), ""SIMD data should be able to contain float32x4""",2,1,3
"!hasInt32LowerBound_, lower_ == JSVAL_INT_MIN",2,1,3
"global_, global_->compartment() == this",2,1,3
!pn_defn,2,1,3
next == m->top || is_inuse(next),2,1,3
end <= getDenseInitializedLength(),2,1,3
"17246, ""Collection names cannot start with '.'"", collectionName.empty() || collectionName[0] != '.'",2,1,3
ObjectElements::VALUES_PER_HEADER == 2,2,1,3
 _wi._basicWrites.size() < 2000000 ,2,1,3
kind < Kind_Invalid,2,1,3
thingsPerArena && thingsPerArena <= MaxThingsPerArena,2,1,3
"!res, !ion || ion == ION_DISABLED_SCRIPT",2,1,3
"mark_, ""Unarking unmarked block""",2,1,3
callSiteObj->isKind(PNK_CALLSITEOBJ),2,1,3
previous->next() == stub,2,1,3
cycleBeginSlot_ != -1,2,1,3
"!(std::is_same<T, mongo::Status>::value), ""StatusWith<Status> is banned.""",2,1,3
i < _data.size(),2,1,3
!stub->next(),2,1,3
kind_ == Imm,2,1,3
isKind(PNK_STRING),2,1,3
returnType == Type_Bool || returnType == Type_Object,2,1,3
new_action->next_ == nullptr,2,1,3
"session, F_ISSET(session, WT_SESSION_LOCKED_TABLE)",3,0,3
canSetDefinite(slot),2,1,3
(size % sizeof(Value)) == 0,2,1,3
kind() == MUST_REUSE_INPUT,2,1,3
"consumer_, ""Resetting MUse without a consumer""",2,1,3
lir->getOperand(operand)->toUse()->usedAtStart(),2,1,3
"session, number != 0 && size != 0",2,1,3
index < numArgs(),2,1,3
callee.nonLazyScript() == script,2,1,3
zone->runtimeFromAnyThread()->gc.nursery.isEmpty(),2,1,3
script()->isGenerator(),2,1,3
size % sizeof(void*) == 0,2,1,3
numFixedSlots < SLOTS_TO_THING_KIND_LIMIT,2,1,3
IsPowerOfTwo(numElems),2,1,3
!inDictionaryMode(),2,1,3
"sizeof(JSAtom) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
flags + strlen(flags) == pattern + _storage.getString().size(),2,1,3
disassembled == expected,2,1,3
hasIntroductionOffset(),2,1,3
"sizeof(Chunk) == ChunkSize, ""Ensure the hardcoded chunk size definition actually matches the struct.""",2,1,3
obj->as<NativeObject>().containsPure(shape),2,1,3
isConstantValue(),2,1,3
to <= UINT32_MAX / ElementSize,2,1,3
local >= localOffset(),2,1,3
"10088, ""nsToDatabase: db too long"", i < static_cast<size_t>(MaxDatabaseNameLen)",2,1,3
count < SET_CAPACITY_OVERFLOW,2,1,3
node->left->parent == node,2,1,3
LIMIT <= 8,2,1,3
scriptSource_,2,1,3
!getReservedSlot(ELEMENT_PROPERTY_SLOT).isMagic(),2,1,3
tsize >= minsize_for_tree_index(idx),2,1,3
type != MIRType_Value && type != MIRType_None,2,1,3
code->raw() == buffer,2,1,3
"!group->clasp()->isNative(), !group->clasp()->hasPrivate()",2,1,3
"17235, ""'.' is an invalid character in a database name"", dbName.find('.') == std::string::npos",2,1,3
!bound_,2,1,3
!isOwned() && !unowned_,2,1,3
"ArenaZoneOffset == offsetof(ArenaHeader, zone), ""The hardcoded API zone offset must match the actual offset.""",2,1,3
pn->isArity(PN_LIST),2,1,3
act->isInterpreter(),2,1,3
"valid, length == RoundUpToNextValidAsmJSHeapLength(length)",2,1,3
"(1 << NumCategories) - 1 == Any, ""NumCategories must include all flags present in Any""",2,1,3
!IsAnyTypedArray(obj),2,1,3
color == gc::BLACK,2,1,3
shape->numFixedSlots() == 0,2,1,3
"p && !inDictionary(), hasSlot() == (p->maybeSlot() != maybeSlot())",2,1,3
"cacheable, !obj->getOps()->lookupProperty",2,1,3
isGeneralReg(),2,1,3
m->dvsize >= MIN_CHUNK_SIZE,2,1,3
mozilla::FloorLog2(JSVAL_INT_MAX) == 30,2,1,3
script_->containsPC(pc),2,1,3
!TokenBuf::isRawEOLChar(expect),2,1,3
!converting,2,1,3
lastToken == String,2,1,3
index < cacheEntries_,2,1,3
successors_.length() < (size_t)(high_ - low_ + 2),2,1,3
pn_blockid == blockid,2,1,3
"len > 16, dtmUpdate == WriteBack",2,1,3
!pod.hasFixedMinHeapLength_,2,1,3
!(offset & ~((1U << SN_OFFSET_BITS) - 1)),2,1,3
aheader->zone->arenas.isSynchronizedFreeList(kind),2,1,3
!baseobj->inDictionaryMode(),2,1,3
uint32_t(reg_) < Codes::TotalPhys,3,0,3
bufobj,2,1,3
iter->next()->next() == nullptr,2,1,3
oldFrameCount_ == cx->runtime()->interpreterStack().frameCount_,2,1,3
length < INT32_MAX,2,1,3
hasCallObj(),2,1,3
obj->isNative(),2,1,3
inUnsafeRegion > 0,2,1,3
CurrentThreadCanAccessRuntime(rt),2,1,3
isBaselineFrame(),2,1,3
"!span->isEmpty(), span->isWithinArena(arenaAddress())",2,1,3
offset % sizeof(Value) == 0,2,1,3
uintptr_t(newCur) <= uintptr_t(end),2,1,3
nslots == numFixedSlots() + (hasPrivate() ? 1 : 0),2,1,3
color == gc::GRAY,2,1,3
"offsetof(NativeObject, slots_) == offsetof(shadow::Object, slots), ""shadow slots must match actual slots""",2,1,3
!isNullLike(thing),2,1,3
color < aheader->getThingSize() / CellSize,2,1,3
!isAllocAllowed(),2,1,3
v.isUndefined(),2,1,3
stub,2,1,3
mir->canEmitAtUses(),2,1,3
!logRoot.hasChildren(),2,1,3
i < getObjectCount(),2,1,3
pc_,2,1,3
!scope->getOps()->setProperty,2,1,3
"offsetof(IonDOMMethodExitFrameLayout, loCalleeResult_) == (offsetof(IonDOMMethodExitFrameLayout, argc_) + sizeof(uintptr_t))",2,1,3
CalleeTokenIsFunction(token),2,1,3
disableStrictProxyCheckingCount > 0,2,1,3
adjustedExponent >= mozilla::FloorLog2(mozilla::Abs(lower_)),2,1,3
jsbytecode* pc,2,1,3
"SCOPECOORD_HOPS_BITS <= 32, ""We have enough bits below""",2,1,3
is_int7(scaled_imm7),2,1,3
sizeof(InstBranchReg) == sizeof(Instruction),2,1,3
"base::is_integral<VType>::value, use_Fabs_for_float_types",3,0,3
rt->isHeapBusy(),2,1,3
"bin_find(m, m->top) == 0",2,1,3
!matches[0].isUndefined(),2,1,3
isControlInstruction(),2,1,3
"generation == types.generation, outputIndex == output - types.compilerOutputs->begin()",2,1,3
"session, r->page_size >= (WT_PAGE_HEADER_BYTE_SIZE(btree) + len)",2,1,3
"allowGC == CanGC, ""the context-accepting constructor should only be used "" ""in CanGC code""",2,1,3
reg <= kMaxRegister,2,1,3
size >= request,2,1,3
"yieldIndex != 0, isRunning() || isClosing()",2,1,3
"group->clasp()->flags & JSCLASS_BACKGROUND_FINALIZE, IsBackgroundFinalized(kind)",2,1,3
typeid(*genericRCPtr) == typeid(const RCDBRef),2,1,3
info().inlineScriptTree()->script()->containsPC(pc),2,1,3
canNotPlacePool_,2,1,3
!hasIonReturnOverride(),2,1,3
runtime->mainThreadHasExclusiveAccess,2,1,3
offset < runtimeSize_,2,1,3
"10437, ""unknown exception"", false",2,1,3
!IsBackgroundFinalized(kind),2,1,3
"cx, vp",2,1,3
!m_oom,2,1,3
getSlotRef(THROWTYPEERROR).isUndefined(),2,1,3
!osrBlock_,2,1,3
"js::gc::ChunkRuntimeOffset == offsetof(Chunk, info) + offsetof(ChunkInfo, trailer) + offsetof(ChunkTrailer, runtime), ""The hardcoded API runtime offset must match the actual offset.""",2,1,3
"MAX_LENGTH_TWO_BYTE + 1 == (sizeof(JSFatInlineString) - offsetof(JSFatInlineString, d.inlineStorageTwoByte)) / sizeof(char16_t), ""MAX_LENGTH_TWO_BYTE must be one less than inline "" ""char16_t storage count""",2,1,3
scriptList,2,1,3
block->lir()->rbegin()->numSuccessors() == 1,2,1,3
jrt_->mutatingBackedgeList_,2,1,3
hasConsts(),2,1,3
"STATEMENT, EXCEPTION_TYPE, ([](const EXCEPTION_TYPE& ex) { return (EXPECTED_CODE) == ex.getCode() && ::mongo::StringData(ex.what()) == ::mongo::StringData(EXPECTED_WHAT); })",2,1,3
fin,2,1,3
"pt->runtimeIfOnOwnerThread(), pt->suppressGC",2,1,3
field,2,1,3
is_uint1(shift_amount),2,1,3
lazyIndex != size_t(-1),2,1,3
funMaybeLazy(),2,1,3
keyNonZero(key),3,0,3
sizeof(uint64_t) == sizeof(unsigned long long),2,1,3
hasValue() && isType(mongo::Date),2,1,3
"session, !F_ISSET(reuse, WT_OVFL_REUSE_JUST_ADDED)",2,1,3
"checkLexical, !IsUninitializedLexical(obj.aliasedVar(sc))",2,1,3
!id_,2,1,3
monitorFallback->isTypeMonitor_Fallback(),2,1,3
IsImmediate(),2,1,3
"sizeof(Instruction) == 4, ""Size of Instruction class has to be 4 bytes.""",2,1,3
getConstructor(key).isUndefined() || getConstructor(key).isObject(),2,1,3
std::isnan(rhs),2,1,3
left.end <= right.begin,2,1,3
"ds->session, S2BT_SAFE(ds->session) != NULL",3,0,3
shift < reg_size,2,1,3
i < NumShapes,2,1,3
pn_blockid == 0,2,1,3
"consumer_, ""Clearing MUse without a consumer""",2,1,3
entryCount_ > 0,2,1,3
"isTenured(), kind == asTenured().getAllocKind()",2,1,3
"outParam != Type_Void, returnType == Type_Bool",2,1,3
fun_->isTenured(),2,1,3
CurrentThreadCanAccessZone(zone),2,1,3
count <= OBJECT_FLAG_PROPERTY_COUNT_LIMIT,2,1,3
byteSrc <= viewByteLength - byteSize,2,1,3
current == mir->block()->lir(),2,1,3
dataType == DataParent,2,1,3
"NumDefinitionFlagBits == NumListFlagBits, ""Assumed below to achieve consistent blockid offset""",2,1,3
!lhs.isMagic(),2,1,3
IsSimdType(left->type()),2,1,3
baselineSetPropReturnAddr_ != nullptr,2,1,3
"last && C::compare(v, last->item) == 0",2,1,3
IsNumberType(num->type()),2,1,3
"sizeof(BaselineScript) % sizeof(uintptr_t) == 0, ""The data attached to the script must be aligned for fast JIT access.""",2,1,3
ref,2,1,3
"sizeof(PropertyName) == sizeof(JSString), ""string subclasses must be binary-compatible with JSString""",2,1,3
"willDestroy, m_refCount == 1",2,1,3
JSInlineString::lengthFits<CharT>(len),2,1,3
thingSize >= sizeof(FreeSpan),2,1,3
cx_->runtime_->activation_ == this,2,1,3
type != MIRType_ObjectOrNull,2,1,3
use_mmap(m),2,1,3
m_refCount != 0,2,1,3
slots()->type() == MIRType_Slots,2,1,3
shape != SHAPE_REMOVED,2,1,3
atom == cx->names().close,2,1,3
savedFrameChain_ > 0,2,1,3
(valueRegs().bits() & ~liveRegs().gprs().bits()) == 0,2,1,3
tag <= CalleeToken_Script,2,1,3
!is_inuse(u),2,1,3
regs_.fp() != entryFrame_,2,1,3
(gc->stats.currentPhase() == gcstats::PHASE_NONE) || (gc->stats.currentPhase() == gcstats::PHASE_GC_BEGIN) || (gc->stats.currentPhase() == gcstats::PHASE_GC_END),2,1,3
slot < stackDepth(),2,1,3
JSType(extra_) == type,2,1,3
isDefinition(),2,1,3
hasDynamicElements(),2,1,3
dest.typeReg() != dest.payloadReg(),2,1,3
hasInt32LowerBound(),2,1,3
layoutFromMode(mode()).type1 == PAYLOAD_GPR,2,1,3
thisArg_,2,1,3
array <= end,2,1,3
!aheader->hasFreeThings(),2,1,3
IsValidKind(kind),2,1,3
((*x >= 0x80 && *x <= 0x8F) && *(x - 1) == 0x0F) || (*x == 0xE9),2,1,3
scratch32.asUnsized() != address.index,3,0,3
"16886, ""nsToCollectionSubstring: no ."", i != std::string::npos",2,1,3
type == LDefinition::TYPE || type == LDefinition::PAYLOAD,2,1,3
"kind == Load || kind == LoadSext32, otherOperand.kind() != OtherOperand::Imm",2,1,3
backgroundFinalizeState[i] == BFS_DONE,2,1,3
fun()->needsCallObject(),3,0,3
CONSTANT <= KIND_MASK,2,1,3
color != BLACK,2,1,3
i < numBlocks_,2,1,3
stubCount_,2,1,3
i < numEntrySlots(),2,1,3
newRequirement.kind() != Requirement::MUST_REUSE_INPUT,2,1,3
isRegister_,2,1,3
name == fi->name(),2,1,3
inlNext == InlineElems,2,1,3
malloc_usable_size(p) >= 256,2,1,3
"9005, std::string(""invoke failed: "") + getError()",2,1,3
sizeof(InstBranchImm) == sizeof(Instruction),2,1,3
other->bound(),2,1,3
"offsetof(U, n.native) == offsetof(U, nativeOrScript), ""U::nativeOrScript must be at the same offset as "" ""native""",2,1,3
!runtime->mainThreadHasExclusiveAccess,2,1,3
obj->is<js::ProxyObject>(),2,1,3
"session, sizeof(WT_LOG_DESC) < log->allocsize",2,1,3
isShape(),2,1,3
policy() == FIXED,2,1,3
"this != &rhs, ""self-move disallowed""",3,0,3
gcBytes_ >= ArenaSize,2,1,3
static_cast<TenuredCell*>(ptr)->isTenured(),2,1,3
hasYieldOffsets(),2,1,3
safepoint && snapshot,2,1,3
nextInsn <= globalData,2,1,3
"offsetof(JSString, d.s.u2.nonInlineCharsTwoByte) == offsetof(String, nonInlineCharsTwoByte), ""shadow::String nonInlineChars offset must match JSString""",2,1,3
is_uint15(imm15),2,1,3
rs == RS,2,1,3
numBlockScoped < LOCALNO_LIMIT,2,1,3
*defIter_ != block()->lastIns(),2,1,3
(data_ & 0xf0000000) == 0,2,1,3
u->parent != u,2,1,3
CAN_ZERO_EXTEND_16_32(imm),2,1,3
nbytes <= INLINE_BUFFER_LIMIT,2,1,3
table_ && isOwned(),2,1,3
slot_ < SCOPECOORD_SLOT_LIMIT,2,1,3
"EnableInterruptsPseudoOpcode >= JSOP_LIMIT, ""EnableInterruptsPseudoOpcode must be greater than any opcode""",2,1,3
u->child[1] != u,2,1,3
"sizeof(NativeObject) == sizeof(JSObject_Slots0), ""native object size must match GC thing size""",2,1,3
isInited,2,1,3
input && shared,2,1,3
sign == 1 || sign == -1,2,1,3
type != JSVAL_TYPE_MAGIC,2,1,3
runtimeFromMainThread()->isHeapBusy(),2,1,3
mozilla::ArrayLength(toExtended()->extendedSlots) == 2,2,1,3
!auxNextLink && !allocatedDuringIncremental,2,1,3
this != runtime()->defaultFreeOp(),2,1,3
"SRC_XDELTA == 24, ""SRC_XDELTA should be 24""",2,1,3
next->prev_foot == sz,2,1,3
BaselineScript::MAX_JSSCRIPT_LENGTH <= (1u << 28) - 1,2,1,3
(idx_ < count_) == (cur_ < end_),2,1,3
values == nullptr,2,1,3
pcOffsetOut,2,1,3
data_ < end_,2,1,3
firstOffset_ <= lastOffset_,2,1,3
act->cx() == this,2,1,3
obj->group() == group,2,1,3
remainder_size == request2size(sizes[i]),2,1,3
IsNumberType(type) || IsSimdType(type),2,1,3
arg < nargs(),2,1,3
"offset == static_cast<int32_t>(offset), ""offset is too great for a 32-bit relocation""",2,1,3
bit == bit_,2,1,3
untyped,2,1,3
node == root,2,1,3
"AreSameSizeAndType(reg1, reg2, reg3, reg4)",2,1,3
lastq == 0 || is_inuse(lastq),2,1,3
(flagsArg & ~CONSTRUCTING) == 0,2,1,3
"bin_find(m, m->dv) == 0",2,1,3
kind == PNK_BREAK || kind == PNK_CONTINUE,2,1,3
!cycleBegin_,2,1,3
!Base::has(k),2,1,3
"preconditionForSet(owner, kind, slot)",2,1,3
canRemoveLastProperty(),2,1,3
next(),2,1,3
u->child[0] == 0,2,1,3
right.begin <= right.end,2,1,3
"offsetof(ProxyObject, data) == ProxyDataOffset, ""proxy object layout must match shadow interface""",2,1,3
jitinfo->type() == JSJitInfo::Getter,2,1,3
args.thisv().isMagic(),2,1,3
!(addr & StackTagMask),2,1,3
index == cacheList_.back(),2,1,3
v.isNumber(),2,1,3
fpcr().RMode() == FPTieEven,2,1,3
(last - first) % (thingSize ? thingSize : CellSize) == 0,2,1,3
kind() == Stack,2,1,3
"session, kv->len == kv->cell_len + kv->buf.size",2,1,3
!proto || isObject(),2,1,3
"!group->clasp()->isNative(), JSCLASS_RESERVED_SLOTS(group->clasp()) == 0",2,1,3
consumer_,2,1,3
"ArenaSize <= 4096, ""When increasing the Arena size, please consider how"" "" this will affect the size of a SortedArenaList.""",2,1,3
body->pn_pos.end <= pos.end,2,1,3
u->child[0] != u,2,1,3
node->right->parent == node,2,1,3
slot > 0 && slot <= int32_t(graph.localSlotCount()),2,1,3
activeCompilations,2,1,3
kind != LegacyGenerator,2,1,3
"offsetof(JSString, d.s.u2.nonInlineCharsTwoByte) == offsetof(JSString, d.s.u2.nonInlineCharsLatin1), ""nonInlineCharsTwoByte and nonInlineCharsLatin1 must have same offset""",2,1,3
(imm & ~(0xff)) == 0,2,1,3
threadData_->gcSweeping,2,1,3
"src >= dst, (size_t) (src - dst) >= len",2,1,3
NewObjectCache::MAX_OBJ_SIZE == sizeof(JSObject_Slots16),2,1,3
hops < SCOPECOORD_HOPS_LIMIT,2,1,3
level < Optimization_Count,2,1,3
obj->is<js::RegExpObject>(),2,1,3
assertedRange,2,1,3
JSOp(*pc) == JSOP_LOOPENTRY,2,1,3
tail,2,1,3
JOF_OPTYPE(JSOp(*pc)) == JOF_SCOPECOORD,2,1,3
max <= pod.maxHeapLength_,2,1,3
!hasUncompiledScript(),2,1,3
it._position >= 0,2,1,3
OOM_maxAllocations == UINT32_MAX,3,0,3
!allocatedDuringIncremental,2,1,3
" STATEMENT, EXCEPTION_TYPE, ::mongo::stdx::bind(::mongo::unittest::alwaysTrue)",2,1,3
IsSimdType(op->type()),2,1,3
getFixedSlot(CALLEE_SLOT).isObjectOrNull(),2,1,3
kind() == GC_THING,2,1,3
block_,2,1,3
script->containsPC(*ppc),2,1,3
type == GetCurCollectionType(),2,1,3
!lexicalCheck_,2,1,3
pn_used || isDeoptimized(),2,1,3
"nToInsert, _rs->numRecords(opCtx.get())",2,1,3
size < kMaxBytesNeeded,2,1,3
"!head_, cursorp_ == &head_",2,1,3
obj->type() == type,2,1,3
p->bk->fd == p,2,1,3
nfree <= thingsPerArena_,2,1,3
i < script->functionNonDelazifying()->nargs(),2,1,3
!(uintptr_t(aheader) & ArenaMask),2,1,3
(char*)oldfirst > (char*)q,2,1,3
rt.code() != kSPRegInternalCode,2,1,3
"session, keyp->size == sizeof(uint64_t)",2,1,3
data == data_,2,1,3
gc->numActiveZoneIters,2,1,3
pn_defn || pn_arity == PN_CODE || pn_arity == PN_NAME,2,1,3
bytecodeMap[mid] == offset || mid == top,2,1,3
code()[0] == JSOP_ARGUMENTS,2,1,3
"sizeof(JSFatInlineString) % js::gc::CellSize == 0, ""fat inline strings shouldn't waste space up to the next cell "" ""boundary""",2,1,3
isDependent() || isRope(),2,1,3
hasFallbackStub_,2,1,3
ins->type() != MIRType_Value,2,1,3
fullGCForAtomsRequested_,2,1,3
name->pn_atom == expr->pn_atom,2,1,3
(reinterpret_cast<uintptr_t>(static_cast<Shape*>(shape)) & TAG) == 0,2,1,3
count >= 2,2,1,3
pod.hasFixedMinHeapLength_,2,1,3
src0.size() == 16,3,0,3
headerSize_ == headerSize,2,1,3
!templateScope_,2,1,3
scratch64.asUnsized() != src.index,3,0,3
!p,2,1,3
a.isGeneralReg() || a.isFloatReg(),2,1,3
"std::is_nothrow_destructible<T>::value, ""Decorations must be nothrow destructible""",2,1,3
hasLastIns(),2,1,3
is<LazyLinkExitFrameLayout>(),2,1,3
reinterpret_cast<const void*>(uintptr_t(disp_)) == addr,2,1,3
"session, log->alloc_lsn.l.file >= log->write_lsn.l.file",2,1,3
"!script->compartment()->options().invisibleToDebugger() && !script->selfHosted(), script->compartment()->firedOnNewGlobalObject",2,1,3
"Simd128DataSize == 2 * sizeof(double), ""SIMD data should be able to contain float64x2""",2,1,3
!((Equal | NotEqual | Above | AboveOrEqual | Below | BelowOrEqual | Parity | NoParity) & DoubleConditionBits),2,1,3
powerType == MIRType_Double || powerType == MIRType_Int32,2,1,3
from.offset() != -1,2,1,3
type >= JSEXN_ERR,2,1,3
script() && funMaybeLazy(),2,1,3
icEntry_ == other.icEntry_,2,1,3
owner_,2,1,3
cond == Zero || cond == NonZero,2,1,3
k == r.front().key(),2,1,3
layoutFromMode(mode()).type2 == PAYLOAD_STACK_OFFSET,2,1,3
"offsetof(InterpreterFrame, rval_) % sizeof(Value) == 0",2,1,3
kind == CodeLabel || kind == RawPointer,2,1,3
cx->compartment() == compartment(),2,1,3
"base->hasTwoByteChars(), isTwoByte()",2,1,3
kind() == REG,2,1,3
laneX < 8 && laneY < 8 && laneZ < 8 && laneW < 8,2,1,3
LZ4_STREAMSIZE >= sizeof(LZ4_stream_t_internal),2,1,3
"IsAnyTypedArray(source), ""use setFromNonTypedArray""",2,1,3
"offsetof(U, n.native) == offsetof(U, i.s.script_), ""native and script pointers must be in the same spot "" ""for offsetOfNativeOrScript() have any sense""",2,1,3
m_regexpCodeBytes < m_allocation.size,2,1,3
"ArenaBitmapBytes * ArenasPerChunk == sizeof(ChunkBitmap), ""Ensure our ChunkBitmap actually covers all arenas.""",2,1,3
"js::gc::ChunkMarkBitmapBits == ArenaBitmapBits * ArenasPerChunk, ""Ensure that the mark bitmap has the right number of bits.""",2,1,3
isBogusTemp(),2,1,3
m->footprint <= m->max_footprint,2,1,3
limit >= start,2,1,3
!pn->pn_defn,2,1,3
last == root,2,1,3
"onNamedLambda, obj->template is<JSFunction>()",2,1,3
hasJitcodeGlobalTable(),2,1,3
!constraintList,2,1,3
(len & (mparams.page_size-SIZE_T_ONE)) == 0,2,1,3
"sizeof(TypeScript) == sizeof(typeArray_) + offsetof(TypeScript, typeArray_)",2,1,3
lower_ <= upper_,2,1,3
sweepIndex_ != INVALID_SWEEP_INDEX,2,1,3
inited == !getPrototype(key).isUndefined(),2,1,3
!other->markCount,2,1,3
Scalar::isSimdType(accessType_),2,1,3
regionTable,2,1,3
"offsetof(JSString, d.inlineStorageLatin1) == offsetof(String, inlineStorageLatin1), ""shadow::String inlineStorage offset must match JSString""",2,1,3
"!consumer_, ""Initializing MUse that already has a consumer""",2,1,3
"flagsDontCheckGeneration() & OBJECT_FLAG_UNKNOWN_PROPERTIES, hasAllFlagsDontCheckGeneration(OBJECT_FLAG_DYNAMIC_MASK)",2,1,3
numArgs() == numOperands() - 1,2,1,3
alloc_,2,1,3
threadlocal_data_.heap,2,1,3
!stub->next_,2,1,3
"(INLINE_EXTENSION_CHARS_LATIN1 * sizeof(char)) % js::gc::CellSize == 0, ""fat inline strings' Latin1 characters don't exactly "" ""fill subsequent cells and thus are wasteful""",2,1,3
instruction < 0x80000000u,2,1,3
i < getPropertyCount(),2,1,3
"offsetof(JSString, d.inlineStorageTwoByte) == offsetof(String, inlineStorageTwoByte), ""shadow::String inlineStorage offset must match JSString""",2,1,3
m_refCount,2,1,3
matches[0].limit <= int(matchesInput->length()),2,1,3
fp_->script()->nfixed() + depth <= fp_->script()->nslots(),2,1,3
IsShiftInScaleRange(i),2,1,3
isInside((void*)*ref),2,1,3
offset <= (uint32_t)INT32_MAX,2,1,3
last->id(),2,1,3
"maxAllocations >= 0 && maxAllocations < UINT32_MAX, ""alloc count + oom limit exceeds range, your oom limit is probably too large""",3,0,3
src != dest.valueReg(),2,1,3
sizeof(InstDTR) == sizeof(Instruction),2,1,3
numBlockScoped >= numBlockScoped_,2,1,3
dtmLastReg >= 0,2,1,3
isDependent(),2,1,3
nfixed == numFixedSlots(),2,1,3
"10333, ""Invalid field name"", size < size_t(maxLen - 1)",2,1,3
!outerResumePoint_,2,1,3
rejoinAddr != nullptr,2,1,3
"index == Registers::Invalid, scale == 0",2,1,3
!pnu->isDefn(),2,1,3
!isAnyObject() && !isUnknown(),2,1,3
mark <= bump,2,1,3
i < capacity(),2,1,3
"isSingleton(), name",2,1,3
isHash(),2,1,3
firstMonitorStub_ && firstMonitorStub_->isTypeMonitor_Fallback(),2,1,3
predictionKind() == Descr,2,1,3
stub == stubs_,2,1,3
res.getStatus(),2,1,3
"entryFrame_->isEvalFrame(), state.script()->isActiveEval()",2,1,3
ExclusiveAccessLock,2,1,3
isLoopBackedge(),2,1,3
!shouldConvertDoubleElements(),2,1,3
isSingleton(),2,1,3
!is_inuse(p),2,1,3
"C::compare(leftMaximum->item, node->item) < 0",2,1,3
isPrimitive(),2,1,3
newprevsize >= MIN_CHUNK_SIZE,2,1,3
!isEmptyShape(),2,1,3
"callerTree, callerTree->script()->containsPC(callerPc)",2,1,3
is_uint5(imm),2,1,3
kind() == MEM_ADDRESS32,2,1,3
size >= BaselineFrame::FramePointerOffset + BaselineFrame::Size(),2,1,3
"paddingBits < bitsPerElement, ""More padding bits than expected.""",2,1,3
CAN_ZERO_EXTEND_8_32(imm),2,1,3
slot < PROXY_EXTRA_SLOTS,2,1,3
slot < SCOPECOORD_SLOT_LIMIT,2,1,3
isExternal(),2,1,3
height <= kMaxHeight,2,1,3
"table_, isOwned()",2,1,3
callee_.which() == Callee::Dynamic,2,1,3
freed_.empty(),2,1,3
lhsIsBool_ || rhsIsBool_,2,1,3
(u.reflags & AllFlags) == u.reflags,2,1,3
base->type() == MIRType_Int32,2,1,3
"q == m->dv || bin_find(m, q)",2,1,3
"sizeof(JSValueType) == 1, ""JSValueType should fit in one byte""",2,1,3
count <= UINT32_MAX / ElementSize,2,1,3
alloc->isUse(),2,1,3
index < mozilla::ArrayLength(names),2,1,3
kind == TypeMonitor_PrimitiveSet || kind == TypeUpdate_PrimitiveSet,2,1,3
m_smallPools.empty(),2,1,3
((sizeof(BaselineFrame) + BaselineFrame::FramePointerOffset) % 8) == 0,2,1,3
scale >= 0 && scale < 4,2,1,3
snapshotOffset_ == INVALID_SNAPSHOT_OFFSET,2,1,3
chunksize(p) >= nb,2,1,3
count < LINEAR_SEARCHES_MAX,2,1,3
uintptr_t(cur) <= uintptr_t(end),2,1,3
varobj->isQualifiedVarObj(),2,1,3
next_,2,1,3
begin < UINT32_MAX / elementSize,2,1,3
!obj->empty(),2,1,3
"session, WT_META_TRACKING(session)",2,1,3
"sizeof(ProxyObject) == sizeof(JSObject_Slots0), ""proxy object size must match GC thing size""",2,1,3
map.count() == inlCount,2,1,3
"!hasInt32LowerBound_ || !hasInt32UpperBound_, adjustedExponent >= MaxInt32Exponent",2,1,3
JSString::isExtensible(),2,1,3
pairNum >= 1 && pairNum < matches.pairCount(),2,1,3
block->needsClone(),2,1,3
"head, head->getAllocKind() == aheader->getAllocKind()",2,1,3
!auxNextLink,2,1,3
last->numDefs() == 0,2,1,3
savedCallerFun(),2,1,3
lastToken == Number,2,1,3
nfences >= 2,2,1,3
!argsObjAliasesFormals(),2,1,3
int32_t(offset) == offset,2,1,3
!proto->is<GlobalObject>(),2,1,3
from,3,0,3
start(),2,1,3
class_ != NO_FRAME_SIZE_CLASS_ID,2,1,3
current <= end,2,1,3
index >= startArgSlot(),2,1,3
"name_, name_->isTenured()",2,1,3
!is_small(sz),2,1,3
(lastMonitorStubPtrAddr_ != nullptr) == (numOptimizedMonitorStubs_ || !hasFallbackStub_),2,1,3
!(pn->pn_dflags & flag),2,1,3
pc,2,1,3
s < STAT_LIMIT,2,1,3
mir->type() != MIRType_Value,2,1,3
addendumKind() == Addendum_UnboxedLayout,2,1,3
start + length <= baseArg->length(),2,1,3
pnu->isUsed(),2,1,3
"!allowPoisoned, ptr",2,1,3
pcOffset_ == pcOffset,2,1,3
"session, cindex->child->key.size > idxkey->size",2,1,3
sizeof(HashNumber) == 4,2,1,3
ClassCanHaveFixedData(getClass()),2,1,3
bool(block->entryResumePoint()) == atResumePoint(),2,1,3
data_.state_ == INTERP,2,1,3
!getSlot(slot).isUndefined(),2,1,3
"Scalar::Float32 == JS_SCALARTYPEREPR_FLOAT32, ""TypedObjectConstants.h must be consistent with Scalar::Type""",2,1,3
getSlotRef(slot).isUndefined(),2,1,3
calleev.isObjectOrNull(),2,1,3
fpcr().FZ() == 0,2,1,3
"mozilla::IsBaseOf<IonCache, T>::value, ""T must inherit from IonCache""",2,1,3
kind() == MEM_REG_DISP,2,1,3
end <= matchesInput->length(),2,1,3
(pc_ >= buffer_) && (pc_ < (buffer_ + buffer_size_)),1,1,2
location_ == NULL || reinterpret_cast<Address>(*location_) != kZapValue,1,1,2
target != NULL,1,1,2
s.size() < sizeof(_hbmsg),1,1,2
holderShape_,2,0,2
"hasIonScript(), hasBaselineScript()",1,1,2
interval->numRanges(),1,1,2
" 10081 , ""too many namespaces/collections"", ht->put(n, details)",1,1,2
!instance_descriptors()->IsEmpty(),1,1,2
" 10029 , ""bad db name [1]"", *nm != '.' ",1,1,2
uniq.IsInitialized(),1,1,2
"session, memcmp(session->dhandle->name, ""file:"", strlen(""file:"")) == 0",1,1,2
" 10324 , ""Invalid CodeWScope string size"", strSizeWNull > 0 && (strSizeWNull - 1) == strnlen( codeWScopeCode(), strSizeWNull ) ",1,1,2
pause_count_ > 0,1,1,2
aIndex == MinIndex || aIndex > MinIndex,2,0,2
!result || IsAccessCheckNeeded(),1,1,2
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC,1,1,2
block->predecessors()->length() == pred_counts_[block->block_id()],1,1,2
"13079, ""path to unix socket too long"", strlen(iporhost) < sizeof(as<sockaddr_un>().sun_path)",1,1,2
 _cs.RecursionCount == 1 ,1,1,2
"result, value >= kMinValue && value <= kMaxValue",1,1,2
InstructionType() == kJumpType,1,1,2
data_->get(static_cast<PerThreadAssertType>(i)),1,1,2
sizeof(pad) == kInstructionSize,1,1,2
IsOptimizing(),1,1,2
!(op & (SLJIT_INT_OP | SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
Assembler::IsTstImmediate(masm->instr_at(pos)),1,1,2
"session, backup_file <= log->alloc_lsn.file",1,1,2
" ""BSONObj size spec too large"", details->_objsize <= 1024 * 1024 * 16 ",1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_C)),1,1,2
HEAP->InFromSpace(heap_obj),1,1,2
"session, F_ISSET(session->dhandle, WT_DHANDLE_DEAD) || __wt_page_can_evict(session, page, 0, NULL)",1,1,2
" ""recstore file too big for 32 bit"", len <= 0x7fffffff || sizeof(std::streamoff) > 4 ",1,1,2
"13474, ""no _getCurrentOpIdCallback"", _getCurrentOpIdCallback",1,1,2
" 16225 , ""not codeWScope"" , type() == CodeWScope ",1,1,2
!exitIsOptimized(exitIndex),1,1,2
" 10324 , ""Invalid CodeWScope string size"", strSizeWNull > 0 && strSizeWNull - 1 == strnlen( codeWScopeCode(), strSizeWNull ) ",1,1,2
"NULL, error < 0",1,1,2
kUnaryOpTypeFirstBit + kUnaryOpTypeBitCount <= 32,1,1,2
isCallbackTracer(),2,0,2
!script_.is_null(),1,1,2
diff >= 1,1,1,2
" 10401 , best->exceptionMessage(), best->complete() ",1,1,2
(dst & 0xf) != (src & 0xf) && ((dst >> 4) & 0xf) != (src & 0xf),1,1,2
"index, 2",1,1,2
 _client == currentClient.get() ,1,1,2
Assembler::kCallSizeWithRelocation == 2 * kInstructionSize,1,1,2
thread_local_top_.isolate_ == this,1,1,2
type_ == kContextVariable || type_ == kProperty || type_ == kInternal || type_ == kShortcut,1,1,2
k == e.front().key(),1,1,2
masm_->SizeOfCodeGeneratedSince(&start_) == size_,1,1,2
" 8041 , (std::string)""no primary shard configured for db: "" + _name , _primary.ok() ",1,1,2
"enum_limits<Enum>::is_specialized, missing_MAKE_ENUM_LIMITS",2,0,2
sizeof(void *) == sizeof(int64_t),1,1,2
!to.IsNone(),1,1,2
cpool_size == 0,1,1,2
((imm7 >> size) << size) == imm7,1,1,2
" ns.find( ""."" ) != string::npos ",1,1,2
instr->following(2)->IsMovk(),1,1,2
"READ_FIELD(this, offset)->IsSmi()",1,1,2
" 13048, (string)""can't append to array using string field name ["" + name + ""]"" , !*r ",1,1,2
exit.jitCodeOffset_,1,1,2
pc_offset() < buffer_size_,1,1,2
string == NULL || offset_out == 0,1,1,2
value->IsObjectLiteral() || value->IsFastLiteral(),1,1,2
ScratchRegisterBits::is_valid(scratch_.code()),1,1,2
value.Is64Bits(),1,1,2
!r.IsNone(),1,1,2
!js::IsPoisonedPtr(base),1,1,2
"sizeof(UpvarCookie) == sizeof(uint32_t), ""Not necessary for correctness, but good for ParseNode memory use""",1,1,2
type() != NORMAL,1,1,2
mode == VAR || mode == CONST || mode == CONST_HARMONY || mode == LET,1,1,2
" ""too much key data for sort() with no index. add an index or specify a smaller limit"", approxSize < 1 * 1024 * 1024 ",1,1,2
value->IsAllocate(),1,1,2
sizeof(pointer) == sizeof(raw),2,0,2
!has_transition(),1,1,2
object->map()->IsMap(),1,1,2
"session, conn->log_tid_set != 0",1,1,2
"INTERPRETED == JS_FUNCTION_INTERPRETED_BIT, ""jsfriendapi.h's JSFunction::INTERPRETED-alike is wrong""",1,1,2
value->IsHeapObject(),1,1,2
"13124, ""not master still in initialization"", theReplSet",1,1,2
"session, __wt_page_is_modified(page)",2,0,2
size < 100,1,1,2
"16204, R.n == 0",1,1,2
transitions() != transitions_array,1,1,2
!(flags & INV_IMM) && !(src2 & SRC2_IMM),1,1,2
"session, F_ISSET(session->dhandle, WT_DHANDLE_DEAD) || __wt_page_can_evict(session, ref, false, NULL)",1,1,2
sizeof(X87Register) == sizeof(IntelDoubleRegister),1,1,2
instr2->IsPCRelAddressing(),1,1,2
SignRegisterBits::is_valid(sign_.code()),1,1,2
" 13621, ""no known mongo program on port"", haveDb( port ) ",1,1,2
" (string)""object not valid"" + (msg) , (o).isValid() ",1,1,2
"uintptr_t(JS::TraceKind::LazyScript) & OutOfLineTraceKindMask, ""mask bits are set""",2,0,2
to_space_.current_page()->ContainsLimit(allocation_info_.top),1,1,2
!JS::shadow::Runtime::asShadowRuntime(runtime_)->isHeapBusy(),2,0,2
GetStrictMode(code->extra_ic_state()) == strict_mode(),1,1,2
"session, slot->slot_release_lsn.file >= log->write_lsn.file",1,1,2
"frame.isEvalFrame(), thisv.isUndefined() || thisv.isNull()",1,1,2
rinfo->rmode() == RelocInfo::EMBEDDED_OBJECT,1,1,2
"session, page != NULL",1,1,2
 type < N ,1,1,2
kSimpleTransitionIndex != kNotFound,1,1,2
obj->GetIsolate()->heap()->Contains(obj),1,1,2
HEAP->Contains(object),1,1,2
isStrictEvalFrame() || fun()->isHeavyweight(),1,1,2
fd.Is64Bits(),1,1,2
scope_nesting_ > 0,1,1,2
operands.length() == descriptor->environment_length(),1,1,2
store->IsStoreNamedField(),1,1,2
" _pushBack( recordLoc , key , order , prevChild ) ",1,1,2
!obj->is<DynamicWithObject>(),1,1,2
target()->is_call_stub(),1,1,2
" 10065 , ""invalid parameter: expected an object"", type()==Object || type()==Array ",1,1,2
g.varInitKind() == Global::VarInitKind::InitImport,1,1,2
"""file io error in BasicRecStore [2]"", !f.bad()",1,1,2
dst == SLJIT_MEM1(SLJIT_LOCALS_REG),1,1,2
" ""invalid utf8 input"", second < 0xC0 ",1,1,2
" _data.size() + 1, oldSize ",1,1,2
kCompareOperationFirstBit + kCompareOperationBitCount <= 32,1,1,2
!jitCodeOffset_,1,1,2
getSlotRef(FLOAT32X4_TYPE_DESCR).isObject(),1,1,2
slot_count_ >= 0,1,1,2
unique.hasDefault(),1,1,2
hasValue() && isType(mongo::Timestamp),1,1,2
common->read_only_data_ptr == common->read_only_data,1,1,2
allocKind <= size_t(FINALIZE_LIMIT),1,1,2
"16803, ""bits in geo index must be between 1 and 32"", bits > 0 && bits <= 32",1,1,2
 currentClient.get() == 0 ,1,1,2
reg_map[TMP_REG2] <= 7 && dst != TMP_REG2,1,1,2
" 10129 , ""too much data for sort() with no index"", b.len() < 4000000 ",1,1,2
ins && !ins_,1,1,2
SharedFunctionInfo::kCodeOffset + kPointerSize == SharedFunctionInfo::kOptimizedCodeMapOffset,1,1,2
"FIRST_TOKEN, op",1,1,2
" 13293, ""no such range"", f != _ranges.end() ",1,1,2
string->length() != 0,1,1,2
string->address() + StringType::SizeFor(string->length()) == allocation_info_.top,1,1,2
 s == 1 ,1,1,2
len <= DescriptorArray::kMaxNumberOfDescriptors,1,1,2
" 10299 , ""can't temprelease nested read lock"", locktype == -1",1,1,2
code_ptr - code <= (int)compiler->size - ((compiler->size & 0x1) ? 3 : 2),1,1,2
"session, deadp != NULL",1,1,2
count_ < kMaxCount,1,1,2
"JSErr_Limit == 369, ""GREETINGS, POTENTIAL SUBTRAHEND INCREMENTER! If you added or "" ""removed MSG_DEFs from js.msg, you should increment "" ""XDR_BYTECODE_VERSION_SUBTRAHEND and update this assertion's "" ""expected JSErr_Limit value.""",1,1,2
!IsSimdType(type),1,1,2
kNotStringTag + kIsSymbolMask > LAST_TYPE,1,1,2
"session, F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE)",2,0,2
" ""Expected CurrentTime type"", element_.type() == Timestamp ",1,1,2
"session, alloc_refp - alloc_index->index == (ptrdiff_t)alloc_index->entries",2,0,2
"mRawPtr != 0, ""You can't dereference a NULL RefPtr with operator->*().""",2,0,2
parent_s.numAllocations() >= nactual + 3 + argsObjAdj,1,1,2
sizeof(CPURegister) == sizeof(FPRegister),1,1,2
!GetHeap()->InNewSpace(GetHeap()->the_hole_value()),1,1,2
reinterpret_cast<Object*>(isolate)->IsSmi(),1,1,2
isprint(marker_name[0]) && isprint(marker_name[1]),1,1,2
cx->runtime()->isSelfHostingGlobal(self),1,1,2
is<LexicalScopeBase>() || is<ClonedBlockObject>(),2,0,2
" 16646, ""sort pattern must contain 1 or -1"", val*val == 1.0",1,1,2
"session, WT_PTR_IN_RANGE(from, from_arg, from_len)",2,0,2
reg_code < (sizeof(RegList) * kBitsPerByte),1,1,2
"16514, ""Malformed coord: "" + obj.toString(), pointFrom(obj, &p)",1,1,2
"session, parent_refp - pindex->index == (ptrdiff_t)(pindex->entries - skip_trailing)",1,1,2
ptr.found() && &*ptr == &r.front(),2,0,2
"13077, ""couldn't open/map file"", p",1,1,2
"session, !F_ISSET_ATOMIC(page, WT_PAGE_SPLIT_LOCKED)",1,1,2
"0, data->level",1,1,2
"0, level_",1,1,2
unibrow::Utf8::kMaxOneByteChar == 0x7F,1,1,2
" ""appendNewFromMod push_all not done"" , 0 ",1,1,2
 x == 1 ,1,1,2
" ""Invalid BSONObj spec size"" && isValid() ",1,1,2
!buffer->copied && !buffer->bufferLink,1,1,2
"obj, obj->template is<NestedScopeObject>() || obj->template is<StaticEvalObject>() || obj->template is<JSFunction>()",1,1,2
(sizeof(value) == kDRegSize) || (sizeof(value) == kSRegSize),1,1,2
" ""invalid utf8 input"", i < in.size() ",1,1,2
function->function_id == Runtime::kHiddenCreateObjectLiteral,1,1,2
body->last()->isKind(PNK_LEXICALSCOPE) || body->last()->isKind(PNK_FOR),1,1,2
"""E12000 idxNo fails"", false",1,1,2
static_cast<int>(NOT_CONTEXTUAL) == 0,1,1,2
this->generation == this->Range::table_->generation(),2,0,2
"(attrs & JSPROP_SETTER) && rawSetter, !IsPoisonedPtr(rawSetter)",1,1,2
"13106, ""nextSafe() returns $err: "" + o.toString(), false",1,1,2
data != NULL,1,1,2
compiler->size > 0,1,1,2
" ""Remaining data too small for BSON object"", theEnd - nextjsobj > 3 ",1,1,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_second",1,1,2
"session, mod->mod_split_recno == WT_RECNO_OOB || (recno != WT_RECNO_OOB && mod->mod_split_recno > recno)",1,1,2
IsDereferenceAllowed(INCLUDE_DEFERRED_CHECK),1,1,2
*handle_ != heap->nan_value(),1,1,2
 currentConnection.get() == 0 ,1,1,2
value.isMarkable(),1,1,2
t == kUnknown || t == kPrimitive || t == kNumber || t == kInteger32 || t == kSmi || t == kDouble || t == kString || t == kNonPrimitive,1,1,2
" ""allocExtra: extra already exists"", ht->get(extra) == 0 ",1,1,2
!key->IsString() || details.IsDeleted() || details.index() > 0,1,1,2
shift == LSL,1,1,2
"size > 0, ""C++ does not have zero-sized types! Choose 1 if you just need a "" ""conservative default.""",2,0,2
" 10073 , ""mod can't be 0"" , mod ",1,1,2
*type_out == string->map()->instance_type(),1,1,2
(regoffset_.Is64Bits() || (extend_ != SXTX)),1,1,2
IsHeapObject(),1,1,2
kStartOfLabelLinkChain == 0,1,1,2
compiler->cpool_fill > 0 && compiler->cpool_fill <= CPOOL_SIZE,1,1,2
kind <= FINALIZE_OBJECT_LAST,1,1,2
IS_HALFWORD(srcw),1,1,2
(num_pending_64_bit_reloc_info_ == 0) || (start < (first_const_pool_64_use_ + kMaxDistToFPPool)),1,1,2
"session, conn->cache == NULL || (F_ISSET(conn, WT_CONN_CACHE_POOL) && conn->cache != NULL)",1,1,2
V8::UseCrankshaft(),1,1,2
 size > 4 & size < 100000000 ,1,1,2
"session, ref->home == page",2,0,2
!(uintptr_t(chunk) & gc::ChunkMask),1,1,2
list == NodeGeneric || list == NodeUnparenthesizedCommaExpr,1,1,2
!hasAll(JSPROP_IGNORE_READONLY | JSPROP_READONLY),2,0,2
RelocInfo::IsCodeTarget(rmode) || rmode == RelocInfo::CODE_AGE_SEQUENCE,1,1,2
!used_indices[enum_index],1,1,2
hasScratchRegister(),1,1,2
"session, j > r",1,1,2
!is_generator(),1,1,2
code_age_index >= FIRST_CODE_AGE_SUB_TYPE && code_age_index < OBJECT_STATS_COUNT,1,1,2
"session, current->key.recno == page->pg_intl_recno",1,1,2
code()->gc_metadata() == NULL && value->gc_metadata() == NULL,1,1,2
" 12596 , ""CurOp not marked done yet"" , ! _active ",1,1,2
"instr->Bits(27, 25) == 0x7",1,1,2
GetDetails(descriptor_number).type() == FIELD,1,1,2
 R.n == 0 && W.n == 1 && U.n == 0 ,1,1,2
!IsPoisonedPtr(ptr.value),1,1,2
variable != NULL,1,1,2
store->HasObservableSideEffects(),1,1,2
size == 2 || size == 4,1,1,2
"std::abs((a) - (b)), ABSOLUTE_ERR",1,1,2
" ""Invalid modifier specified "" + string( fn ), false ",1,1,2
getter_stub_deopt_pc_offset() == Smi::FromInt(0),1,1,2
scalarType == v->type(),1,1,2
kStringTag == 0,1,1,2
offset.IsExtendedRegister(),1,1,2
instr1->IsPCRelAddressing() || instr1->IsUncondBranchImm(),1,1,2
"9005, string(""invoke failed: "") + getError()",1,1,2
InstructionType() == kImmediateType,1,1,2
" 16216, R.n == 0 ",1,1,2
" 16220, R.n == 0 ",1,1,2
!heap()->linear_allocation() || (anchor_.next_chunk() == &anchor_ && anchor_.prev_chunk() == &anchor_),1,1,2
"aRhs, ""Null pointer passed to forget!""",2,0,2
"16201, W.n == 0",1,1,2
!stubCodes_->has(key),1,1,2
(type & 0xff) >= SLJIT_C_FLOAT_EQUAL && (type & 0xff) <= SLJIT_C_FLOAT_NOT_NAN,1,1,2
_b._locked == 0,1,1,2
interval->vreg() != 0,1,1,2
"13600, str::stream() << ""file path is not under the db path? "" << fullpath << ' ' << dbpath, relative != fullpath",1,1,2
 _r.x == Exclusive ,1,1,2
"msgid, ss.str()",1,1,2
" 10437 , string(""unknown boost failed "") + msg ",1,1,2
is_eval(),1,1,2
!IsZombie(),1,1,2
object->IsString() || object->IsSymbol() || object->IsNumber() || object->IsBoolean(),1,1,2
isSimd(),1,1,2
range_,2,0,2
IsTaggedPosition(val),1,1,2
!has(SHADOWABLE),2,0,2
freeLists[i].isEmpty(),1,1,2
map()->has_fast_smi_or_object_elements() || map()->has_fast_double_elements(),1,1,2
_refCount <= 0,1,1,2
cc != cc_always,1,1,2
Assembler::IsLdrPpImmediateOffset(Memory::int32_at(pc_)),1,1,2
(sljit_w)addr <= 0x7fff && (sljit_w)addr >= -0x8000,1,1,2
aBound != 0,2,0,2
 n.hash == k.hash() ,1,1,2
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_CALL3,1,1,2
!(imm & 0xff),1,1,2
" 10212 , ""holder magic value is wrong"" , _magic == 17 && _obj.isValid() ",1,1,2
available_->type() == CPURegister::kRegister,1,1,2
"BooleanBit::get(hints, kStrictModeFunction)",1,1,2
result->IsCell() || result->IsPropertyCell(),1,1,2
which_ == Double,1,1,2
buffer8_ != end_,1,1,2
nested_site->IsAllocationSite(),1,1,2
diff <= 524287 && diff >= -524288 && (jump->flags & IS_CONDITIONAL),1,1,2
scratch != addr.base,2,0,2
 coll.size() ,1,1,2
"EXPRESSION, EXCEPTION_TYPE, ::mongo::stdx::bind(std::equal_to<std::string>(), (EXPECTED_WHAT), ::mongo::stdx::bind(&EXCEPTION_TYPE::what, ::mongo::stdx::placeholders::_1))",1,1,2
 _r.x == 2 ,1,1,2
!marking_->IsMarking() || Marking::Color(array) == Marking::WHITE_OBJECT,1,1,2
"__wt_vpack_uint(&p, sizeof(buf), uinput) == 0",1,1,2
" 10443 , errnoWithPrefix(""FileAllocator: file write failed"" ), written > 0 ",1,1,2
" ""Invalid field name"", size != -1 ",1,1,2
"offsetof(InlineTypedObject, data_) == sizeof(JSObject), ""The data for an inline typed object must follow the shape and type.""",1,1,2
!SlowIsContextual(),1,1,2
!gc::IsInsideGGCNursery(this),1,1,2
 e->firstRecord == myLoc ,1,1,2
Marking::IsBlack(mark_bit),1,1,2
target()->is_load_stub(),1,1,2
(long long)millis >= 0,1,1,2
!is_reg(),1,1,2
" 13270, ""no more simple queries"", mayRunMore() ",1,1,2
gc_state_ == NOT_IN_GC,1,1,2
"session, slot->slot_state != 0 || slot->slot_release_lsn.l.file >= log->write_lsn.l.file",1,1,2
STANDARD_STORE == 0,1,1,2
" 10053 , _fields->errmsg, false",1,1,2
isFinished() && !isStaticallyLinked(),1,1,2
"aBegin < EnumType(0), IsSigned<IntType>::value",2,0,2
 greed >= 0 ,1,1,2
c <= Category::LAST,2,0,2
"0, result",1,1,2
" 16136, U.n == 1 ",1,1,2
"Database* db, const StringData& ns",1,1,2
"compiler_common *common, pcre_uchar *cc, assert_fallback *fallback, BOOL conditional",1,1,2
numIntervals() > 0,1,1,2
(kLanguageModeMask & EXTENDED_MODE) == EXTENDED_MODE,1,1,2
value->IsUndefined(),1,1,2
types != NULL && types->length() == 1,1,1,2
 b > 0 ,1,1,2
instr1->IsPCRelAddressing() && (instr1->Rd() == xzr.code()),1,1,2
"RoundUp(len, kInstructionSize) <= static_cast<size_t>(kGap)",1,1,2
i < pod.numGlobalSimdVars_,1,1,2
mutex_ != NULL,1,1,2
"session, cond->min_wait != 0",2,0,2
!*pmetadata,1,1,2
"13280, ""invalid db name: "" + ns.toString(), NamespaceString::validDBName(d)",1,1,2
descriptors->number_of_descriptors() == number_of_own_descriptors,1,1,2
"catalogManager->getChunks(diffQuery, 0, &chunks)",1,1,2
"""interrupted at shutdown""",1,1,2
type() == JAVA_SCRIPT,1,1,2
closure_.is_null(),1,1,2
kJSSPCode == 28,1,1,2
(kLanguageModeMask & CLASSIC_MODE) == CLASSIC_MODE,1,1,2
 elemTrim.isNumber() ,1,1,2
"WT_SESSION_IMPL *session, int error, const char *file_name, int line_number, const char *fmt, ...",2,0,2
!block_buffer_growth_,1,1,2
!(inp_flags & LOAD_DATA),1,1,2
i_ >= bindings_->numArgs(),1,1,2
availablefp_->type() == CPURegister::kFPRegister,1,1,2
"session, manager->lsm_workers > 1",1,1,2
!(pushed_size & 0x7),1,1,2
"FinalizeKind != ExtendedFinalizeKind, ""extended/non-extended AllocKinds have to be different "" ""for getAllocKind() to have a reason to exist""",1,1,2
stack_size_in_bytes >= 0,1,1,2
"OperationContext* txn, const LocAndSize* records, const LocAndSize* drecs, const LocAndSize* legacyGrabBag, const ExtentManager* em, const DummyRecordStoreV1MetaData* md",1,1,2
(sljit_w)addr <= 0x01ffffff && (sljit_w)addr >= -0x02000000,1,1,2
"(attrs & JSPROP_GETTER) && rawGetter, !IsPoisonedPtr(rawGetter)",1,1,2
" 13345, ""BatchIterator empty"", moreInCurrentBatch() ",1,1,2
"session, F_ISSET(session, WT_SESSION_HANDLE_LIST_LOCKED) && !LF_ISSET(WT_DHANDLE_HAVE_REF)",1,1,2
isolate_->debugger_agent_instance() == NULL,1,1,2
"reg_map[SLJIT_SAVED_EREG2] >= 8, saved_ereg2_is_hireg",1,1,2
next_arg & SLJIT_MEM,1,1,2
stacksize == 1,1,1,2
!reg.is(kScratchDoubleReg),1,1,2
"session, session->meta_dhandle != NULL",1,1,2
ExtractReasonKind(reason) == Reason_Builtin,1,1,2
"session, r->page_size >= inuse",1,1,2
"""getFile(): bad file number value (corrupt db?)"", false",1,1,2
src & SLJIT_MEM,1,1,2
kHeapObjectTagSize == Name::kHashShift,1,1,2
 lk._mut == &BY ,1,1,2
" 10295 , ""getFile(): bad file number value (corrupt db?): run repair"", false",1,1,2
" 13273, ""single data buffer expected"", _data.size() == 1 ",1,1,2
"reg_map[SLJIT_TEMPORARY_REG2] == 6 && reg_map[SLJIT_TEMPORARY_REG1] < 8 && reg_map[SLJIT_TEMPORARY_REG3] < 8, args_registers",1,1,2
"reg_map[SLJIT_SAVED_REG3] >= 8, saved_reg3_is_hireg",1,1,2
 _best.end() != _best.begin() ,1,1,2
diff <= 1023 && diff >= -1024 && !(jump->flags & IS_CONDITIONAL),1,1,2
"session, WT_PTR_IN_RANGE(out, tmp->mem, tmp->memsize)",2,0,2
"IsUnsigned<T>::value, ""IsPowerOfTwo requires unsigned values""",2,0,2
dst >= SLJIT_TEMPORARY_REG1 && dst <= TMP_REGISTER,1,1,2
"jit::AsmJSNaN64GlobalDataOffset % sizeof(double) == 0, ""Global data NaN should be aligned""",1,1,2
!jump || jump->addr >= half_count,1,1,2
k == r.front().key,1,1,2
intervals_[old->index()] == old,1,1,2
"!AreAliased(scratch, object, address)",1,1,2
op == Token::EQ_STRICT,1,1,2
aMin <= aMax,2,0,2
other.SizeInBits() == size_,1,1,2
!(details_.type() == CONSTANT_FUNCTION && !IsFound()),1,1,2
(kAllocatableLowRangeBegin == 0) && (kAllocatableLowRangeEnd == 14) && (kAllocatableHighRangeBegin == 16) && (kAllocatableHighRangeEnd == 29),1,1,2
"session, alloc_refp - alloc_index->index == (ptrdiff_t)(alloc_index->entries - skip_trailing)",1,1,2
"string(""bad recstore [1], file:"")+fn, h.leof <= len",1,1,2
mStatementDone != reinterpret_cast<bool*>(MOZ_POISON),2,0,2
" ""defaultServer not set"" , defaultServer.size() ",1,1,2
contextual_mode() != CONTEXTUAL,1,1,2
AnyRegister::Total < UINT8_MAX,1,1,2
(extend == UXTW) || (extend == SXTW) || (extend == SXTX),1,1,2
" 14038, ""invalid _findingStartMode"", false ",1,1,2
!gc::IsAboutToBeFinalized(r.front().value()),1,1,2
getter() != JS_PropertyStub,2,0,2
" ""rename not yet implemented for CachedBasicRecStore"", false ",1,1,2
"session, WT_BLOCK_FITS(r->first_free, size, r->dsk.mem, r->dsk.memsize)",1,1,2
lane >= 0,2,0,2
"session, LF_SET(WT_EVICT_LOOKASIDE) || __wt_page_is_modified(page) || __wt_txn_visible_all(session, page->modify->rec_max_txn)",1,1,2
offset <= length,1,1,2
rd.Is64Bits() && rn.Is64Bits(),1,1,2
"instr->Bits(29, 25) == 0x6",1,1,2
"cx, receiver, id, vp",1,1,2
i < kNumberOfFlags,1,1,2
!value->representation().IsNone(),1,1,2
!GetHeap()->InNewSpace(GetHeap()->undefined_value()),1,1,2
buf_ptr == buf_end,1,1,2
this->offset() == offset,1,1,2
_isUpdatedAtSet,1,1,2
 dbMutex.atLeastReadLocked() ,1,1,2
object->IsHeapObject() && HeapObject::cast(object)->map()->instance_type() == Traits::kInstanceType,1,1,2
"attrs & JSPROP_SETTER, !IsPoisonedPtr(*psetter)",1,1,2
"BucketType* bucket, const Ordering& ordering, bool force = false",1,1,2
address.Is64Bits(),1,1,2
kScratchDoubleReg.code() - kDoubleRegZero.code() == kNumReservedRegisters - 1,1,1,2
UntagPosition(result) == val,1,1,2
this->mutationCount == this->Range::table_->mutationCount,2,0,2
"NULL, err != ERROR_SUCCESS",1,1,2
jumplist,1,1,2
value->IsConstantPoolArray(),1,1,2
!unsigned_,2,0,2
"16920, ""trying to match on unknown field: "" + path->fieldRef().dottedField(), 0",1,1,2
kind <= gc::FINALIZE_OBJECT_LAST,1,1,2
"16150, ""Reached maximum recursion depth of "" + BSONObj::maxToStringRecursionDepth, full != true",1,1,2
pod.which_ == ArrayView || pod.which_ == ArrayViewCtor,2,0,2
scratch != lhs,2,0,2
"session, !__wt_page_is_modified(page) || FLD_ISSET(reconcile_flags, WT_SKIP_UPDATE_RESTORE)",1,1,2
bit != 0,2,0,2
!(flags & SET_FLAGS) && (flags & ARG2_IMM) && arg1 == TMP_REG1,1,1,2
lastEntryId <= events.lastEntryId(),1,1,2
"has(JSPROP_RESOLVING), !has(JSPROP_IGNORE_ENUMERATE)",2,0,2
special >= 0,1,1,2
!csp.Is(sp_),1,1,2
" 13657 , mongoutils::str::stream() << ""unknown type for ShardChunkVersion: "" << elem , 0 ",1,1,2
size <= sizeof(new_value),1,1,2
primary.hasDefault(),1,1,2
" 14808, str::stream() << ""point "" << p.toString() << "" must be in earth-like bounds of long : [-180, 180], lat : [-90, 90] "", p._x >= -180 && p._x <= 180 && p._y >= -90 && p._y <= 90 ",1,1,2
policy == FIXED_SLOT,1,1,2
"session, json != NULL",2,0,2
"IsIntegral<T>::value, ""Clamp accepts only integral types, so that it doesn't have"" "" to distinguish differently-signed zeroes (which users may"" "" or may not care to distinguish, likely at a perf cost) or"" "" to decide how to clamp NaN or a range with a NaN"" "" endpoint.""",2,0,2
is_class(type) || is_constant(type),1,1,2
type_ == kElement || type_ == kHidden || type_ == kWeak,1,1,2
"common, hotpath, assert, TRUE",1,1,2
num_pending_reloc_info() == 0,1,1,2
p_ == NULL || p_ != new_value,1,1,2
current_iterator_.Current() != NULL,1,1,2
"session, leaf == NULL || leaf == current",1,1,2
(static_cast<uint32_t>(-1) >> 1) == 0x7FFFFFFF,1,1,2
!IsFailure(),1,1,2
instr->following(1)->IsMovk(),1,1,2
tablename != NULL,2,0,2
"session, is_app || session->split_gen == 0",1,1,2
"IsAligned(offset, kInstructionSize)",1,1,2
"16150, ""Reached maximum recursion depth of "" + BSONObjBuilder::numStr(BSONObj::maxToStringRecursionDepth), full != true",1,1,2
map_owner->IsJSObject(),1,1,2
reinterpret_cast<Address>(*location_) != kHandleZapValue,1,1,2
redzone_position + kASanRedzoneBytes == position_,1,1,2
"session, recno != 0",1,1,2
!array->GetHeap()->InNewSpace(value),1,1,2
 _keyData == 0 ,1,1,2
 MongoMMF::switchToPrivateView(p) != p ,1,1,2
!rt2.IsZero(),1,1,2
 _state.get() == 1 ,1,1,2
"reg_map[SLJIT_SAVED_REG3] < 8, saved_reg3_is_loreg",1,1,2
index >= 0 && index < length() && value <= kMaxOneByteCharCode,1,1,2
stack_depth_ < X87Register::kNumAllocatableRegisters,1,1,2
"IsBootstrappingOrGlobalObject(this->GetIsolate(), result)",1,1,2
top_scope_ != NULL,1,1,2
policy == FIXED_REGISTER || policy == FIXED_DOUBLE_REGISTER,1,1,2
page->area_size() <= kMaxRegularHeapObjectSize,1,1,2
StatusWith<T>&& swt,1,1,2
target()->is_keyed_call_stub(),1,1,2
false_target != NULL,1,1,2
"16146,false",1,1,2
tmp == id,1,1,2
0 <= index && index < kMaxNumAllocatableRegisters,1,1,2
op->IsArgument(),1,1,2
tmppath_len > 0 && tmppath_len < sizeof(tmppath_buffer),1,1,2
_session == _ru->getSession(),1,1,2
" ""not code"" , 0 ",1,1,2
PretenureDecisionBits::kMax >= kLastPretenureDecisionValue,1,1,2
(sljit_w)(jump->u.label->addr - (jump->addr + sizeof(sljit_hw))) >= -0x80000000ll && (sljit_w)(jump->u.label->addr - (jump->addr + sizeof(sljit_hw))) <= 0x7fffffffll,1,1,2
regoffset.Is64Bits() || (extend != SXTX),1,1,2
len == 0 || (len > 0 && data != NULL),2,0,2
"session, __wt_page_can_split(session, page)",1,1,2
heap->isolate() == Isolate::Current(),1,1,2
*from->getAllocation() != *to->getAllocation(),1,1,2
"msgid, file, line",1,1,2
!label || label->size >= half_count,1,1,2
which < capacity,1,1,2
"&rhs != this, ""self-move disallowed""",2,0,2
Assembler::IsBne(first_instruction),1,1,2
"mozilla::IsBaseOf<BaseStackFrame, ConcreteStackFrame<T>>::value, ""ConcreteStackFrame<T> must inherit from BaseStackFrame""",2,0,2
!JSID_IS_GCTHING(id),2,0,2
hasDynamicScopeObject(),1,1,2
type->Is(HeapType::Symbol()),1,1,2
"""ns name too long"", s.size() < MaxNsLen",1,1,2
(ExtractKindFromFlags(flags) != CALL_IC && ExtractKindFromFlags(flags) != KEYED_CALL_IC) || ExtractArgumentsCountFromFlags(flags) >= 0,1,1,2
depth_ >= 1,1,1,2
!range_.empty(),2,0,2
scope_ == NULL,1,1,2
IsDeclaredVariableMode(mode),1,1,2
reg.code() < kMaxNumAllocatableRegisters,1,1,2
kSmiShift == 32,1,1,2
!IsPoisonedPtr(key.wrapped),1,1,2
trc_->contextFunctor_ == nullptr,2,0,2
*arg1 != 0,1,1,2
MayContainTransitions(),1,1,2
offset - cursor < (int)slice->length(),2,0,2
((long long)millis/1000) < (numeric_limits<time_t>::max)(),1,1,2
(OffsetFrom(address) & kMapAlignmentMask) == 0,1,1,2
 GetCurrentThreadId() == tid ,1,1,2
is_const_pool_blocked(),1,1,2
"InstSize == sizeof(uint32_t), ""Assuming instruction size is 4 bytes""",1,1,2
"obj->group()->unknownProperties() || TrackPropertyTypes(cx, obj, id)",1,1,2
framePushed() == aic.initialStack,1,1,2
"sizeof(wasm::Builtin) == 2, ""fits""",2,0,2
RepresentationField::decode(value_) == representation.kind(),1,1,2
!idempotent(),1,1,2
(op >= SLJIT_BREAKPOINT && op <= SLJIT_SMUL) || ((op & ~SLJIT_INT_OP) >= SLJIT_UDIV && (op & ~SLJIT_INT_OP) <= SLJIT_SDIV),1,1,2
src == 0 && srcw == 0,1,1,2
result == in_range,1,1,2
!lockOwner,1,1,2
IsFinished(),1,1,2
object.is_null() || *object == scope_site->transition_info(),1,1,2
scope.enclosingScope() == scopeChain_->as<ScopeObject>().enclosingScope(),2,0,2
 _db ,1,1,2
delegated(),2,0,2
"t, !IsForwarded(t)",1,1,2
prec >= 4,1,1,2
Code::GetStrictMode(old_target->extra_ic_state()) == Code::GetStrictMode(target->extra_ic_state()),1,1,2
"session, !bulk || lsm_tree->exclusive",1,1,2
" 13615 , ""JS allocation failed, either memory leak or using too much memory"" , newthing ",1,1,2
v->compartment() == Base::compartment,1,1,2
"__wt_vpack_int(&end, sizeof(buf), -i) == 0",1,1,2
arg->isKind(PNK_NAME),2,0,2
elements->map() == heap->fixed_array_map() || elements->map() == heap->fixed_cow_array_map(),1,1,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_first",1,1,2
instr2->IsPCRelAddressing() && (instr2->Rd() == xzr.code()),1,1,2
" ""Ivalid BSONObj spec size"", isValid() ",1,1,2
"session, lsm_tree->refcnt > 0",2,0,2
"session, alloc_refp - alloc_index->index == alloc_index->entries - skip_trailing",1,1,2
 created == 0 ,1,1,2
"session, F_ISSET(txn, TXN_RUNNING) && F_ISSET(txn, TXN_HAS_ID)",1,1,2
(string != NULL) || (not_string != NULL),1,1,2
" 0, X.n > 0 ",1,1,2
b->_locked == 0,1,1,2
getAllocKind() != js::gc::AllocKind::FAT_INLINE_STRING,2,0,2
type() == CALLBACKS && !IsTransition(),1,1,2
"__wt_struct_sizev(NULL, &len, fmt, ap) == 0",1,1,2
!builder || !ion->pendingBuilder(),1,1,2
 dbMutex.isWriteLocked() ,1,1,2
 _explainQueryInfo ,1,1,2
"session, buf->memsize >= buf->size",2,0,2
LAST_CODE_KIND < 16,1,1,2
(kAllocatableLowRangeBegin == 0) && (kAllocatableLowRangeEnd == 15) && (kAllocatableHighRangeBegin == 18) && (kAllocatableHighRangeEnd == 24) && (kAllocatableContext == 27),1,1,2
(GetHeap()->MaxSemiSpaceSize() / (StaticVisitorBase::kMinObjectSizeInWords * kPointerSize + AllocationMemento::kSize)) < MementoFoundCountBits::kMax,1,1,2
" ""builder does not own memory"", owned() ",1,1,2
" 16442, ""BSONElement has bad size"", esize > 0 ",1,1,2
"isAccessorDescriptor(), has(JSPROP_GETTER) && has(JSPROP_SETTER)",2,0,2
Scalar::isSimdType(type),1,1,2
 _b._lockedByMe.get() ,1,1,2
realSource==NULL,2,0,2
"16209, R.n == 1",1,1,2
(attributes() & ~(JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY | JSPROP_GETTER | JSPROP_SETTER | JSPROP_SHARED | JSPROP_REDEFINE_NONCONFIGURABLE | JSPROP_RESOLVING | SHADOWABLE)) == 0,2,0,2
"other.isAccessorShape(), allocKind == gc::FINALIZE_ACCESSOR_SHAPE",1,1,2
"session, !F_ISSET_ATOMIC(page, WT_PAGE_SPLITTING)",1,1,2
t->IsBitset() || t->IsClass() || t->IsConstant() || t->IsUnion(),1,1,2
number <= instance_descriptors()->number_of_descriptors(),1,1,2
maxSize.hasDefault(),1,1,2
!deferred_key.is_null(),1,1,2
V8_ALIGNOF(StorageType) >= V8_ALIGNOF(T),1,1,2
(sljit_w)(jump->u.target - (jump->addr + sizeof(sljit_hw))) >= -0x80000000ll && (sljit_w)(jump->u.target - (jump->addr + sizeof(sljit_hw))) <= 0x7fffffffll,1,1,2
!GetJitContext()->runtime->mainThread()->ionCompiling,1,1,2
" ""no primary"" , _primary ",1,1,2
IsSimdType(type) && vec->type() == type,1,1,2
!CheckFlag(kCannotBeTagged) || !r.IsTagged(),1,1,2
GeneralRegisterSet(Registers::SingleByteRegs).has(rhs),1,1,2
IsQuietNaN(op2),2,0,2
as_int.Is32Bits(),1,1,2
((long long)millis/1000) < (std::numeric_limits<time_t>::max)(),1,1,2
Isolate::Current()->context() == *context_,1,1,2
"session, !F_ISSET(txn, WT_TXN_ERROR)",1,1,2
"reg_map[SLJIT_SAVED_REG2] < 8, saved_reg2_is_loreg",1,1,2
"allocKind == gc::FINALIZE_SHAPE, !other.isAccessorShape()",1,1,2
" 10350 , ""allocExtra: base ns missing?"", d ",1,1,2
HEAP->InFromSpace(object),1,1,2
(sljit_w)addr <= SIMM_MAX && (sljit_w)addr >= SIMM_MIN,1,1,2
current_index_ < part_length_,1,1,2
"16512, ""Malformed coord: "" + max.toString(), pointFrom(max, &m._box._max)",1,1,2
 static_cast<unsigned>(Smi::kMaxValue) <= std::numeric_limits<size_t>::max(),1,1,2
kind == ICStub::GetElem_NativePrototypeCallScripted,1,1,2
this->existing_inobject_property() == existing_inobject_property,1,1,2
" 16217, w.n > 0 ",1,1,2
space != NEW_SPACE || retry_space == OLD_POINTER_SPACE || retry_space == OLD_DATA_SPACE || retry_space == LO_SPACE,1,1,2
uint32_t(lane) < SimdTypeToLength(obj->type()),1,1,2
addr.base != StackPointer,1,1,2
code < kMaxNumRegisters,1,1,2
(len == 0 && LastAdded() == kNoneAdded) || len == descriptors->GetDetails(LastAdded()).index(),1,1,2
dst != TMP_REG1,1,1,2
kMaximumClonedLength < 16,1,1,2
getSlotRef(FLOAT64X2_TYPE_DESCR).isUndefined(),1,1,2
sub_type <= Code::LAST_CODE_KIND,1,1,2
" reg_map[SLJIT_TEMPORARY_REG1] == 0 && reg_map[SLJIT_TEMPORARY_REG2] < 7 && reg_map[TMP_REGISTER] == 2, invalid_register_assignment_for_div_mul",1,1,2
sizeof(Char) == 1 || sizeof(Char) == 2,1,1,2
sizeof(pointer) == sizeof(uintptr_t),1,1,2
pBcpKey != NULL,2,0,2
label->is_bound(),1,1,2
list_1.type_ == list_2.type_,2,0,2
kind >= js::gc::FINALIZE_OBJECT0 && kind <= js::gc::FINALIZE_OBJECT_LAST,1,1,2
elements->map() == GetHeap()->fixed_array_map() || elements->map() == GetHeap()->fixed_cow_array_map(),1,1,2
index >= 1 && index <= 2,1,1,2
state != NULL,1,1,2
object->IsFixedArray() || object->IsFixedDoubleArray(),1,1,2
 !_pattern.isEmpty() ,1,1,2
(reg_size == kXRegSizeInBits) || (bitn == 0),1,1,2
"status.location() != 0 ? status.location() : status.code(), status.reason()",1,1,2
"preconditionForSet(zone, owner, kind, slot)",1,1,2
data != 0,1,1,2
cpool_size > 0,1,1,2
"isTenured(), !!(flags() & EXTENDED) == (asTenured().getAllocKind() == ExtendedFinalizeKind)",1,1,2
base() == NULL,1,1,2
T::convert == BaseInfo::convert,1,1,2
" 10128 , ""too much key data for sort() with no index. add an index or specify a smaller limit"", approxSize < 1 * 1024 * 1024 ",1,1,2
"mozilla::IsBaseOf<JS::Traceable, T>::value, ""DispatchWrapper is intended only for usage with a Traceable""",2,0,2
"session, fh->ref == 1",1,1,2
kind == js::THING_ROOT_OBJECT || kind == js::THING_ROOT_SCRIPT || kind == js::THING_ROOT_STRING || kind == js::THING_ROOT_ID || kind == js::THING_ROOT_VALUE || kind == js::THING_ROOT_TRACEABLE,2,0,2
index < builtin_count,1,1,2
"13435, ""not master and slaveOk=false"", !pq || pq->hasOption(QueryOption_SlaveOk)",1,1,2
"""basicrecstore write io error"", !f.bad()",1,1,2
"*pc == JSOP_SETGNAME, scope == cx->global()",1,1,2
"session, LOG_CMP(&written[i].lsn, &slot->slot_release_lsn) == 0",1,1,2
"session, (checkpoint == 0 && addr != NULL && addr_sizep != NULL) || (checkpoint == 1 && addr == NULL && addr_sizep == NULL)",1,1,2
" 10443 , ""write failed"", left == write(fd, buf, left) ",1,1,2
 ! cc().getContext() ,1,1,2
kind == GetInitialFastElementsKind(),1,1,2
"session, WT_LOG_CMP(&log->bg_sync_lsn, &min_lsn) <= 0",1,1,2
!str.is_null(),1,1,2
"session, state == 0",1,1,2
"13513, ""sort must be an object or array"", 0",1,1,2
desc->GetDetails().index() > 0,1,1,2
" msgid, s.c_str() ",1,1,2
sizeof(result) <= sizeof(raw),2,0,2
jit::AsmJSNaN64GlobalDataOffset == nan64GlobalDataOffset(),1,1,2
events.lastEntryId() >= *lastEntryId,1,1,2
" 16083, ""reserve 16083"", true ",1,1,2
diff <= 0xfff,1,1,2
 t < v.size() ,1,1,2
 len < BSONObjMaxUserSize ,1,1,2
" ""No subobject started"", s_.subobjStarted() ",1,1,2
" 13102 , ""did you call done already"" , _conn ",1,1,2
extra_ic_state == kNoExtraICState || kind == CALL_IC || kind == STORE_IC || kind == KEYED_STORE_IC,1,1,2
" 13047, ""can't append to array using string field name"", !*r ",1,1,2
StorageField::is_valid(index),1,1,2
" ""no collection name"", coll.size() ",1,1,2
induction_variable_data_ == NULL,1,1,2
HEAP->InFromSpace(*p),1,1,2
type != JS_GLOBAL_PROPERTY_CELL_TYPE,1,1,2
!is_store || argc == 1,1,1,2
" _host != ""localhost"" && _host != ""127.0.0.1"" ",1,1,2
continuation_captured_,1,1,2
kSmiTag == 0 && kSmiTagSize < kDoubleSizeLog2,1,1,2
 d->extra() == e ,1,1,2
length_ >= 0,1,1,2
"9004, string(""invoke failed: "") + getError()",1,1,2
" ""Next object larger than available space"", js.objsize() < ( theEnd - data ) ",1,1,2
"IsIntegral<IntType1>::value && IsIntegral<IntType2>::value, ""values must both be integral""",2,0,2
allocation_allowed_ && gc_state_ == NOT_IN_GC,1,1,2
 elemTrim.type() == NumberInt !! elemTrim.type() == NumberLong ,1,1,2
value.valueReg() != ScratchReg,1,1,2
number->IsHeapNumber(),1,1,2
" 16214, X_legal() ",1,1,2
"attrs & JSPROP_GETTER, !IsPoisonedPtr(*pgetter)",1,1,2
HasUpperLimit(),1,1,2
!(dst & SLJIT_MEM) || (dst & 0xf) != SLJIT_LOCALS_REG,1,1,2
position_ + sizeof(answer) <= length_ + 0u,1,1,2
(FIRST_NOP_MARKER <= n) && (n <= LAST_NOP_MARKER),1,1,2
 keys.objsize() ,1,1,2
member->current_loop() == loop,1,1,2
should_log_symbols_,1,1,2
tmp == v,1,1,2
!has(tmp),1,1,2
" 13280 , (std::string)""invalid db name: "" + ns , NamespaceString::validDBName( d ) ",1,1,2
local < numVariables(),1,1,2
" 16218, areGlobalWritesGreedy ",1,1,2
"session, !need_tracking || WT_IS_METADATA(dhandle) || WT_META_TRACKING(session)",1,1,2
!scratch64.Is(dest64),2,0,2
" 10443 , errnostring(""write failed"" ), left == write(fd, buf, left) ",1,1,2
i == (int)half,2,0,2
"scode, op == OP_ASSERT",1,1,2
isPhysicalIonFrame(),2,0,2
IsMonomorphic(),1,1,2
HeapObject::cast(obj)->Size() == JSGeneratorObject::kSize,1,1,2
local_off < (int)cur->size(),1,1,2
mode_ != OPTIMIZE,1,1,2
" 10306 , ""Next object larger than available space"", js.objsize() < ( theEnd - data ) ",1,1,2
StoreIC::GetStrictMode(old_target->extra_ic_state()) == StoreIC::GetStrictMode(target->extra_ic_state()),1,1,2
"16150, s.str(), full != true",1,1,2
beginPtr <= endPtr,2,0,2
i < TotalPhys,2,0,2
src2_r == TMP_REG2,1,1,2
other.kind_ != kExternal,1,1,2
IsFastSmiOrObjectElementsKind(elements_kind),1,1,2
IsBootstrappingOrGlobalObject(result),1,1,2
is_inline_cache_stub() || result == UNINITIALIZED || result == DEBUG_BREAK || result == DEBUG_PREPARE_STEP_IN,1,1,2
"session, ret != 0 || LF_ISSET(WT_DHANDLE_EXCLUSIVE) == F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE)",1,1,2
pn_kid3->is<LexicalScopeNode>(),2,0,2
"sizeof(T) == 4 || sizeof(T) == 8, ""mozilla/Atomics.h only supports 32-bit and 64-bit types""",2,0,2
index <= kIndexMask,1,1,2
object->IsSmi(),1,1,2
"""file io error in RecStore [1]"", !f.bad()",1,1,2
!closure.is_null(),1,1,2
"thing, MapAllocToTraceKind(thing->getAllocKind()) != JSTRACE_OBJECT",1,1,2
"!oom(), size() - offset.offset() == ToggledCallSize(nullptr)",2,0,2
reg.code() / 2 < kMaxNumAllocatableRegisters,1,1,2
this->validEntry,2,0,2
"has(JSPROP_RESOLVING), !has(JSPROP_IGNORE_VALUE)",2,0,2
def->type() == type,1,1,2
is_union(type),1,1,2
AttributesField::is_valid(attributes),1,1,2
type >= SLJIT_C_EQUAL && type < SLJIT_JUMP,1,1,2
isFinishedWithModulePrologue() && !isFinished(),1,1,2
diff <= 8388607 && diff >= -8388608,1,1,2
 locktype ,1,1,2
"aBegin <= aEnd, ""Cannot generate invalid, unbounded range!""",2,0,2
" 13292 , buf.str() ",1,1,2
"offset_ == offset, ""offset fits in 31 bits""",2,0,2
"(instr->Bits(27, 24) == 0xE) || (instr->Bits(27, 24) == 0xF) ",1,1,2
ResourceTypesCount < 8,1,1,2
shapes->length() == NumShapes,1,1,2
argw,1,1,2
sizeof(pointer) <= sizeof(pointer_raw),2,0,2
sizeof(T) == sizeof(pc_),1,1,2
hasCanonicalSpillExclude(),1,1,2
object->IsGlobalObject(),1,1,2
1 + kStubMajorKeyBits + kSafepointTableOffsetBitCount <= 32,1,1,2
"session, ret != 0 || (exclusive ? 1 : 0) == (*treep)->exclusive",1,1,2
(argw & 0x3) && !(max_delta & 0xf00),1,1,2
_isVersionSet,1,1,2
(num_pending_32_bit_reloc_info_ == 0) || (start + num_pending_64_bit_reloc_info_ * kDoubleSize < (first_const_pool_32_use_ + kMaxDistToIntPool)),1,1,2
side_effect == kChangesNewSpacePromotion,1,1,2
((reg_size == kXRegSize) && is_uint6(immr)) || ((reg_size == kWRegSize) && is_uint5(immr)),2,0,2
iterator_.frame()->is_arguments_adaptor(),1,1,2
acctype == FixedSlot || acctype == DynamicSlot,1,1,2
"session, bulk || F_ISSET(session, WT_SESSION_LOCKED_SCHEMA)",1,1,2
getSlotRef(FLOAT32X4_TYPE_DESCR).isUndefined(),1,1,2
env_->values()->at(current_) != NULL,1,1,2
!c->_constructed,1,1,2
string_->IsSeqString() || string->IsExternalString(),1,1,2
kind_ != kExternal,1,1,2
"session, txn_state->snap_min == WT_TXN_NONE || session->txn.isolation == WT_ISO_READ_UNCOMMITTED || session->id == S2C(session)->txn_global.checkpoint_id || !__wt_txn_visible_all(session, txn_state->snap_min)",1,1,2
found == &fallback->common.topfallbacks,1,1,2
"(instr->Bits(27, 24) == 0xA) || (instr->Bits(27, 24) == 0xB) ",1,1,2
finished_,1,1,2
" ""mod eq can't be 0"" , modm ",1,1,2
!stack_parameter_count_.is_valid(),1,1,2
type()==Object,1,1,2
shift > 0,1,1,2
"next.type != TOK_DIV, ""next token requires contextual specifier to be parsed unambiguously""",2,0,2
kPointerSize == kInt32Size,1,1,2
instr->following(1)->IsBranchAndLinkToRegister(),1,1,2
" 10373 , ""rename not yet implemented for InMem_RecStore"", false ",1,1,2
queued_.empty(),1,1,2
 x >= 0 ,1,1,2
(1 << kTranscendentalTypeBits) >= kNumberOfCaches,1,1,2
GET_ALL_FLAGS(op) == 0 || GET_ALL_FLAGS(op) == SLJIT_SET_E || GET_ALL_FLAGS(op) == SLJIT_KEEP_FLAGS,1,1,2
dbName.find('.') == std::string::npos,1,1,2
length == 0 || instance_descriptors()->HasEnumCache(),1,1,2
start_index < length,1,1,2
entry,2,0,2
sp_alignment >= 16,1,1,2
is_uint3(imm3),2,0,2
" 16213, areGlobalWritesGreedy ",1,1,2
string == NULL || *type_out == string->map()->instance_type(),1,1,2
Assembler::kCallSizeWithoutRelocation == 4 * kInstructionSize,1,1,2
"session, !F_ISSET_ATOMIC(page, WT_PAGE_RECONCILIATION)",1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C)),1,1,2
getterOp != JS_PropertyStub,2,0,2
strlen(marker_name) == 2,1,1,2
 _d.getns() ,1,1,2
(x) > -t,2,0,2
!regoffset.IsSP(),1,1,2
!oom(),2,0,2
"session, !reconfiguring",1,1,2
"""not implemented RecStoreInterface::deleteRecord"", false",1,1,2
" 10442 , str::stream() << ""Unable to allocate new file of size "" << size << ' ' << errnoWithDescription(), 1 == write(fd, """", 1) ",1,1,2
" 13048, (string)""can't append to array using string field name ["" + name.data() + ""]"" , !*r ",1,1,2
kMaxAsciiCharCode == 0x7F,1,1,2
op->kind() == kOperandKind,1,1,2
!position.IsUnknown(),1,1,2
e.output != NULL,1,1,2
!started_ || !start_ticks_.IsNull(),1,1,2
"sizeof(T) >= CellSize, ""All allocations must be at least the allocator-imposed minimum size.""",1,1,2
" 10321 , buf.str() , 0 ",1,1,2
*objp,1,1,2
lower->Is(upper),1,1,2
"v.isMarkable(), shadowRuntimeFromMainThread(v)->needsIncrementalBarrier()",1,1,2
!Marking::IsImpossible(mark_bit),1,1,2
(scale >= 0) && (scale <= (64 - kSmiValueSize)),1,1,2
length() >= kFirstIndex || this == HEAP->empty_descriptor_array(),1,1,2
first < last,2,0,2
len > 0 && len < sizeof(buf),1,1,2
IS_POWER_OF_TWO(kStackSize),1,1,2
!rm_.is_valid(),1,1,2
space_number >= 0,1,1,2
radix>=2 && radix<=16,2,0,2
 _state.get() > 0 ,1,1,2
is_inline_cache_stub() || result == UNINITIALIZED || result == DEBUG_STUB,1,1,2
!val.isMarkable(),2,0,2
length <= string->length(),1,1,2
" string(""couldn't open file:"")+fn, f.is_open() ",1,1,2
" 16639, ""empty field in dotted sort pattern"", (pos > 0) && (pos != field.size() - 1) ",1,1,2
" 12051, ""clientcursor already in use? driver problem?"", cursor->_pinValue < 100 ",1,1,2
"session, F_ISSET(r, WT_EVICT_UPDATE_RESTORE)",2,0,2
LAST_ALLOCATION_SITE_MODE == 1,1,1,2
"group->clasp()->finalize, heap == js::gc::TenuredHeap || (group->clasp()->flags & JSCLASS_FINALIZE_FROM_NURSERY)",1,1,2
"session, F_ISSET(session, WT_SESSION_SCHEMA_LOCKED) || !F_ISSET(session, WT_SESSION_HANDLE_LIST_LOCKED | WT_SESSION_NO_SCHEMA_LOCK | WT_SESSION_TABLE_LOCKED)",1,1,2
"__wt_vunpack_uint( &cp, sizeof(buf), &uoutput) == 0",1,1,2
noBalance.hasDefault(),1,1,2
0 <= enum_index && enum_index < len,1,1,2
kElementsKindCount <= (1 << kBitsForElementsKind),1,1,2
_isPrimarySet,1,1,2
"instr->Bits(27, 24) == 0x1",1,1,2
jit::AsmJSActivationGlobalDataOffset == 0,1,1,2
"session, session->id != 0",1,1,2
type_ != JitFrame_Exit,1,1,2
type != CELL_TYPE,1,1,2
"PND_EMITTEDFUNCTION < (1 << NumDefinitionFlagBits), ""Not enough bits""",1,1,2
scalarType == x->type(),1,1,2
Assembler::IsTstImmediate(first_instruction),1,1,2
" ""allocExtra: base ns missing?"", d ",1,1,2
"pod.which_ == Variable && pod.u.var.initKind_ == InitConstant, !pod.u.var.u.numLit_.scalarValue().isMarkable()",1,1,2
value().isUndefined(),2,0,2
HasFixedSlotPolicy(),1,1,2
"16210, W.n == 0",1,1,2
"16481, ""No AuthorizationManager has been set up for this connection"", _authorizationManager != NULL",1,1,2
"session, page->modify->mod_split_recno == WT_RECNO_OOB",1,1,2
func_,2,0,2
!val->IsJSGlobalPropertyCell(),1,1,2
vd.Is128Bits(),2,0,2
"session, LF_ISSET(WT_DHANDLE_LOCK_ONLY) || (F_ISSET(session->dhandle, WT_DHANDLE_OPEN) && !F_ISSET(session->dhandle, WT_DHANDLE_DEAD))",1,1,2
ptr != scratch,2,0,2
object->map() != object->GetHeap()->allocation_memento_map(),1,1,2
FunctionObjectIsNative(fun),2,0,2
"uintptr_t(traceKind) >= OutOfLineTraceKindMask, (uintptr_t(traceKind) & OutOfLineTraceKindMask) == OutOfLineTraceKindMask",2,0,2
"!has(JSPROP_SETTER), !setter()",2,0,2
space < kNumberOfSpaces,1,1,2
!pn_funbox,1,1,2
!IsInsideNursery(v.toString()),2,0,2
 approxSize < 1 * 1024 * 1024 ,1,1,2
"13106, ""nextSafe(): "" + o.toString(), false",1,1,2
kPointerSize <= 8,1,1,2
"session, session->dhandle != NULL",2,0,2
not_smi_label,1,1,2
" ""Value stream expected"", s_.get() ",1,1,2
IsModule() && IsFrozen() && Chase()->index_ == -1,1,1,2
has_miss_handler_,1,1,2
RelocInfo::IsRuntimeEntry(rmode),1,1,2
!GET_ALL_FLAGS(op),1,1,2
" 10190 , ""ConfigServer not setup"" , _primary.size() ",1,1,2
counter <= 31,1,1,2
scalarType == w->type(),1,1,2
setter != JS_StrictPropertyStub,1,1,2
length() >= kFirstIndex || IsEmpty(),1,1,2
!scope_->is<ScopeObject>(),1,1,2
"session, __wt_verify_dsk_image( session, ""[raw evict split]"", tmp->data, dsk->mem_size) == 0",1,1,2
" 14809, ""Invalid access for cursor that is not ok()"", !_currLoc().isNull() ",1,1,2
register_index >= 0,1,1,2
"16206, R.n > 0",1,1,2
"session, LOG_CMP(&r.ckpt_lsn, &conn->log->first_lsn) >= 0",1,1,2
"Min(dst, src) + num_words <= Max(dst, src)",1,1,2
!IsPoisonedValue(s.value),1,1,2
has_int32_value_ || !object_.handle()->IsSmi(),1,1,2
!has(JSPROP_IGNORE_READONLY),2,0,2
"reg_map[SLJIT_SAVED_REG1] < 8, saved_reg1_is_loreg",1,1,2
"__wt_vunpack_int(&cp, used_len, &soutput) == 0",1,1,2
left->type() == MIRType_Float32x4,1,1,2
!HEAP->InNewSpace(HEAP->the_hole_value()),1,1,2
IsPowerOf2(sp_alignment),1,1,2
 ns == collection->ns().ns() ,1,1,2
"session, lsm_tree->refcnt > 1",1,1,2
"session, LF_ISSET(WT_DHANDLE_EXCLUSIVE) == F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE)",1,1,2
 _state.get() == 2 ,1,1,2
" ""allocExtra: too many namespaces/collections"", ht->put(extra, (NamespaceDetails&) temp)",1,1,2
" 13084, ""unable to set SO_SNDTIMEO"", setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (void *) &tv, sizeof(tv) ) == 0 ",1,1,2
 greed > 0 ,1,1,2
free_blocks == free_block,1,1,2
static_cast<int>(getSecs()) >= 0,1,1,2
"!has(JSPROP_GETTER), !getter()",2,0,2
code_ptr - code <= (int)size,1,1,2
"session, !LF_ISSET(WT_DHANDLE_HAVE_REF)",1,1,2
CalleeTokenIsFunction(calleeToken()),2,0,2
ind < cpool_size && !(*last_pc_patch & (1 << 25)) && (*last_pc_patch & (1 << 20)),1,1,2
" 10030 , ""bad db name [2]"", nm[L-1] != '.' ",1,1,2
implicit_args[v8::Arguments::kCalleeIndex]->IsJSFunction(),1,1,2
string == NULL || *length_out == static_cast<unsigned>(string->length()),1,1,2
unbuffered_start_ != NULL,1,1,2
transition_array->GetTarget(new_target_index) == target,1,1,2
"session, !F_ISSET(txn, TXN_ERROR)",1,1,2
!right->IsConstant() || (!HConstant::cast(right)->HasInteger32Value() || HConstant::cast(right)->HasSmiValue()),1,1,2
element < static_cast<int>(sizeof(T) * CHAR_BIT),1,1,2
!hasSharedTypedArrayLengthStub_,1,1,2
"session, !win_fh->direct_io || S2C(session)->buffer_alignment == 0 || (!((uintptr_t)buf & (uintptr_t)(S2C(session)->buffer_alignment - 1)) && len >= S2C(session)->buffer_alignment && len % S2C(session)->buffer_alignment == 0)",2,0,2
RelocInfo::IsNone(x.rmode_),1,1,2
!IsPoisonedPtr(atom),1,1,2
IsFastSmiOrObjectElementsKind(elements_kind) || IsFastDoubleElementsKind(elements_kind),1,1,2
" 13310, ""could not convert string to long long"", (*endPtr == 0) && (endPtr != _I64_MAX) && (endPtr != _I64_MIN) ",1,1,2
"13072,(string)""JS_NewObject failed: "" + w ,xx",1,1,2
dest != scratch,2,0,2
"sizeof(ChunkTrailer) == 2 * sizeof(uintptr_t) + sizeof(uint64_t), ""ChunkTrailer size is incorrect.""",1,1,2
" 10378 , ""rename not yet implemented for CachedBasicRecStore"", false ",1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O)),1,1,2
sizeof(XMMRegister) == sizeof(IntelDoubleRegister),1,1,2
0 <= index && index < OperandCount(),1,1,2
par_index < descriptor_->environment_length(),1,1,2
rt->gc.isAllocAllowed(),1,1,2
type < FIRST_NONSTRING_TYPE,1,1,2
is_uint24(imm),1,1,2
" 10080 , ""ns name too long, max size is 128"" ",1,1,2
getSlotRef(INTRINSICS).isUndefined(),1,1,2
index >= first_heap_ptr_index() && index < first_int32_index(),1,1,2
 ofs > 0 ,1,1,2
reg.code() % 2 == 0,1,1,2
"IsAligned(reinterpret_cast<uintptr_t>(pc_), kInstructionSize)",1,1,2
"seekStatus.location(), seekStatus.reason()",1,1,2
0 <= index && index < kNumAllocatableRegisters,1,1,2
end()->SuccessorCount() == 0,1,1,2
" 11005 , ""did you call done already"" , _conn ",1,1,2
mir()->numStackArgs() >= 1,1,1,2
"frame.isInterpreterFrame(), !frame.asInterpreterFrame()->runningInJit()",1,1,2
implicit_args[v8::Arguments::kHolderIndex]->IsHeapObject(),1,1,2
which_ != OutOfRangeInt,1,1,2
" ""$inc value is not a number"", n.isNumber() ",1,1,2
 ofs >= HeaderSize ,1,1,2
" 10372 , ""64 bit not done"", false",1,1,2
!isSharedMemory(),2,0,2
ObjectIsDuplicateAt(index),1,1,2
compareType_ <= Compare_Value,1,1,2
" 13048, (std::string)""can't append to array using string field name ["" + name.data() + ""]"" ",1,1,2
" 10337 , (string)""object not valid"" + (msg) , (o).isValid() ",1,1,2
info_->is_osr(),1,1,2
!key->IsName() || details.IsDeleted() || details.dictionary_index() > 0,1,1,2
NUMBER_OF_TYPES <= 6,1,1,2
argw >= 0 && (argw & 0xff) <= 0xff,1,1,2
frame_->is_java_script() || frame_->is_exit(),1,1,2
"!mozilla::IsConvertible<T, Traceable*>::value, ""Rooted takes pointer or Traceable types but not Traceable* type""",2,0,2
mode_ == 0 || mode_ == 1 || mode_ == 2 || mode_ == 3,1,1,2
"IsAligned(reinterpret_cast<intptr_t>(resource), kPointerSize)",1,1,2
PropertyDetails::IsValidIndex(index),1,1,2
IsRegisterOffset(),1,1,2
static_cast<uint64_t>(size) == SizeOfCodeGeneratedSince(label),1,1,2
"session, WT_LOG_CMP(&written[i].lsn, &slot->slot_release_lsn) == 0",1,1,2
"session, !FLD_ISSET( open_flags, WT_DHANDLE_EXCLUSIVE)",1,1,2
" 10305 , ""Invalid object size"", js.objsize() > 3 ",1,1,2
!gc::IsAboutToBeFinalized(r.front().value),1,1,2
LAST_ALLOCATION_SITE_OVERRIDE_MODE == 1,1,1,2
"16160, !clock_gettime(CLOCK_MONOTONIC, &the_time)",1,1,2
SimdTypeToScalarType(type) == val->type(),1,1,2
 _queues[x].empty() ,1,1,2
"sizeof(T) == 4 || sizeof(T) == 8, ""wrong type computed in conditional above""",2,0,2
is_field_index(),1,1,2
((long long)millis/1000) < numeric_limits<time_t>::max(),1,1,2
IsStub(),1,1,2
GET_OPCODE(op) >= SLJIT_MOV && GET_OPCODE(op) <= SLJIT_CLZ,1,1,2
tagged_is_union(tagged),1,1,2
 ! _unlock ,1,1,2
"__wt_vpack_uint(&p, sizeof(buf), r) == 0",1,1,2
dst_r == TMP_REGISTER,1,1,2
len >= valid_entries,1,1,2
length >= 0 && length == string->length(),1,1,2
"raw_address_, NULL",1,1,2
!function_ && !module_,2,0,2
" 14050 , ""item not in list"" , n ",1,1,2
"session, op->state == WT_ASYNCOP_READY",1,1,2
is_bitset(type),1,1,2
"""can't temprelease nested write lock"", locktype == 1",1,1,2
contextName_,2,0,2
"instr->Bits(27, 24) == 0x0",1,1,2
(static_cast<int32_t>(-1) >> 1) == -1,1,1,2
!(jump->flags & IS_BL),1,1,2
started_ || start_ticks_.IsNull(),1,1,2
"offsetof(JSObject, shape_) == offsetof(RelocationOverlay, newLocation_), ""forwarding pointer and shape should be at same location, "" ""so that obj->zone() works on forwarded objects""",1,1,2
kBinaryOpTypeFirstBit + kBinaryOpTypeBitCount <= 32,1,1,2
has_int32_value_ || !handle_->IsSmi(),1,1,2
 _r.x == 0 ,1,1,2
"16139, R.n > 0",1,1,2
IsObjectAllocKind(kind),2,0,2
CpuFeatures::IsSafeForSnapshot(SSE2) || save_fp == kDontSaveFPRegs,1,1,2
" 13076 , (string)""recursive toObject"" , ! has( o ) ",1,1,2
"has(JSPROP_RESOLVING), !has(JSPROP_IGNORE_READONLY)",2,0,2
page->area_size() <= kNonCodeObjectAreaSize,1,1,2
tags.hasDefault(),1,1,2
(reg_type != kNoRegister) || (reg_size == 0),1,1,2
"session, WT_ATOMIC_CAS8(ref->key.ikey, (WT_IKEY *)oldv, ikey)",1,1,2
is_uint4(index),2,0,2
"mozilla::IsSame<SomeTypedArray, TypedArrayObject>::value || mozilla::IsSame<SomeTypedArray, SharedTypedArrayObject>::value, ""methods must be shared/unshared-specific, not "" ""element-type-specific""",1,1,2
rmode > RelocInfo::LAST_GCED_ENUM,1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_C)),1,1,2
code_sub_type_index >= FIRST_CODE_KIND_SUB_TYPE && code_sub_type_index < FIRST_CODE_AGE_SUB_TYPE,1,1,2
_isConfigVersionSet,1,1,2
IntRegisterBits::is_valid(the_int_.code()),1,1,2
" ""Expected CurrentTime type"", element_.type() == CurrentTime ",1,1,2
SharedFunctionInfo::kNameOffset + kPointerSize == SharedFunctionInfo::kCodeOffset,1,1,2
 s == 0 ,1,1,2
shift_amount <= 4,1,1,2
GetContextualMode(code->extra_ic_state()) == GetContextualMode(target()->extra_ic_state()),1,1,2
"session, not_null == 0",1,1,2
"session, cval.val != 0",2,0,2
(storage->map() == array->GetHeap()->fixed_double_array_map() && IsFastDoubleElementsKind(array->GetElementsKind())) || ((storage->map() != array->GetHeap()->fixed_double_array_map()) && (IsFastObjectElementsKind(array->GetElementsKind()) || (IsFastSmiElementsKind(array->GetElementsKind()) && Handle<FixedArray>::cast(storage)->ContainsOnlySmisOrHoles()))),1,1,2
rinfo->rmode() == RelocInfo::CELL,1,1,2
!(flags & SRC2_IMM),1,1,2
"13106, ""nextSafe() returns: "" + o.toString(), false",1,1,2
is_inline_cache_stub() || ic_state() == DEBUG_STUB,1,1,2
" 10318 , ""Invalid regex string"", len1 != -1 ",1,1,2
ResourceTypesCount <= 8,1,1,2
" 12521, ""internal error: use of an unlocked ClientCursor"", c->_pinValue ",1,1,2
descriptors->IsSortedNoDuplicates(),1,1,2
"session, dsk->u.entries != 0",1,1,2
FLAG_pretenuring_call_new,1,1,2
src_r == TMP_REG2 && (src & SLJIT_MEM),1,1,2
current_code->kind() == Code::FUNCTION,1,1,2
!obj2,1,1,2
c >= Category::FIRST,2,0,2
"0, R.n == 1",1,1,2
space_number <= LAST_SPACE,1,1,2
size < SliceSize,1,1,2
sizeof(1) == sizeof(int32_t),1,1,2
" ""releaseAndWriteLock: unlock_shared failed, probably recursive"" , dbMutex.getState() == 0 ",1,1,2
"has(JSPROP_IGNORE_VALUE), value().isUndefined()",2,0,2
level < height(),2,0,2
" 13048, (std::string)""can't append to array using std::string field name: "" + name.toString(), status.isOK() ",1,1,2
" s , 0 ",1,1,2
"session, WT_LOG_CMP(&close_end_lsn, &log->sync_lsn) >= 0",1,1,2
name_->isTenured(),2,0,2
"session, min_lsn.file == log->sync_lsn.file",1,1,2
IsIdentifier(expression),1,1,2
"instr->Bits(27, 24) == 0x3",1,1,2
i < pod.numGlobalScalarVars_,1,1,2
"session, F_ISSET(session, WT_SESSION_SCHEMA_LOCKED) || !F_ISSET(session, WT_SESSION_NO_SCHEMA_LOCK)",1,1,2
" 10444 , ""write failed"", z == write(fd, buf, z) ",1,1,2
kHeapObjectTagSize == String::kHashShift,1,1,2
"session, bulk || F_ISSET(session, WT_SESSION_SCHEMA_LOCKED)",1,1,2
(extend_ == UXTW) || (extend_ == SXTW) || (extend_ == SXTX),1,1,2
new_target_index != TransitionArray::kNotFound,1,1,2
i < numVectors_,2,0,2
 strlen(v[i]) > 20 ,1,1,2
!IsRealRelocMode(mode),1,1,2
Chunk::withinValidRange(addr),2,0,2
sizeof(sourcechar) <= 2,1,1,2
"session, cval.val > 0",2,0,2
"13110, ""HostAndPort: host is empty"", *p",1,1,2
" 0, X_legal() ",1,1,2
kUninitialized < (1 << (2 * kBitsPerByte)),1,1,2
(storage->map() == GetHeap()->fixed_double_array_map() && IsFastDoubleElementsKind(GetElementsKind())) || ((storage->map() != GetHeap()->fixed_double_array_map()) && (IsFastObjectElementsKind(GetElementsKind()) || (IsFastSmiElementsKind(GetElementsKind()) && FixedArray::cast(storage)->ContainsOnlySmisOrHoles()))),1,1,2
"session, F_ISSET(session->dhandle, WT_DHANDLE_DEAD) || __wt_page_can_evict(session, page, false, NULL)",1,1,2
compiler->args >= 0,1,1,2
" 10441 , str::stream() << ""Unable to allocate new file of size "" << size << ' ' << errnoWithDescription(), size - 1 == lseek(fd, size - 1, SEEK_SET) ",1,1,2
sizeof(Holder) == 8,1,1,2
scratch != reg,2,0,2
Assembler::IsBeq(masm->instr_at(pos)),1,1,2
 c->_pinValue ,1,1,2
!is_one_byte_,1,1,2
member->loop_information()->parent_loop() == loop,1,1,2
"session, from_len_bits >= len",1,1,2
dropped.hasDefault(),1,1,2
sizeof(lchar) <= 2,1,1,2
"16208, U.n == 0",1,1,2
 p - buf < (int) sizeof(buf) ,1,1,2
IsValidAllocKind(kind),2,0,2
isGlobalSharedContext(),1,1,2
as_int.Is64Bits(),1,1,2
(uintptr_t(p) & OutOfLineTraceKindMask) == 0,2,0,2
is_constant(type),1,1,2
NUMBER_OF_IDS < (1 << kStubMajorKeyBits),1,1,2
kToBooleanStateFirstBit + kToBooleanStateBitCount <= 32,1,1,2
jump->flags & IS_CONDITIONAL,1,1,2
index < kNumberOfGlobalVars,1,1,2
target()->is_store_stub(),1,1,2
"""can't temprelease nested read lock"", locktype == -1",1,1,2
"13082, gai_strerror(ret), ret == 0",1,1,2
constant_pool != NULL,1,1,2
(o & 3) == 0,1,1,2
instr_->InputAt(current_) != NULL,1,1,2
" ""Invalid object size"", js.objsize() > 3 ",1,1,2
"session, __wt_tolower((u_char)pv.type) == __wt_tolower((u_char)vpv.type)",2,0,2
" 10160 , ""$inc value is not a number"", n.isNumber() ",1,1,2
"__wt_vunpack_uint(&cp, sizeof(buf), &r2) == 0",1,1,2
type_ == kContextVariable || type_ == kProperty || type_ == kInternal || type_ == kShortcut || type_ == kWeak,1,1,2
!IsOptimizerThread(),1,1,2
"session, !F_ISSET(session, WT_SESSION_LOCKED_SLOT)",2,0,2
"10078, ""nsToDatabase: ns too long"", false",1,1,2
demo_fh->size != 0,1,1,2
!is_shared(),1,1,2
"codestart, FALSE",1,1,2
!val->IsPropertyCell() && !val->IsCell(),1,1,2
getSlotRef(FLOAT64X2_TYPE_DESCR).isObject(),1,1,2
"session, __wt_page_can_evict(session, page, 0, NULL)",1,1,2
"session, p != 0",1,1,2
" ""unknown boost failed"" , false ",1,1,2
!IsPoisonedPtr(value),1,1,2
isBeingParsed(),2,0,2
shift < rd.size(),2,0,2
(b & 0xf0) != (SLJIT_LOCALS_REG << 4),1,1,2
"sw.getStatus(), file, line",1,1,2
!this->empty(),2,0,2
kMaxWatchpointCode < kMaxStopCode,1,1,2
String::kMaxLength < 0x7fffffff - 6,1,1,2
"16203, W.n == 1",1,1,2
!isSelfHostedConstructor(),1,1,2
(attrs & ~(JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY | JSPROP_IGNORE_ENUMERATE | JSPROP_IGNORE_PERMANENT | JSPROP_IGNORE_READONLY)) == 0,2,0,2
*opcode == OP_CRRANGE || *opcode == OP_CRMINRANGE,1,1,2
kind() == JS::MapTypeToTraceKind<T>::kind,2,0,2
!xm.IsZero(),2,0,2
" 15854, str::stream() << ""Command "" << name << "" has not implemented the default run function."", false ",1,1,2
collectionName.empty() || collectionName[0] != '.',1,1,2
index >= 0 && index < length() && value <= kMaxAsciiCharCode,1,1,2
exit.interpCodeOffset_,1,1,2
 d->extraOffset == 0 ,1,1,2
"sizeof(IntType) >= sizeof(EnumType), ""IntType should be at least as big as EnumType!""",2,0,2
" 10443 , errnostring(""write failed"" ), written > 0 ",1,1,2
(shift_ == LSL) && (shift_amount_ <= 4),1,1,2
_ns.find('\0') == std::string::npos,1,1,2
!field_representation().IsDouble() || !has_transition(),1,1,2
"FINALIZE_LIMIT <= 255, ""We must be able to fit the allockind into uint8_t.""",1,1,2
instruction,1,1,2
"session, F_ISSET(session->dhandle, WT_DHANDLE_DEAD) || upd->txnid == WT_TXN_ABORTED || __wt_txn_visible_all(session, upd->txnid)",1,1,2
save,1,1,2
!has(JSPROP_IGNORE_VALUE),2,0,2
!rt.Aliases(rt2),2,0,2
"EXPRESSION, EXCEPTION_TYPE, ::mongo::stdx::bind(::mongo::unittest::alwaysTrue)",1,1,2
"offsetof(Holder, refCount) == 0",1,1,2
" 10082 , ""allocExtra: too many namespaces/collections"", ht->put(extra, (NamespaceDetails&) temp)",1,1,2
1 << defaultShift == sizeof(jsval),1,1,2
" ""BSONObj size spec too small"", details->_objsize > 0 ",1,1,2
"prev, prev->end() <= interval->start()",1,1,2
 o.isValid() ,1,1,2
code < kNumberOfVRegisters,2,0,2
this->fixed_slot_index() == index,1,1,2
"session, F_ISSET(&session->txn, TXN_HAS_SNAPSHOT)",1,1,2
code->kind() == Code::FUNCTION,1,1,2
(callback == NULL) ^ (global_gc_epilogue_callback_ == NULL),1,1,2
"sizeof(ConcreteStackFrame<T>) == sizeof(*base()), ""ubi::ConcreteStackFrame<T> specializations must be the same size as "" ""ubi::BaseStackFrame""",2,0,2
setter() != JS_StrictPropertyStub,2,0,2
"session, __wt_page_can_evict(session, page, 0)",1,1,2
c > Latin1::kMaxChar,1,1,2
numDumps_ < poolInfoSize_,1,1,2
" 10351 , ""allocExtra: extra already exists"", ht->get(extra) == 0 ",1,1,2
getAllocKind() == gc::FINALIZE_ACCESSOR_SHAPE,1,1,2
sizeof(*dest) >= sizeof(*src),1,1,2
buffer8_ != NULL && end_ != NULL,1,1,2
interval->index() == j,1,1,2
merged_index >= 0 || merged_index == kInvalidMergedIndex,1,1,2
!ok(),2,0,2
obj->group()->unknownProperties(),1,1,2
"jit::AsmJSNaN32GlobalDataOffset % sizeof(double) == 0, ""Global data NaN should be aligned""",1,1,2
is_call_stub() || is_keyed_call_stub() || kind() == STUB,1,1,2
isolate_->top_lookup_result() == this,1,1,2
depth >= 1,1,1,2
Assembler::IsBranch(masm->instr_at(pos)),1,1,2
!IsSweepingComplete() || (unswept_free_bytes_ == 0),1,1,2
"session, lsm_tree->refcnt == 1",1,1,2
count >= size,2,0,2
HasPrototypeTransitions(),1,1,2
stub_kind != LOAD,1,1,2
obj->is<ArrayObject>(),1,1,2
jump->u.target & 0x1,1,1,2
op >= SLJIT_MOV && op <= SLJIT_MOV_SI,1,1,2
has_been_globally_set_up_,1,1,2
"16207, W.n == 0",1,1,2
"session, FLD_ISSET(conn->log_flags, WT_CONN_LOG_ENABLED)",2,0,2
Uint32IsValidCoarseType(n),2,0,2
withinArenasRange(addr),1,1,2
flags & HALF_SIZE,1,1,2
index > kCArgSlotCount,1,1,2
"rangeIdx < NumRanges, ""Invalid branch range index""",2,0,2
(size == kDRegSizeInBits) || (size == kSRegSizeInBits),1,1,2
NUMBER_OF_KINDS <= 16,1,1,2
block->IsLoopHeader(),1,1,2
"session, upd == NULL",1,1,2
 elemTrim.type() == NumberInt || elemTrim.type() == NumberLong ,1,1,2
0 <= pos && pos <= length_,1,1,2
"0,false",1,1,2
setterOp != JS_StrictPropertyStub,2,0,2
"JS_New(_context, _proto, args)",2,0,2
"16511, ""Malformed coord: "" + min.toString(), pointFrom(min, &m._box._min)",1,1,2
"session, special_flags == 0 || LF_ISSET(WT_DHANDLE_EXCLUSIVE)",1,1,2
!xd.IsZero(),2,0,2
"session, F_ISSET(session, WT_SESSION_TABLE_LOCKED) || !F_ISSET(session, WT_SESSION_HANDLE_LIST_LOCKED)",1,1,2
!isolate()->heap()->InNewSpace(*value),1,1,2
((reg_size == kXRegSizeInBits) && is_uint6(imms)) || ((reg_size == kWRegSizeInBits) && is_uint5(imms)),1,1,2
(inst & 0xfff) == 0,1,1,2
tmppath_buffer[tmppath_len - 1] == '\\',1,1,2
uintptr_t(dest_) == ((uintptr_t(dest_) + instBufferAlign_ - 1) & ~(instBufferAlign_ - 1)),1,1,2
"17490, ""bad replset heartbeat option"", heartbeatSleepMillis >= 10",1,1,2
"""getFile(): bad file number - using recstore db w/nonrecstore db build?"", false",1,1,2
 _servers.size() > 1 ,1,1,2
!(a & SLJIT_IMM) || compiler->mode32 || IS_HALFWORD(imma),1,1,2
*rootfallback.cc == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,1,1,2
"""deleted not yet implemented recstoreinsert""",1,1,2
!is_uint32,1,1,2
OperandInitializer<T>::kIsIntType,1,1,2
_isMongoVersionSet,1,1,2
" 13084, ""unable to set SO_SNDTIMEO"", setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (char *) &tv, sizeof(tv) ) == 0 ",1,1,2
" invoke( code , args , timeoutMs ) == 0 ",1,1,2
trc_->contextName_,2,0,2
"13436, ""not master or secondary, can't read"", theReplSet->isSecondary() ",1,1,2
Imm16::IsInSignedRange(wasm::HeapGlobalDataOffset - AsmJSGlobalRegBias),2,0,2
this->portion() == portion,1,1,2
result->IsJSFunction(),1,1,2
(space).page_low() <= (info).top && (info).top <= (space).page_high() && (info).limit <= (space).page_high(),1,1,2
"16513, ""Malformed coord: "" + center.toString(), pointFrom(center, &m._center)",1,1,2
op->IsDoubleRegister(),1,1,2
backing_[kLanguageModeIndex] == CLASSIC_MODE || backing_[kLanguageModeIndex] == STRICT_MODE || backing_[kLanguageModeIndex] == EXTENDED_MODE,1,1,2
" 10128 , ""too much data for sort() with no index. add an index or specify a smaller limit"", approxSize < 32 * 1024 * 1024 ",1,1,2
requirement.kind() != Requirement::MUST_REUSE_INPUT,1,1,2
"IsAddressAligned(base, kPointerSize)",1,1,2
this->nodeSize_ % InstSize == 0,1,1,2
getSlotRef(INT32X4_TYPE_DESCR).isUndefined(),1,1,2
HEAP->IsAllocationAllowed(),1,1,2
!(uintptr_t(k) & gc::ChunkMask),1,1,2
"""internal error: locks are not upgradeable"", s == 0 ",1,1,2
instr2->IsPCRelAddressing() || instr2->IsUncondBranchImm(),1,1,2
"catalogManager->getChunks(diffQuery, &chunks)",1,1,2
!current->nextfallbacks && !current->topfallbacks,1,1,2
"Min(dst, const_cast<T*>(src)) + num_words <= Max(dst, const_cast<T*>(src))",1,1,2
" 16219, W.n == 0 ",1,1,2
*handle_ != heap->minus_zero_value(),1,1,2
"session, cbt->ins != NULL",1,1,2
 x == NilState ,1,1,2
" 16221, w.n == 0 ",1,1,2
!IsInsideNursery(ptr_),1,1,2
" 13048, (string)""can't append to array using string field name: "" + name.toString(), status.isOK() ",1,1,2
"""64 bit not done"", false",1,1,2
bool(asCell()) == (kind() != JS::TraceKind::Null),2,0,2
0 <= aProbability && aProbability <= 1,2,0,2
object_size < Page::kMaxNonCodeHeapObjectSize,1,1,2
!alloc.isUse(),1,1,2
!alreadyHaveLock,1,1,2
"16211, U.n == 1",1,1,2
for_in_feedback_slot_ != kInvalidFeedbackSlot,1,1,2
!ExpectedTransitionKey(map).is_null(),1,1,2
baselineCallReturnAddr_ == nullptr,1,1,2
"""not yet implemented recstoreremove""",1,1,2
name != NULL,1,1,2
NUMBER_OF_CONSTRAINTS <= 8,1,1,2
 s < 100 ,1,1,2
desc->GetDetails().index() <= number_of_descriptors(),1,1,2
_b._locked == 1,1,1,2
"""not yet implemented"", false",1,1,2
!representation.IsNone(),1,1,2
" 13083, ""unable to set SO_RCVTIMEO"", setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (void *) &tv, sizeof(tv) ) == 0 ",1,1,2
"16138, w.n > 0",1,1,2
IsQuietNaN(op1),2,0,2
scratch32.asUnsized() != src.base,2,0,2
"session, conn->logging",1,1,2
string->IsFlat(),1,1,2
language_mode() == CLASSIC_MODE,1,1,2
"index, ComputeOperandsCount()",1,1,2
"13334, ""Shard Key must be less than 512 bytes"", k.objsize() < kMaxShardKeySize",1,1,2
" ""failure creating new datafile"", filelen == 0 ",1,1,2
kind == ICStub::GetProp_CallScripted || kind == ICStub::GetProp_CallNativePrototype,1,1,2
mozilla::IsNaN(num),2,0,2
js_CodeSpec[*pc].format & JOF_TYPESET,1,1,2
"session, F_ISSET(&session->txn, TXN_HAS_ID)",1,1,2
"(NativeObject::NELEMENTS_LIMIT - 1) <= INT32_MAX / sizeof(JS::Value), ""every caller of this method requires that a slot "" ""number (or slot count) count multiplied by "" ""sizeof(Value) can't overflow uint32_t (and sometimes "" ""int32_t, too)""",1,1,2
" 10379 , ""not implemented RecStoreInterface::deleteRecord"", false",1,1,2
" 11001 , ""E11001 duplicate key on update"", !idx.hasKey(**i)",1,1,2
"12051, ""clientcursor already in use? driver problem?"", false",1,1,2
detail::gChaosModeCounter > 0,2,0,2
 W.n > 0 ,1,1,2
key->IsUniqueName(),1,1,2
kCompareStateFirstBit + kCompareStateBitCount <= 32,1,1,2
x.rmode_ == RelocInfo::NONE,1,1,2
is_working_iterator_,1,1,2
!is_array_index_,1,1,2
IsMovW(Memory::int32_at(candidate)) && IsMovT(Memory::int32_at(candidate + kInstrSize)),1,1,2
length() % sizeof(uint32_t) == 0,1,1,2
" 10444 , errnostring( ""write failed"" ), z == write(fd, buf, z) ",1,1,2
"session, F_ISSET(session, WT_SESSION_DISCARD_FORCE) || upd->txnid == WT_TXN_ABORTED || __wt_txn_visible_all(session, upd->txnid)",1,1,2
!lhs.containsReg(ScratchReg),1,1,2
shift_ == LSL,1,1,2
getSlotRef(INT32X4_TYPE_DESCR).isObject(),1,1,2
" 17380 , ""ns name can't contain embedded '\0' byte"", ns.find('\0') == string::npos",1,1,2
"reg_map[SLJIT_LOCALS_REG] >= 8, locals_reg_is_hireg",1,1,2
common->read_only_data + (common->read_only_data_size >> SLJIT_WORD_SHIFT) == common->read_only_data_ptr,1,1,2
JS_ARRAY_LENGTH(map) == size_t(AllocKind::LIMIT),2,0,2
"__wt_vpack_uint(&end, sizeof(buf), (uint64_t)i) == 0",1,1,2
LAST_TYPE == LAST_JS_OBJECT_TYPE,1,1,2
!current->nextfallbacks,1,1,2
object->IsString() || object->IsNumber() || object->IsBoolean(),1,1,2
sizeof(int_t) <= 8,1,1,2
to_space_.current_page()->ContainsLimit(top),1,1,2
"t && zone->wasGCStarted() && (zone->isGCMarking() || zone->isGCSweeping()), t->asTenured().arenaHeader()->allocatedDuringIncremental",1,1,2
 n == 1 ,1,1,2
!(flag & ~BaseShape::OBJECT_FLAG_MASK),1,1,2
!GET_FLAGS(op) || !(op & SLJIT_KEEP_FLAGS),1,1,2
(pc_ + sizeof(instruction)) <= (buffer_ + buffer_size_),1,1,2
"session, start != NULL",1,1,2
IsDereferenceAllowed(NO_DEFERRED_CHECK) && other.IsDereferenceAllowed(NO_DEFERRED_CHECK),1,1,2
number_of_own_descriptors > 0,1,1,2
"session, slot->slot_churn >= 0",1,1,2
" 10298 , ""can't temprelease nested write lock"", locktype == 1",1,1,2
"1, level_",1,1,2
IsIdentifier(),1,1,2
" 10307, str::stream() << ""Client Error: bad object in message: "" << status.reason(), status.isOK() ",1,1,2
" 11004 , ""did you call done already"" , _conn ",1,1,2
!RelocInfo::IsNone(rmode),1,1,2
"aBegin >= EnumType(0) && IsSigned<IntType>::value, UnsignedType(aEnd) <= UnsignedType(MaxValue<IntType>::value)",2,0,2
slot_address > this->address(),1,1,2
common->currententry->entry == NULL,1,1,2
!access.IsInobject() || access.existing_inobject_property() || obj->IsAllocate() || obj->IsInnerAllocatedObject(),1,1,2
"has(JSPROP_RESOLVING), !has(JSPROP_REDEFINE_NONCONFIGURABLE)",2,0,2
other.pool.size() == 0,1,1,2
list_1.size_ == list_2.size_,2,0,2
"session, r->first_free + r->space_avail <= (uint8_t *)r->dsk.mem + r->dsk.memsize",1,1,2
!getSlot(INTRINSICS).isUndefined(),1,1,2
" ""No subobject started"", s_->subobjStarted() ",1,1,2
JSArray::kPreallocatedArrayElements > 0,1,1,2
kBinaryOpResultTypeFirstBit + kBinaryOpResultTypeBitCount <= 32,1,1,2
" 13269, ""$nor must be array"", e.type() == Array ",1,1,2
IsStoreStub(),1,1,2
!too_late_to_enable_now_,1,1,2
code < Total,2,0,2
"session, __wt_verify_dsk_image(session, ""[evict split]"", buf->data, buf->size) == 0",1,1,2
"""getFile(): bad file number value (corrupt db?): run repair"", false",1,1,2
"std::is_trivially_copyable<T>::value, ""Type for DataView::writeNative must be trivially copyable""",1,1,2
" 12520, ""file allocation failure"", !failed_ ",1,1,2
instr->following(3)->IsBranchAndLinkToRegister(),1,1,2
to_space_.current_page()->ContainsLimit(allocation_info_.top()),1,1,2
"(instr->Bits(27, 24) == 0x8) || (instr->Bits(27, 24) == 0x9) || (instr->Bits(27, 24) == 0xC) || (instr->Bits(27, 24) == 0xD) ",1,1,2
compiler->cpool_fill < CPOOL_SIZE && (inst & 0xfff) == 0,1,1,2
length() >= kFirstIndex,1,1,2
"Token::ADD, op_",1,1,2
dest.valueReg() != ScratchReg,1,1,2
(0 < size) && (size <= Page::kMaxNonCodeHeapObjectSize),1,1,2
!SitePointsToLiteral(),1,1,2
!(inst & UPDATE_REQ),1,1,2
this != NULL,1,1,2
!cx->compartment()->hasObjectMetadataCallback(),1,1,2
(attributes() & ~(JSPROP_ENUMERATE | JSPROP_IGNORE_ENUMERATE | JSPROP_PERMANENT | JSPROP_IGNORE_PERMANENT | JSPROP_READONLY | JSPROP_IGNORE_READONLY | JSPROP_IGNORE_VALUE | JSPROP_GETTER | JSPROP_SETTER | JSPROP_SHARED | JSPROP_REDEFINE_NONCONFIGURABLE | JSPROP_RESOLVING | SHADOWABLE)) == 0,2,0,2
addr <= 0x03ffffff,1,1,2
_start,1,1,2
"13334, ""Shard Key must be less than 512 bytes"", pattern.objsize() < 512",1,1,2
" ""BSONObj size spec too large"", objsize() <= 1024 * 1024 * 16 ",1,1,2
sizeof(OID) == sizeof(oid),1,1,2
current_hint_operand_ == FirstHint(),1,1,2
(sljit_w)(jump->u.label->addr - (jump->addr + sizeof(sljit_b))) >= -128 && (sljit_w)(jump->u.label->addr - (jump->addr + sizeof(sljit_b))) <= 127,1,1,2
!heap_->old_data_space()->Contains(addr),1,1,2
"session, F_ISSET(session, WT_SESSION_SCHEMA_LOCKED) && !LF_ISSET(WT_DHANDLE_HAVE_REF)",1,1,2
" 16651, ""sort pattern field name cannot be empty"" , field.size() ",1,1,2
(kLanguageModeMask & STRICT_MODE) == STRICT_MODE,1,1,2
"MOZ_ARRAY_LENGTH(map) == FINALIZE_LIMIT, ""AllocKind-to-TraceKind mapping must be in sync""",1,1,2
to.IsInteger32(),1,1,2
 pos < theend ,1,1,2
sizeof(argument) == sizeof(bits_),1,1,2
children_index_ < snapshot_->children().length() || (children_index_ == snapshot_->children().length() && children_count_ == 0),1,1,2
string->IsSeqString(),1,1,2
!at->isLabel(),1,1,2
"SliceSize % (8 * InstSize) == 0, ""SliceSize must be a multple of 8 * InstSize.""",1,1,2
has(JSPROP_SHARED),2,0,2
Assembler::IsTstImmediate(second_instruction),1,1,2
length() >= kFirstIndex || this == GetHeap()->empty_descriptor_array(),1,1,2
profilerSampleBufferLapCount_ > 0,2,0,2
stmt->staticScope,1,1,2
_isShardSet,1,1,2
((sljit_w)jump->u.label->addr - (sljit_w)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_w)jump->u.label->addr - (sljit_w)(buf_ptr + 2)) >= -0x02000000,1,1,2
receiver_mode_ == ARGUMENTS_CONTAIN_RECEIVER,1,1,2
(kBitsForElementsKind + kBitsForIndexOffset + kBitsForIsDehoisted) <= sizeof(uint32_t)*8,1,1,2
isolate_->context() == *context_,1,1,2
"check == NO_CHECK || IsAddressAligned(addr, kInstructionSize)",1,1,2
" 16151, ""manual keyFieldsOnly config not allowed"", false ",1,1,2
jump->flags & (JUMP_LABEL | JUMP_ADDR),1,1,2
" ""Invalid BSONObj spec size"" , 0 ",1,1,2
"28519, wtRCToStatus(retCode)",1,1,2
 e->lastRecord == myLoc ,1,1,2
RelocInfo::IsCodeTarget(rmode),1,1,2
vp->isMarkable(),1,1,2
"session, myslotp != NULL",1,1,2
" 16212, w.n > 0 ",1,1,2
op->IsConstantOperand(),1,1,2
preferredType != JSTYPE_VOID,1,1,2
true_target != NULL && false_target != NULL,1,1,2
is_inline_cache_stub(),1,1,2
sub_type <= LAST_FIXED_ARRAY_SUB_TYPE,1,1,2
"group->hasUnanalyzedPreliminaryObjects(), heap == js::gc::TenuredHeap",2,0,2
(addr & ~0xfffffff) == ((jump->addr + sizeof(sljit_ins)) & ~0xfffffff),1,1,2
" 16202, W.n == 1 ",1,1,2
sizeof(rchar) <= 2,1,1,2
Scalar::isSimdType(type_),1,1,2
"reg_map[SLJIT_TEMPORARY_REG2] == 2 && reg_map[SLJIT_TEMPORARY_REG1] < 8 && reg_map[SLJIT_TEMPORARY_REG3] < 8, args_registers",1,1,2
dest + kStepSize > dest,1,1,2
(kind != SLOPPY_ARGUMENTS_ELEMENTS) || (elements()->IsFixedArray() && elements()->length() >= 2),1,1,2
" 16215, w.n == 0 ",1,1,2
 Namespace::MaxNsLen == MaxDatabaseNameLen ,1,1,2
" 12520, ""new file allocation failure"", !failed_ ",1,1,2
thing.kind() != JS::TraceKind::Shape,2,0,2
HEAP->linear_allocation_scope_depth_ >= 0,1,1,2
HasFixedRegisterPolicy() || HasFixedDoubleRegisterPolicy(),1,1,2
this->nodeSize_ < SliceSize,1,1,2
" ""appendNewFromMod push not done"" , 0 ",1,1,2
marked,2,0,2
column <= INT32_MAX,1,1,2
" 13345, ""combinatorial limit of $in partitioning of result set exceeded"", size() < 1000000 ",1,1,2
!now.IsNull(),1,1,2
"sizeof(int) == 4, ""sizeof(int) == 4""",2,0,2
addr <= 0xffff,1,1,2
lit.isSimd(),1,1,2
getAllocKind() == js::gc::FINALIZE_FAT_INLINE_STRING,1,1,2
((sljit_w)jump->u.target - (sljit_w)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_w)jump->u.target - (sljit_w)(buf_ptr + 2)) >= -0x02000000,1,1,2
Exists(singleton),1,1,2
LAST_TOKEN - FIRST_TOKEN < (1 << 4),1,1,2
!gc::IsAboutToBeFinalized(&value),2,0,2
(value) >= 0.0,2,0,2
object_size <= Page::kMaxRegularHeapObjectSize,1,1,2
" ""sharded!"" , s.size() > 0 ",1,1,2
!_conn,1,1,2
" 12597, ""internal error: attempt to unlock when wasn't in a write lock"", false",1,1,2
" 13267, ""only generate simple query if $or"", _or ",1,1,2
type() == JitFrame_Exit,1,1,2
rootfallback.prev == NULL,1,1,2
"10298 , ""can't temprelease nested lock"", false",1,1,2
"""bad object in message"", false",1,1,2
"String::TWO_BYTE_ENCODING, encoding()",1,1,2
scratch32.asUnsized() != addr.base,2,0,2
GetJitContext()->runtime->onMainThread(),1,1,2
"op, LAST_TOKEN",1,1,2
limit == NULL || (reinterpret_cast<intptr_t>(limit) & HeapObjectTagMask()) == 0,1,1,2
"10000, ""timeout getting readlock"", got()",1,1,2
size > 0 && size < 16,1,1,2
!GetHeap()->InNewSpace(GetHeap()->null_value()),1,1,2
" 13000 , (string)""invalid keyNode: "" + BSON( ""i"" << i << ""n"" << n ).jsonString() , i < n ",1,1,2
IsLoadStub(),1,1,2
other.size() == size_,2,0,2
" str::startsWith(_ns, _db->name) ",1,1,2
u.i.s.script_,1,1,2
" 10377 , ""RecCache file too large?"", recnum <= 0x7fffffff ",1,1,2
dst.Is32Bits() && src.Is64Bits(),1,1,2
msg != OkCode,2,0,2
" 16226 , ""not codeWScope"" , type() == CodeWScope ",1,1,2
!heap->InNewSpace(heap->empty_fixed_array()),1,1,2
reg.IsValid(),1,1,2
"session, F_ISSET(&session->txn, TXN_HAS_ID) && clsm->primary_chunk != NULL && (clsm->primary_chunk->switch_txn == WT_TXN_NONE || TXNID_LE(session->txn.id, clsm->primary_chunk->switch_txn))",1,1,2
object != NULL,1,1,2
"session, (*slot)->slot_state == WT_LOG_SLOT_FREE",1,1,2
object->IsFixedArrayBase(),1,1,2
"ptr, ptr->isTenured()",1,1,2
merged_index >= 0,1,1,2
minAsmJSHeapLength_ == 0,1,1,2
index >= first_int32_index() && index < length(),1,1,2
"""basicrestore::get I/O error"", !f.bad()",1,1,2
"session, F_ISSET(session, WT_SESSION_SCHEMA_LOCKED) && F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE) && !LF_ISSET(WT_DHANDLE_LOCK_ONLY)",1,1,2
 NIndexesMax == NIndexesBase + NIndexesExtra ,1,1,2
size_t(js_CodeSpec[*pc].length) == len,1,1,2
(x) < t,2,0,2
idx < this->nodeSize_ / InstSize,1,1,2
"""bad hostpairstring"", hostpairstring.find(',') != string::npos",1,1,2
JSID_TYPE_STRING == 0x0,1,1,2
!hasAll(JSPROP_IGNORE_ENUMERATE | JSPROP_ENUMERATE),2,0,2
" ""mod can't be 0"" , mod ",1,1,2
"10000, ""out of memory AlignedBuilder"", res == 0",1,1,2
holder_->isNative(),2,0,2
 maxLen >= 0 ,1,1,2
"reg_map[SLJIT_SAVED_EREG1] >= 8, saved_ereg1_is_hireg",1,1,2
"13124, ""not master - replSet still initializing"", theReplSet",1,1,2
lockOwner == PR_GetCurrentThread(),1,1,2
chunk->size() <= static_cast<size_t>(kPageSize),1,1,2
GET_OPCODE(op) >= SLJIT_ADD && GET_OPCODE(op) <= SLJIT_ASHR,1,1,2
kind == GetElem_NativeSlot || kind == GetElem_NativePrototypeSlot,1,1,2
iter->getOffset() < perforation.getOffset(),1,1,2
"flags & ACCESSOR_SHAPE, getAllocKind() == gc::FINALIZE_ACCESSOR_SHAPE",1,1,2
 hasElemMatchKey() ,1,1,2
object.Is64Bits(),1,1,2
 R.n == 0 && W.n == 1 ,1,1,2
true_target != NULL,1,1,2
pc_offset() >= label->pos(),1,1,2
!disallow_adding_new_values_,1,1,2
type == string->map()->instance_type(),1,1,2
"""file io error in RecStore [2]"", !f.bad()",1,1,2
" 11001 , ""E11001 duplicate key on update"", !dup",1,1,2
"has(JSPROP_RESOLVING), !has(JSPROP_IGNORE_PERMANENT)",2,0,2
block_buffer_growth_,1,1,2
"(instr->Bits(27, 24) == 0x4) || (instr->Bits(27, 24) == 0x5) || (instr->Bits(27, 24) == 0x6) || (instr->Bits(27, 24) == 0x7) ",1,1,2
" invoke( func , args , timeoutMs ) == 0 ",1,1,2
jump->flags & SLJIT_REWRITABLE_JUMP,1,1,2
lhs != scratch,2,0,2
!rd.IsSP() && rd.Is64Bits(),1,1,2
(op & (SLJIT_SET_E | SLJIT_SET_S)),1,1,2
filler != SamplingCircularQueue::kClear,1,1,2
TMP1 == SLJIT_TEMPORARY_REG1 && STACK_TOP == SLJIT_TEMPORARY_REG2 && TMP2 == SLJIT_TEMPORARY_REG3,1,1,2
is_header_index(),1,1,2
" 13274, ""no or clause to pop"", !orFinished() ",1,1,2
v.isNull() || v.isUndefined(),1,1,2
 d.a() == INMEMFILE ,1,1,2
kDescriptorIndexBitCount + kDescriptorIndexBitCount == 20,1,1,2
"16205, U.n == 0",1,1,2
!is_union(*type),1,1,2
frame_,2,0,2
reg > 0 && reg <= SLJIT_NO_REGISTERS,1,1,2
(uint32_t)code_ < Registers::Total,1,1,2
!heap->InNewSpace(heap->raw_unchecked_empty_fixed_array()),1,1,2
setter_stub_deopt_pc_offset() == Smi::FromInt(0),1,1,2
"Min(dst, const_cast<T*>(src)) + num_bytes <= Max(dst, const_cast<T*>(src))",1,1,2
!InNewSpace(value),1,1,2
"reg_map[SLJIT_SAVED_REG2] >= 8, saved_reg2_is_hireg",1,1,2
static_cast<int>(element) < static_cast<int>(sizeof(T) * CHAR_BIT),1,1,2
jit::AsmJSHeapGlobalDataOffset == sizeof(void*),1,1,2
!value->representation().IsNone() && !to.IsNone(),1,1,2
kJSArray < (1 << (2 * kBitsPerByte)),1,1,2
"Value::isNumberRepresentable(t), ""value creation would be lossy""",2,0,2
"session, WT_STREQ(cst->iface.uri, ""statistics:join"")",1,1,2
override_mode != DISABLE_ALLOCATION_SITES || AllocationSite::GetMode(kind) == TRACK_ALLOCATION_SITE,1,1,2
!gc::IsInsideGGCNursery(static_cast<gc::Cell*>(value.toGCThing())),1,1,2
"instr->Bits(27, 24) == 0x2",1,1,2
"0, current->level",1,1,2
"std::is_integral<Rep2>::value && (std::is_signed<Rep2>::value || sizeof(Rep2) < sizeof(rep)), ""Durations must be constructed from values of integral type that are "" ""representable as 64-bit signed integers""",1,1,2
lineIndex + 1 < lineStartOffsets_.length(),1,1,2
count < MementoFoundCountBits::kMax,1,1,2
*length_out == static_cast<unsigned>(string->length()),1,1,2
HasEnumIndicesCache(),1,1,2
limit_ == NULL || (reinterpret_cast<intptr_t>(limit_) & HeapObjectTagMask()) == 0,1,1,2
!isFree_,2,0,2
isNestedScope,1,1,2
!(op & (SLJIT_INT_OP | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
" 13310, ""could not convert string to long long"", *endPtr == 0 ",1,1,2
"__wt_vpack_int(&p, sizeof(buf), sinput) == 0",1,1,2
!jumplist,1,1,2
buffer8_ < end_,1,1,2
const_pool - code_ptr <= CONST_POOL_ALIGNMENT,1,1,2
!AllowHeapAllocation::IsAllowed() || handle->IsMap(),1,1,2
T::construct == BaseInfo::construct,2,0,2
transitions->IsMap() || transitions->IsUndefined(),1,1,2
FLAG_allocation_site_pretenuring,1,1,2
!IsPoisonedPtr(name),1,1,2
(current_state == JS) == (state == JS),1,1,2
offset >= 0 && offset <= length,1,1,2
"session, buf.memsize >= allocsize",1,1,2
 _objsize <= r->netLength() ,1,1,2
"rt->isAtomsCompartment(ncx->compartment()), kind == FINALIZE_STRING || kind == FINALIZE_FAT_INLINE_STRING || kind == FINALIZE_SYMBOL || kind == FINALIZE_JITCODE",1,1,2
"common, current->cc, &fallback, FALSE",1,1,2
"uintptr_t(JS::TraceKind::JitCode) & OutOfLineTraceKindMask, ""mask bits are set""",2,0,2
"13082, errnoWithDescription(ret), ret == 0",1,1,2
 y_plus_1_ulp > y ,2,0,2
"17491, ""bad replset heartbeat option"", heartbeatTimeoutMillis >= 10",1,1,2
 details->_objsize < 1024 * 1024 * 16 ,1,1,2
" err, userCreateNS( name_, BSONObj(), err, false ) ",1,1,2
(0 < size) && (size <= Page::kMaxRegularHeapObjectSize),1,1,2
"13080, ""no unix socket support on windows"", false",1,1,2
heap->InFromSpace(object),1,1,2
hasLengthCheck(),2,0,2
constructing_,2,0,2
"NULL, WT_METAFILE_NAME_HASH == __wt_hash_city64(WT_METAFILE_URI, strlen(WT_METAFILE_URI))",1,1,2
rinfo->rmode() == RelocInfo::GLOBAL_PROPERTY_CELL,1,1,2
!shared_info_.is_null(),1,1,2
op == SLJIT_MOV || GET_OPCODE(op) == SLJIT_OR,1,1,2
descriptor != Map::kNoneAdded,1,1,2
hydrogen()->IsConstantHoleStore() && hydrogen()->value()->representation().IsDouble(),1,1,2
object->GetIsolate()->heap()->InFromSpace(object),1,1,2
scalarType == z->type(),1,1,2
length() > kBackPointerStorageIndex,1,1,2
"offsetof(JSClass, mayResolve) == offsetof(Class, mayResolve), ""Class and JSClass must be consistent""",2,0,2
 b.len() < 4000000 ,1,1,2
*opcode >= OP_CLASS || *opcode <= OP_XCLASS,1,1,2
((type == CPURegister::kRegister) && (last_reg < kNumberOfRegisters)) || ((type == CPURegister::kFPRegister) && (last_reg < kNumberOfFPRegisters)),1,1,2
aState0 || aState1,2,0,2
" 16627, ""sort pattern must contain 1 or -1"", val*val == 1.0",1,1,2
sizeof(ExitDatum) % sizeof(void*) == 0,1,1,2
this->fixed_index() == fixed_index,1,1,2
length <= NumberOfOwnDescriptors(),1,1,2
from_ + length_ <= string_->length(),1,1,2
"""bad len"", reclen == h.recsize",1,1,2
"offsetof(Holder, data) == 4",1,1,2
version == 3,1,1,2
e.front().value(),2,0,2
"mRawPtr != 0, ""You can't dereference a NULL RefPtr with operator*().""",2,0,2
"session, log->log_dir_fh != NULL",2,0,2
"10000, ""index v field should be Integer type"", e.eoo()",1,1,2
size >= 0,1,1,2
code_ptr <= code + compiler->size,1,1,2
 n >= 0 && n < 8000 ,1,1,2
(callback == NULL) ^ (global_gc_prologue_callback_ == NULL),1,1,2
is_uint16(data),1,1,2
!this->existing_inobject_property() || IsInobject(),1,1,2
" 13261, ""no or to pop"", !_orMatchers.empty() ",1,1,2
"session, !F_ISSET_ATOMIC(page, WT_PAGE_SPLIT_INSERT)",1,1,2
"10088, ""nsToDatabase: ns too long"", i < MaxDatabaseNameLen",1,1,2
" 10307 , ""bad object in message"", false",1,1,2
"16161, QueryPerformanceCounter(&i)",1,1,2
SimdTypeToScalarType(obj->type()) == type,1,1,2
" 10031 , ""bad char(s) in db name"", strchr(nm, ' ') == 0 ",1,1,2
!wrapped,1,1,2
"rear_.length() > 0, front_.length() > 0",2,0,2
value->kind() != Code::OPTIMIZED_FUNCTION,1,1,2
!rinfo->target_object()->IsConsString(),1,1,2
MayContainTransitions() || IsEmpty(),1,1,2
js::FunctionObjectIsNative(&v.toObject()),2,0,2
objp,1,1,2
this->immutable() == immutable,1,1,2
depth_ <= maximum_depth_,1,1,2
!left->IsConstant() || (!HConstant::cast(left)->HasInteger32Value() || HConstant::cast(left)->HasSmiValue()),1,1,2
buffer == dataPointer(),1,1,2
!lit.isSimd(),1,1,2
immediate < 0x10000,1,1,2
obj->IsJSGeneratorObject(),1,1,2
!is_ascii_,1,1,2
getter.isUndefined() || IsCallable(getter),1,1,2
" 16222, X.n > 0 ",1,1,2
trc_->contextFunctor_,2,0,2
!(src & SLJIT_MEM) || (src & 0xf) != SLJIT_LOCALS_REG,1,1,2
"session, entry->cache_size >= adjusted && cp->currently_used >= adjusted",1,1,2
which_ == Float,1,1,2
!should_log_symbols_,1,1,2
"Proxy::objectClassIs(obj, ESClass_RegExp, cx)",1,1,2
baselineCallReturnAddr_ != nullptr,1,1,2
!heap->InNewSpace(heap->undefined_value()),1,1,2
index >= this->first_int32_index() && index < length(),1,1,2
"std::is_integral<Rep2>::value && std::is_signed<Rep2>::value, ""Durations must be constructed from values of signed integral type""",1,1,2
function->code() == function->shared()->code(),1,1,2
kNumberOfFlags + kNumberOfSpecials == sizeof(bits_) * CHAR_BIT,1,1,2
uintptr_t(ptr) & 0x1,1,1,2
_isHostSet,1,1,2
 elem.isNumber() ,1,1,2
top_ == NULL || (reinterpret_cast<intptr_t>(top_) & HeapObjectTagMask()) == 0,1,1,2
" 13385, ""combinatorial limit of $in partitioning of result set exceeded"", size() < 1000000 ",1,1,2
"session, !F_ISSET(txn, WT_TXN_HAS_ID) || !__wt_txn_visible(session, txn->id)",1,1,2
aRhs.template is<T>(),2,0,2
GET_OPCODE(op) >= SLJIT_FCMP && GET_OPCODE(op) <= SLJIT_FABS,1,1,2
 o <= 0x7fffffff ,1,1,2
"sizeof(SetType) == 1, ""SetType must be 8 bits""",1,1,2
index < kNumberOfInobjectFields,1,1,2
" ""globalConn not set"" , globalConn ",1,1,2
 y_less_1_ulp < y ,2,0,2
which_ == Fixnum || which_ == NegativeInt || which_ == BigUnsigned,1,1,2
IsFPRegister() || IsNone(),1,1,2
 R.n > 0 && W.n == 0 ,1,1,2
" 10028 , ""db name is empty"", L > 0 ",1,1,2
"type(), JAVA_SCRIPT",1,1,2
!other._holder,1,1,2
kKindFieldWidth == 3,1,1,2
array_sub_type <= LAST_FIXED_ARRAY_SUB_TYPE,1,1,2
backgroundIndexBuildInProgress,1,1,2
"strftime(buf, sizeof(buf), ""%Y-%m-%dT%H:%M:%S"", &t) == 19",1,1,2
"aCmp, ""Nodes shouldn't be equal!""",2,0,2
"t, !IsInsideNursery(t)",1,1,2
LockModesCount == MODE_X + 1,1,1,2
sizeof(int) == sizeof(int32_t),1,1,2
setter.isUndefined() || IsCallable(setter),1,1,2
"mozilla::IsPointer<T>::value, ""nullptr_t overload not valid for non-pointer types""",2,0,2
"""too many namespaces/collections"", ht->put(n, details)",1,1,2
" 10032 , ""db name too long"", L < 64 ",1,1,2
"string(""recstore recsize mismatch, file:"")+fn, h.recsize == recsize",1,1,2
top == NULL || (reinterpret_cast<intptr_t>(top) & HeapObjectTagMask()) == 0,1,1,2
(1L << kBitsPerRegisterNumber) >= Register::kNumRegisters,1,1,2
" sizeof(sljit_b) == 1 && sizeof(sljit_ub) == 1 && sizeof(sljit_h) == 2 && sizeof(sljit_uh) == 2 && sizeof(sljit_i) == 4 && sizeof(sljit_ui) == 4 && ((sizeof(sljit_w) == 4 && sizeof(sljit_uw) == 4) || (sizeof(sljit_w) == 8 && sizeof(sljit_uw) == 8)), invalid_integer_types",1,1,2
SizeInBits() % 8 == 0,1,1,2
!interpCodeOffset_,1,1,2
"session, bm != NULL",1,1,2
instr->Bit(30) == 0,1,1,2
_isEpochSet,1,1,2
CpuFeatures::IsSafeForSnapshot(SSE2) || fp_mode == kDontSaveFPRegs,1,1,2
"session, nchunks <= merge_max",1,1,2
"session, session->metafile != NULL",1,1,2
 n.len >= maxLen ,1,1,2
depth_ > 0,1,1,2
"(NativeObject::NELEMENTS_LIMIT - 1) <= INT32_MAX / sizeof(JS::Value), ""every caller of this method require that an element "" ""count multiplied by sizeof(Value) can't overflow "" ""uint32_t (and sometimes int32_t ,too)""",1,1,2
"IsAligned(stack_size_in_bytes, kPointerSize)",1,1,2
" ""rename not yet implemented for InMem_RecStore"", false ",1,1,2
sizeof(sinkchar) <= 2,1,1,2
GET_OPCODE(op) >= SLJIT_FADD && GET_OPCODE(op) <= SLJIT_FDIV,1,1,2
TypeField::is_valid(type),1,1,2
!unresolved_branches_.empty(),1,1,2
"comp && !runtime_->isAtomsCompartment(comp), !runtime_->isAtomsZone(comp->zone())",1,1,2
!result || HeapObject::cast(this)->map()->is_access_check_needed(),1,1,2
 Lock::isReadLocked() ,1,1,2
is_optimized_code(),1,1,2
length >= 0,1,1,2
" 10348 , ""ns name too long"", s.size() < MaxNsLen",1,1,2
" 16626, ""sort pattern must be numeric"", elem.isNumber() ",1,1,2
" 10304 , ""Remaining data too small for BSON object"", theEnd - nextjsobj > 3 ",1,1,2
proto->IsJSGlobalObject(),1,1,2
preferred_old_space == OLD_POINTER_SPACE || preferred_old_space == OLD_DATA_SPACE,1,1,2
"10000, ""out of memory AlignedBuilder""",1,1,2
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == STUB || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC,1,1,2
"10088, ""nsToDatabase: ns too long"", i < (size_t)MaxDatabaseNameLen",1,1,2
BucketType* bucket,1,1,2
"result, input_queue_capacity_",1,1,2
sizeof(T) == 1,1,1,2
" ""unknonw mod"" , 0 ",1,1,2
"16736, str::stream() << ""Invalid index type '"" << pluginName << ""' "" << ""in index "" << keyPattern, known",1,1,2
"16146, ""Reached maximum recursion depth of "" + BSONObjBuilder::numStr(BSONObj::maxToStringRecursionDepth), full != true",1,1,2
 b.len() == 0 ,1,1,2
sizeof(PCCounts) % sizeof(Value) == 0,1,1,2
(reg_type != kNoRegister) || (reg_code == 0),1,1,2
"session, conn->arch_tid_set != 0",1,1,2
 R.n == 0 ,1,1,2
GetStrictMode(code->extra_ic_state()) == GetStrictMode(target()->extra_ic_state()),1,1,2
range->Kind() == GENERAL_REGISTERS,1,1,2
IsPowerOf2(lanes_) && (lanes_ <= 16),2,0,2
gc::IsMarked(x),1,1,2
RuntimeProfiler::IsSomeIsolateInJS(),1,1,2
!used(),1,1,2
key,2,0,2
(SizeLS_offset + SizeLS_width) == (kInstructionSize * 8),1,1,2
"session, !pfh->direct_io || S2C(session)->buffer_alignment == 0 || (!((uintptr_t)buf & (uintptr_t)(S2C(session)->buffer_alignment - 1)) && len >= S2C(session)->buffer_alignment && len % S2C(session)->buffer_alignment == 0)",2,0,2
!regoffset_.IsSP(),1,1,2
HeapNumberRegisterBits::is_valid(the_heap_number_.code()),1,1,2
 QueryPerformanceFrequency(&freq) ,1,1,2
" 10304, ""Client Error: Remaining data too small for BSON object"", theEnd - nextjsobj >= 5 ",1,1,2
i < numLanes_,2,0,2
storageType >= 0 && storageType < Scalar::MaxTypedArrayViewType,2,0,2
"session, ret != 0 || exclusive == (*treep)->exclusive",1,1,2
" 13083, ""unable to set SO_RCVTIMEO"", setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (char *) &tv, sizeof(tv) ) == 0 ",1,1,2
is_tagged(type),1,1,2
values[T::kCalleeIndex]->IsJSFunction(),1,1,2
"16140, W.n == 1",1,1,2
Assembler::IsBne(second_instruction),1,1,2
 !_ranges.back().empty() ,1,1,2
!string->IsConsString(),1,1,2
"16920, ""trying to match on unknown field: "" + path.fieldRef().dottedField(), 0",1,1,2
regoffset.Is64Bits() && !regoffset.IsSP(),1,1,2
!(details_.type() == CONSTANT && !IsFound()),1,1,2
GetObjectClass(fun) == FunctionClassPtr,2,0,2
isolate()->use_crankshaft(),1,1,2
" 12520, ""new file allocation failure"" ",1,1,2
" ""compile packing problem recstore?"", sizeof(RecStoreHeader) == 512",1,1,2
"static_cast<int>(result->Hash()), static_cast<int>(hash_field >> String::kHashShift)",1,1,2
keyPattern.hasDefault(),1,1,2
"!(boost::is_same<T, Status>::value)",1,1,2
jit::AsmJSNaN32GlobalDataOffset == nan32GlobalDataOffset(),1,1,2
compiler->cpool_diff == CONST_POOL_EMPTY || compiler->size - compiler->cpool_diff < MAX_DIFFERENCE(4092),1,1,2
scratch64.asUnsized() != address.index,2,0,2
 maxLen <= 4*1024*1024 + 128 ,1,1,2
IsMarked(obj),1,1,2
 client->name == cl ,1,1,2
type != PROPERTY_CELL_TYPE,1,1,2
"(static_cast<int>(Category::FIRST) & Flags::ALL) == 0, ""The category bitflags should not intersect with the other flags!""",2,0,2
getter != JS_PropertyStub,1,1,2
" ""only readOnly setObject supported in java"" , readOnly ",1,1,2
"hasDefaultSetter(), hasGetterValue()",1,1,2
!object->IsSmi(),1,1,2
" 16645, ""sort pattern must be numeric"", elem.isNumber() ",1,1,2
"session, !is_dead",1,1,2
 _special.empty() ,1,1,2
backing_[kStrictModeIndex] == SLOPPY || backing_[kStrictModeIndex] == STRICT,1,1,2
!rs.Aliases(rt2),2,0,2
"mRawPtr != 0, ""You can't dereference a NULL RefPtr with operator->().""",2,0,2
flags,2,0,2
RelocInfo::IsCodeAgeSequence(rinfo->rmode()),1,1,2
i_ < bindings_->numArgs(),1,1,2
" reg_map[SLJIT_TEMPORARY_REG1] == 0 && reg_map[SLJIT_TEMPORARY_REG2] == 2 && reg_map[TMP_REGISTER] > 7, invalid_register_assignment_for_div_mul",1,1,2
 pre == 1 ,1,1,2
trc_->contextIndex_ == CallbackTracer::InvalidIndex,2,0,2
"group->maybeUnboxedLayout(), !group->unboxedLayout().nativeGroup()",1,1,2
is_array_index_,1,1,2
 n.p[n.len] == 0 ,1,1,2
" 16639, ""invalid sort pattern"", field.size() > 0 ",1,1,2
"std::is_trivially_copyable<T>::value, ""Type for DataView::readNative must be trivially copyable""",1,1,2
special < kNumberOfSpecials,1,1,2
location_ != NULL && !(*location_)->IsFailure(),1,1,2
sizeof(1L) == sizeof(int64_t),1,1,2
(size_in_bits % kBitsPerByte) == 0,1,1,2
regoffset_.Is64Bits() && !regoffset_.IsSP(),1,1,2
sizeof(CPURegister) == sizeof(Register),1,1,2
"session, release == 0",1,1,2
"mozilla::IsSame<T, U>::value, ""mozilla::Variant: tag: bad type!""",2,0,2
to_space_.current_page()->ContainsLimit(allocation_info_.limit()),1,1,2
"pendingLazyEvaluation, matchesInput",1,1,2
thread->IsOptimizerThread() || !HEAP->IsAllocationAllowed(),1,1,2
"NULL, error > 0 && error > -(windows_error_offset)",1,1,2
mLength > 0,2,0,2
 _cs.OwningThread == (HANDLE) GetCurrentThreadId() ,1,1,2
!CpuFeatures::IsSafeForSnapshot(SSE2),1,1,2
!hasAll(JSPROP_IGNORE_PERMANENT | JSPROP_PERMANENT),2,0,2
(pc_ + size) <= (buffer_ + buffer_size_),1,1,2
 wi.w_ptr == 0 ,1,1,2
!IsAtomsCompartment(cx->compartment()),1,1,2
location_ == NULL || IsDereferenceAllowed(INCLUDE_DEFERRED_CHECK),1,1,2
"CPURegister(code, size_, type_).IsValid()",2,0,2
GeneralRegisterSet(Registers::SingleByteRegs).has(lhs),1,1,2
array->HasFastSmiOrObjectElements(),1,1,2
16200,1,1,2
kFastCloneModeCount < 16,1,1,2
implicit_args[v8::Arguments::kIsolateIndex]->IsSmi(),1,1,2
"string(""bad recstore [1], file:"")+fn, (h.leof-sizeof(RecStoreHeader)) % recsize == 0",1,1,2
globalDataOffset < globalDataBytes(),1,1,2
thingSize >= sizeof(JSObject),1,1,2
 !element_.eoo() ,1,1,2
ranges_[range].from <= pos,1,1,2
sizeof(SetType) == 8,2,0,2
!pod.hasArrayView_ || (pod.isSharedView_ == isSharedView),1,1,2
reg.Is64Bits() || ((extend != SXTX) && (extend != UXTX)),1,1,2
!has(JSPROP_READONLY),2,0,2
!(inst & 0xffff0000),1,1,2
is_class(type),1,1,2
 _queues[empty].empty() ,1,1,2
" ""BSONObj size spec too small"", objsize() > 0 ",1,1,2
frame,1,1,2
object->IsFlat(),1,1,2
i < kNumberOfTrackedSideEffects,1,1,2
"13652, str::stream() << ""Couldn't find parent dir for file: "" << file.string(), file.has_branch_path()",1,1,2
"session, txn_state->snap_min == WT_TXN_NONE || session->txn.isolation == TXN_ISO_READ_UNCOMMITTED || !__wt_txn_visible_all(session, txn_state->snap_min)",1,1,2
"session, conn->arch_cond != NULL",1,1,2
"0, r.n > 0",1,1,2
"IsAccessorAccessorConflict(old_type, type)",1,1,2
"session, *mappingcookie != NULL",1,1,2
(pc_offset() + kGap) == buffer_size_,1,1,2
key->IsNumber(),1,1,2
"obj, !isNullLike(obj)",2,0,2
!(fun->flags & js::JS_FUNCTION_INTERPRETED_BITS),2,0,2
"OtherOverThis::den == 1 || OtherOverThis::num == 1, ""Mongo duration types are only compatible with each other when one's period "" ""is an even multiple of the other's.""",2,0,2
CurrentThreadIsGCSweeping(),1,1,2
reg.Is32Bits() || (shift_amount < kXRegSizeInBits),1,1,2
"session, ext->off + ext->size <= fh->size",1,1,2
"session, session->txn.isolation == TXN_ISO_READ_UNCOMMITTED || !__wt_txn_visible_all(session, txn_state->snap_min)",1,1,2
object->GetIsolate()->heap()->InFromSpace(*p),1,1,2
fd.Is32Bits(),1,1,2
 *((unsigned*)magic) == 0x0a0a0a0a ,1,1,2
code_ != Uninitialized,2,0,2
"*pc == JSOP_STRICTSETGNAME, scope == cx->global()",1,1,2
isNaN(rhs),1,1,2
(reg_size == kXRegSizeInBits) || is_uint6(imms + 3),1,1,2
 sizeof(dataFileVersion) == 2 ,1,1,2
value->IsBoolean(),1,1,2
gc::FINALIZE_OBJECT_LAST == gc::FINALIZE_OBJECT16_BACKGROUND,1,1,2
!pod.isSharedView_ || isSharedView,1,1,2
jumbo.hasDefault(),1,1,2
instr->Bit(28) == 0x1,1,1,2
_defaultSet,1,1,2
" ""not sorted"" , _sorted ",1,1,2
isolate()->top_lookup_result() == this,1,1,2
Imm16::IsInSignedRange(AsmJSHeapGlobalDataOffset - AsmJSGlobalRegBias),1,1,2
js_CodeSpec[pn_op].format & JOF_NAME,1,1,2
op->IsRegister(),1,1,2
" 10293 , ""internal error: locks are not upgradeable"", s == 0 ",1,1,2
value->IsCallRuntime(),1,1,2
scalarType == y->type(),1,1,2
!const_ || const_->addr >= half_count,1,1,2
"""ns name too long, max size is 128"", strlen(ns) < MaxNsLen",1,1,2
" 14044 , std::string(""unknown boost failed "") + msg ",1,1,2
"reg_map[SLJIT_TEMPORARY_EREG2] >= 8, temporary_ereg2_is_hireg",1,1,2
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_C_SIG_LESS_EQUAL,1,1,2
sizeof(long) == sizeof(int64_t),1,1,2
 _type != MASTER ,1,1,2
"10298 , ""can't temprelease nested lock"", !Lock::nested()",1,1,2
constant >= 0 && constant < kRootArrayNumberOfConstantEncodings,1,1,2
"session, log->alloc_lsn.file >= log->write_lsn.file",1,1,2
!rd.IsSP(),1,1,2
RelocInfo::IsCodeTarget(rinfo->rmode()),1,1,2
" 13493, ""not implemented"", false ",1,1,2
type() == Module,2,0,2
interval->vreg() == i,1,1,2
(reg.code() - 2) < (kMaxNumAllocatableRegisters - 1) || reg.is(from_code(kCpRegister)),1,1,2
"current->next, current->limit",1,1,2
(space).page_low() <= (info).top() && (info).top() <= (space).page_high() && (info).limit() <= (space).page_high(),1,1,2
"1 << defaultShift == sizeof(JS::Value), ""The defaultShift is wrong""",2,0,2
next == token,1,1,2
reg.Is64Bits() || (shift_amount < kWRegSizeInBits),1,1,2
class_name == isolate_->heap()->Boolean_string(),1,1,2
"isDataDescriptor(), writable()",1,1,2
IsHandler(),1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U)),1,1,2
"11601,""operation was interrupted""",1,1,2
!(type & ~(0xff | SLJIT_INT_OP | SLJIT_REWRITABLE_JUMP)),1,1,2
"session, final || bulk || F_ISSET(session, WT_SESSION_LOCKED_SCHEMA)",1,1,2
"session, manager->lsm_workers == 1",1,1,2
pc_ < (buffer_ + buffer_size_),1,1,2
transitions() != transition_array,1,1,2
10 + kDescriptorIndexBitCount + kDescriptorIndexBitCount <= 31,1,1,2
"length_, new_capacity",1,1,2
!this->is_empty(),1,1,2
!HeapObject::cast(obj)->GetHeap()->InNewSpace(obj),1,1,2
!HEAP->InNewSpace(obj),1,1,2
" 10294 , ""getFile(): bad file number - using recstore db w/nonrecstore db build?"", false",1,1,2
sizeof(kFP64SignallingNaN) == sizeof(bits_),1,1,2
"session, __wt_atomic_cas_ptr(&ref->key.ikey, (WT_IKEY *)oldv, ikey)",1,1,2
kMarkedForDeoptimizationFirstBit + kMarkedForDeoptimizationBitCount <= 32,1,1,2
scratch64.asUnsized() != dest.base,2,0,2
is_array_index(),1,1,2
(sizeof(value) == 1) || (sizeof(value) == 2) || (sizeof(value) == 4) || (sizeof(value) == 8) || (sizeof(value) == 16),2,0,2
unescaped_length <= String::kMaxLength,1,1,2
HasStringValue(),1,1,2
"16137, r.n > 0",1,1,2
"session, parent_refp - pindex->index == pindex->entries - skip_trailing",1,1,2
"IsIntegral<IntType>::value, ""value must be integral""",2,0,2
 sizeof(NamespaceDetails::Extra) <= sizeof(NamespaceDetails) ,1,1,2
Marking::Color(array) == Marking::WHITE_OBJECT,1,1,2
 extraOffset ,1,1,2
kind == ICStub::GetProp_CallScripted || kind == ICStub::GetProp_CallNative || kind == ICStub::GetProp_CallNativePrototype,1,1,2
((size_t)str & JSID_TYPE_MASK) == 0,1,1,2
"maybeFieldName_, maybeFieldName_->isTenured()",2,0,2
"pendingLazyEvaluation, lazySource",1,1,2
array->IsSortedNoDuplicates(valid_entries),1,1,2
((inst[0] & 0xfbf0) == (MOVW >> 16)) && ((inst[2] & 0xfbf0) == (MOVT >> 16)) && dst == (inst[3] & 0x0f00),1,1,2
(kind != NON_STRICT_ARGUMENTS_ELEMENTS) || (elements()->IsFixedArray() && elements()->length() >= 2),1,1,2
" ""invoke failed"" , invoke( code , args , timeoutMs ) == 0 ",1,1,2
shortBalancerSleep.hasDefault(),1,1,2
has_alternatives && *hotpath >= OP_ASSERT && *hotpath <= OP_ASSERTBACK_NOT,1,1,2
"sizeof(JSObject) >= CellSize, ""All allocations must be at least the allocator-imposed minimum size.""",1,1,2
type_ == kElement || type_ == kHidden,1,1,2
!is_array_index(),1,1,2
" 16159, ""manual keyFieldsOnly config not allowed"", false ",1,1,2
(bit & (bit - 1)) == 0,2,0,2
"uintptr_t(JS::TraceKind::BaseShape) & OutOfLineTraceKindMask, ""mask bits are set""",2,0,2
store_mode != STORE_TO_INITIALIZED_ENTRY || elements_kind == FAST_SMI_ELEMENTS,1,1,2
"0, index",1,1,2
"__wt_struct_packv(NULL, buf, sizeof(buf), fmt, ap) == 0",1,1,2
" 10128 , ""too much data for sort() with no index. add an index or specify a smaller limit"", _approxSize < 32 * 1024 * 1024 ",1,1,2
"ReplicationCoordinator::Mode expectedMode, const BSONObj& configDoc, const HostAndPort& selfHost",1,1,2
"13645, str::stream() << ""stat() failed for file: "" << path << "" "" << errnoWithDescription()",1,1,2
index >= first_code_ptr_index() && index < first_int32_index(),1,1,2
current->topfallbacks == NULL,1,1,2
!reg.is(kLithiumScratchDouble),1,1,2
Assembler::IsBne(masm->instr_at(pos)),1,1,2
IsSharedTypedArrayClass(getClass()),1,1,2
" 28559, retCode != WT_PANIC ",1,1,2
"16476, ""the requested value is out of the range of the computed quantiles"", i <= NumQuantiles + 1",1,1,2
"session, cache->evict_queue[0].ref != NULL",1,1,2
"1 << defaultShift == sizeof(jsval), ""The defaultShift is wrong""",1,1,2
diff <= 127 && diff >= -128 && (jump->flags & IS_CONDITIONAL),1,1,2
!(uintptr_t(l) & gc::ChunkMask),1,1,2
!seq_string.is_null(),1,1,2
 _state.get() != 0 ,1,1,2
"""file io error in BasicRecStore [1]"", !f.bad()",1,1,2
keyComp != NULL,1,0,1
"session, TAILQ_EMPTY(&cp->cache_pool_qh)",1,0,1
"session, optype == WT_LOGOP_ROW_TRUNCATE",1,0,1
size_t(src.offset()) <= size(),1,0,1
"bloom->session, bloom->bitstring == NULL",1,0,1
"ErrorCodes::DurationOverflow, ""Overflow casting from a lower-precision duration to a higher-precision duration"", !mongoSignedMultiplyOverflow64(from.count(), FromOverTo::num, &toCount)",1,0,1
"(WT_SESSION_IMPL *)session, ins->kvraw == NULL",1,0,1
"session, !F_ISSET(session, WT_SESSION_LOCKED_TURTLE)",1,0,1
arg->isDefn(),1,0,1
byteRegs.has(r1),1,0,1
"session, slot->slot_unbuffered == 0",1,0,1
primeIndex >= 0 && primeIndex < PRIMES_LENGTH,1,0,1
(sizeof(T) == kBRegSizeInBytes) || (sizeof(T) == kHRegSizeInBytes) || (sizeof(T) == kSRegSizeInBytes) || (sizeof(T) == kDRegSizeInBytes) || (sizeof(T) == kQRegSizeInBytes),1,0,1
"!script->hasNonSyntacticScope(), lexicalScopeArg == &cx->global()->lexicalScope()",1,0,1
"jcursor->get_key(jcursor, &i) == 0",1,0,1
i->firstEntryIndex <= pe.index() && (i + 1 == e || (i + 1)->firstEntryIndex > pe.index()),1,0,1
scratch64.asUnsized() != rhs,1,0,1
"session, __wt_verify_dsk_image(session, ""[raw evict split]"", tmp->data, dsk->mem_size, false) == 0",1,0,1
"session, align_size <= UINT32_MAX",1,0,1
"session, lsm_tree->queue_ref > 0",1,0,1
"isTenured(), extended == (asTenured().getAllocKind() == js::gc::AllocKind::FUNCTION_EXTENDED)",1,0,1
i_ >= bindings_.numArgs(),1,0,1
"!CurrentThreadCanAccessRuntime(thing->runtimeFromAnyThread()), !shadowZone->needsIncrementalBarrier()",1,0,1
isGlobal(),1,0,1
!is<ModuleEnvironmentObject>(),1,0,1
kind != Builtin,1,0,1
MMathFunction::Sin == func || MMathFunction::Cos == func,1,0,1
elements_ == emptyObjectElements,1,0,1
v.isObject() || v.isUndefined(),1,0,1
"db_env_create(&dbenv, 0) == 0",1,0,1
pod.interpCodeOffset_,1,0,1
"session, __wt_atomic_cas_ptr(&ref->ref_ikey, (WT_IKEY *)oldv, ikey)",1,0,1
"session, not_null == false",1,0,1
"(s), txn_state->id == saved_state.id && (txn_state->snap_min == saved_state.snap_min || saved_state.snap_min == WT_TXN_NONE)",1,0,1
hashBuckets() == buckets,1,0,1
"session, orig->type != WT_PAGE_COL_VAR || ref->ref_recno != 0",1,0,1
"session, (*op)->state == WT_ASYNCOP_ENQUEUED",1,0,1
!scratch64.Is(fsrc),1,0,1
"ErrorCodes::JSInterpreterFailure, ""Parent is not an object""",1,0,1
src != tgt,1,0,1
"session, logcount == 0",1,0,1
pn->isKind(PNK_MODULE),1,0,1
valueOp == 1,1,0,1
"jit::AsmJSCheckedImmediateRange <= jit::AsmJSImmediateRange, ""AsmJSImmediateRange should be the size of an unconstrained "" ""address immediate""",1,0,1
CodeSpec[pn_op].format & JOF_NAME,1,0,1
"mozilla::IsPointer<T>::value, ""SharedMem encapsulates pointer types""",1,0,1
"session, search_recno != WT_RECNO_OOB",1,0,1
"CheckVarNameConflict(cx, lexicalScope, dn)",1,0,1
capacity(),1,0,1
((imm7 >> access_size) << access_size) == imm7,1,0,1
kind == ICStub::GetElem_NativeSlotName || kind == ICStub::GetElem_NativeSlotSymbol || kind == ICStub::GetElem_NativePrototypeSlotName || kind == ICStub::GetElem_NativePrototypeSlotSymbol || kind == ICStub::GetElem_UnboxedPropertyName,1,0,1
"16 == sizeof(DeletedRecord), ""16 == sizeof(DeletedRecord)""",1,0,1
hasValue() && isType(mongo::NumberDecimal),1,0,1
d.size == 4100,1,0,1
column>=0,1,0,1
IsSimdType(t),1,0,1
"bl, innermostStmt()->type == StmtType::BLOCK",1,0,1
"session, txn_state->snap_min == WT_TXN_NONE",1,0,1
(type_ != kNoRegister) || (code_ == 0),1,0,1
"session, lsm_tree->nchunks == 1 && clsm->nchunks == 1",1,0,1
a.base != scratch64.asUnsized(),1,0,1
laneType == y->type(),1,0,1
pnchild,1,0,1
"session, WT_PTRDIFF(&(a)[1], &(a)[0]) >= WT_CACHE_LINE_ALIGNMENT && WT_PTRDIFF(&(a)[1], &(a)[0]) % WT_CACHE_LINE_ALIGNMENT == 0",1,0,1
_area.capacity() == 0,1,0,1
jcursor->next(jcursor) == 0,1,0,1
d < kMaxLocalDocId,1,0,1
IsQuietNaN(op3),1,0,1
"offset_ + delta >= offset_, ""no overflow""",1,0,1
"Keys == ITEM_KIND_KEY, ""IteratorKind Keys must match self-hosting define for item kind key.""",1,0,1
"std::is_standard_layout<WTYPE>::value, ""std::is_standard_layout<WTYPE>::value""",1,0,1
staticScope,1,0,1
"session, __wt_log_cmp( &close_end_lsn, &log->sync_lsn) >= 0",1,0,1
scratch1_64.asUnsized() != lhs.base,1,0,1
"LENGTH_SLOT == JS_TYPEDARRAYLAYOUT_LENGTH_SLOT, ""self-hosted code with burned-in constants must get the "" ""right length slot""",1,0,1
"session, !value_only || coltype == WT_PROJ_VALUE",1,0,1
"db->cursor(db, NULL, &dbc, 0) == 0",1,0,1
scratch32.asUnsized() != lhs.index,1,0,1
"session, S2BT(session)->evict_ref != ref",1,0,1
!(Is8Bits() && IsVector()),1,0,1
array_ != NULL,1,0,1
"derived, isClassConstructor()",1,0,1
GetBoxedOrUnboxedCapacity<DstType>(dst) >= dstStart + length,1,0,1
wp == data + liveCount,1,0,1
!RelocationOverlay::isCellForwarded(thing.asCell()),1,0,1
i == length - 1,1,0,1
"sizeof(ResourceId) == sizeof(uint64_t), ""sizeof(ResourceId) == sizeof(uint64_t)""",1,0,1
aliasIdx < Codes::NumTypes,1,0,1
objectMetadataState.is<js::DelayMetadata>(),1,0,1
scratch != value.valueReg(),1,0,1
"session, cl->logrec->data != NULL",1,0,1
T::addProperty == BaseInfo::addProperty,1,0,1
"session, !updating",1,0,1
"sizeof(int64) == sizeof(long long), sizeof_int64_is_not_sizeof_long_long",1,0,1
"session, __wt_verify_dsk_image(session, ""[evict split]"", buf->data, buf->size, true) == 0",1,0,1
"PND_IMPORT < (1 << NumDefinitionFlagBits), ""Not enough bits""",1,0,1
"session, op->u.upd->txnid == txn->id",1,0,1
tokenStream.debugHasNoLookahead(),1,0,1
"sizeof(T) == sizeof(uint32_t), ""sizeof(T) == sizeof(uint32_t)""",1,0,1
src1.size() == 16,1,0,1
"WT_ALIGN(sizeof(type), (a)) == sizeof(type)",1,0,1
visitor->IsConstVisitor(),1,0,1
"offset() + delta >= offset(), ""no overflow""",1,0,1
!pn_objbox,1,0,1
next.type != TOK_NAME,1,0,1
"this != &rhs, ""self-move is not allowed""",1,0,1
(round_mode == FPTieEven) || (round_mode == FPRoundOdd),1,0,1
!compileTime_,1,0,1
reg_size_log2 >= lane_size_log2,1,0,1
!isUnboxed(),1,0,1
byte >= 128,1,0,1
"session, WT_TXNID_LE(txn_global->oldest_id, txn_state->id) && WT_TXNID_LE(txn_global->oldest_id, txn_state->snap_min)",1,0,1
"session, skip || buf != NULL",1,0,1
!scratch.Is(index64),1,0,1
(x),1,0,1
i < mir()->numVectors(),1,0,1
scratch32.asUnsized() != lhs.base,1,0,1
T::finalize == BaseInfo::finalize,1,0,1
"session, last != current",1,0,1
"session, op->state == WT_ASYNCOP_WORKING",1,0,1
"session, slot != log->active_slot",1,0,1
"session, WT_CKPT_LOGSIZE(conn)",1,0,1
"__wt_random_init_seed(NULL, &rnd) == 0",1,0,1
dbc->close(dbc) == 0,1,0,1
stmt != innermostScopeStmt_,1,0,1
type_ == ValType::I32,1,0,1
hasIndex(),1,0,1
"AsmJSMinHeapLength % AsmJSPageSize == 0, ""Invalid page size""",1,0,1
dest.low != eax && dest.low != edx,1,0,1
"!this->oom(), pool_.numEntries() == 0",1,0,1
bytelength_ + numBytes <= SliceSize,1,0,1
!Chunk::fromAddress(addr)->isNurseryChunk(),1,0,1
"bl, innermostStmt()->staticScope ->template as<StaticBlockObject>() .enclosingStaticScope() == sc->staticScope()",1,0,1
is_uint2(index),1,0,1
data_.jitFrames_.isIonScripted(),1,0,1
!absoluteLabel->bound(),1,0,1
!IsConstVisitor(),1,0,1
(reg_size == kXRegSize) || (bitn == 0),1,0,1
reg.isSingle(),1,0,1
"session, suffix != NULL",1,0,1
withinValidRange(addr),1,0,1
((int32_t)policy) >= 0,1,0,1
buffer == dataPointerShared(),1,0,1
where.prev->next == item,1,0,1
blockScopes.length() < StmtInfoPC::BlockIdLimit,1,0,1
"std::is_integral<Rep2>::value && std::is_signed<Rep2>::value, ""Durations may only be multiplied by values of signed integral type""",1,0,1
"session, page_refp - pindex->index == (ptrdiff_t)pindex->entries",1,0,1
liveCount == 0,1,0,1
slot.isObject(),1,0,1
indices[i] < length,1,0,1
(markedCell == extractUnbarriered(key)) || (markedCell == getDelegate(key)),1,0,1
sharedness_ == IsUnshared,1,0,1
"session, F_ISSET(buf, WT_ITEM_ALIGNED)",1,0,1
"session, el->track_size == 0",1,0,1
indices[i] >= lastIndex,1,0,1
"session, btree->huffman_key != NULL",1,0,1
!builder || !hasPendingIonBuilder(),1,0,1
sizeof(new_value) <= kSizeInBytes,1,0,1
stubCode,1,0,1
bytes % sizeof(intptr_t) == 0,1,0,1
IsSimdType(vecType),1,0,1
T::setProperty == BaseInfo::setProperty,1,0,1
HasBoxedOrUnboxedDenseElements<SrcType>(src),1,0,1
nodeIndex < indices.length(),1,0,1
"pcIsPatchable(pc, sizeof(uint8_t))",1,0,1
pnchild->pn_next,1,0,1
list->isKind(PNK_CLASSMETHODLIST),1,0,1
"session, __wt_page_is_modified(page) || LF_ISSET(WT_EVICT_LOOKASIDE) || F_ISSET(S2BT(session), WT_BTREE_LOOKASIDE) || __wt_txn_visible_all(session, page->modify->rec_max_txn)",1,0,1
"offsetof(WT_CURSOR_BACKUP, iface) == 0",1,0,1
T::getProperty == BaseInfo::getProperty,1,0,1
"session, cmpp != NULL",1,0,1
_hash == StringMapTraits::hash(_key),1,0,1
"ptr && !ptr->isTenured(), !CurrentThreadIsIonCompilingSafeForMinorGC()",1,0,1
"sizeof(BaseShape) % gc::CellSize == 0, ""Things inheriting from gc::Cell must have a size that's "" ""a multiple of gc::CellSize""",1,0,1
"!isBeingParsed(), !environment()",1,0,1
"std::is_trivially_copyable<T>::value, ""T must be trivially copyable""",1,0,1
f == NULL || dynamic_cast<To>(f) != NULL,1,0,1
src.size() == 16,1,0,1
kind == js::gc::AllocKind::FUNCTION || kind == js::gc::AllocKind::FUNCTION_EXTENDED,1,0,1
rhs->digits > 0,1,0,1
is_uint8(imm8),1,0,1
GetNEONFormat(format_map) < (sizeof(vform) / sizeof(vform[0])),1,0,1
"session, result_len <= dst_len",1,0,1
obj->group() == templateGroup(),1,0,1
size_t(offset) < size(),1,0,1
"sizeof(double) >= sizeof(T), ""sizeof(double) >= sizeof(T)""",1,0,1
!lockOwner.value,1,0,1
obj->template is<JSFunction>(),1,0,1
"IsInsideNursery(ptr), IonCompilationCanUseNurseryPointers()",1,0,1
operand.isGeneralReg(),1,0,1
d0 != scratch,1,0,1
!isConstructor(),1,0,1
"session, __wt_log_cmp(&written[i].lsn, &slot->slot_release_lsn) == 0",1,0,1
"session, F_ISSET(txn, WT_TXN_HAS_SNAPSHOT)",1,0,1
"offsetof(WT_CURSOR_LOG, iface) == 0",1,0,1
Code(reg_) < Registers::Total,1,0,1
dynamic_cast<ToAsPointer>(&f) != NULL,1,0,1
obj->as<UnboxedPlainObject>().layout().lookup(id),1,0,1
"session, base > 0",1,0,1
"session, jbufsize >= 3",1,0,1
"28765, str::stream() << this->getOpName() << "" only supports numeric types, not "" << typeName(arg.getType()), arg.numeric()",1,0,1
src.offset() > int32_t(sizeof(int32_t)),1,0,1
GetBoxedOrUnboxedInitializedLength<SrcType>(src) >= srcStart + length,1,0,1
"session, record->data == record->mem",1,0,1
laneType == z->type(),1,0,1
"session, manager->lsm_workers > 0",1,0,1
"!oom(), length() % sizeof(uint32_t) == 0",1,0,1
nameIndex_ != UINT32_MAX,1,0,1
isIntegerWrite() || isFloatWrite() || isSimdWrite(),1,0,1
kind == ICStub::GetElem_NativePrototypeCallScriptedName || kind == ICStub::GetElem_NativePrototypeCallScriptedSymbol,1,0,1
type == MIRType_Int32x4,1,0,1
!overlay->isForwarded(),1,0,1
"session, F_ISSET(dhandle, WT_DHANDLE_DEAD) || !F_ISSET(dhandle, WT_DHANDLE_OPEN)",1,0,1
"wasm::NaN64GlobalDataOffset == wasm::HeapGlobalDataOffset + sizeof(uint8_t*), ""then a 64-bit NaN""",1,0,1
(vd.lanes() == 4) && vd.Is128Bits(),1,0,1
"wasm::ActivationGlobalDataOffset == 0, ""an AsmJSActivation* data goes first""",1,0,1
"sizeof(ValueStorage) == 16, ""sizeof(ValueStorage) == 16""",1,0,1
"session, backup_file <= log->alloc_lsn.l.file",1,0,1
mantissa != 0,1,0,1
is_uint4(cmode),1,0,1
"IsAllocKind(first), ""|first| is not a valid AllocKind!""",1,0,1
thisName->getOp() == JSOP_GETNAME,1,0,1
"wasm::HeapGlobalDataOffset == wasm::ActivationGlobalDataOffset + sizeof(void*), ""then a pointer to the heap*""",1,0,1
vd.lanes() == 1,1,0,1
"Period::den > 0, ""Duration::period's denominator must be positive""",1,0,1
"sizeof(NAME) == sizeof(WTYPE), ""sizeof(NAME) == sizeof(WTYPE)""",1,0,1
"kind != Query, code",1,0,1
"session, F_ISSET(&session->txn, WT_TXN_HAS_ID)",1,0,1
isModuleFrame(),1,0,1
"session, block->live.avail.track_size != 0",1,0,1
u.gpr_ % 2 == 0,1,0,1
clasp,1,0,1
"JSErr_Limit == 421, ""GREETINGS, POTENTIAL SUBTRAHEND INCREMENTER! If you added or "" ""removed MSG_DEFs from js.msg, you should increment "" ""XDR_BYTECODE_VERSION_SUBTRAHEND and update this assertion's "" ""expected JSErr_Limit value.""",1,0,1
"session, WT_BLOCK_FITS( r->first_free, size, r->disk_image.mem, r->disk_image.memsize)",1,0,1
acctype == ICGetElemNativeStub::FixedSlot || acctype == ICGetElemNativeStub::DynamicSlot || acctype == ICGetElemNativeStub::UnboxedProperty,1,0,1
index_ != UINT32_MAX,1,0,1
!inFrameMaps(frame),1,0,1
"session, !__wt_txn_visible_all( session, *switch_txnp)",1,0,1
"session, iter == NULL || entry->subjoin == iter->child->cjoin",1,0,1
scratch != ScratchRegister,1,0,1
"session, async->worker_sessions[i] != NULL",1,0,1
"session, cval.len != 0",1,0,1
"KindSlot == ITERATOR_SLOT_ITEM_KIND, ""KindSlot must match self-hosting define for item kind slot.""",1,0,1
postOrder.length() == doms.length(),1,0,1
bits<=UPRV_LENGTHOF(toBase64),1,0,1
"offsetof(JSObject, group_) == offsetof(RelocationOverlay, next_), ""next pointer and group should be at same location, "" ""so that group is not overwritten during compacting""",1,0,1
"session, manager->lsm_workers_max < orig_workers",1,0,1
"session, conn->cache == NULL",1,0,1
"session, WT_TIMECMP(prev_chunk->create_ts, ondisk->create_ts) >= 0",1,0,1
*pc + sizeof(T) <= bytecode_.length(),1,0,1
fromAlloc != toAlloc,1,0,1
"session, ref->addr == NULL",1,0,1
DocIdAsNumber(docid) <= 0xFFFFFFFFul,1,0,1
"session, session->split_gen != split_gen",1,0,1
lastSize <= events.size(),1,0,1
IsWordAligned(this + offset),1,0,1
GetBoxedOrUnboxedInitializedLength<DstType>(dst) == dstStart,1,0,1
iter->getOffset() < guard.getOffset(),1,0,1
length == 0 || (length > 0 && data != nullptr),1,0,1
"ptr, ""Because this isn't the root, it had better have predecessors, or else how "" ""did we even find it.""",1,0,1
newTargetArg_,1,0,1
"session, conn->async_workers <= WT_ASYNC_MAX_WORKERS",1,0,1
"session, session->iface.connection == &conn->iface",1,0,1
"session, cbt->slot < page->pg_row_entries",1,0,1
"next, !IsNullTaggedPointer(next)",1,0,1
code_ < (sizeof(RegList) * 8),1,0,1
"NativeObject::MAX_SLOTS_COUNT <= INT32_MAX / sizeof(JS::Value), ""every caller of this method requires that a slot "" ""number (or slot count) count multiplied by "" ""sizeof(Value) can't overflow uint32_t (and sometimes "" ""int32_t, too)""",1,0,1
"offsetof(WT_CURSOR_TABLE, iface) == 0",1,0,1
"!hashTable, ""init must be called at most once""",1,0,1
!oddReg().aliases(other.evenReg()),1,0,1
uidp,1,0,1
type == MIRType_Null,1,0,1
"!clasp->mayResolve, ""Class with mayResolve hook but no resolve hook""",1,0,1
"mozilla::IsSame<SomeTypedArray, TypedArrayObject>::value, ""methods must be shared/unshared-specific, not "" ""element-type-specific""",1,0,1
!IsSimdType(laneType),1,0,1
methodsOrBlock->is<LexicalScopeNode>() || methodsOrBlock->isKind(PNK_CLASSMETHODLIST),1,0,1
isModuleBox(),1,0,1
"deadline.assigned(), ""Can only store assigned buffer offsets""",1,0,1
"ENUM_MAX <= INT_MAX, enumerator_too_positive_for_int",1,0,1
"session, page->modify->mod_col_split_recno == WT_RECNO_OOB",1,0,1
"names, names->is<ClassNames>()",1,0,1
"session, S2BT(session)->checkpointing != WT_CKPT_RUNNING",1,0,1
kind == CodeLabel || kind == InstructionImmediate,1,0,1
is_uint5(imm5),1,0,1
"34348, str::stream() << ""cannot translate opcode "" << op, !op",1,0,1
i < Codes::Total,1,0,1
maybePreliminaryObjectsDontCheckGeneration(),1,0,1
op == JSOP_GETELEM || op == JSOP_CALLELEM || op == JSOP_GETELEM_SUPER,1,0,1
group->clasp()->shouldDelayMetadataCallback(),1,0,1
"std::is_integral<T>::value, ""T must be an integral type""",1,0,1
"PreallocCount > 0, ""PreallocCount > 0""",1,0,1
!temps.IsAvailable(ScratchReg2_64),1,0,1
"session, session->id != 0 && txn_global->checkpoint_id == 0",1,0,1
"session, coltype == WT_PROJ_VALUE",1,0,1
CodeSpec[*pc].format & JOF_TYPESET,1,0,1
"session, cbt->slot < page->pg_var_entries",1,0,1
u.gpr_ + 1 == gprHigh.code(),1,0,1
index_ == UINT_MAX,1,0,1
!group->hasUnanalyzedPreliminaryObjects(),1,0,1
cellsWithUid_.initialized(),1,0,1
tables == 0,1,0,1
"autoWritableJitCodeActive_ != b, ""AutoWritableJitCode should not be nested.""",1,0,1
"iter->session, iter->cjoin->parent == NULL || iter->cjoin->parent->iter->child == iter",1,0,1
sizeof(value) <= sizeof(raw),1,0,1
node == NodeFunctionCall,1,0,1
"JS_NewObjectWithGivenProto(_context, &_jsclass, _proto)",1,0,1
"tol, F_PRECISION + 6, ""Pn"" ",1,0,1
T::resolve == BaseInfo::resolve,1,0,1
JSObject* ptr,1,0,1
"session, ngood >= close_range_end",1,0,1
"tol, F_PRECISION + 6, ""Qn"" ",1,0,1
scratch != address.index,1,0,1
intRegIndex_ == 0 && floatRegIndex_ == 0,1,0,1
"session, entry->lsm_tree->queue_ref > 0",1,0,1
"session, async->worker_tids[i] != 0",1,0,1
!pod.jitCodeOffset_,1,0,1
"sizeof(NamespaceDetails::Extra) == 496, ""sizeof(NamespaceDetails::Extra) == 496""",1,0,1
!rs.IsZero(),1,0,1
"scope_->is<DynamicWithObject>(), !scope_->as<DynamicWithObject>().isSyntactic()",1,0,1
arrayType <= Scalar::Uint32,1,0,1
byteRegs.has(reg),1,0,1
o >= 0,1,0,1
is(this),1,0,1
"session, buf->data == NULL || WT_DATA_IN_ITEM(buf)",1,0,1
"sizeof(BtreeBucketV0) - sizeof(static_cast<BtreeBucketV0*>(NULL)->data) == BtreeBucketV0::HeaderSize, ""sizeof(BtreeBucketV0) - sizeof(static_cast<BtreeBucketV0*>(NULL)->data) == "" ""BtreeBucketV0::HeaderSize""",1,0,1
"session, off != WT_BLOCK_INVALID_OFFSET",1,0,1
"size_t(AllocKind::LIMIT) <= 255, ""We must be able to fit the allockind into uint8_t.""",1,0,1
"session, table->refcnt <= 1",1,0,1
"session, optype == WT_LOGOP_COL_TRUNCATE",1,0,1
script->isForEval(),1,0,1
"thing, !isNullLike(thing)",1,0,1
(type_ != kNoRegister) || (size_ == 0),1,0,1
"(INTERPRETED | INTERPRETED_LAZY) == js::JS_FUNCTION_INTERPRETED_BITS, ""jsfriendapi.h's JSFunction::INTERPRETED-alike is wrong""",1,0,1
size() % 8 == 0,1,0,1
"session, __wt_leaf_page_can_split(session, page)",1,0,1
hash->count == 0,1,0,1
format0 != NULL,1,0,1
"session, LF_ISSET(WT_STREAM_READ)",1,0,1
"Values == ITEM_KIND_VALUE, ""IteratorKind Values must match self-hosting define for item kind value.""",1,0,1
trc->weakMapAction() == ExpandWeakMaps,1,0,1
(pointer_raw + align_step) % alignment == 0,1,0,1
!innermostStmt_->isBlockScope,1,0,1
"pcIsPatchable(pc, sizeof(wasm::LifoSig*))",1,0,1
"session, jbufsize == 1",1,0,1
SimdTypeToLength(type) == numLanes_,1,0,1
"int(AllocKind::FIRST) == 0, ""Various places depend on AllocKind starting at 0, "" ""please audit them carefully!""",1,0,1
"pe.index() < poolEntryCount - pool_.numEntries(), ""Invalid pool entry, or not flushed yet.""",1,0,1
"sizeof(ValueElement) == (sizeof(Value) + sizeof(Position) + sizeof(int) + 1), ""sizeof(ValueElement) == (sizeof(Value) + sizeof(Position) + sizeof(int) + 1)""",1,0,1
size_t(to.offset()) <= size(),1,0,1
"session, S2BT(session)->ckpt != NULL",1,0,1
"newIDomIdx != UNDEFINED, ""Because the root is initialized to dominate itself and is the first "" ""node in every path, there must exist a predecessor to this node that "" ""also has a dominator.""",1,0,1
hashTable,1,0,1
(sizeof(new_value) + (lane * sizeof(new_value))) <= kSizeInBytes,1,0,1
"session, !WT_IS_METADATA(session, dhandle)",1,0,1
"sizeof(unsigned long long) == sizeof(uint64_t), ""sizeof(unsigned long long) == sizeof(uint64_t)""",1,0,1
tpl.unbarrieredGet(),1,0,1
mode == kPlaceholder,1,0,1
CurrentThreadIsGCSweeping() || CurrentThreadIsHandlingInitFailure(),1,0,1
"!scratch.Is(ARMRegister(base, 64))",1,0,1
IsPowerOf2(value),1,0,1
vec->type() == type,1,0,1
phiFreeListLength_ > 0,1,0,1
targetOffset->type() == MIRType_Int32,1,0,1
count == 2,1,0,1
"thing, MapAllocToTraceKind(thing->getAllocKind()) != JS::TraceKind::Object",1,0,1
type_ == ValType::F32,1,0,1
length < UINT32_MAX,1,0,1
"session, size != 0 || cell_type == WT_CELL_ADDR_DEL",1,0,1
IsAllocKind(AllocKind(allocKind)),1,0,1
"wasm::NaN32GlobalDataOffset == wasm::NaN64GlobalDataOffset + sizeof(double), ""then a 32-bit NaN""",1,0,1
status == stdx::future_status::ready,1,0,1
i<UPRV_LENGTHOF(vowelSignESpecialCases),1,0,1
"session, (F_ISSET(chunk, WT_LSM_CHUNK_BLOOM) && !F_ISSET(clsm, WT_CLSM_MERGE)) ? clsm->blooms[i] != NULL : clsm->blooms[i] == NULL",1,0,1
height >= 1,1,0,1
(sizeof(T) == kWRegSizeInBytes) || (sizeof(T) == kXRegSizeInBytes),1,0,1
"session, WT_TXNID_LE(prev_oldest_id, snap_min)",1,0,1
"session, chunk->refcnt > 0",1,0,1
SimdTypeToLaneType(type) == v->type(),1,0,1
"TlsPerThreadData.get()->runtimeFromMainThread(), ""Should only be mutated by the main thread.""",1,0,1
laneType == x->type(),1,0,1
"session, fh != NULL",1,0,1
static_cast<int32_t>(unboxedType_) <= 8,1,0,1
scratch != ptr,1,0,1
"this->lifoAlloc_.isEmpty(), ""Illegal LIFO allocations before AutoJitContextAlloc""",1,0,1
(sizeof(value) == 4) || (sizeof(value) == 8),1,0,1
"session, WT_PREFIX_MATCH(uri, ""file:"")",1,0,1
"group->clasp()->finalize, heap == js::gc::TenuredHeap || (group->clasp()->flags & JSCLASS_SKIP_NURSERY_FINALIZE)",1,0,1
"session, conn->meta_ckpt_session->txn.isolation == WT_ISO_READ_COMMITTED",1,0,1
forHead->isKind(PNK_FORIN) || forHead->isKind(PNK_FOROF),1,0,1
"offsetof(WT_CURSOR_JOIN, iface) == 0",1,0,1
"session, WT_TIMECMP( last_chunk->create_ts, prev_chunk->create_ts) >= 0",1,0,1
"session, fh->ref > 0",1,0,1
"session, !WT_SESSION_IS_CHECKPOINT(session)",1,0,1
"sizeof(short) == 2, ""sizeof(short) == 2""",1,0,1
"session, txn->mod_count > 0",1,0,1
!scratch64.Is(base),1,0,1
"maybeObj, maybeObj->getClass() == clasp",1,0,1
"CurrentThreadCanAccessRuntime(thing->runtimeFromAnyThread()), !thing->shadowRuntimeFromAnyThread()->isHeapCollecting()",1,0,1
obj->is<ArrayObject>() || obj->is<UnboxedArrayObject>(),1,0,1
cnv->preToULength==0,1,0,1
nextToken().type == TOK_NAME,1,0,1
"session, next_ref->state == WT_REF_SPLIT",1,0,1
lhs->type() == t,1,0,1
((int32_t)policy) < 3,1,0,1
T::enumerate == BaseInfo::enumerate,1,0,1
"session, F_ISSET(session->dhandle, WT_DHANDLE_DEAD) || __wt_page_can_evict(session, ref, NULL)",1,0,1
std::isnan(op),1,0,1
"db->open( db, NULL, g.home_bdb, NULL, DB_BTREE, DB_CREATE, 0) == 0",1,0,1
"!Scalar::isSimdType(writeType()), ""arrayType == writeType iff the write type isn't SIMD""",1,0,1
sign_offset == (sizeof(T) * 8 - 1),1,0,1
"ErrorCodes::DurationOverflow, str::stream() << ""Overflow while subtracting "" << other << "" from "" << *this, !mongoSignedSubtractOverflow64(count(), other.count(), &_count)",1,0,1
isInternal(),1,0,1
kind == ICStub::GetProp_CallScripted || kind == ICStub::GetProp_CallNative || kind == ICStub::GetProp_CallNativeGlobal,1,0,1
"op == JSOP_GETELEM || op == JSOP_CALLELEM, obj == receiver",1,0,1
"is_uintn(kAddressTagWidth, tag)",1,0,1
"sizeof(double) == 8, ""sizeof(double) == 8""",1,0,1
"result, ""[OOM] Is it really infallible?""",1,0,1
"session, txn_state->id != WT_TXN_NONE && txn->id != WT_TXN_NONE",1,0,1
currentGen >= gen_,1,0,1
"session, oldv == 0 || (oldv & WT_IK_FLAG) != 0",1,0,1
"session, btree != NULL",1,0,1
(pointer_raw - align_step) % alignment == 0,1,0,1
"session, !bulk || lsm_tree->excl_session != NULL",1,0,1
Scalar::isSimdType(writeType),1,0,1
def->isMathFunction(),1,0,1
key == p->key(),1,0,1
"session, optype == WT_LOGOP_COL_REMOVE",1,0,1
"session, couple == couple_orig || WT_PAGE_IS_INTERNAL(couple->page)",1,0,1
"session, optype == WT_LOGOP_COL_PUT",1,0,1
scratch64.asUnsized() != valaddr.base,1,0,1
range,1,0,1
!map.initialized(),1,0,1
function()->allowSuperProperty(),1,0,1
"session, conn->log_cond != NULL",1,0,1
hasPendingIonBuilder(),1,0,1
!(flags & ~BaseShape::OBJECT_FLAG_MASK),1,0,1
"session, !WT_TXNID_LT(txn->id, txn_global->last_running)",1,0,1
"dbc->put(dbc, &key, &value, DB_KEYFIRST) == 0",1,0,1
"JS_InitClass( _context, global, parent, &_jsclass, T::construct != BaseInfo::construct ? smUtils::construct<T> : nullptr, 0, nullptr, T::methods, nullptr, nullptr)",1,0,1
"spinLock, ""spinlock should have been acquired""",1,0,1
"other.isAccessorShape(), allocKind == gc::AllocKind::ACCESSOR_SHAPE",1,0,1
(size_in_bits % 8) == 0,1,0,1
"session, cursor == session->meta_cursor",1,0,1
evenReg().aliases(other.evenReg()) == oddReg().aliases(other.oddReg()),1,0,1
"session, vs->max_addr->size != 0",1,0,1
*pc == JSOP_RETRVAL,1,0,1
"ErrorCodes::DurationOverflow, ""Cannot negate the minimum duration"", *this != min()",1,0,1
"CheckLexicalNameConflict(cx, lexicalScope, varObj, name)",1,0,1
group<ULMBCS_GRP_UNICODE,1,0,1
"std::is_signed<Rep2>::value || sizeof(Rep2) < sizeof(rep), ""Durations must be constructed from values of integral type that are "" ""representable as 64-bit signed integers""",1,0,1
generateTime_ == UINT_MAX,1,0,1
"group->maybeUnboxedLayoutDontCheckGeneration(), !group->unboxedLayoutDontCheckGeneration().nativeGroup()",1,0,1
isGlobalFrame() || isModuleFrame(),1,0,1
"iter->session, iter->entry_pos < iter->entry_count",1,0,1
abs_x < t,1,0,1
"!script->hasNonSyntacticScope(), lexicalScope == &cx->global()->lexicalScope() && varObj == cx->global()",1,0,1
"session, block->live_open == false",1,0,1
isStrictEvalFrame() || fun()->needsCallObject(),1,0,1
(sat & kUnsignedSatMask) != kUnsignedSatUndefined,1,0,1
IsPowerOfTwo(alignment) && alignment >= InstSize,1,0,1
value != 0,1,0,1
"session, WT_INTL_INDEX_GET_SAFE(page) == pindex",1,0,1
next.modifierException == NoException,1,0,1
scratch64.asUnsized() != reg.asUnsized(),1,0,1
"pcIsPatchable(pc, sizeof(uint32_t))",1,0,1
staticLinkData_.pod.builtinThunkOffsets[builtin] == 0,1,0,1
"JS_NewGlobalObject( _context, &_jsclass, nullptr, JS::DontFireOnNewGlobalHook)",1,0,1
"sizeof(ExitDatum) % sizeof(void*) == 0, ""word aligned""",1,0,1
"session, F_ISSET(conn, WT_CONN_CACHE_POOL)",1,0,1
"dbenv->mutex_set_max(dbenv, 10000) == 0",1,0,1
function()->isClassConstructor(),1,0,1
"at == vec.end() || *at != deadline, ""Cannot insert duplicate deadlines""",1,0,1
"session, strcmp((*cp)->uri, chunk->uri) == 0",1,0,1
!(Is16Bits() && IsVector()),1,0,1
T::hasInstance == BaseInfo::hasInstance,1,0,1
i_ < bindings_.numArgs(),1,0,1
"TargetSlot == ITERATOR_SLOT_TARGET, ""TargetSlot must match self-hosting define for iterated object slot.""",1,0,1
!cx->compartment()->hasObjectPendingMetadata(),1,0,1
uses_ == 0,1,0,1
"ResultType(Each<HeadType>::result) < (1 << Shift), ""not enough bits reserved by the shift for individual results""",1,0,1
"session, prev_chunk->generation == 0",1,0,1
!IsVoid(et),1,0,1
hashBuckets() == newHashBuckets,1,0,1
"outerBinding, innerBinding->pn_atom == outerBinding->pn_atom",1,0,1
"session, ret != 0 || (*treep)->excl_session == (exclusive ? session : NULL)",1,0,1
mImpl,1,0,1
postOrder.length() == indices.length(),1,0,1
(ranges[0] & (ranges[2] - ranges[0])) == 0 && (ranges[2] & ranges[3] & (ranges[2] - ranges[0])) != 0,1,0,1
"session, session->ckpt_handle_next == 0",1,0,1
"session, table->refcnt > 0",1,0,1
"session, start_chunk < lsm_tree->nchunks",1,0,1
(0 < block_bytes_log2) && (block_bytes_log2 < 4),1,0,1
(baseKey >> 21) == 0,1,0,1
"session, session->meta_track_sub == NULL",1,0,1
"session, txn_state->snap_min == WT_TXN_NONE || session->txn.isolation == WT_ISO_READ_UNCOMMITTED || !__wt_txn_visible_all(session, txn_state->snap_min)",1,0,1
postOrder[length - 1] == root,1,0,1
iacc <= INT32_MAX/sizeof(uLong),1,0,1
"sizeof(uint64) == sizeof(unsigned long long), sizeof_uint64_is_not_sizeof_long_long",1,0,1
stream->waitUntilBlocked() == EventType,1,0,1
"Entries == ITEM_KIND_KEY_AND_VALUE, ""IteratorKind Entries must match self-hosting define for item kind "" ""key-and-value.""",1,0,1
!IsInsideNursery(&obj),1,0,1
"session, *cp != NULL",1,0,1
shapes.length() == NumShapes,1,0,1
"offsetof(WT_SESSION_IMPL, iface) == 0",1,0,1
"16445, _shouldClose",1,0,1
"session, WT_PREFIX_MATCH(cjoin->iface.uri, ""join:"")",1,0,1
!IsSyntacticScope(scope_),1,0,1
"statcursor->get_value( statcursor, &desc, &valstr, &val) == 0",1,0,1
(sizeof(value) == kBRegSizeInBytes) || (sizeof(value) == kHRegSizeInBytes) || (sizeof(value) == kSRegSizeInBytes) || (sizeof(value) == kDRegSizeInBytes) || (sizeof(value) == kQRegSizeInBytes),1,0,1
"session, r->first_free + r->space_avail <= (uint8_t *)r->disk_image.mem + r->disk_image.memsize",1,0,1
sizeof(T) >= sizeof(uint32_t),1,0,1
"!traversed, ""Can only traverse() once!""",1,0,1
"session, F_ISSET(cursor, WT_CURSTD_OVERWRITE)",1,0,1
"session, *cp == NULL",1,0,1
!IsInsideNursery(t),1,0,1
postOrder.length() == nodeToPostOrderIndex.count(),1,0,1
!isExitFrame(),1,0,1
SimdTypeToLaneType(vecType) == laneType,1,0,1
label->bound(),1,0,1
"flags & ACCESSOR_SHAPE, getAllocKind() == gc::AllocKind::ACCESSOR_SHAPE",1,0,1
innerBinding->isKind(PNK_NAME),1,0,1
"dbenv->open(dbenv, NULL, DB_CREATE | DB_INIT_LOCK | DB_INIT_MPOOL | DB_PRIVATE, 0) == 0",1,0,1
static_cast<int32_t>(acctype_) <= 7,1,0,1
innermostStmt_->canBeBlockScope(),1,0,1
"session, WT_TIMECMP(last_chunk->create_ts, ondisk->create_ts) >= 0",1,0,1
lhs.high == rhs.high,1,0,1
"ErrorCodes::BadValue, ""className isn't object""",1,0,1
getJitInfo()->type() != JSJitInfo::InlinableNative,1,0,1
"session, dsk->mem_size == result_len + WT_BLOCK_COMPRESS_SKIP",1,0,1
hasSyntacticDynamicScopeObject(),1,0,1
"ResourceTypesCount <= (1 << resourceTypeBits), ""ResourceTypesCount <= (1 << resourceTypeBits)""",1,0,1
*pc == JSOP_INITGLEXICAL,1,0,1
"column_ == column, ""column must fit in 31 bits""",1,0,1
"i != b, ""PoolInfo not sorted or empty?""",1,0,1
framePushed() == initialDepth + ExitFrameLayout::Size(),1,0,1
jcursor->next(jcursor) == WT_NOTFOUND,1,0,1
"offset_ == delta + oldOffset, ""new offset fits in 31 bits""",1,0,1
!storageGlobalParams.readOnly,1,0,1
"session, session->meta_track_next != NULL",1,0,1
rhs.range_ == nullptr,1,0,1
UnboxedTypeNeedsPreBarrier(Type),1,0,1
scratch64.asUnsized() != addr.base,1,0,1
!pod.interpCodeOffset_,1,0,1
"session, LF_ISSET(WT_DHANDLE_LOCK_ONLY) || F_ISSET(dhandle, WT_DHANDLE_OPEN)",1,0,1
(sizeof(value) == 1) || (sizeof(value) == 2) || (sizeof(value) == 4) || (sizeof(value) == 8),1,0,1
generateTime_ != UINT_MAX,1,0,1
"session, root_refp - pindex->index == (ptrdiff_t)pindex->entries",1,0,1
count == 4,1,0,1
"session, LF_ISSET(WT_EVICT_UPDATE_RESTORE) || !__wt_page_is_modified(page)",1,0,1
"ErrorCodes::DurationOverflow, str::stream() << ""Overflow while multiplying "" << *this << "" by "" << scale, !mongoSignedMultiplyOverflow64(count(), scale, &_count)",1,0,1
*pc == JSOP_DEFLET || *pc == JSOP_DEFCONST,1,0,1
p && p->value(),1,0,1
nameIndex_ == UINT32_MAX,1,0,1
"session, iter == NULL",1,0,1
"session, (!checkpoint && addr != NULL && addr_sizep != NULL) || (checkpoint && addr == NULL && addr_sizep == NULL)",1,0,1
maincount == 2,1,0,1
"sizeof(SetType) <= 4, ""SetType must be, at most, 32 bits""",1,0,1
off.assigned() && offset >= 0 && (unsigned)offset < size(),1,0,1
baselineCallReturnAddrs_[constructing] != nullptr,1,0,1
"session, did_work != NULL",1,0,1
"session, file_type != 0",1,0,1
"session, c->key.size > curkey.size",1,0,1
(sizeof(result) + (lane * sizeof(result))) <= kSizeInBytes,1,0,1
"session, min_lsn.l.file == log->sync_lsn.l.file",1,0,1
next.modifier == KeywordIsName,1,0,1
!scratch.Is(dest64),1,0,1
"""this token was previously looked up with a "" ""different modifier, potentially making "" ""tokenization non-deterministic""",1,0,1
"session, skip_start + skip_stop > 0 && skip_start + skip_stop < page->pg_row_entries",1,0,1
format != NULL,1,0,1
 (((0.5 <= scaled_x) && (scaled_x < 2.0)) || (scaled_x < 0.0)) ,1,0,1
"session, dsk->mem_size == buf->size",1,0,1
"obj, obj->group() == this",1,0,1
!cellsWithUid_.has(cell),1,0,1
!scratch64.Is(rt),1,0,1
"pthread_join(thr[i], NULL) == 0",1,0,1
"session, lock_file || !LF_ISSET(WT_OPEN_CREATE)",1,0,1
"xfer > 0, ""ensureSpace should have allocated a slice""",1,0,1
"Period::num > 0, ""Duration::period's numerator must be positive""",1,0,1
source->type() == MIRType_Object,1,0,1
"JS_ARRAYBUFFER_NEUTERED_FLAG == NEUTERED, ""self-hosted code with burned-in constants must use the "" ""correct NEUTERED bit value""",1,0,1
isSimd128(),1,0,1
d > kIllegalLocalDocId,1,0,1
"session, result_len < UINT32_MAX && record->size < UINT32_MAX",1,0,1
"fun.isLambda(), fun.isInterpreted() || fun.isAsmJSNative()",1,0,1
d1 != scratch,1,0,1
kind_ == Builtin,1,0,1
"session, async->cur_queue > 0",1,0,1
"ErrorCodes::DurationOverflow, str::stream() << ""Overflow while dividing "" << *this << "" by -1"", (count() != min().count() || scale != -1)",1,0,1
"mozilla::IsBaseOf<Cell, T>::value, ""T must derive from Cell""",1,0,1
"session, !is_checkpoint || !F_ISSET(btree, WT_BTREE_SPECIAL_FLAGS)",1,0,1
"shape, ""intrinsic must already have been added to holder""",1,0,1
uniqueIds_.count() == 0,1,0,1
!rt->handlingInitFailure,1,0,1
scratch != dest.base,1,0,1
"sizeof(Node) == 628, ""sizeof(Node) == 628""",1,0,1
!sig_,1,0,1
"node != root, ""Only the last node should be root, since this was a post order traversal.""",1,0,1
count <= 5,1,0,1
"MinInlineCapacity % 2 == 0, ""MinInlineCapacity must be even!""",1,0,1
"session, upd_arg == NULL",1,0,1
d > kIllegalDocId,1,0,1
2 + argc + construct > argc,1,0,1
"session, current_recno < recno",1,0,1
is_int21(imm21),1,0,1
"FLAGS_SLOT == JS_ARRAYBUFFER_FLAGS_SLOT, ""self-hosted code with burned-in constants must get the "" ""right flags slot""",1,0,1
p != NULL,1,0,1
"session, F_ISSET(&session->txn, WT_TXN_HAS_ID) && clsm->primary_chunk != NULL && (clsm->primary_chunk->switch_txn == WT_TXN_NONE || WT_TXNID_LE(session->txn.id, clsm->primary_chunk->switch_txn))",1,0,1
"js::gc::AllocKind::FUNCTION != js::gc::AllocKind::FUNCTION_EXTENDED, ""extended/non-extended AllocKinds have to be different "" ""for getAllocKind() to have a reason to exist""",1,0,1
"session, previous_state == WT_REF_DELETED",1,0,1
"sizeof(int64_t) >= sizeof(T), ""sizeof(int64_t) >= sizeof(T)""",1,0,1
"nextFreeTower, nextFreeTower->isFree_ && nextFreeTower->height() == height_",1,0,1
!(Is32Bits() && IsVector()),1,0,1
list == NodeGeneric || list == NodeUnparenthesizedArray || list == NodeUnparenthesizedObject || list == NodeUnparenthesizedCommaExpr || list == NodeHoistableDeclaration || list == NodeFunctionCall,1,0,1
"paramType == ServerParameterType::kStartupOnly || is_safe_runtime_parameter_type<T>::value, ""This type is not supported as a runtime server parameter.""",1,0,1
!IsInsideNursery(tgt),1,0,1
!scratch64.Is(index),1,0,1
initlen <= InitializedLengthMask,1,0,1
"session, entry->cache_size >= adjustment && cp->currently_used >= adjustment",1,0,1
"session, *upd_entry == NULL",1,0,1
"mozilla::NumbersAreIdentical(clipped.toDouble(), t)",1,0,1
"session, ref->ref_recno > recno",1,0,1
baselineCallReturnAddrs_[constructing] == nullptr,1,0,1
"session, dhandle->excl_session == NULL && dhandle->excl_ref == 0",1,0,1
CurrentThreadCanAccessRuntime(runtimeFromMainThread()),1,0,1
"session, !need_tracking || WT_IS_METADATA(session, dhandle) || WT_META_TRACKING(session)",1,0,1
idxOfDominated < i,1,0,1
wp == newData + liveCount,1,0,1
t <= LAST_TYPE,1,0,1
kind == ICStub::In_NativePrototype,1,0,1
compareType_ <= Compare_Bitwise,1,0,1
"session, *op != NULL",1,0,1
"session, 0",1,0,1
size_t(CodeSpec[*pc].length) == len,1,0,1
"is<JSFunction>(), as<JSFunction>().isInterpreted()",1,0,1
"rv, is<js::GlobalObject>() || is<js::CallObject>() || is<js::ModuleEnvironmentObject>() || is<js::NonSyntacticVariablesObject>() || (is<js::DynamicWithObject>() && !as<js::DynamicWithObject>().isSyntactic())",1,0,1
"NativeObject::MAX_DENSE_ELEMENTS_COUNT <= INT32_MAX / sizeof(JS::Value), ""every caller of this method require that an element "" ""count multiplied by sizeof(Value) can't overflow "" ""uint32_t (and sometimes int32_t ,too)""",1,0,1
"session, mod->mod_col_split_recno == WT_RECNO_OOB || (recno != WT_RECNO_OOB && mod->mod_col_split_recno > recno)",1,0,1
"session, r->space_avail >= add_len",1,0,1
"session, clsm->primary_chunk != NULL && (clsm->primary_chunk->switch_txn == WT_TXN_NONE || TXNID_LE(session->txn.id, clsm->primary_chunk->switch_txn))",1,0,1
vd.Is32Bits() || vd.Is64Bits(),1,0,1
is_uint1(op),1,0,1
hook,1,0,1
"session, manager->lsm_worker_cookies[i].tid != 0",1,0,1
parent_s.numAllocations() >= nactual + 3 + argsObjAdj + hasNewTarget,1,0,1
"session, F_ISSET(session, WT_SESSION_LOCKED_SCHEMA) || !F_ISSET(session, WT_SESSION_LOCKED_HANDLE_LIST | WT_SESSION_NO_SCHEMA_LOCK | WT_SESSION_LOCKED_TABLE)",1,0,1
"sizeof(long long) == 8, ""sizeof(long long) == 8""",1,0,1
"session, !F_ISSET(conn, WT_CONN_READONLY) || manager->lsm_workers == 0",1,0,1
length >= obj->as<ArrayObject>().length(),1,0,1
"session, async->flush_op.state == WT_ASYNCOP_FREE",1,0,1
script->baselineScript() == this,1,0,1
"IsAllocKind(limit), ""|limit| is not a valid AllocKind!""",1,0,1
index <= (CapacityMask >> CapacityShift),1,0,1
dest.high != eax && dest.high != edx,1,0,1
"false, ""ReconstructedSavedFramePrincipals should never be exposed to embedders""",1,0,1
"session, optype == WT_LOGOP_ROW_REMOVE",1,0,1
def->type() == MIRType_Double && as->type() == MIRType_SinCosDouble,1,0,1
xcnv,1,0,1
kAddressTagMask == UINT64_C(0xff00000000000000),1,0,1
!evenReg().aliases(other.oddReg()),1,0,1
is_uint1(index) && (num_bits == 1),1,0,1
!range.empty(),1,0,1
"__LINE__, condition",1,0,1
(sat & kSignedSatMask) != kSignedSatUndefined,1,0,1
!regs.has(RealStackPointer),1,0,1
"stack, js::SavedFrame::isSavedFrameOrWrapperAndNotProto(*stack)",1,0,1
"session, corrected_page_size >= len",1,0,1
IsVRegister() || IsNone(),1,0,1
"std::is_trivially_copyable<T>::value, ""SecureAllocator can only be used with trivially copyable types""",1,0,1
"sInitialGlobalDataBytes == wasm::NaN32GlobalDataOffset + sizeof(float), ""then all the normal global data (globals, exits, func-ptr-tables)""",1,0,1
(uint64_t)(address) == address_raw,1,0,1
"session, n >= src_recno",1,0,1
depth <= UINT8_MAX,1,0,1
scratch2_64.asUnsized() != lhs.base,1,0,1
"sizeof(T) == sizeof(uint32_t), ""patch32 must be used with 32-bits wide types""",1,0,1
sizeof(HeapPtr<Value>) == sizeof(Value),1,0,1
"NIndexesMax <= NIndexesBase + NIndexesExtra * 2, ""NIndexesMax <= NIndexesBase + NIndexesExtra * 2""",1,0,1
"sizeof(Value) == 16, ""sizeof(Value) == 16""",1,0,1
!is<js::UnboxedPlainObject>(),1,0,1
dest.reg != scratch64.asUnsized(),1,0,1
type_ == ValType::F32x4,1,0,1
lhs.low == rhs.low,1,0,1
T::delProperty == BaseInfo::delProperty,1,0,1
 ((0.5 <= y) && (y < 1.0)) ,1,0,1
IsValidVRegister(),1,0,1
tower->isFree_,1,0,1
"offsetof(WT_CURSOR_CONFIG, iface) == 0",1,0,1
"outerBinding, outerBinding->isKind(PNK_NAME)",1,0,1
"offsetof(WT_CURSOR_STAT, iface) == 0",1,0,1
!isBeingParsed(),1,0,1
retainedSizes.isNothing(),1,0,1
valueOp == 2,1,0,1
"asValue() % sizeof(mozilla::Conditional<mozilla::IsVoid<typename mozilla::RemovePointer<U>::Type>::value, char, typename mozilla::RemovePointer<U>::Type>) == 0",1,0,1
"offsetof(WT_CURSOR_DUMP, iface) == 0",1,0,1
"session, !F_ISSET(S2C(session), WT_CONN_CLOSING)",1,0,1
!RelocationOverlay::isCellForwarded(t),1,0,1
"allocKind == gc::AllocKind::SHAPE, !other.isAccessorShape()",1,0,1
to.offset() == -1 || size_t(to.offset()) <= size(),1,0,1
"staticBlock().isGlobal(), enclosingScope().is<GlobalObject>()",1,0,1
cx->runtime()->isSelfHostingGlobal(global),1,0,1
lhs->digits > 0,1,0,1
"session, page_refp == pindex->index + chunk",1,0,1
"sizeof(T) == sizeof(BaseWordT), ""T and BaseWordT must have the same size""",1,0,1
"session, WT_INTL_INDEX_GET_SAFE(root) == pindex",1,0,1
!Ops::isEmpty(Ops::getKey(ht.data[i].element)),1,0,1
!isReadingFromMajorityCommittedSnapshot(),1,0,1
obj->template is<StaticNonSyntacticScopeObjects>(),1,0,1
!hasDefinition_,1,0,1
body->last()->isKind(PNK_LEXICALSCOPE) || body->last()->isKind(PNK_COMPREHENSIONFOR),1,0,1
sig_,1,0,1
type_ == ValType::I64,1,0,1
"session, (F_ISSET(chunk, WT_LSM_CHUNK_ONDISK) && !chunk->empty) ? checkpoint != NULL : checkpoint == NULL",1,0,1
"session, n == 0 || txn->snap_min != WT_TXN_NONE",1,0,1
"std::is_integral<BaseWordT>::value, ""BaseWordT must be an integral type""",1,0,1
"session, align_size <= buf->memsize",1,0,1
"session, !F_ISSET(session, WT_SESSION_LOCKED_PASS)",1,0,1
"db->close(db, 0) == 0",1,0,1
next.modifier == None,1,0,1
i < mir()->numLanes(),1,0,1
gc::TenuredCell::fromPointer(obj)->isMarked(markColor()),1,0,1
obj->is<TypedArrayObject>(),1,0,1
"session, op->format != NULL",1,0,1
"ErrorCodes::DurationOverflow, str::stream() << ""Overflow while adding "" << other << "" to "" << *this, !mongoSignedAddOverflow64(count(), other.count(), &_count)",1,0,1
dest.reg != ScratchRegister,1,0,1
"(s), (s)->txn.forced_iso > 0",1,0,1
"session, conn->log_tid_set == true",1,0,1
"session, txn_state->id == WT_TXN_NONE",1,0,1
"nbytes % sizeof(mozilla::Conditional<mozilla::IsVoid<typename mozilla::RemovePointer<T>::Type>::value, char, typename mozilla::RemovePointer<T>::Type>) == 0",1,0,1
"session, F_ISSET(session, WT_SESSION_LOCKED_PASS)",1,0,1
"BUFFER_SLOT == JS_TYPEDARRAYLAYOUT_BUFFER_SLOT, ""self-hosted code with burned-in constants must get the "" ""right buffer slot""",1,0,1
!UnboxedTypeNeedsPreBarrier(elementType()),1,0,1
"session, WT_REF_SPLIT != WT_REF_SPLIT",1,0,1
R2 == ValueOperand(a6),1,0,1
"40203, ""batchSize must be non-negative"", batchSize >= 0",1,0,1
index <= (sizeof(formats_) / sizeof(formats_[0])),1,0,1
"session, !F_ISSET(session, WT_SESSION_LOCKED_SCHEMA)",1,0,1
lockOwner.value == PR_GetCurrentThread(),1,0,1
"session, new_size < UINT32_MAX && ip->size < UINT32_MAX",1,0,1
type() == NonSyntactic,1,0,1
"session, r->ref == NULL",1,0,1
"ENUM_MIN >= INT_MIN, enumerator_too_negative_for_int",1,0,1
"next.type != TOK_DIV && next.type != TOK_REGEXP, ""next token requires contextual specifier to be parsed unambiguously""",1,0,1
"nextFreeEntry, !nextFreeEntry->isValid()",1,0,1
"session, manager->lsm_workers != 0",1,0,1
HasBoxedOrUnboxedDenseElements<Type>(obj),1,0,1
"sizeof(PackedScopeCoordinate) == sizeof(uint32_t), ""Not necessary for correctness, but good for ParseNode memory use""",1,0,1
def->type() == t,1,0,1
uint32_t(lane) < SimdTypeToLength(vecType),1,0,1
modifierException == OperandIsNone,1,0,1
offsetWithinWholeSimdVector_ == offsetWithinWholeSimdVector,1,0,1
"session, WT_PREFIX_MATCH(session->dhandle->name, ""file:"")",1,0,1
cfg->async_threads > 0,1,0,1
!firstEmpty || *firstEmpty == -1,1,0,1
"retainedSizes.isSome(), postOrder.length() == retainedSizes->length()",1,0,1
rs.code() != kSPRegInternalCode,1,0,1
"session, !WT_IS_METADATA(session, session->dhandle) || F_ISSET(session, WT_SESSION_LOCKED_METADATA)",1,0,1
math->function() == MMathFunction::Cos || math->function() == MMathFunction::Sin,1,0,1
isSharedMemory(),1,0,1
is_uint3(index),1,0,1
kind == PNK_FUNCTION || kind == PNK_MODULE,1,0,1
"session, endprefix != NULL",1,0,1
"PreallocCount < 32, ""PreallocCount < 32""",1,0,1
next.modifier == Operand,1,0,1
"session, npublic_cols != 0",1,0,1
"dbenv->set_cachesize(dbenv, 0, 50 * 1024 * 1024, 1) == 0",1,0,1
(firstByte <= ULMBCS_C0END) || (firstByte >= ULMBCS_C1START) || (group == ULMBCS_GRP_EXCEPT),1,0,1
"value < 0, framePushed_ >= uint32_t(-value)",1,0,1
"db->set_bt_compare(db, bdb_compare_reverse) == 0",1,0,1
current > (sljit_sw*)current[-1],1,0,1
constructing(),1,0,1
"session, manager->lsm_workers_max > 2",1,0,1
"session, final || F_ISSET(session, WT_SESSION_LOCKED_HANDLE_LIST)",1,0,1
((reg_size == kXRegSize) && is_uint6(imms)) || ((reg_size == kWRegSize) && is_uint5(imms)),1,0,1
length >= obj->as<UnboxedArrayObject>().length(),1,0,1
"session, F_ISSET(conn, WT_CONN_CLOSING | WT_CONN_RECOVERING)",1,0,1
offset < int(cursor + start->length()),1,0,1
is_int14(imm14),1,0,1
"session, F_ISSET(youngest, WT_LSM_CHUNK_MERGING)",1,0,1
(format == NF_B) || (format == NF_H) || (format == NF_S) || (format == NF_D) || (format == NF_UNDEF),1,0,1
operand.isFloatReg(),1,0,1
"session, buf != NULL",1,0,1
"((FunctionKindLimit - 1) << FUNCTION_KIND_SHIFT) <= FUNCTION_KIND_MASK, ""FunctionKind doesn't fit into flags_""",1,0,1
((char *)d.data)[i] == 7,1,0,1
"session, recno != WT_RECNO_OOB",1,0,1
type_ == ValType::I32x4,1,0,1
coefficientHigh < 0x1ed09bead87c0 || (coefficientHigh == 0x1ed09bead87c0 && coefficientLow == 0x378d8e63ffffffff),1,0,1
"session, !LF_ISSET(WT_LOG_FLUSH) || __wt_log_cmp(&log->write_lsn, &lsn) >= 0",1,0,1
"session, LF_ISSET(WT_DHANDLE_EXCLUSIVE) == F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE) || dhandle->excl_ref > 1",1,0,1
"session, direction == BACKWARD",1,0,1
d < kMaxDocId,1,0,1
"session, !F_ISSET(session, WT_SESSION_LOGGING_INMEM)",1,0,1
"session, mod->mod_multi[i].supd == NULL",1,0,1
!pt->ionCompilingSafeForMinorGC,1,0,1
"session, cp == __wt_process.cache_pool && TAILQ_EMPTY(&cp->cache_pool_qh)",1,0,1
"RangeSlot == ITERATOR_SLOT_RANGE, ""RangeSlot must match self-hosting define for range or index slot.""",1,0,1
"singleton(), obj",1,0,1
"session, F_ISSET(txn, WT_TXN_RUNNING) && F_ISSET(txn, WT_TXN_HAS_ID)",1,0,1
!stmt->enclosingScope,1,0,1
keyHash != NULL,1,0,1
exponent == getBiasedExponent(),1,0,1
dest.valueReg() != scratch,1,0,1
sizeof(wt_off_t) == 8,1,0,1
(1U << block_bytes_log2) <= sizeof(value),1,0,1
size % 4 == 0,1,0,1
predecessorVectors.length() == 0,1,0,1
"ErrorCodes::IllegalOperation, ""Cannot execute a write operation in read-only mode"", !storageGlobalParams.readOnly",1,0,1
"session, code2symbol[j] == 0",1,0,1
dataLength == 0,1,0,1
"!isLowerPrecisionThan<Duration<FromPeriod>>(), ""Use duration_cast to convert from higher precision Duration types to lower "" ""precision ones""",1,0,1
SimdTypeToLaneType(type) == val->type(),1,0,1
"data >> 28 != 0xf, ""The instruction does not have condition code""",1,0,1
!hasSelfReference(),1,0,1
"session, lsm_tree->merge_min != 0",1,0,1
value > 1,1,0,1
"NIndexesMax <= 64, ""NIndexesMax <= 64""",1,0,1
methodList->isKind(PNK_CLASSMETHODLIST),1,0,1
"sizeof(e_val) == 4 || sizeof(e_val) == 8, unexpected_int_size",1,0,1
"sizeof(NamespaceDetails) == 496, ""sizeof(NamespaceDetails) == 496""",1,0,1
columns>=3,1,0,1
"session, hp == NULL",1,0,1
 cut <= 4,1,0,1
"offsetof(WT_CONNECTION_IMPL, iface) == 0",1,0,1
"session, !F_ISSET(r, WT_EVICTING) || F_ISSET(r, WT_EVICT_UPDATE_RESTORE)",1,0,1
temps.IsAvailable(ScratchReg2_64),1,0,1
other.isGeneralRegPair(),1,0,1
!proto || succeeded,1,0,1
"MOZ_ARRAY_LENGTH(map) == size_t(AllocKind::LIMIT), ""AllocKind-to-TraceKind mapping must be in sync""",1,0,1
"(*pc == JSOP_SETGNAME || *pc == JSOP_STRICTSETGNAME) && !script->hasNonSyntacticScope(), scope == cx->global() || scope == &cx->global()->lexicalScope() || scope->is<RuntimeLexicalErrorObject>()",1,0,1
"sizeof(long long) == sizeof(int64_t), ""sizeof(long long) == sizeof(int64_t)""",1,0,1
offset >= cursor,1,0,1
isUnboxed(),1,0,1
"session, F_ISSET(owner, WT_CURSTD_OPEN)",1,0,1
"cx, obj, id, v",1,0,1
"session, cp->currently_used >= conn->cache_size",1,0,1
getAllocKind() == js::gc::AllocKind::FAT_INLINE_STRING,1,0,1
"LastArg<TailTypes...>::nbArgs < (8 * sizeof(ResultType) / Shift), ""not enough bits in the result type to store all bit masks""",1,0,1
sizeof(pointer) == sizeof(intptr_t),1,0,1
"sizeof(LiveSavedFrameCache) == sizeof(uintptr_t), ""Every js::Activation has a LiveSavedFrameCache, so we need to be pretty careful "" ""about avoiding bloat. If you're adding members to LiveSavedFrameCache, maybe you "" ""should consider figuring out a way to make js::Activation have a "" ""LiveSavedFrameCache* instead of a Rooted<LiveSavedFrameCache>.""",1,0,1
"session, lsm_tree->old_chunks[skipped] == chunk",1,0,1
"session, nchunks > 0",1,0,1
1 << defaultShift == sizeof(JS::Value),1,0,1
AllocatableGeneralRegisterSet(Registers::SingleByteRegs).has(lhs),1,0,1
"db_create(&db, dbenv, 0) == 0",1,0,1
cfg->sample_interval != 0,1,0,1
success,1,0,1
"session, WT_TXNID_LE(mod->last_oldest_id, oldest_id)",1,0,1
!inCycle_,1,0,1
"prev, !IsNullTaggedPointer(prev)",1,0,1
*lastSize <= events.size(),1,0,1
"session, optype == WT_LOGOP_ROW_PUT",1,0,1
(u!=0 || c==0),1,0,1
match,1,0,1
byteRegs.has(r2),1,0,1
"session, entry->type == WT_LSM_WORK_MERGE",1,0,1
"session, F_ISSET(session, WT_SESSION_LOCKED_TABLE) || !F_ISSET(session, WT_SESSION_LOCKED_HANDLE_LIST)",1,0,1
!scratch32.Is(reg32),1,0,1
isExitFrame(),1,0,1
HasBoxedOrUnboxedDenseElements<DstType>(dst),1,0,1
"session, !F_ISSET(&clsm->iface, WT_CURSTD_KEY_INT | WT_CURSTD_VALUE_INT)",1,0,1
((type == CPURegister::kRegister) && (last_reg < kNumberOfRegisters)) || ((type == CPURegister::kVRegister) && (last_reg < kNumberOfVRegisters)),1,0,1
"session, result_len <= encryptor_data_len",1,0,1
"session, conn->cache != NULL",1,0,1
AllocatableGeneralRegisterSet(Registers::SingleByteRegs).has(rhs),1,0,1
"res, singleton()",1,0,1
"offsetof(WT_CURSOR_DATA_SOURCE, iface) == 0",1,0,1
"session, cookie->chunk_array[i]->refcnt > 0",1,0,1
!arg->isUsed(),1,0,1
temp != scratch,1,0,1
doms.length() == 0,1,0,1
"offsetof(WT_CURSOR_BTREE, iface) == 0",1,0,1
"session, WT_PTR_IN_RANGE(to, tmp->mem, tmp->memsize)",1,0,1
target->type() == MIRType_Object,1,0,1
"session, F_ISSET(conn, WT_CONN_SERVER_RUN)",1,0,1
"Codes::AllPhysMask <= 0xffff, ""We can safely use CountPopulation32""",1,0,1
hitState_ == HitState::Count,1,0,1
"session, dest != NULL",1,0,1
laneType == w->type(),1,0,1
arr->vector[index]->isTenured(),1,0,1
!cxArg->compartment()->hasObjectPendingMetadata(),1,0,1
!entry->isValid(),1,0,1
"session, trk->shared->ref > 0",1,0,1
!regs.has(PseudoStackPointer),1,0,1
v->compartment() == this->compartment,1,0,1
"session, lsm_tree->queue_ref == 0",1,0,1
"comp && !runtime_->isAtomsCompartment(comp), !comp->zone()->isAtomsZone()",1,0,1
sizeof(value) == kSRegSizeInBytes,1,0,1
vd.Is64Bits() || vd.Is128Bits(),1,0,1
!IS_EMPTY_OR_DELETED(e->hashcode),1,0,1
(reg_size == kXRegSize) || is_uint6(imms + 3),1,0,1
hasDebuggers(),1,0,1
scratch != src.index,1,0,1
"session, txn->id != WT_TXN_NONE",1,0,1
"!mozilla::IsSame<Cell, T>::value && !mozilla::IsSame<TenuredCell, T>::value, ""T must not be Cell or TenuredCell""",1,0,1
!lhs.containsReg(scratch),1,0,1
sizeof(value) == kDRegSizeInBytes,1,0,1
lir->isBinarySharedStub() || lir->isUnarySharedStub(),1,0,1
!gc::IsAboutToBeFinalized(&key),1,0,1
"sizeof(ChunkTrailer) == ChunkTrailerSize, ""ChunkTrailer size must match the API defined size.""",1,0,1
"std::is_integral<Rep2>::value && std::is_signed<Rep2>::value, ""Durations may only be divided by values of signed integral type""",1,0,1
gc::AllocKind::OBJECT_LAST == gc::AllocKind::OBJECT16_BACKGROUND,1,0,1
"dbenv->close(dbenv, 0) == 0",1,0,1
"obj->getClass()->mayResolve, obj->getClass()->mayResolve(cx->names(), id, obj)",1,0,1
!isAsmJS(),1,0,1
vt.IsQ(),1,0,1
type_ == ValType::F64,1,0,1
"jcursor->get_value(jcursor, &i, &j, &d) == 0",1,0,1
"BYTEOFFSET_SLOT == JS_TYPEDARRAYLAYOUT_BYTEOFFSET_SLOT, ""self-hosted code with burned-in constants must get the "" ""right byteOffset slot""",1,0,1
T::call == BaseInfo::call,1,0,1
IsPowerOf2(width) && (width <= 64),1,0,1
getAllocKind() == gc::AllocKind::ACCESSOR_SHAPE,1,0,1
"session, txn->mod_count == 0",1,0,1
sizeof(size_t) >= 8,1,0,1
"int(AllocKind::OBJECT_FIRST) == 0, ""Various places depend on AllocKind::OBJECT_FIRST "" ""being 0, please audit them carefully!""",1,0,1
"session, next_ref->page_del == NULL",1,0,1
size(),1,0,1
"session, !F_ISSET(txn, WT_TXN_ERROR) || txn->mod_count == 0",1,0,1
"session, jsize <= jbufsize",1,0,1
temps.IsAvailable(ScratchReg64),1,0,1
"this != &rhs, ""self-move not allowed""",1,0,1
"sizeof(T) == sizeof(uint64_t), ""sizeof(T) == sizeof(uint64_t)""",1,0,1
"sizeof(uint64_t) >= sizeof(T), ""sizeof(uint64_t) >= sizeof(T)""",1,0,1
"base::is_reference<To>::value, target_type_not_a_reference",1,0,1
"kMaxTypeBitsPerDecimal * kMaxDecimalsPerKey < kMaxBytesNeeded * 8UL, ""encoding needs change to contain all type bits for worst case key""",1,0,1
"slot.isObject(), ""intrinsics holder must already exist""",1,0,1
"session, !LF_ISSET(WT_LOG_FSYNC) || __wt_log_cmp(&log->sync_lsn, &lsn) >= 0",1,0,1
is_uint14(imm14),1,0,1
"!hadError, !used()",1,0,1
nextCellUniqueId_ > 0,1,0,1
other.jumps_.length() == 0,1,0,1
"session, F_ISSET(dhandle, WT_DHANDLE_EXCLUSIVE) && !LF_ISSET(WT_DHANDLE_LOCK_ONLY)",1,0,1
!pod.functionBytes_,1,0,1
(sign == 0) || (sign == 1),1,0,1
"session, ext->off + ext->size <= block->size",1,0,1
"sizeof(BtreeBucketV1) - sizeof(static_cast<BtreeBucketV1*>(NULL)->data) == BtreeBucketV1::HeaderSize, ""sizeof(BtreeBucketV1) - sizeof(static_cast<BtreeBucketV1*>(NULL)->data) == "" ""BtreeBucketV1::HeaderSize""",1,0,1
height >= 1 && height <= MAX_HEIGHT,1,0,1
"JS_NewObject(_context, &_jsclass)",1,0,1
"session, buf->memsize >= allocsize",1,0,1
"session, releasep != NULL",1,0,1
!ins_,1,0,1
postOrder[indexPlusOne - 1] != root,1,0,1
kind == ICStub::GetElem_NativeSlotName || kind == ICStub::GetElem_NativePrototypeSlotName || kind == ICStub::GetElem_NativePrototypeCallNativeName || kind == ICStub::GetElem_NativePrototypeCallScriptedName,1,0,1
cnv->preFromULength==0,1,0,1
bytes <= INT32_MAX,1,0,1
j == (int)half,1,0,1
"session, worker_args->tid != 0",1,0,1
!scratch32.Is(fsrc),1,0,1
"offsetof(WT_CURSOR_LSM, iface) == 0",1,0,1
e->hashcode == HASH_EMPTY,1,0,1
"session, dhandle != conn->cache->evict_file_next",1,0,1
sumOfSizes <= length,1,0,1
typeid(*genericRCPtr) == typeid(const RCDecimal),1,0,1
is_int26(imm26),1,0,1
ns.ns(),1,0,1
format < (sizeof(formats) / sizeof(formats[0])),1,0,1
