x_val,y_added,y_removed,y_combined
QOpenGLFunctions::isInitialized(d_ptr),142,142,284
QGLFunctions::isInitialized(d_ptr),97,97,194
!isEmpty(),81,81,162
rn != ARMRegisters::pc,60,60,120
isSSE2Present(),57,57,114
!BadReg(rm),56,56,112
0,54,54,108
 rc==SQLITE_OK ,51,51,102
 cursorHoldsMutex(pCur) ,48,48,96
!BadReg(rd),47,47,94
pPager,44,44,88
 sqlite3_mutex_held(pBt->mutex) ,44,44,88
 sqlite3_mutex_held(db->mutex) ,42,42,84
" sqlite3SchemaMutexHeld(db, iDb, 0) ",42,42,84
 pFile ,42,42,84
 pOp->p1>=0 && pOp->p1<p->nCursor ,41,41,82
 assert_pager_state(pPager) ,41,41,82
false,39,39,78
object,38,38,76
m_value,35,35,70
(cond == Overflow) || (cond == Signed) || (cond == Zero) || (cond == NonZero),35,35,70
src2 == TMP_REG2,34,34,68
 sqlite3_mutex_held(pCtx->s.db->mutex) ,34,34,68
 sqlite3_mutex_held(pPage->pBt->mutex) ,34,34,68
!BadReg(rn),32,32,64
 pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) ,28,28,56
m_ptr,27,27,54
 p!=0 ,27,27,54
node,26,26,52
value,26,26,52
v != 0,25,25,50
!(reinterpret_cast<intptr_t>(instruction) & 1),24,24,48
!atEnd(),24,24,48
!(reinterpret_cast<intptr_t>(target) & 1),24,24,48
 db!=0 ,23,23,46
" !ExprHasProperty(pExpr, EP_IntValue) ",23,23,46
arg & SLJIT_MEM,23,23,46
src1 == TMP_REG1 && !(flags & SRC2_IMM),22,22,44
isMainThread(),22,22,44
v,22,22,44
character,21,21,42
 argc==1 ,21,21,42
 sqlite3_mutex_held(p->db->mutex) ,21,21,42
(cond == Zero) || (cond == NonZero),21,21,42
rd != ARMRegisters::pc,20,20,40
 sqlite3_mutex_held(mem3.mutex) ,20,20,40
p,20,20,40
 iDb>=0 && iDb<db->nDb ,20,20,40
 pCur->eState==CURSOR_VALID ,20,20,40
 sqlite3PagerIswriteable(pPage->pDbPage) ,20,20,40
from.isSet(),20,20,40
 !pagerUseWal(pPager) ,20,20,40
!ptr || m_ptr != ptr,20,20,40
reg <= ARMRegisters::pc,20,20,40
 (pMem->flags & MEM_RowSet)==0 ,20,20,40
 pC!=0 ,19,19,38
m_rareData,19,19,38
 !db->mallocFailed ,18,18,36
result,18,18,36
uint(i) < uint(size()),18,18,36
 id!=0 ,18,18,36
kind == CodeForConstruct,18,18,36
children() == virtualChildren(),18,18,36
(rd != ARMRegisters::sp) || (rn == ARMRegisters::sp),17,17,34
imm.isEncodedImm(),17,17,34
imm.isUInt12(),17,17,34
 !MEMDB ,17,17,34
!(flags & SET_FLAGS) && arg1 == TMP_REG1,17,17,34
 p->magic==VDBE_MAGIC_INIT ,16,16,32
 sqlite3BtreeHoldsMutex(p) ,16,16,32
offset,16,16,32
armImm.isValid(),16,16,32
this->isMutable(),16,16,32
!m_deletionHasBegun,16,16,32
!(flags & INV_IMM),16,16,32
item_exists(),16,16,32
"!sizeof(U*), OwnPtrs_should_never_be_equal",16,16,32
contextElement,16,16,32
m_type == DOCTYPE,16,16,32
src1 == TMP_REG1,15,15,30
m_length,15,15,30
document,15,15,30
m_data,15,15,30
m_type == StartTag || m_type == EndTag,15,15,30
imm.isValid(),15,15,30
structure()->classInfo() == &s_info,15,15,30
 EIGHT_BYTE_ALIGNMENT(pMem) ,14,14,28
 pWal->writeLock ,14,14,28
rt != ARMRegisters::pc,14,14,28
 p->pSegments==0 ,14,14,28
m_jit,14,14,28
m_callback,14,14,28
i >= 0,14,14,28
 pEList!=0 ,14,14,28
type == constant.type,13,13,26
m_bytecodeOffset != (unsigned)-1,13,13,26
view,13,13,26
" !ExprHasProperty(pExpr, EP_xIsSelect) ",13,13,26
 sqlite3BtreeHoldsAllMutexes(db) ,13,13,26
jump->flags & JUMP_LABEL,13,13,26
 pOp->p1>=0 && pOp->p1<db->nDb ,13,13,26
inp_flags & LOAD_DATA,13,13,26
 p->nRef>0 ,12,12,24
virtualRegisterIndex < FirstConstantRegisterIndex,12,12,24
shift <= 3,12,12,24
m_wrappers,12,12,24
index < NUM_REGS,12,12,24
m_table,12,12,24
m_isAnimating,12,12,24
 rc!=SQLITE_DONE ,12,12,24
field < Fragment::size_array_max,12,12,24
 pPager->eState!=PAGER_ERROR ,12,12,24
 isOpen(pPager->jfd) ,12,12,24
shift_amount != dest,12,12,24
!m_adoptionIsRequired,12,12,24
m_values,12,12,24
 pPager->errCode==SQLITE_OK ,12,12,24
m_gprOrInvalid != InvalidGPRReg,12,12,24
inherits(&s_info),11,11,22
i < size(),11,11,22
 sqlite3_mutex_held(pCur->pBtree->db->mutex) ,11,11,22
fixture->obj,11,11,22
m_useCount,11,11,22
m_type == Uninitialized,11,11,22
!this->ref.isShared(),11,11,22
fixture->has_been_provisional,11,11,22
"false && ""Default missing""",11,11,22
dst == SH4Registers::r0,10,10,20
reg != InvalidGPRReg,10,10,20
 pPage->isInit ,10,10,20
"result, ==, TRUE",10,10,20
index || wback,10,10,20
!wback | (rt != rn),10,10,20
 pH!=0 ,10,10,20
!m_err,10,10,20
 pOp->p4type==P4_INT32 ,10,10,20
 eFileLock<=SHARED_LOCK ,10,10,20
 pTab!=0 ,10,10,20
isPlaced(),10,10,20
(*insn & 0xffe00000) == 0x3c000000,10,10,20
is8Bit(),10,10,20
address.u.offset >= -255,10,10,20
!const_,10,10,20
!label,10,10,20
index >= 0 && index < 4,10,10,20
!jump,10,10,20
m_values->size() == m_wrappers->size(),10,10,20
 p->readOnly==0 ,10,10,20
 pPager->eState==PAGER_OPEN ,10,10,20
 p->pEList ,10,10,20
 db->mallocFailed ,9,9,18
 (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 ,9,9,18
!AtEnd(),9,9,18
data,9,9,18
 iIndex>=0 && iIndex<p->nIndex ,9,9,18
!m_callback,9,9,18
 iDb>=0 ,9,9,18
 IsVirtual(pTab) ,9,9,18
fixture,9,9,18
id,9,9,18
(instructionPtr[0] & 0xf000) == MOVL_READ_OFFPC_OPCODE,9,9,18
isUsingSingleSlot(),9,9,18
!isHashTableDeletedValue(),9,9,18
item,9,9,18
context,9,9,18
isPageAligned(size),9,9,18
i >= 0 && i < size(),9,9,18
n >= 0,9,9,18
name,9,9,18
m_accountForGlyphBounds,8,8,16
 rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 ,8,8,16
 sqlite3PagerIswriteable(pParent->pDbPage) ,8,8,16
 pList!=0 ,8,8,16
reg < 16,8,8,16
m_type == Character,8,8,16
to.isSet(),8,8,16
 pParse->nErr==0 ,8,8,16
index < numberOfRegisters,8,8,16
flag >= 1,8,8,16
animatedProperty,8,8,16
animatedList,8,8,16
 p->nOp>0 ,8,8,16
result != InvalidIndex,8,8,16
!isSetNeedsLayoutForbidden(),8,8,16
V_VT(variant) == VT_EMPTY,8,8,16
 pTabList->nSrc==1 ,8,8,16
!(relative & 1),8,8,16
flag <= 32,8,8,16
"ErrorString*, int nodeId",8,8,16
m_animVal,8,8,16
k >> BITS == 0,8,8,16
b < e,8,8,16
(cond == Overflow) || (cond == Signed) || (cond == PositiveOrZero) || (cond == Zero) || (cond == NonZero),8,8,16
isFlushed(),8,8,16
 ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 ,8,8,16
element,8,8,16
 unixMutexHeld() ,8,8,16
 pBt->inTransaction==TRANS_WRITE ,8,8,16
values.size() == wrappers.size(),8,8,16
 pOp->p3>0 ,8,8,16
 sqlite3BtreeHoldsAllMutexes(pParse->db) ,8,8,16
 nByte>0 ,8,8,16
m_refCount >= 0,8,8,16
!qFuzzyIsNull(c),8,8,16
 pOp->p2>0 ,8,8,16
 pParse!=0 ,8,8,16
 p->inTrans==TRANS_WRITE ,8,8,16
 pC->pCursor!=0,8,8,16
buffered_len >= 0,9,6,15
 amt>0 ,7,7,14
!is8Bit(),7,7,14
 p->nPendingData==0 ,7,7,14
!label || label->size >= word_count,7,7,14
 stream ,7,7,14
 pIn1->flags&MEM_Int ,7,7,14
cc != NULL,7,7,14
"webkit_web_back_forward_list_get_back_length(webBackForwardList), ==, 0",7,7,14
!(right.m_value & 0xFFFFFF00),7,7,14
!jump || jump->addr >= word_count,7,7,14
 iDb<db->nDb ,7,7,14
 pFile!=0 ,7,7,14
 winMutex_isInit==1 ,7,7,14
!get(),7,7,14
 pC->deferredMoveto==0 ,7,7,14
ptr,7,7,14
i < Size,7,7,14
 p->bIsReader ,7,7,14
!Heap::heap(value) || Heap::heap(value) == Heap::heap(this),7,7,14
slot,7,7,14
 pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell ,7,7,14
"QtPrivate::HasQ_OBJECT_Macro<typename SignalType::Object>::Value, ""No Q_OBJECT in the class with the signal""",7,7,14
!webkit_web_view_can_go_forward(webView),7,7,14
i < m_butterfly->vectorLength(),7,7,14
 p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE ,7,7,14
ATK_IS_TEXT(listItem),7,7,14
(offset & ~0xff) == 0,7,7,14
i < m_length,7,7,14
"webkit_web_back_forward_list_get_forward_length(webBackForwardList), ==, 0",7,7,14
!webkit_web_view_can_go_back(webView),7,7,14
!(m_flags & NodeHasVarArgs),7,7,14
!const_ || const_->addr >= word_count,7,7,14
 pOp->p1>=0 ,7,7,14
arg1 == TMP_REG1,7,7,14
reg != InvalidFPRReg,7,7,14
!(inst & (ADDR_MODE2 | UPDATE_REQ)),7,7,14
 nColumn==1 ,6,6,12
!m_inRemovedLastRefFunction,6,6,12
 pH->htsize>0 ,6,6,12
static_cast<int>(virtualRegisterIndex) < FirstConstantRegisterIndex,6,6,12
!isHostFunctionNonInline(),6,6,12
 (pH->htsize & (pH->htsize-1))==0 ,6,6,12
iter_,6,6,12
!this->isEmpty(),6,6,12
usesAttributes(),6,6,12
 pShmNode->pInode==pDbFd->pInode ,6,6,12
 op>=0 && op<ArraySize(wsdStat.nowValue) ,6,6,12
size == 4,6,6,12
"thisObject, &s_info",6,6,12
!object || object->isBox(),6,6,12
" sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) ",6,6,12
 p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) ,6,6,12
d,6,6,12
 isOpen(pPager->fd) ,6,6,12
m_numBits == other.m_numBits,6,6,12
 pPrior!=0 ,6,6,12
 (z-zBuf)==n ,6,6,12
 pPk!=0 ,6,6,12
slotBase,6,6,12
 pPager->eState>=PAGER_WRITER_LOCKED ,6,6,12
 isOpen(pPager->fd) || pPager->tempFile ,6,6,12
 rc!=SQLITE_OK ,6,6,12
(flags & ~O_NONBLOCK) == 0,6,6,12
!m_data,6,6,12
 p->db!=0 ,6,6,12
(cond == Signed) || (cond == Zero) || (cond == NonZero),6,6,12
 pHdr->iForeGuard==FOREGUARD ,6,6,12
(imm8 <= 255) && (imm8 >= 0),6,6,12
 pPage->nOverflow==0 ,6,6,12
m_start != m_end,6,6,12
m_data16,6,6,12
m_attributes & Function,6,6,12
 pPg->flags&PGHDR_DIRTY ,6,6,12
sizeof(QTypedArrayData) == sizeof(QArrayData),6,6,12
m_significand[0] != '0' || !m_exponent,6,6,12
 p->eLock!=UNKNOWN_LOCK ,6,6,12
frag,6,6,12
isASCIIHexDigit(c),6,6,12
JITCompiler::isInvertible(cond),6,6,12
 pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) ,6,6,12
!node || node->isHTMLElement(),6,6,12
 i>=1 ,6,6,12
container,6,6,12
 pParse->pNewTable==0 ,6,6,12
idx >= 0 && idx < s,6,6,12
!IsSampler(type),6,6,12
 i>=0 && i<mem5.nBlock ,6,6,12
w,6,6,12
" sqlite3SchemaMutexHeld(db, j, 0) ",6,6,12
"(QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value), ""Signal and slot arguments are not compatible.""",6,6,12
 pTab->pSelect==0 ,6,6,12
 pWal->nWiData>0 && pWal->apWiData[0] ,6,6,12
 isOpen(p->jfd) || p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_WAL ,6,6,12
(condition != ConditionAL) || !(mask & (mask - 1)),6,6,12
state,6,6,12
 !db->init.busy ,6,6,12
 iCol>=0 ,6,6,12
common->first_line_end != 0,6,6,12
 pBt!=0 ,6,6,12
isCell(),6,6,12
code_ptr - code <= (sljit_sw)compiler->size,6,6,12
 p->nRef==0 ,6,6,12
 pName->nSrc==1 ,6,6,12
index < size,6,6,12
 eType==SQLITE_OPEN_MAIN_DB || eType==SQLITE_OPEN_TEMP_DB || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL || eType==SQLITE_OPEN_SUBJOURNAL || eType==SQLITE_OPEN_MASTER_JOURNAL || eType==SQLITE_OPEN_TRANSIENT_DB || eType==SQLITE_OPEN_WAL ,6,6,12
 n>0 && n<=4 ,6,6,12
 mem1.zMalloc==0 ,6,6,12
"webkit_get_security_policy_for_uri_scheme(""foo""), ==, policy",6,6,12
value <= 0x1f,6,6,12
m_type == HTMLToken::DOCTYPE,6,6,12
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,6,6,12
 nCell<nMaxCells ,6,6,12
 stream && stream->cursor ,6,6,12
rc==SQLITE_OK || rc==SQLITE_NOMEM,6,6,12
call.isSet(),6,6,12
src1 == TMP_REG1 && !(flags & ARGS_SWAPPED),6,6,12
m_data[index].lockCount,6,6,12
(*insn & 0xfc000000) == 0x34000000,6,6,12
 nKey>=0 ,6,6,12
QOpenGLExtensions::isInitialized(d),6,6,12
 i>0 ,6,6,12
m_precision,6,6,12
 pBt->autoVacuum ,6,6,12
"userAgent, ==, ""testwebsettings/0.1""",6,6,12
 pIdx->pSchema==pTab->pSchema ,6,6,12
 argc==1 || argc==2 ,6,6,12
!(inst & (INT_ALIGNED | UPDATE_REQ)),6,6,12
 pFrom->pTab==0 ,6,6,12
format & DataFormatJS,6,6,12
shiftReg <= ARMRegisters::pc,6,6,12
 pPager->journalHdr<=pPager->journalOff ,6,6,12
 argc==3 ,6,6,12
"WTF_ARRAY_LENGTH(m_priorContext) == 2, TextBreakIterator_unexpected_prior_context_length",6,6,12
 pNew!=0 ,6,6,12
i == boundary,6,6,12
isInitialized(),6,6,12
mask.m_value >= -128 && mask.m_value <= 255,6,6,12
"startOffset, ==, 0",6,6,12
usesName(),6,6,12
 pOp->p3>0 && pOp->p3<=p->nMem ,6,6,12
 z!=0 ,6,6,12
"hasNext(), Q_FUNC_INFO, ""iterator hasn't a next item""",6,6,12
"hasPrevious(), Q_FUNC_INFO, ""iterator hasn't a previous item""",6,6,12
" sqlite3MemdebugHasType(p, MEMTYPE_DB) ",6,6,12
 iLevel<FTS3_SEGDIR_MAXLEVEL ,6,6,12
 sqlite3BtreeCursorIsValid(pCur) ,6,6,12
 pPage->pBt!=0 ,6,6,12
call.isFlagSet(Call::Linkable),6,6,12
animatedTypes[0].properties.size() == 2,5,5,10
!webkit_web_back_forward_list_get_current_item(webBackForwardList),5,5,10
o,5,5,10
 pTerm!=0 ,5,5,10
"text, ==, ""foo bar baz""",5,5,10
WEBKIT_IS_NETWORK_REQUEST(request),5,5,10
Valid(),5,5,10
 db==0 || sqlite3_mutex_held(db->mutex) ,5,5,10
 len>0 ,5,5,10
isValidIndex(index),5,5,10
!isDirty(),5,5,10
 iLogsize>=0 && iLogsize<=LOGMAX ,5,5,10
fastMallocSize(this),5,5,10
webkit_dom_node_has_child_nodes(WEBKIT_DOM_NODE(body)),5,5,10
!object || object->isTable(),5,5,10
!exception,5,5,10
(cond == Overflow) || (cond == Signed) || (cond == Zero) || (cond == NonZero) || (cond == PositiveOrZero),5,5,10
 pMem->n>=0 ,5,5,10
!m_value.isNull(),5,5,10
 iType-2 >= 0 ,5,5,10
m_firstRun,5,5,10
 memIsValid(pIn1) ,5,5,10
"JSValueIsEqual(context, v, o, NULL)",5,5,10
FALSE,5,5,10
TK_GT==OP_Gt,5,5,10
dst == src2,5,5,10
size_t(e - b) <= this->alloc - uint(this->size),5,5,10
 pList->nExpr>0 ,5,5,10
 p->db->mallocFailed ,5,5,10
"offset, ==, 5",5,5,10
 (pX->exclMask & (p->exclMask|p->sharedMask))==0 ,5,5,10
"JSValueIsEqual(context, v, globalObject, NULL)",5,5,10
m_count > 0,5,5,10
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL ,5,5,10
 omitTable==0 ,5,5,10
!error,5,5,10
ATK_IS_TEXT(textObject),5,5,10
 hHeap!=INVALID_HANDLE_VALUE ,5,5,10
entry,5,5,10
!iter,5,5,10
!(inp_flags & WRITE_BACK),5,5,10
!isInPlacedTree(),5,5,10
 n>=1 ,5,5,10
"G_OBJECT(message)->ref_count, ==, 1",5,5,10
child,5,5,10
elementData(),5,5,10
(imm8 <= 127) && (imm8 >= -128),5,5,10
 n>1 || mask==(1<<ofst) ,5,5,10
head,5,5,10
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB ,5,5,10
 ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK ,5,5,10
isBranch(),5,5,10
 sqlite3_mutex_held(pCache->pGroup->mutex) ,5,5,10
isDelete==0 || isCreate,5,5,10
 pC->isTable ,5,5,10
isCreate==0 || isReadWrite,5,5,10
checkConsistency(),5,5,10
nodeList,5,5,10
TK_NE==OP_Ne,5,5,10
divot.offset >= divot.lineStartOffset,5,5,10
TK_LT==OP_Lt,5,5,10
ATK_IS_TEXT(paragraph),5,5,10
globalObject,5,5,10
!isStatic(),5,5,10
(isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly),5,5,10
 i==0 ,5,5,10
!entry.isNull(),5,5,10
animatedTypes[0].properties.size() == 1,5,5,10
 pOp[-1].opcode==OP_CollSeq ,5,5,10
 (p->sharedMask & mask)==0 ,5,5,10
m_buffer,5,5,10
m_type == Type::Uninitialized,5,5,10
SQLITE_IOCAP_ATOMIC64K==(65536>>8),5,5,10
size,5,5,10
"!""Invalid flags argument""",5,5,10
 (!isDelete && zName) || eType!=SQLITE_OPEN_WAL ,5,5,10
type,5,5,10
 pX!=0 ,5,5,10
 n>0 ,5,5,10
TK_EQ==OP_Eq,5,5,10
 pPage->pCache==pCache ,5,5,10
 hHeap!=0 ,5,5,10
parent,5,5,10
 pCur->aiIdx[pCur->iPage]<pPage->nCell ,5,5,10
 pList ,5,5,10
isExclusive==0 || isCreate,5,5,10
!m_discardMargin,5,5,10
slot(),5,5,10
"userAgent, ==, defaultUserAgent",5,5,10
 pCrsr!=0 ,5,5,10
position <= size(),5,5,10
"policy & mask, ==, mask",5,5,10
TK_GE==OP_Ge,5,5,10
 flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE) ,5,5,10
 (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL ,5,5,10
label.isSet(),5,5,10
canInsert(),5,5,10
 n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 ,5,5,10
!result,5,5,10
i < uint(size()),5,5,10
 pPager->eLock==EXCLUSIVE_LOCK ,5,5,10
SQLITE_IOCAP_ATOMIC512==(512>>8),5,5,10
ptr != 0,5,5,10
WEBKIT_IS_NETWORK_RESPONSE(response),5,5,10
TK_LE==OP_Le,5,5,10
m_returnType == Value || m_returnType == Cell,5,5,10
!fixture->has_been_committed,4,4,8
"text, ==, expectedText",4,4,8
!(src2 & SRC2_IMM),4,4,8
 p->eLock>=RESERVED_LOCK ,4,4,8
isPageAligned(start),4,4,8
"contains(start, size)",4,4,8
m_terms.size(),4,4,8
 (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize ,4,4,8
!m_head,4,4,8
 sqlite3_mutex_held(pGroup->mutex) ,4,4,8
"atk_action_do_action(atkAction, 0)",4,4,8
"i >= 0 && i <= d->size, ""QVector<T>::insert"", ""index out of range""",4,4,8
 p->inTrans>TRANS_NONE ,4,4,8
 (f & (MEM_Dyn|MEM_Ephem))==0 ,4,4,8
size==0,4,4,8
!(m_attributes & Function),4,4,8
ATK_OBJECT(hLinkObject),4,4,8
ARMWord(reg) <= 0xf,4,4,8
 szRegion==pShmNode->szRegion || pShmNode->nRegion==0 ,4,4,8
 p->aSample!=0 ,4,4,8
atk_object_get_role(colHeader) == ATK_ROLE_TABLE_CELL,4,4,8
 (rc&0xff)==rc ,4,4,8
!object || object->isSVGText(),4,4,8
valid(property),4,4,8
 pTable ,4,4,8
 pTable!=0 ,4,4,8
 aiCol || pFKey->nCol==1 ,4,4,8
usesArguments(),4,4,8
 rc2==SQLITE_OK ,4,4,8
 addr>=0 ,4,4,8
m_type == StartTag || m_type == EndTag || m_type == DOCTYPE,4,4,8
" ExprHasProperty(pExpr, EP_xIsSelect) ",4,4,8
(label <= 127) && (label >= -128),4,4,8
 (PAGER_JOURNALMODE_PERSIST & 5)==1 ,4,4,8
newHash,4,4,8
atk_object_get_role(tableCell) == ATK_ROLE_TABLE_CELL,4,4,8
leafCorrection==4,4,4,8
!object || object->isTableRow(),4,4,8
 (n&0x7fffffff)==n ,4,4,8
" DbMaskTest(p->btreeMask, pOp->p1) ",4,4,8
isFat(),4,4,8
d->count > 0,4,4,8
m_deletionHasBegun,4,4,8
(flags&0x0F)==SQLITE_SYNC_NORMAL || (flags&0x0F)==SQLITE_SYNC_FULL ,4,4,8
 p->magic==VDBE_MAGIC_RUN ,4,4,8
!object || object->isTableCell(),4,4,8
 pH->first==0 ,4,4,8
m_cell,4,4,8
!isZombie(),4,4,8
 (pFrom->flags & MEM_RowSet)==0 ,4,4,8
offset >= 0,4,4,8
 pH->count==0 ,4,4,8
m_owner,4,4,8
m_index != m_deque->m_end,4,4,8
 zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) ,4,4,8
!iter.first,4,4,8
!object || object->isDetailsMarker(),4,4,8
m_spans,4,4,8
 p->pOffset==0 ,4,4,8
 p->mxSavepoint >= iSavepoint ,4,4,8
 pPager->eState==PAGER_WRITER_DBMOD ,4,4,8
tmp,4,4,8
 rc==SQLITE_OK || pStmt==0 ,4,4,8
 TK_NOTNULL==OP_NotNull ,4,4,8
 0!=pFile->eFileLock ,4,4,8
m_registerFormat & DataFormatJS,4,4,8
 pParse->db->mallocFailed ,4,4,8
 pcacheCheckSynced(p) ,4,4,8
!object || object->isSVGImage(),4,4,8
!object || object->isSVGRoot(),4,4,8
 (mem3.aPool[i-1].u.hdr.size4x & 1)==0 ,4,4,8
allocationEnd > current,4,4,8
 pWal->readLock>=0 || pWal->lockError ,4,4,8
 (f & (MEM_Static|MEM_Ephem))==0 ,4,4,8
!object || object->isText(),4,4,8
m_index != m_deque->m_start,4,4,8
!m_hasPendingCharacter,4,4,8
pCsr->pNode,4,4,8
 z2==(char*)sqlite3_value_text(argv[0]) ,4,4,8
 rc!=SQLITE_OK || isOpen(pPager->jfd) ,4,4,8
m_registerFormat != DataFormatNone,4,4,8
 onError==OE_Replace ,4,4,8
m_size,4,4,8
 pShmNode->nRef>0 ,4,4,8
tempDst != ignoredResult(),4,4,8
 rc==SQLITE_NOMEM || rc==SQLITE_OK ,4,4,8
 nVal==1 ,4,4,8
!v,4,4,8
 target>0 && target<=pParse->nMem ,4,4,8
isCacheable(),4,4,8
 p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) ,4,4,8
 pCsr->pNode==pRoot ,4,4,8
m_deque->m_buffer.capacity(),4,4,8
 pX->op==TK_IN ,4,4,8
 pzErrMsg!=0 ,4,4,8
 keyClass==FTS3_HASH_BINARY ,4,4,8
 pSrc!=0 ,4,4,8
 pWal->writeLock==0 ,4,4,8
!fixture->has_been_provisional,4,4,8
 eFileLock==SHARED_LOCK ,4,4,8
m_verifier.isSafeToUse(),4,4,8
 p==0 ,4,4,8
body,4,4,8
 pIdx!=0 ,4,4,8
 200==sqlite3LogEst(1048576) ,4,4,8
 pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER ,4,4,8
 pBt->pPage1->aData ,4,4,8
"i >= 0 && i < d->size, ""QVector<T>::operator[]"", ""index out of range""",4,4,8
isBranch() || isJump(),4,4,8
 p->op==RTREE_MATCH ,4,4,8
 pWal->readLock>=0 ,4,4,8
 TK_LT==TK_GT+2 ,4,4,8
 lockType==F_WRLCK ,4,4,8
 pOp->p4.z!=0 ,4,4,8
rowHeader,4,4,8
 sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) ,4,4,8
flags == FD_CLOEXEC || flags == 0,4,4,8
 pPage->leaf ,4,4,8
m_type == Comment,4,4,8
 p->inTransaction ,4,4,8
!(reinterpret_cast<intptr_t>(from) & 1),4,4,8
 pBt->pageSize>=512 && pBt->pageSize<=65536 ,4,4,8
 sqlite3_data_count(pCsr->pStmt)==0 ,4,4,8
anchorNode,4,4,8
 (PAGER_JOURNALMODE_TRUNCATE & 5)==1 ,4,4,8
 sz<=pBt->maxLocal+23 ,4,4,8
m_codeBlockForConstruct,4,4,8
reinterpret_cast<intptr_t>(to) & 1,4,4,8
 pOp[-1].p4type==P4_COLLSEQ ,4,4,8
 size==mem3.aPool[i+size-1].u.hdr.prevSize ,4,4,8
peekIsDigit(),4,4,8
"exec, exec",4,4,8
src2 & SRC2_IMM,4,4,8
 pParse ,4,4,8
(inst[0] & 0xfff00000) == MOVW && (inst[1] & 0xfff00000) == MOVT,4,4,8
 sqlite3_mutex_notheld(pcache1.grp.mutex) ,4,4,8
 pNew->nOut==saved_nOut ,4,4,8
 n==pPage->pgno && e==PTRMAP_BTREE ,4,4,8
m_data8,4,4,8
!m_previous,4,4,8
getValue,4,4,8
rt <= 15,4,4,8
isSafe,4,4,8
 p->eLock==EXCLUSIVE_LOCK ,4,4,8
o.m_data,4,4,8
index < m_size,4,4,8
 iVar>0 ,4,4,8
op1 == dest || op2 != dest,4,4,8
 pToken->pDeferred==0 ,4,4,8
 pLhs->aNode && pRhs->aNode ,4,4,8
 pPager->eState>=PAGER_READER ,4,4,8
isMatrix(),4,4,8
m_values.size() == m_wrappers.size(),4,4,8
*this,4,4,8
 jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 ,4,4,8
 sqlite3_mutex_held(p->pSrc->pBt->mutex) ,4,4,8
 pKey!=0 ,4,4,8
t != Calculated,4,4,8
 pIn3->flags&MEM_Int ,4,4,8
hasResult(),4,4,8
 x>='a' && x<='z' ,4,4,8
m_thread == currentThread(),4,4,8
node != m_head,4,4,8
 pSelect==0 ,4,4,8
 *pPgno!=PENDING_BYTE_PAGE(pBt) ,4,4,8
 pOp->p3<=(p->nMem-p->nCursor) ,4,4,8
row >= 0 && row < M && column >= 0 && column < N,4,4,8
 p->pOrderBy==0 ,4,4,8
" db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) ",4,4,8
 mem.disallow==0 ,4,4,8
 p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE ,4,4,8
m_type == MachOOLMemoryType,4,4,8
"pos >= d->offset && pos - d->offset < d->count, ""QContiguousCache<T>::at"", ""index out of range""",4,4,8
!object || toRenderText(object)->isTextFragment(),4,4,8
significantFigures && significantFigures <= sizeof(DtoaBuffer),4,4,8
!*this,4,4,8
node == m_tail,4,4,8
begin(),4,4,8
 iLevel==FTS3_SEGCURSOR_ALL || iLevel==FTS3_SEGCURSOR_PENDING || iLevel>=0 ,4,4,8
m_animatedProperty,4,4,8
 p->nRef>0 || p->owner==0 ,4,4,8
"label, differenceBetween(label, newJump) == REPTACH_OFFSET_CALL_R11",4,4,8
isInt32(),4,4,8
m_element,4,4,8
head->root == x,4,4,8
 pOp->p4type==P4_VTAB ,4,4,8
!object || object->isRenderIFrame(),4,4,8
!object || object->isRenderImage(),4,4,8
 pInode->eFileLock==0 ,4,4,8
exec->globalData().dynamicGlobalObject,4,4,8
 p->locked==0 ,4,4,8
 pPager->setMaster==0 ,4,4,8
!(reinterpret_cast<intptr_t>(vPC) & 0x3),4,4,8
!object || object->isSVGInlineText(),4,4,8
"G_OBJECT(message)->ref_count, ==, 2",4,4,8
 pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 ,4,4,8
 pExpr->u.zToken[1]=='\'' ,4,4,8
fixture->clicked == FALSE,4,4,8
index != 0,4,4,8
 sizeof(u32)==4 ,4,4,8
!m_ptr,4,4,8
 rc==SQLITE_NOMEM ,4,4,8
" sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) ",4,4,8
!object || object->isFileUploadControl(),4,4,8
 xHash!=0 ,4,4,8
" !ExprHasProperty(pF->pExpr, EP_xIsSelect) ",4,4,8
"webkit_dom_node_list_get_length(list), ==, 1",4,4,8
 p->rSetup>=pTemplate->rSetup ,4,4,8
" hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) ",4,4,8
!!*this,4,4,8
 onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail || onError==OE_Ignore || onError==OE_Replace ,4,4,8
 (f & (MEM_Static|MEM_Dyn))==0 ,4,4,8
 pPager->dbOrigSize==pPager->dbFileSize ,4,4,8
 pInode->nShared>0 ,4,4,8
!object || object->isBR(),4,4,8
node != m_tail,4,4,8
 pMem->z!=0 ,4,4,8
 pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK ,4,4,8
m_containerNode,4,4,8
common->control_head_ptr != 0,4,4,8
!object || object->isRenderView(),4,4,8
!m_refCount,4,4,8
p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_MATCH ,4,4,8
 db->mallocFailed==0 ,4,4,8
m_status.eor != OtherNeutral || m_eor.atEnd(),4,4,8
 pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 ,4,4,8
 border->start >= 0 ,4,4,8
!object || object->isTableSection(),4,4,8
child && ATK_IS_TEXT(child),4,4,8
!ec,4,4,8
 pPager->eState>=PAGER_WRITER_CACHEMOD ,4,4,8
!node || node->isPluginElement(),4,4,8
 c==i ,4,4,8
 (pIn2->flags & MEM_Int)!=0 ,4,4,8
 pExpr->pLeft==0 && pExpr->pRight==0 ,4,4,8
 pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) ,4,4,8
i >= 0 && i < siz,4,4,8
 target>0 ,4,4,8
 pPager->pInJournal==0 ,4,4,8
m_lastRun,4,4,8
 pTab ,4,4,8
(arg & SLJIT_MEM) && (next_arg & SLJIT_MEM),4,4,8
"atk_action_get_n_actions(atkAction), ==, 1",4,4,8
scale >= 0 && scale <= 31,4,4,8
 p->inTransaction!=0 ,4,4,8
!object || object->isCombineText(),4,4,8
ATK_IS_TEXT(tableCell),4,4,8
!(entry->attributes() & Function),4,4,8
 pDbFd->pShm==0 ,4,4,8
 sizeof(Mem3Block)==8 ,4,4,8
c,4,4,8
 db ,4,4,8
 pInode->nShared!=0 ,4,4,8
m_head,4,4,8
 pMem->flags & MEM_Blob ,4,4,8
 pOp->p1>0 ,4,4,8
!(reinterpret_cast<intptr_t>(where) & 1),4,4,8
" sqlite3MemdebugNoType(p, MEMTYPE_DB) ",4,4,8
" p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) ",4,4,8
!object || object->isRenderMathMLBlock(),4,4,8
"(SLJIT_SINGLE_OP == 0x100), float_transfer_bit_error",4,4,8
!object || object->isRenderBlock(),4,4,8
!block || block->isRenderMathMLOperator(),4,4,8
refCount.load() >= 0,4,4,8
m_kind == BirthToFill || m_kind == Fill,4,4,8
 db->lookaside.bEnabled==0 ,4,4,8
m_jitCodeForCall,4,4,8
 j<nMaxCells ,4,4,8
m_index < m_size,4,4,8
 pCur->iPage>=0 && pCur->apPage[pCur->iPage] ,4,4,8
!node || node->isElementNode(),4,4,8
 pCsr->isRequireSeek==0 ,4,4,8
impl,4,4,8
 esc==0 ,4,4,8
 sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage ,4,4,8
!object || object->isListMarker(),4,4,8
checkOffsetConsistency(),4,4,8
 pOut!=pIn1 ,4,4,8
 pInode->nShared==0 ,4,4,8
 u<=LARGEST_INT64 ,4,4,8
 pPager!=0 ,4,4,8
!first_patch,4,4,8
 pPage->pBt ,4,4,8
!document || document->isPluginDocument(),4,4,8
target,4,4,8
 pLeft ,4,4,8
 eFileLock!=PENDING_LOCK ,4,4,8
m_end >= m_begin,4,4,8
" sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) ",4,4,8
 pCur->skipNext!=SQLITE_OK ,4,4,8
 iCol==-1 || (iCol>=0 && iCol<pTab->nCol) ,4,4,8
 pPager->eState==PAGER_WRITER_LOCKED ,4,4,8
 pPager->dbOrigSize==pPager->dbHintSize ,4,4,8
colHeader,4,4,8
 eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK ,4,4,8
!node || node->isContainerNode(),4,4,8
fixture->has_been_committed,4,4,8
!node || node->isSVGElement(),4,4,8
isPointerTypeAlignmentOkay(reinterpret_cast<TypePtr>(ptr)),4,4,8
 TK_ISNULL==OP_IsNull ,4,4,8
 !pPager->tempFile ,4,4,8
 nBytes>=0 ,4,4,8
 pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) ,4,4,8
node(),4,4,8
aRow >= 0 && aRow < 4 && aColumn >= 0 && aColumn < 4,4,4,8
 pA->pRight==0 || pA->v<=pA->pRight->v ,4,4,8
 pIn1->flags & MEM_Str || db->mallocFailed ,4,4,8
 aHash[iKey]==i ,4,4,8
 pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' ,4,4,8
 sqlite3PagerIswriteable(pRoot->pDbPage) ,4,4,8
 iLookAhead!=YYNOCODE ,4,4,8
 pNC!=0 ,4,4,8
!object || object->isWidget(),4,4,8
 pInode->nLock>=0 ,4,4,8
 EIGHT_BYTE_ALIGNMENT(p) ,4,4,8
atk_object_get_role(rowHeader) == ATK_ROLE_TABLE_CELL,4,4,8
newCapacity,4,4,8
 pC->pseudoTableReg==0 ,4,4,8
!object->m_deletionHasBegun,4,4,8
 size>=2 ,4,4,8
m_jitCodeForConstruct,4,4,8
 isWriteLock==0 || isWriteLock==1 ,4,4,8
 op>0 && op<0xff ,4,4,8
!object || object->isBoxModelObject(),4,4,8
 p->pBt->pPager!=0 ,4,4,8
" !ExprHasProperty(pNew, EP_xIsSelect) ",4,4,8
 db->init.busy ,4,4,8
has_alternatives,4,4,8
!object || object->isRenderButton(),4,4,8
 pPg->pPager==pPager ,4,4,8
 pShmNode==pDbFd->pInode->pShmNode ,4,4,8
 pParse->pNewTrigger==0 ,4,4,8
 pDb->pSchema!=0 ,4,4,8
 p->addrOpenEphm[0] == -1 ,4,4,8
getterFunc,4,4,8
exception,4,4,8
!(flags & ARGS_SWAPPED),4,4,8
m_format == DataFormatInteger || m_format == DataFormatJSInteger,4,4,8
m_impl && m_impl->state() == WeakImpl::Live,4,4,8
(offset <= 15) && (offset >= 0),4,4,8
"i >= 0 && i <= s, ""QVarLengthArray::insert"", ""index out of range""",4,4,8
 WAL_FRAME_HDRSIZE==24 ,4,4,8
"i >= 0 && i < p.size(), ""QList<T>::operator[]"", ""index out of range""",4,4,8
" sqlite3MemdebugHasType(p, MEMTYPE_HEAP) ",4,4,8
collection,4,4,8
table,4,4,8
isAddress(),4,4,8
 eLock==READ_LOCK || eLock==WRITE_LOCK ,4,4,8
head->root == z,4,4,8
 op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK ,4,4,8
"selectedText, ==, 0",4,4,8
ATK_OBJECT(list),4,4,8
(offset <= 255) && (offset >= 0),4,4,8
node == m_head,4,4,8
 pOp->p1>0 && pOp->p1<=(p->nMem-p->nCursor) ,4,4,8
expr->isDotAccessorNode(),4,4,8
s > 0,4,4,8
pCur,4,4,8
 pPager->useJournal ,4,4,8
 (rc&db->errMask)==rc ,4,4,8
 pInode->eFileLock==pFile->eFileLock ,4,4,8
!object || object->isAccessibilityRenderObject(),4,4,8
!isUsingSingleSlot(),4,4,8
 offset <= (int)pBt->usableSize-5 ,4,4,8
 pFile->pUnused==0 || offset>=PENDING_BYTE+512 || offset+amt<=PENDING_BYTE ,4,4,8
animVal->values().size() == animVal->wrappers().size(),4,4,8
!object || object->isRenderInline(),4,4,8
 pSrc ,4,4,8
!(sd & 0x1),4,4,8
exec->vm().dynamicGlobalObject,4,4,8
 (pageSize & 7)==0 ,4,4,8
!object || object->isTextControl(),4,4,8
newHash != 0xFFFFFFFF,4,4,8
 memIsValid(&aMem[pOp->p3]) ,4,4,8
 j==1 ,4,4,8
 pFile->eFileLock==0 ,4,4,8
position < size(),4,4,8
!(*(insn - 1)) && !(*(insn - 2)) && !(*(insn - 3)) && !(*(insn - 5)),4,4,8
 pCur->pVtabCursor ,4,4,8
(op2 | 0xf0fff) == 0xf0fff,4,4,8
sibling,4,4,8
 p && p->pFunc ,4,4,8
!static_cast<const Base*>(this)->get() || !static_cast<const Base*>(this)->get()->isZombie(),4,4,8
conn != NULL,4,3,7
base,3,3,6
 pOp->p3<=p->nMem ,3,3,6
!object || object->isTextField(),3,3,6
 pOp->p2<=(p->nMem-p->nCursor) ,3,3,6
 pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK ,3,3,6
 pOp->p5==0 ,3,3,6
"startOffset, ==, endOffset",3,3,6
!m_errorMessage.isNull(),3,3,6
 pFile->inNormalWrite==0 || pFile->dbUpdate==0 || pFile->transCntrChng==1 ,3,3,6
!isnan(d) && !isinf(d),3,3,6
FUNCTION_CHECK_IS_REG(((p) >> 4) & 0xf),3,3,6
bytes,3,3,6
m_type == Type::Character,3,3,6
domWindow,3,3,6
 e->Lnext->Onext->Sym == e ,3,3,6
ATK_IS_TEXT(item1),3,3,6
std::isfinite(d),3,3,6
size == 1,3,3,6
WEBKIT_DOM_IS_DOCUMENT(document),3,3,6
isCompactPtrAlignedAddressOffset(address.offset),3,3,6
 pOrTerm->eOperator & WO_EQ ,3,3,6
 pagerUseWal(pPager) ,3,3,6
 p->pPrior==0 ,3,3,6
(*(instructionPtr + 1) & BRAF_OPCODE) == BRAF_OPCODE,3,3,6
bit < size(),3,3,6
 enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE ,3,3,6
 isSorter(pC) ,3,3,6
 ( face->len_buildchar == 0 ) == ( face->buildchar == NULL ) ,3,3,6
 pKeyInfo->aSortOrder!=0 ,3,3,6
isMOV_imm_T3(location - 4) && isMOVT(location - 2),3,3,6
sizeof(Yes) != sizeof(No),3,3,6
"atk_hyperlink_get_n_anchors(hLink), ==, 1",3,3,6
atk_object_get_role(table) == ATK_ROLE_TABLE,3,3,6
!(bitwise_cast<uintptr_t>(instructionStart) & 1),3,3,6
m_structure,3,3,6
cc,3,3,6
code < IDBDatabaseException::IDBDatabaseExceptionMax,3,3,6
m_table == other.m_table,3,3,6
m_threadId == currentThread(),3,3,6
offset + length <= static_cast<unsigned>(s.length()),3,3,6
 memIsValid(&r.aMem[i]) ,3,3,6
static_cast<int>(reg) < 16,3,3,6
isEmpty(),3,3,6
 e->Sym != e ,3,3,6
 pOp->p2<=p->nMem ,3,3,6
isPowerOf2(m_indexSize),3,3,6
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 ,3,3,6
 pFile->locktype>=SHARED_LOCK ,3,3,6
!fixture->has_been_load_error,3,3,6
 pC->isTable==0 ,3,3,6
 !CUR.face->unpatented_hinting ,3,3,6
beenToIconCallback,3,3,6
private_data_ptr != 0,3,3,6
!(flags & SET_FLAGS) && (flags & ARG2_IMM) && arg1 == TMP_REG1,3,3,6
m_type == HTMLToken::Character,3,3,6
length <= rep->length(),3,3,6
m_fontList,3,3,6
text,3,3,6
 e->Onext->Sym->Lnext == e ,3,3,6
!dst || dst == ignoredResult() || !dst->isTemporary() || dst->refCount(),3,3,6
 p->nRef==1 ,3,3,6
 db->aDb[iDb].pBt!=0 ,3,3,6
 locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK ,3,3,6
m_type == StringType,3,3,6
i < totalNumberOfRegisters,3,3,6
((p) >> 9) == 0,3,3,6
"int(SignalType::ArgumentCount) >= int(SlotType::ArgumentCount), ""The slot requires more arguments than the signal provides.""",3,3,6
"length, ==, 3",3,3,6
m_flags & NodeHasVarArgs,3,3,6
 (pBt->btsFlags & BTS_READ_ONLY)==0 ,3,3,6
m_is8Bit,3,3,6
sljit_is_fpu_available(),3,3,6
-128 <= imm.m_value && imm.m_value < 128,3,3,6
ATK_IS_TEXT(paragraph2),3,3,6
 errcode!=SQLITE_OK ,3,3,6
m_node,3,3,6
dst & SLJIT_MEM,3,3,6
this,3,3,6
isHostFunction(),3,3,6
 isDelete && !isOpenJournal ,3,3,6
 nDoclist>0 ,3,3,6
fixture->has_been_failed,3,3,6
where >= this->begin() && where < this->end(),3,3,6
 pOrTerm->eOperator==WO_EQ ,3,3,6
fiberCount <= s_maxInternalRopeLength,3,3,6
ATK_IS_TEXT(paragraph1),3,3,6
 *pbEof==0 ,3,3,6
 locktype<=SHARED_LOCK ,3,3,6
 (p->btreeMask & (((yDbMask)1)<<iDb))!=0 ,3,3,6
 iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) ,3,3,6
"(QtPrivate::AreArgumentsCompatible<typename SlotType::ReturnType, typename SignalType::ReturnType>::value), ""Return type of the slot is not compatible with the return type of the signal.""",3,3,6
isOwnedByCurrentThread(),3,3,6
m_fragment,3,3,6
atk_object_get_role(list) == ATK_ROLE_LIST,3,3,6
!(source[i] & 0xff00),3,3,6
"endOffset, ==, 25",3,3,6
b >= this->begin() && b < this->end(),3,3,6
"frameworkLibrary, ""%s"", dlerror()",3,3,6
i < m_butterfly->publicLength(),3,3,6
m_substringBuffer->bufferOwnership() != BufferSubstring,3,3,6
 iLangid>=0 ,3,3,6
!isUndefined(),3,3,6
!(headValue & 128),3,3,6
newAnimVal,3,3,6
 locktype!=PENDING_LOCK ,3,3,6
m_buffer.size() > 0,3,3,6
 pRet && pPrev ,3,3,6
!selectedFiles,3,3,6
!object || object->isMenuList(),3,3,6
hash,3,3,6
 p->pGroupBy==0 ,3,3,6
ATK_IS_TEXT(item2),3,3,6
 10==sqlite3LogEst(2) ,3,3,6
isBoolean(),3,3,6
JITCode::isBaselineCode(getJITType()),3,3,6
m_glyphs,3,3,6
common->mark_ptr != 0,3,3,6
static_cast<int>(reg) < 8,3,3,6
kind == BirthToFill || kind == Fill,3,3,6
std::numeric_limits<T>::is_integer,3,3,6
 pRes!=0 ,3,3,6
implements(property),3,3,6
m_type == HTMLToken::StartTag || m_type == HTMLToken::EndTag,3,3,6
pExpr->x.pList->nExpr > 0,3,3,6
fixture->role == ATK_ROLE_LIST,3,3,6
 pCur->apPage[pCur->iPage]->nCell==0 ,3,3,6
!(offset & ~0xff),3,3,6
style,3,3,6
" sqlite3SchemaMutexHeld(db, pOp->p1, 0) ",3,3,6
classInfo(),3,3,6
!mNodeSets.empty(),3,3,6
!m_isAnimating,3,3,6
offset <= static_cast<unsigned>(s.length()),3,3,6
 pOp->p4type==P4_KEYINFO ,3,3,6
 20==sqlite3LogEst(4) ,3,3,6
structure,3,3,6
SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536,3,3,6
widget,3,3,6
 pFile->locktype==SHARED_LOCK ,3,3,6
!(offset & 1),3,3,6
context & info->flag,3,3,6
 e->Sym->Sym == e ,3,3,6
!m_impl || (m_impl->isIdentifier() == !m_impl->isEmptyUnique()),3,3,6
!type,3,3,6
 pE->op!=TK_DOT || pE->pRight!=0 ,3,3,6
"gtk_adjustment_get_value(adjustment), ==, 0.0",3,3,6
SUCCEEDED(result),3,3,6
isDouble(),3,3,6
!fixture->has_been_failed,3,3,6
m_type == AnimatedAngle,3,3,6
 N>0 ,3,3,6
!m_isProved,3,3,6
!v.isZombie(),3,3,6
"endOffset, ==, 11",3,3,6
animVal->wrappers().size() == m_animatedWrappers.size(),3,3,6
m_directory[block],3,3,6
"(!QMetaTypeId2<To>::IsBuiltIn || !QMetaTypeId2<From>::IsBuiltIn), ""QMetaType::registerConverter: At least one of the types must be a custom type.""",3,3,6
!m_used[i],3,3,6
 p->isPinned==0 ,3,3,6
(instructionPtr[1] & 0xf0ff) == BRAF_OPCODE,3,3,6
"atk_hyperlink_get_uri(hLink, 0), ==, 0",3,3,6
min <= max,3,3,6
!object || object->isSVGPath(),3,3,6
ATK_HYPERLINK(hLink),3,3,6
!o->isSetNeedsLayoutForbidden(),3,3,6
!imm.isEncodedImm(),3,3,6
 pLevel->p5==0 ,3,3,6
index < m_structure->anonymousSlotCount(),3,3,6
length <= static_cast<unsigned>(s.length()),3,3,6
totalBytes >= maxJumpReplacementSize(),3,3,6
 !IsVirtual(pTab) ,3,3,6
w != ARMAssembler::INVALID_IMM,3,3,6
!(imm.getUInt16() & 3),3,3,6
 p || *piDocid==0 ,3,3,6
count,3,3,6
 nNew>0 ,3,3,6
isRoot(),3,3,6
i < m_numBits,3,3,6
webBackForwardList,3,3,6
left <= right,3,3,6
 zColl!=0 ,3,3,6
FUNCTION_CHECK_IS_REG((p) & REG_MASK),3,3,6
i < m_len,3,3,6
!nodeSets.empty(),3,3,6
fontEngine == 0 || thread == QThread::currentThread(),3,3,6
"G_OBJECT(webView)->ref_count, ==, 1",3,3,6
"webkit_web_history_item_get_uri(currentItem), ==, ""http://example.com/2/""",3,3,6
 pCrsr ,3,3,6
 pPrev && pPrev->pLeft && pPrev->pRight==0 ,3,3,6
" !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) ",3,3,6
WTF::isMainThread(),3,3,6
 pFile->locktype==NO_LOCK ,3,3,6
requestedJobNumber > 0,3,3,6
FUNCTION_CHECK_IS_REG(OFFS_REG(p)),3,3,6
!fixture->has_been_first_visually_non_empty_layout,3,3,6
" DbMaskTest(p->btreeMask, iDb) ",3,3,6
 sqlite3BtreeCursorIsValid(pCrsr) ,3,3,6
key,3,3,6
!isAddress(),3,3,6
SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE,3,3,6
FUNCTION_CHECK_IS_REG((p) & 0xf),3,3,6
 pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK ,3,3,6
imm <= 0xff,3,3,6
 pCur->apPage[pCur->iPage] ,3,3,6
isValidAllocation(bytes),3,3,6
 p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed ,3,3,6
e > this->begin() && e < this->end(),3,3,6
e <= where || b > this->end(),3,3,6
"webkit_dom_node_is_same_node(WEBKIT_DOM_NODE(div), node)",3,3,6
canAccessIndex(i),3,3,6
 pPager->eState==PAGER_READER ,3,3,6
m_id.length(),3,3,6
canGetIndex(i),3,3,6
m_image,3,3,6
fiberCount == index,3,3,6
m_position != 0,3,3,6
 pExpr->pLeft && pExpr->pRight ,3,3,6
 range >= 1 && range <= 3 ,3,3,6
expression,3,3,6
m_type == Type::StartTag,3,3,6
src2_r == TMP_REG2,3,3,6
!((p) & ~(SLJIT_MEM | SLJIT_IMM | REG_MASK | OFFS_REG_MASK)),3,3,6
block,3,3,6
 level>=1 && level<=3 ,3,3,6
rep,3,3,6
ATK_IS_TEXT(header),3,3,6
list,3,3,6
 nCol>1 ,3,3,6
 p->nOp>0 || p->aOp==0 ,3,3,6
-128 <= imm && imm < 128,3,3,6
len <= (int) sizeof(buf),3,2,5
s >= p,3,2,5
blk->len > 0,3,2,5
ctx->sq_head > ctx->sq_tail,3,2,5
fp != NULL,3,2,5
conn->request_info.uri[0] == '/',3,2,5
space >= 0,3,2,5
ctx->num_threads >= 0,3,2,5
blk->nvars < (int) ARRAY_SIZE(blk->vars),3,2,5
conn->data_len >= conn->request_len,3,2,5
len < sizeof(buf),3,2,5
blk->len < (int) sizeof(blk->buf),3,2,5
conn->consumed_content == 0,3,2,5
len > 0 && len <= (int) vec->len,3,2,5
(conn->content_len == -1 && conn->consumed_content == 0) || conn->consumed_content <= conn->content_len,3,2,5
ctx->sq_head - ctx->sq_tail < (int) ARRAY_SIZE(ctx->queue),3,2,5
args <= saveds,2,2,4
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) ,2,2,4
 idx >= end+2 ,2,2,4
 pLeft!=0 ,2,2,4
!object || object->isInlineFlowBox(),2,2,4
 (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll ,2,2,4
 pCur->apPage[pCur->iPage]->nOverflow==0 ,2,2,4
!deletionHasBegun(),2,2,4
 op!=TK_ISNULL || c==WO_ISNULL ,2,2,4
 sqlite3_value_type(argv[0])==SQLITE_NULL ,2,2,4
 !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 ,2,2,4
 ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 ,2,2,4
 ppStmt!=0 ,2,2,4
"height, ==, sline_window1.height",2,2,4
 pTableName->nSrc==1 ,2,2,4
 isIgnoreEmpty || (isRequirePos && !isColFilter) ,2,2,4
 (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 ,2,2,4
"atk_text_get_n_selections(paragraph1), ==, 0",2,2,4
 rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) ,2,2,4
(arg2 == GPRInfo::argumentGPR2 || arg3 == GPRInfo::argumentGPR3) || (arg2 == GPRInfo::argumentGPR3 || arg3 == GPRInfo::argumentGPR2),2,2,4
 p->pOrderBy!=0 ,2,2,4
 p->db==0 || p->db==db ,2,2,4
rc==SQLITE_NOMEM || pMem->enc==desiredEnc,2,2,4
 pParent || pNode->iNode==1 ,2,2,4
 pTab->iPKey<0 ,2,2,4
 db->u1.isInterrupted ,2,2,4
 pPager->pPCache!=0 ,2,2,4
 pIn2->flags & MEM_Blob ,2,2,4
 iOfst+iAmt<=p->endpoint.iOffset ,2,2,4
 sqlite3PagerGetData(pPage->pDbPage)==pPage->aData ,2,2,4
 pVfs ,2,2,4
m_childBeforeBoundary,2,2,4
Parent::inherits(&s_info),2,2,4
offset < structure->propertyStorageCapacity(),2,2,4
 strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,2,2,4
 PAGER_LOCKINGMODE_EXCLUSIVE==1 ,2,2,4
 (MEM_Blob>>3) == MEM_Str ,2,2,4
 SQLITE_OPEN_CREATE == 0x04 ,2,2,4
 pName==0 ,2,2,4
count == m_keyCount,2,2,4
 pInt[nReserve/sizeof(int)]==(int)REARGUARD ,2,2,4
m_type == AnimatedNumberOptionalNumber,2,2,4
 pParent->pOrderBy==0 ,2,2,4
 op!=TK_GT || c==WO_GT ,2,2,4
 iCell<NCELL(pNode) ,2,2,4
 i+size<=mem3.nPool+1 ,2,2,4
result.asCell()->methodTable(),2,2,4
 MAX_SECTOR_SIZE>=512 ,2,2,4
 pNew==0 ,2,2,4
diff >= 1,2,2,4
pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union || pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard,2,2,4
 (rc&0xFF)==(rcp&0xFF) ,2,2,4
!findNode(key) || (int)this->position(findNode(key)) == key,2,2,4
destA != FPRInfo::argumentFPR1 && destA != FPRInfo::argumentFPR1,2,2,4
 i<(int)sizeof(p->btreeMask)*8 ,2,2,4
 p->pPrev==0 || p->pPrev->pBt<p->pBt ,2,2,4
 zP4!=0 ,2,2,4
 sqlite3PagerIswriteable(pChild->pDbPage) ,2,2,4
"i >= 0 && i < p.size() && j >= 0 && j < p.size(), ""QList<T>::swap"", ""index out of range""",2,2,4
 n==(db->nSavepoint + db->isTransactionSavepoint) ,2,2,4
cpool_size == 0,2,2,4
 1==sqlite3BtreeIsInTrans(pTemp) ,2,2,4
m_programCodeBlock,2,2,4
 pParse->azVar==0 ,2,2,4
DR(PIC_ADDR_REG) == 25 && PIC_ADDR_REG == TMP_REG2,2,2,4
timeout >= 0,2,2,4
 pTo!=0 ,2,2,4
 pExpr->affinity==OE_Rollback || pExpr->affinity==OE_Abort || pExpr->affinity==OE_Fail || pExpr->affinity==OE_Ignore ,2,2,4
"constant > 0 || qFuzzyCompare(1, 1 + constant)",2,2,4
 pE!=0 ,2,2,4
 nReserve>=0 && nReserve<1000 ,2,2,4
 pCsr->isEof==0 ,2,2,4
 sqlite3IsNaN(y) ,2,2,4
 db==0 || p->pBlockingConnection!=db ,2,2,4
 rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR ,2,2,4
 WRITE_LOCK>READ_LOCK ,2,2,4
scratchGPR != InvalidGPRReg,2,2,4
 aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]== SQLITE_MAX_LIKE_PATTERN_LENGTH ,2,2,4
 p->eType!=FTSQUERY_PHRASE ,2,2,4
 p->pNext==0 || p->pNext->pBt>p->pBt ,2,2,4
 eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE ,2,2,4
m_type != QAccessible::ValueChanged,2,2,4
atk_object_get_role(menuPopup) == ATK_ROLE_MENU,2,2,4
 p->pBt->inTransaction>=p->inTrans ,2,2,4
 pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) ,2,2,4
 pOp->p2==SQLITE_CHECKPOINT_PASSIVE || pOp->p2==SQLITE_CHECKPOINT_FULL || pOp->p2==SQLITE_CHECKPOINT_RESTART ,2,2,4
sizeof(x)==8,2,2,4
!m_hasBadParent,2,2,4
 SQLITE_OPEN_READONLY == 0x01 ,2,2,4
 iCol==4 ,2,2,4
 !(fg&MEM_Zero) ,2,2,4
 isPrepareV2==1 || isPrepareV2==0 ,2,2,4
 pOp->p5<db->nDb ,2,2,4
 srcType==MEM_Ephem || srcType==MEM_Static ,2,2,4
m_lightSource->type() == LS_DISTANT,2,2,4
" !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList ",2,2,4
 sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile ,2,2,4
!(flags & INV_IMM) && !(src2 & SRC2_IMM),2,2,4
i >= 0 && i < elementCount(),2,2,4
 (pTab->tabFlags & TF_Virtual)!=0 ,2,2,4
 pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL ,2,2,4
"count, ==, 5",2,2,4
 pParse->checkSchema ,2,2,4
!object || object->isSVGViewportContainer(),2,2,4
 VdbeMemDynamic(pIn1)==0 ,2,2,4
 pKeyInfo->enc==ENC(db) ,2,2,4
 (pMsr->aBuffer[nList] & 0xFE)==0x00 ,2,2,4
!object || object->isFieldset(),2,2,4
 zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) ,2,2,4
m_codePtr,2,2,4
peek() == ',2,2,4
 isSaveLeft==0 || isExact==0 ,2,2,4
size >= m_size,2,2,4
 pPager->nSavepoint==nSavepoint ,2,2,4
 p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE ,2,2,4
 pOp->p1 <= SQLITE_MAX_LENGTH ,2,2,4
 pPager->dbSize>=nPage ,2,2,4
"webkit_web_view_get_uri(fixture->webView), ==, uri_string",2,2,4
 (p->flags & MEM_Agg)==0 ,2,2,4
"common, cc, BACKTRACK_AS(assert_backtrack), FALSE",2,2,4
 pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt ,2,2,4
 sqlite3PagerIswriteable(pPage1->pDbPage) ,2,2,4
 pOp>aOp ,2,2,4
 SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) ,2,2,4
 TK_GE==TK_GT+3 ,2,2,4
 p->inTrans>0 ,2,2,4
JIT::returnValueRegister == JIT::regT0,2,2,4
 p->l_whence==SEEK_SET ,2,2,4
 (mem5.aCtrl[iBlock] & CTRL_FREE)==0 ,2,2,4
 pPager->pInJournal!=0 ,2,2,4
" sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) ",2,2,4
" !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 ",2,2,4
(static_cast<char*>(previousPool->m_current) + size) > previousPool->m_current,2,2,4
 pOffset==0 || pLimit!=0 ,2,2,4
"(q_val & quintptr(1u)) == quintptr(0), ""QReadLocker"", ""QReadWriteLock pointer is misaligned""",2,2,4
 zSql!=0 ,2,2,4
 maxRootPgno!=PENDING_BYTE_PAGE(pBt) ,2,2,4
 p->nRef==0 && p->owner==0 ,2,2,4
(sljit_sw)addr <= 0x01ffffff && (sljit_sw)addr >= -0x02000000,2,2,4
m_customHTMLTokenizerChunkSize != -1,2,2,4
m_type == AnimatedRect,2,2,4
 aContent[aList[i]] > aContent[aList[i-1]] ,2,2,4
 op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT ,2,2,4
 nResultCol==1 ,2,2,4
 i<pTab->nCol ,2,2,4
!icon,2,2,4
 n==1 || lockType!=F_RDLCK ,2,2,4
 sizeof(x)==8 && sizeof(pMem->r)==8 ,2,2,4
 pFrom->pSelect==0 ,2,2,4
 !p || p->xCmp ,2,2,4
 PAGER_LOCKINGMODE_QUERY<0 ,2,2,4
" SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) ",2,2,4
name.length(),2,2,4
 isOpen(pPager->fd) || tempFile ,2,2,4
 nPathname>0 ,2,2,4
m_codeOrigin.isSet() == (m_exceptionCheckIndex != std::numeric_limits<unsigned>::max()),2,2,4
m_registered || !m_codeOrigin.isSet(),2,2,4
 pCsr->aMatchinfo ,2,2,4
 TK_CONCAT==OP_Concat ,2,2,4
 info.nHeader==nHeader ,2,2,4
 p->bDestLocked ,2,2,4
"jsCFString, ""A""",2,2,4
 zArg[i]==FTS3_MATCHINFO_HITS ,2,2,4
"!object || (object->isSVGContainer() && strcmp(object->renderName(), ""RenderSVGViewportContainer""))",2,2,4
 op!=0 ,2,2,4
local_size > 0,2,2,4
 p->sharable==0 || p->locked==0 || p->wantToLock>0 ,2,2,4
outCount,2,2,4
 nByte==ROUND8(nByte) ,2,2,4
"type, type == TypeUInt16",2,2,4
 p2->xUnlockNotify==p->xUnlockNotify || !seen ,2,2,4
index >= 0 && index < 3,2,2,4
!inlineBox || inlineBox->isInlineTextBox(),2,2,4
 pTC ,2,2,4
"sizeof(T) <= sizeof(uint64_t), enum_type_must_not_be_larger_than_64_bits",2,2,4
 pItem->notIndexed==0 && pItem->zIndex==0 ,2,2,4
!document || document->isMediaDocument(),2,2,4
spillFormat & DataFormatJS,2,2,4
!timedOut || absoluteTime != infiniteTime(),2,2,4
i < cacheSize,2,2,4
 eAuto>=0 && eAuto<=2 ,2,2,4
private_data_ptr == 0,2,2,4
 pInode->pShmNode==0 ,2,2,4
 p->wantToLock>0 ,2,2,4
 WO_LT==SQLITE_INDEX_CONSTRAINT_LT ,2,2,4
 *pzErrMsg==0 ,2,2,4
 sqlite3_memory_used()==0 ,2,2,4
 pPrior->pOrderBy==0 ,2,2,4
verticalPolicy == webkit_web_frame_get_vertical_scrollbar_policy(mainFrame),2,2,4
 pRoot->pgno==pCur->pgnoRoot ,2,2,4
 zFilename ,2,2,4
 (rc & p->db->errMask)==rc ,2,2,4
 isSavepnt ,2,2,4
 pPager->eState!=PAGER_WRITER_FINISHED ,2,2,4
!(alignment % 2),2,2,4
!radiusY.isUndefined(),2,2,4
isStatic(),2,2,4
m_offset != notAddress(),2,2,4
!widget || widget->isScrollView(),2,2,4
 pOp->p1>0 && pOp->p1<=p->nVar ,2,2,4
 nToken==ii ,2,2,4
!object || object->isFrameSet(),2,2,4
 pCur->apPage[1]->nOverflow ,2,2,4
jump->flags & IS_COND,2,2,4
ATK_IS_TEXT(textObject2),2,2,4
 TK_GT<TK_LE ,2,2,4
 info.nKey==nKey ,2,2,4
 (PAGER_JOURNALMODE_WAL & 5)==5 ,2,2,4
 p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
 nOut<SQLITE_MAX_LENGTH ,2,2,4
 pCache->bPurgeable || createFlag!=1 ,2,2,4
scratchRegisterForBlinding(),2,2,4
fixture->clicked,2,2,4
" wrFlag==0 || !hasReadConflicts(p, iTable) ",2,2,4
m_type == Uninitialized || m_type == Character,2,2,4
at < engines.size(),2,2,4
rc==SQLITE_OK || pMem->enc!=desiredEnc,2,2,4
 p->isEof==0 ,2,2,4
 pBt->pPage1==0 ,2,2,4
" (sqlite3_strnicmp(argv[0], ""fts4"", 4)==0 && isFts4) || (sqlite3_strnicmp(argv[0], ""fts3"", 4)==0 && !isFts4) ",2,2,4
 pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID ,2,2,4
m_next->m_referer == &m_next,2,2,4
!(m_hashAndFlags & s_hashFlagHasTerminatingNullCharacter) || !characters[length],2,2,4
 !p || (p>aDoclist && p<&aDoclist[nDoclist]) ,2,2,4
 pTest!=0 ,2,2,4
 p->btreeMask==0 ,2,2,4
m_id != InvalidId,2,2,4
result.iterator != end(),2,2,4
!m_is8Bit,2,2,4
 p->db==0 || sqlite3_mutex_held(p->db->mutex) ,2,2,4
 pRes ,2,2,4
 pOp->p2>=0 ,2,2,4
"other, other.m_table",2,2,4
 get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize ,2,2,4
 pReader->iCurrentBlock<=pReader->iLeafEndBlock ,2,2,4
lockPath!=NULL,2,2,4
 octet>=0 && octet<256 ,2,2,4
scriptExecutionContext->isContextThread(),2,2,4
 zFilename==0 || zFilename[0]=='/' ,2,2,4
 i<=p->iSize ,2,2,4
m_type == MachPortType,2,2,4
 pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) ,2,2,4
insertionPoint->inDocument() || isContainerNode(),2,2,4
 pBt->autoVacuum || iMeta==0 ,2,2,4
 db->pSavepoint==0 || db->autoCommit==0 ,2,2,4
 pFd->nFetchOut==0 ,2,2,4
 sizeof(db->aLimit)==sizeof(aHardLimit) ,2,2,4
(*insn & 0xfc000000) == 0x10000000 || (*insn & 0xfc000000) == 0x14000000 || (*insn & 0xffff0000) == 0x45010000 || (*insn & 0xffff0000) == 0x45000000,2,2,4
sizeof(quintptr) == sizeof(const Ptr *),2,2,4
compiler->cpool_fill > 0 && compiler->cpool_fill <= CPOOL_SIZE,2,2,4
 apNew[0]->nFree == (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2) ,2,2,4
ATK_IS_TEXT(item3),2,2,4
"!typelessPointersAreEqual(&other, this)",2,2,4
 pPage->nFree>=nByte ,2,2,4
 sqlite3PagerIswriteable(pBt->pPage1->pDbPage) ,2,2,4
"i >= 0 && i < p.size(), ""QList<T>::replace"", ""index out of range""",2,2,4
 pC->iDb>=0 ,2,2,4
index >= m_start || index <= m_end,2,2,4
 pExpr->aMI ,2,2,4
newSize <= this->alloc,2,2,4
ATK_IS_HYPERTEXT(paragraph1),2,2,4
m_divot.offset >= m_divot.lineStartOffset,2,2,4
 pBt->pPage1 ,2,2,4
 pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) ,2,2,4
 pc>=0 && pc<p->nOp ,2,2,4
!m_frame,2,2,4
 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK ,2,2,4
table->m_iterators != it,2,2,4
format == DataFormatJSInteger,2,2,4
exitKindIsCountable(kind),2,2,4
 aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame ,2,2,4
 pMem1->enc==pMem2->enc ,2,2,4
window,2,2,4
 pPage->cellOffset == hdr + 12 - 4*pPage->leaf ,2,2,4
 eLock==NO_LOCK || eLock==SHARED_LOCK ,2,2,4
!object || object->isSlider(),2,2,4
m_type & SpecEmpty,2,2,4
 pWal->ckptLock==1 || pWal->ckptLock==0 ,2,2,4
p->iSize<=p->nBuf,2,2,4
m_role == PathSegUndefinedRole,2,2,4
 u-1==LARGEST_INT64 ,2,2,4
 FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 ,2,2,4
 (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey ,2,2,4
 zTab==0 && zDb==0 ,2,2,4
 op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL ,2,2,4
 mem5.currentOut>=(size*mem5.szAtom) ,2,2,4
size == 2 || size == 4,2,2,4
 start>=pPage->hdrOffset+6+pPage->childPtrSize ,2,2,4
domObject,2,2,4
 pOrig->flags & EP_Resolved ,2,2,4
prototype().isNull() || Heap::heap(this) == Heap::heap(prototype()),2,2,4
 iSpace1 <= (int)pBt->pageSize ,2,2,4
 zCol ,2,2,4
!m_columnHeight,2,2,4
rt != rt2,2,2,4
" SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) ",2,2,4
 op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE ,2,2,4
payload != base,2,2,4
"webkit_web_history_item_get_uri(currentItem), ==, ""http://example.com/3/""",2,2,4
 iDb<SQLITE_MAX_ATTACHED+2 ,2,2,4
 SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,2,2,4
 pParse==sqlite3ParseToplevel(pParse) ,2,2,4
!(right.m_value & 0xFFFF0000),2,2,4
 p->aList==&aList[nList&~((2<<iSub)-1)] ,2,2,4
"label, differenceBetween(label, result) == REPTACH_OFFSET_CALL_R11",2,2,4
 sizeof(u64)==8 || sizeof(u64)==4 ,2,2,4
 pMem->flags&MEM_Str ,2,2,4
 SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART ,2,2,4
m_keyCount >= 1,2,2,4
 pFrom->nSrc==1 ,2,2,4
 pList->a!=0 ,2,2,4
object2,2,2,4
 sqlite3_mutex_notheld(pcache1.mutex) ,2,2,4
atEndOfPattern() || m_err,2,2,4
 MX_CELL_SIZE(pBt) >= nCell ,2,2,4
 pPg->nRef>0 || pPg->pPager->memDb ,2,2,4
 zB==sqlite3_value_text(argv[0]) ,2,2,4
 pConstraint->op==RTREE_MATCH ,2,2,4
codeBlock(),2,2,4
 !isOpen(pPager->jfd) ,2,2,4
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE,2,2,4
 n>0 && tokenType!=TK_ILLEGAL ,2,2,4
 (addr>=0 && addr<p->nOp) || p->db->mallocFailed ,2,2,4
m_deque->m_iterators != this,2,2,4
 pExcept==0 || pExcept->pBt==pBt ,2,2,4
 pOp->p2>0 && pOp->p2<p->nOp ,2,2,4
!(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) || (flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) == 0,2,2,4
 nFarg>=2 ,2,2,4
 pName2!=0 ,2,2,4
index >= 0 && index < m_numberOfInteriorVertices,2,2,4
 pPager->pTmpSpace!=0 ,2,2,4
 db->vtabOnConflict>=1 && db->vtabOnConflict<=5 ,2,2,4
 pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] ,2,2,4
s_sse2CheckState != NotCheckedSSE2,2,2,4
(*insn & 0xfc0007ff) == 0x00000021,2,2,4
 p->pNext==0 || p->pNext->db==p->db ,2,2,4
 pDbFd ,2,2,4
 p->eState==PAGER_OPEN || p->eState==PAGER_READER || p->eState==PAGER_WRITER_LOCKED || p->eState==PAGER_WRITER_CACHEMOD || p->eState==PAGER_WRITER_DBMOD || p->eState==PAGER_WRITER_FINISHED || p->eState==PAGER_ERROR ,2,2,4
 p->aMem[i].db==p->db ,2,2,4
 scratchAllocOut<=1 ,2,2,4
m_worldSet.size() == 1,2,2,4
hasIdentifier(),2,2,4
reg != ARMRegisters::sp,2,2,4
 pPage->nCell==0 ,2,2,4
!(imm & 0xff),2,2,4
m_technique == InPair,2,2,4
m_type != QAccessible::TextCaretMoved,2,2,4
 to_op==OP_ToInt || aff!=SQLITE_AFF_INTEGER ,2,2,4
"divisor && !(divisor & (divisor - 1)), divisor_is_a_power_of_two",2,2,4
 p->db==pBt->db ,2,2,4
 iExclude==-1 ,2,2,4
 useTempTable==0 ,2,2,4
 !pBt->pPage1 && !pBt->pCursor ,2,2,4
 stateno<=YY_REDUCE_COUNT ,2,2,4
WTF::isASCIIOctalDigit(peek()),2,2,4
 p2==0 ,2,2,4
 pExpr->bEof==0 ,2,2,4
" db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) ",2,2,4
 iStartLeaf<=iEndLeaf ,2,2,4
 pParse->db!=0 ,2,2,4
 nNew<=pPhrase->doclist.nList && nNew>0 ,2,2,4
 pPager->pWal ,2,2,4
size == 0 || offset < 0 || size_t(offset) >= sizeof(QArrayData),2,2,4
 pOther!=pDef && pOther->pNext!=pDef ,2,2,4
 pOrTerm->leftCursor==iCursor ,2,2,4
 pVar->flags & MEM_Blob ,2,2,4
!object || object->isTableCol(),2,2,4
((offset >> 1) <= 2047) && ((offset >> 1) >= -2048),2,2,4
 thisMark!=READMARK_NOT_USED ,2,2,4
 pColl ,2,2,4
 db2 ,2,2,4
 pNew->nCol>0 ,2,2,4
(sljit_sw)addr <= 0x7fff && (sljit_sw)addr >= -0x8000,2,2,4
 pExpr->op!=TK_NOTNULL || op==OP_IsNull ,2,2,4
 pExpr->flags&EP_xIsSelect ,2,2,4
 pIn1->flags==MEM_Int ,2,2,4
!it->m_next->m_previous,2,2,4
 pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT || pExpr->op==TK_GT || pExpr->op==TK_GE || pExpr->op==TK_LE || pExpr->op==TK_NE || pExpr->op==TK_IS || pExpr->op==TK_ISNOT ,2,2,4
 eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF ,2,2,4
 pSorter ,2,2,4
m_type == CurrentColorWithOverrideAlpha,2,2,4
i < maxDepth,2,2,4
 pPage->intKey==(pIdxKey==0) ,2,2,4
 handleNFSUnlock==0 ,2,2,4
 p==pBt->pWriter ,2,2,4
 !pPager->exclusiveMode || pPager->eLock==eLock ,2,2,4
 pMem->z || pMem->n==0 ,2,2,4
allocationEnd > m_current,2,2,4
"gtk_adjustment_get_value(adjustment), ==, 100.0",2,2,4
 !pTable || pTable->nRef>0 ,2,2,4
!reinterpret_cast<int32_t*>(code + from.m_offset)[-1],2,2,4
 pOp->p2==1 || pOp->p5==OE_Fail || pOp->p5==OE_Rollback || pOp->p5==OE_Abort || pOp->p5==OE_Ignore || pOp->p5==OE_Replace ,2,2,4
second,2,2,4
 p->iStatement==0 || db->flags&SQLITE_CountRows ,2,2,4
"i >= 0 && n >= 0 && i + n <= s, ""QVarLengthArray::remove"", ""index out of range""",2,2,4
(arg & REG_MASK) || !(inst & UPDATE_REQ),2,2,4
 sqlite3Isdigit(zRawSql[1]) ,2,2,4
 idx <= HASHTABLE_NSLOT/2 + 1 ,2,2,4
 eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL ,2,2,4
m_slotBase,2,2,4
 (p==0)==(pFd->nFetchOut==0) ,2,2,4
 !pMemPage || pMemPage->pgno==iPage ,2,2,4
 pId->nRef>0 ,2,2,4
 *p ,2,2,4
 pExpr->x.pSelect==0 ,2,2,4
dis_mode == 16,2,2,4
"soupURI, ==, ""http://debian.org/""",2,2,4
 pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,2,2,4
 pCur->apPage[0]->intKey || pIdxKey ,2,2,4
 !sqlite3IsNaN(value) ,2,2,4
 pTabList ,2,2,4
 pPager->tempFile && rc==SQLITE_OK ,2,2,4
 pgno==MASTER_ROOT+1 ,2,2,4
 pRight->bStart || pLeft->iDocid==pRight->iDocid ,2,2,4
 i!=YY_REDUCE_USE_DFLT ,2,2,4
 nBlock>=2 ,2,2,4
 pTab==pOld ,2,2,4
" pCur->apPage[pCur->iPage-1], pCur->aiIdx[pCur->iPage-1], pCur->apPage[pCur->iPage]->pgno ",2,2,4
private_data_ptr == OVECTOR(offset + 0),2,2,4
 !fts3SegReaderIsPending(pReader) ,2,2,4
address.base != X86Registers::ecx && address.index != X86Registers::ecx,2,2,4
 (pVal->flags&MEM_Blob)==0 ,2,2,4
found != m_queue.end(),2,2,4
 !p->pFirst ,2,2,4
 memIsValid(&aMem[pOp->p2]) ,2,2,4
"jsTrue, ""true""",2,2,4
 pStepList ,2,2,4
 (pBlock[-1].u.hdr.size4x&1)!=0 ,2,2,4
 db->init.busy==0 ,2,2,4
tName,2,2,4
!other.m_data,2,2,4
!selectedFiles[3],2,2,4
object->isRenderFullScreen(),2,2,4
!isDeletedBucket(*(lookupForWriting(Extractor::extract(entry)).first)),2,2,4
compiler->scratches != -1 && compiler->saveds != -1,2,2,4
 sizeof(*p)==BITVEC_SZ ,2,2,4
hasHash(),2,2,4
!object || object->isProgress(),2,2,4
!(inp_flags & LOAD_DATA),2,2,4
cell,2,2,4
 pMem1->enc==SQLITE_UTF8 || pMem1->enc==SQLITE_UTF16LE || pMem1->enc==SQLITE_UTF16BE ,2,2,4
 sqlite3_mutex_held(mutexOpen) ,2,2,4
verticalPolicy == GTK_POLICY_AUTOMATIC,2,2,4
 cArg==FTS3_MATCHINFO_HITS ,2,2,4
 pDest && pSrc ,2,2,4
 pOrderBy ,2,2,4
uint(i) < 2u,2,2,4
m_type == AnimatedIntegerOptionalInteger,2,2,4
 sqlite3_mutex_held(pCsr->pBtree->db->mutex) ,2,2,4
 p->zErrMsg==0 ,2,2,4
 OE_Ignore==4 && OE_Replace==5 ,2,2,4
(dd >= 0 && dd <= 31) && (dn >= 0 && dn <= 31) && (dm >= 0 && dm <= 31),2,2,4
 TK_LE==TK_GT+1 ,2,2,4
 pCur->eState>=CURSOR_REQUIRESEEK ,2,2,4
"i >= 0 && i < d->size, ""QVector<T>::at"", ""index out of range""",2,2,4
"!getCachedWrapper(currentWorld(exec), node)",2,2,4
 aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH ,2,2,4
"sizeof(bool) == 1, bool_is_one_byte",2,2,4
src & SLJIT_MEM,2,2,4
run->m_next,2,2,4
ATK_IS_OBJECT(axRoot),2,2,4
 encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE ,2,2,4
 zBlob==sqlite3_value_blob(argv[0]) ,2,2,4
m_preloadCount,2,2,4
common->utf,2,2,4
!object || object->isAccessibilityNodeObject(),2,2,4
 (PAGER_JOURNALMODE_WAL & 5)!=1 ,2,2,4
 pId2 ,2,2,4
"webkit_dom_element_get_tag_name(element), ==, ""DIV""",2,2,4
 u.am.pDest->flags&MEM_Null ,2,2,4
 isOpen(pPager->jfd) || pagerUseWal(pPager) ,2,2,4
gtk_widget_is_focus(entry),2,2,4
rowHeader == 0,2,2,4
!jump || jump->addr >= half_count,2,2,4
 pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) ,2,2,4
 p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) ,2,2,4
 (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE) && (iHash>=1 || iFrame<=HASHTABLE_NPAGE_ONE) && (iHash<=1 || iFrame>(HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE)) && (iHash>=2 || iFrame<=HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE) && (iHash<=2 || iFrame>(HASHTABLE_NPAGE_ONE+2*HASHTABLE_NPAGE)) ,2,2,4
 p->pFirst ,2,2,4
!(cond & DoubleConditionBitSpecial),2,2,4
 pOp->p4type==P4_COLLSEQ ,2,2,4
 pSel!=0 ,2,2,4
 (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 ,2,2,4
 WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH ,2,2,4
mode != ModRmRegister,2,2,4
 sqlite3KeyInfoIsWriteable(pKeyInfo) ,2,2,4
 (nByte & 7)==0 ,2,2,4
hasClass(),2,2,4
 p->bFts4==0 ,2,2,4
!isView || pTrigger,2,2,4
sizeof(x)==sizeof(y),2,2,4
 *p==0 ,2,2,4
 state==pPager->eState ,2,2,4
(iOffset+nAlloc)>mem5.nBlock,2,2,4
 opcode==OP_OpenWrite || opcode==OP_OpenRead ,2,2,4
 !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) ,2,2,4
 pSplit->pParent->pRight==pSplit ,2,2,4
 keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY ,2,2,4
 (int)pWal->szPage==szPage ,2,2,4
 pPager->eState==PAGER_OPEN || pbOpen ,2,2,4
 pChild->nCell==pRoot->nCell ,2,2,4
" szNew==cellSizePtr(pPage, newCell) ",2,2,4
 pHdr->pNext->pPrev==pHdr ,2,2,4
 j==nCell ,2,2,4
 pBt->db ,2,2,4
(baseValue & mask) == baseValue,2,2,4
 pPrior ,2,2,4
asObject(value)->inherits(&StringObject::s_info),2,2,4
m_jitCodeForConstructWithArityCheck,2,2,4
 p->bIgnore==0 ,2,2,4
 TK_GT>TK_EQ && TK_GT<TK_GE ,2,2,4
 (SQLITE_PTR_TO_INT(ptr)&1)==0 ,2,2,4
 rc==SQLITE_OK || iHash>0 ,2,2,4
"kKeybits <= sizeof(K) * 8, key_size",2,2,4
 allowedOp(op) ,2,2,4
 db->nDb>iDb ,2,2,4
 TK_OR==OP_Or ,2,2,4
 pFrom->nFree>=iToHdr ,2,2,4
 pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable ,2,2,4
decommitBase >= releaseBase && (static_cast<char*>(decommitBase) + decommitSize) <= (static_cast<char*>(releaseBase) + releaseSize),2,2,4
!lookupForWriting(Extractor::extract(entry)).second,2,2,4
 iOfst==p->endpoint.iOffset ,2,2,4
 PTF_LEAF == 1<<3 ,2,2,4
p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE || p->op==RTREE_GT || p->op==RTREE_EQ ,2,2,4
 p->eType==FTSQUERY_PHRASE || p->pPhrase==0 ,2,2,4
!const_cast<JSDOMGlobalObject*>(globalObject)->constructors().contains(&ConstructorClass::s_info),2,2,4
 (pBt->pageSize & 7)==0 ,2,2,4
 pKeyInfo!=0 ,2,2,4
 iCol<pTab->nCol ,2,2,4
 pPage ,2,2,4
m_jitCodeForCallWithArityCheck,2,2,4
 pToken->pSegcsr==0 ,2,2,4
item->item.script == HB_Script_Hangul,2,2,4
 rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE ,2,2,4
needsFullScopeChain(),2,2,4
 (PAGER_JOURNALMODE_OFF & 5)!=1 ,2,2,4
 &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet ,2,2,4
m_animatedPathByteStream,2,2,4
 !isRowid ,2,2,4
 (nByte&0x00000007)==0 ,2,2,4
"X86Registers::xmm4 == 4, xmm4_is_4",2,2,4
m_type == AnimatedNumberList,2,2,4
cs == Qt::CaseSensitive,2,2,4
index < TypedArrayBase<T>::m_length,2,2,4
ptr_ != NULL,2,2,4
" db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",2,2,4
 nEntry==idx ,2,2,4
 winSysInfo.dwAllocationGranularity>0 ,2,2,4
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff ,2,2,4
!m_worldSet.contains(world),2,2,4
 (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 ,2,2,4
 pKeyInfo->db==db ,2,2,4
d >= 0,2,2,4
m_data[index].spillOrder != SpillHintInvalid,2,2,4
 TK_GE==TK_EQ+4 ,2,2,4
it->m_table->m_iterators != it,2,2,4
 idx>=0 && idx<=15 ,2,2,4
"selectedFiles[2], ==, ""/foo/bar/baz""",2,2,4
 sqlite3BtreeHoldsMutex(pBtree) ,2,2,4
 pTab->pVTable==p && p->pNext==0 ,2,2,4
!m_minTrackBreadth.isUndefined(),2,2,4
"X86Registers::xmm1 == 1, xmm1_is_1",2,2,4
 pSrcList && pSrcList->nSrc==1 ,2,2,4
 pPager->eState!=PAGER_OPEN ,2,2,4
m_tableSize == m_tableSizeMask + 1,2,2,4
"from >= 0 && from < p.size() && to >= 0 && to < p.size(), ""QList<T>::move"", ""index out of range""",2,2,4
 p->wantToLock==0 && p->locked==0 ,2,2,4
"canBeJumpT2(instruction, target)",2,2,4
type == ROTATE_X || type == ROTATE_Y || type == ROTATE_Z || type == ROTATE_3D,2,2,4
 pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey ,2,2,4
 p->iForeGuard==(int)FOREGUARD ,2,2,4
 pSelect->pEList ,2,2,4
 mem3.aPool[i-1].u.hdr.size4x/4==nBlock ,2,2,4
!m_committed,2,2,4
 pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) ,2,2,4
"!HashTranslator::equal(Extractor::extract(deletedValue), key)",2,2,4
 idx+sz <= (int)pPage->pBt->usableSize ,2,2,4
 wrFlag==0 || p->inTrans==TRANS_WRITE ,2,2,4
 rc ,2,2,4
asObject(value)->inherits(&s_info),2,2,4
 pAlias!=0 ,2,2,4
!m_childBeforeBoundary,2,2,4
!(reg & 1),2,2,4
&other != this,2,2,4
 i>=0 && i<=pPage->nCell+pPage->nOverflow ,2,2,4
 pReader->pBlob==0 ,2,2,4
 pExpr->op!=TK_EQ || op==OP_Ne ,2,2,4
 enc!=0 ,2,2,4
 pParse->pVdbe!=0 ,2,2,4
reg < d16,2,2,4
 mem.pLast==pHdr ,2,2,4
 pPager->nSavepoint>0 ,2,2,4
 pLeft->bStart || pLeft->iDocid==pRight->iDocid ,2,2,4
srcB == destA && srcA == destB,2,2,4
 isOpen(pPager->sjfd) || pPager->nSubRec==0 ,2,2,4
m_fprOrInvalid != InvalidFPRReg,2,2,4
result == CallTypeNone || value.isValidCallee(),2,2,4
 mxReadMark<=pWal->hdr.mxFrame ,2,2,4
!m_attributes,2,2,4
offset + length <= static_cast<unsigned>(s->length()),2,2,4
 pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK ,2,2,4
 pRight->op==TK_DOT ,2,2,4
 eFileLock==NO_LOCK ,2,2,4
m_affinity == UPSTREAM || m_affinity == DOWNSTREAM,2,2,4
m_top->element(),2,2,4
 ovflPgno==0 || nOvfl>0 ,2,2,4
 p->pSchema==p->pTabSchema || p->pSchema==pParse->db->aDb[1].pSchema ,2,2,4
 EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) ,2,2,4
 (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ,2,2,4
m_type != QAccessible::StateChanged,2,2,4
!label || label->size >= half_count,2,2,4
 aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT,2,2,4
 addr<p->nOp ,2,2,4
 pEList->a[0].pExpr ,2,2,4
 aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG ,2,2,4
 (pLower->eOperator & (WO_GT|WO_GE))!=0 ,2,2,4
 iPage>0 ,2,2,4
 pExpr->eType==FTSQUERY_PHRASE ,2,2,4
 db->nStatement>0 ,2,2,4
 !pParent || !pNode->pParent || pNode->pParent==pParent ,2,2,4
offset < static_cast<unsigned>(s.length()),2,2,4
 nKeyCol>0 ,2,2,4
 (*ppPage)->pgno==pgno ,2,2,4
 i>=0 && i<YY_ACTTAB_COUNT ,2,2,4
" iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) ",2,2,4
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",2,2,4
 pCell!=0 ,2,2,4
 p->aList==&aList[iList&~((2<<iSub)-1)] ,2,2,4
Base::inherits(&s_info),2,2,4
m_op == Arrayify || m_op == ArrayifyToStructure,2,2,4
m_index <= m_size,2,2,4
!object || object->isAccessibilityScrollView(),2,2,4
atk_object_get_role(header) == ATK_ROLE_HEADING,2,2,4
hasInlineStorage(),2,2,4
!response,2,2,4
!(offset & ~0x3fc),2,2,4
callerFrame,2,2,4
m_type == AnimatedTransformList,2,2,4
 p1==p2 ,2,2,4
 aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH ,2,2,4
getIndexValue,2,2,4
 newi > mem3.iMaster+1 ,2,2,4
 pOrTerm->u.leftColumn==iColumn ,2,2,4
isUInt10(),2,2,4
 p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal ,2,2,4
"nLinks, ==, 1",2,2,4
 pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) ,2,2,4
 pName1!=0 ,2,2,4
isLoaded(),2,2,4
 pNode->nRef>0 ,2,2,4
 zFilename==0 || zFilename[0]=='/' || pVfs->pAppData==(void*)&autolockIoFinder ,2,2,4
 bSkip==0 ,2,2,4
atk_object_get_role(comboBox) == ATK_ROLE_COMBO_BOX,2,2,4
m_top,2,2,4
 *ppDb || rc==SQLITE_NOMEM ,2,2,4
"y, ==, sline_window1.y",2,2,4
 start<=iLast ,2,2,4
m_type == RGBA || m_type == CMYKA,2,2,4
"text, ==, ""\342\200\242 List item with some text that wraps across different lines.""",2,2,4
 mem5.currentOut>0 || mem5.currentCount==0 ,2,2,4
(m_claimscratchReg != 0x3),2,2,4
abuf,2,2,4
!object || object->isListBox(),2,2,4
 pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE ,2,2,4
secondHalf,2,2,4
tile,2,2,4
 pCache->nRef==0 && pCache->pDirty==0 ,2,2,4
 sqlite3PcacheRefCount(pPager->pPCache)>0 ,2,2,4
isUInt6(),2,2,4
 !pPager->aSavepoint && !pPager->pInJournal ,2,2,4
 pParent->pHaving==0 ,2,2,4
 pTopNC!=0 ,2,2,4
 nLeft>0 && nRight>0 ,2,2,4
"asize >= 0, ""QVector::QVector"", ""Size must be greater than or equal to 0.""",2,2,4
 pFrom->a[0].pOn==0 ,2,2,4
*pp,2,2,4
 affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL || affinity==SQLITE_AFF_NUMERIC ,2,2,4
webkit_web_data_source_get_main_resource(data_source) == main_resource,2,2,4
 pParse->pVdbe || pParse->db->mallocFailed ,2,2,4
 pCsr->isIncrblobHandle ,2,2,4
m_worldSet.contains(m_normalWorld.get()),2,2,4
from != DataFormatNone,2,2,4
 IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) ,2,2,4
 pTab->nCol>0 ,2,2,4
 pBt && pBt->pPager ,2,2,4
local_size >= 0 && local_size <= SLJIT_MAX_LOCAL_SIZE,2,2,4
 d<nMaxCells ,2,2,4
atk_object_get_index_in_parent(colHeader) == 2,2,2,4
 pOp[-1].opcode==OP_Integer ,2,2,4
!object || object->isSVGGradientStop(),2,2,4
 !db || pRet ,2,2,4
 pExpr->op!=TK_LE || op==OP_Gt ,2,2,4
 pRoot->bStart ,2,2,4
WEBKIT_IS_HIT_TEST_RESULT(hitTestResult),2,2,4
type >= SLJIT_JUMP && type <= SLJIT_CALL3,2,2,4
fixture->has_been_load_error,2,2,4
 iVersion==1 || iVersion==2 ,2,2,4
!((i) & ~0x3),2,2,4
 isDeferred==0 || isDeferred==1 ,2,2,4
 pReader->aNode ,2,2,4
code_ptr - code <= (sljit_si)size,2,2,4
m_didSetIndex,2,2,4
this->ref.atomic.load() == 0,2,2,4
operandStackDepth >= 0,2,2,4
 pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK ,2,2,4
capacity() == inlineCapacity,2,2,4
"mode, mode == ManualOperandSpeculation || (edge.useKind() == Int32Use || edge.useKind() == KnownInt32Use)",2,2,4
 iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) ,2,2,4
GTK_IS_MENU_ITEM(item),2,2,4
 HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) ,2,2,4
" 0==fts3HashFind(pHash, zToken, nToken) ",2,2,4
 pPrg || pParse->nErr || pParse->db->mallocFailed ,2,2,4
isUInt9(),2,2,4
m_significand[0] != '0' || m_precision == 1,2,2,4
 rc==SQLITE_OK || pList==0 ,2,2,4
"height, ==, sline_window2.height",2,2,4
result == ConstructTypeNone || value.isValidCallee(),2,2,4
 p->isTable ,2,2,4
 pSchema ,2,2,4
 pCsr->pFilter==0 ,2,2,4
 pCur->iPage>0 ,2,2,4
 p==0 || sqlite3_mutex_held(p->db->mutex) ,2,2,4
 pDb->pBt!=0 ,2,2,4
"atk_object_get_n_accessible_children(item1), ==, 0",2,2,4
 pRoot->bEof==0 ,2,2,4
 46==sqlite3LogEst(25) ,2,2,4
 zPrefix ,2,2,4
offset == static_cast<int32_t>(offset),2,2,4
 pFile->pShm==0 ,2,2,4
 i>=0 && i<db->nDb ,2,2,4
"jsFalse, ""false""",2,2,4
m_index == static_cast<int>(m_node->nodeIndex()),2,2,4
 (mem3.aPool[i-1].u.hdr.size4x&1)==1 ,2,2,4
"ErrorString*, const String&",2,2,4
 OP_ShiftRight==OP_ShiftLeft+1 ,2,2,4
m_currentKnownStructure.isClear(),2,2,4
"result, ==, FALSE",2,2,4
 !p || p->iLastDocid<=iDocid ,2,2,4
 aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH ,2,2,4
 pList==0 || IsVirtual(pTab)==0 ,2,2,4
!radiusX.isUndefined(),2,2,4
 p->aData[p->nData]==0 ,2,2,4
hasTimeout(),2,2,4
 isDirectMode==0 ,2,2,4
"JSValueIsObject(context, exception)",2,2,4
tag() != DeletedValueTag,2,2,4
(((reinterpret_cast<uint32_t>(constPoolAddr) - reinterpret_cast<uint32_t>(loadAddr)) + index * 4)) < 1024,2,2,4
 p==pIndex ,2,2,4
 strlen(argv[0])==4 ,2,2,4
 nData+nReq<=pWriter->nSize ,2,2,4
!m_arrayModes,2,2,4
isUInt3(),2,2,4
 action==OE_None ,2,2,4
 pPager->mxPgno>=pPager->dbSize ,2,2,4
 pFrom->isInit ,2,2,4
 n==4-4*pPage->leaf ,2,2,4
lo <= hi,2,2,4
isUndefined(),2,2,4
 pSelect!=0 ,2,2,4
diff <= 127 && diff >= -128 && (jump->flags & IS_COND),2,2,4
"atk_object_get_n_accessible_children(list), ==, 1",2,2,4
 rc!=SQLITE_IOERR_SHORT_READ ,2,2,4
 pPager->pWal==0 || rc==SQLITE_OK ,2,2,4
 pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
(*instruction & LdrOrAddInstructionMask) == AddImmediateInstruction || (*instruction & LdrOrAddInstructionMask) == LdrImmediateInstruction,2,2,4
 rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE ,2,2,4
 OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 ,2,2,4
 pParent->nOverflow==0 || pParent->nOverflow==1 ,2,2,4
 TK_BITNOT==OP_BitNot ,2,2,4
 pzBuffer==0 || isReduced ,2,2,4
"X86Registers::xmm2 == 2, xmm2_is_2",2,2,4
 pName2!=0 || pName1==0 ,2,2,4
 db->pDfltColl!=0 ,2,2,4
"webkit_dom_node_is_same_node(WEBKIT_DOM_NODE(p), node)",2,2,4
 PAGER_JOURNALMODE_MEMORY==4 ,2,2,4
(isMOV_imm_T3(instruction - 5) && isMOVT(instruction - 3) && isBX(instruction - 1)) || (isNOP_T1(instruction - 5) && isNOP_T2(instruction - 4) && isB(instruction - 2)),2,2,4
type() == Percent,2,2,4
 sqlite3_mutex_held(p->s.db->mutex) ,2,2,4
 p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol ,2,2,4
 0==pCur->pKey ,2,2,4
 pCsr->aDoclist==0 ,2,2,4
"differenceBetween(m_uninterruptedInstructionSequenceBegin, label()) <= insnSpace",2,2,4
m_evalCodeBlock,2,2,4
cpool_size > 0,2,2,4
 (mCovered&mSeen)==mCovered ,2,2,4
fixture->webResource,2,2,4
 p->pSchema!=0 ,2,2,4
!object || object->isRenderNamedFlowThread(),2,2,4
fastAttributeLookupAllowed(name),2,2,4
"sizeof(VirtualRegister) == sizeof(int), VirtualRegister_is_32bit",2,2,4
 PAGER_JOURNALMODE_TRUNCATE==3 ,2,2,4
!(MINIMUM_BUMP_POOL_SIZE & (MINIMUM_BUMP_POOL_SIZE - 1)),2,2,4
 p->nData<p->nSpace ,2,2,4
 allowedOp(pExpr->op) && pExpr->op!=TK_IN ,2,2,4
m_font || !m_cgFont,2,2,4
 pBt->usableSize>32 ,2,2,4
 cbrk+size<=usableSize && cbrk>=iCellFirst ,2,2,4
 nSize==debuginfo.nSize ,2,2,4
 pPager->eState==PAGER_READER || rc!=SQLITE_OK ,2,2,4
 !pReader->pBlob || (pFrom>=pReader->aNode && pFrom<&pReader->aNode[pReader->nNode]) ,2,2,4
 a ,2,2,4
m_pendingActivityCount > 0,2,2,4
"timesClosed, ==, 1",2,2,4
 (pVal->flags & (MEM_Ephem|MEM_Static))!=0 ,2,2,4
 pSrc->nSrc>0 ,2,2,4
 iStart>=0 ,2,2,4
 p->inTransaction!=1 ,2,2,4
 sqlite3_value_type(apVal[0])==SQLITE_INTEGER ,2,2,4
m_role != PathSegUndefinedRole,2,2,4
 (combined_flags & MEM_RowSet)==0 ,2,2,4
m_offsetInContainer,2,2,4
m_origin && m_bound,2,2,4
size == m_values->size(),2,2,4
!namespaceURI.isEmpty() || namespaceURI.isNull(),2,2,4
 (pVal->flags & MEM_RowSet)==0 ,2,2,4
 (pIdxKey==0)==(pCur->pKeyInfo==0) ,2,2,4
index != noIndex,2,2,4
PROXY_HOSTIDLEN == sizeof(uuid_t),2,2,4
(val1) == (val2),2,2,4
"mime_type, ==, ""text/html""",2,2,4
op == Int32Constant,2,2,4
 pTable->aCol==0 ,2,2,4
to == DataFormatStorage,2,2,4
info,2,2,4
 (piTab==0)==(piCol==0) ,2,2,4
!object || object->isQuote(),2,2,4
m_origin,2,2,4
 iValue>=0 ,2,2,4
 p && p->pPrior ,2,2,4
!(op2 & 0xf1af),2,2,4
!widget || widget->isFrameView(),2,2,4
peek() == '\\',2,2,4
 db->mallocFailed || pParse->nErr>0 || pParse->iCacheLevel==iCacheLevel ,2,2,4
head->freelist <= head->allocated,2,2,4
 p->usesStmtJournal ,2,2,4
 pOrderBy!=0 ,2,2,4
webkit_context_menu_item_get_action(item) == action,2,2,4
p || db->mallocFailed,2,2,4
(flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) != (EX86_BYTE_ARG | EX86_HALF_ARG),2,2,4
 pPager->eLock>=SHARED_LOCK || pPager->noReadlock ,2,2,4
classInfo,2,2,4
 pIn->nMem==1 ,2,2,4
m_obj->isText(),2,2,4
" sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) ",2,2,4
 pChanged ,2,2,4
result.size() == desiredDigits,2,2,4
!object || object->isMedia(),2,2,4
adjacentToFirst,2,2,4
!object || object->isTextArea(),2,2,4
 count>=0 ,2,2,4
m_parent || !next,2,2,4
" TransLeq( u, v ) && TransLeq( v, w )",2,2,4
current != &m_leaf,2,2,4
!m_saveAndRestore,2,2,4
 mxSafeFrame==pWal->hdr.mxFrame ,2,2,4
thread == 0 || thread == QThread::currentThread(),2,2,4
 n>5 && n<=9 ,2,2,4
"g_file_test(temporaryFilename, G_FILE_TEST_IS_REGULAR), ==, TRUE",2,2,4
 pWinMemData->magic2==WINMEM_MAGIC2 ,2,2,4
m_next->m_previous == this,2,2,4
end < m_runCount,2,2,4
!m_insertionPoint->inDocument(),2,2,4
exitReason == MessageQueueTerminated || exitReason == MessageQueueMessageReceived,2,2,4
end <= styleDeclaration.length(),2,2,4
(i) >= 0 && (i) < compiler->logical_local_size,2,2,4
srcw[0] != 0,2,2,4
!object || object->isRenderFlowThread(),2,2,4
 z<=zTerm ,2,2,4
m_moveTo,2,2,4
!BadReg(rdLo),2,2,4
 TK_LT>TK_EQ && TK_LT<TK_GE ,2,2,4
 sqlite3_mutex_held(pBt->db->mutex) ,2,2,4
m_start.offset >= m_start.lineStartOffset,2,2,4
hasMaximumAge(),2,2,4
!value.isObject(),2,2,4
 (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len ,2,2,4
"jsCFStringWithCharacters, ""A""",2,2,4
uPattern!=0,2,2,4
 TK_LE>TK_EQ && TK_LE<TK_GE ,2,2,4
!m_table || !shouldExpand(),2,2,4
 j+nStr-i+1==nOut ,2,2,4
pParse->nTab==1,2,2,4
kind() == HaveNode,2,2,4
name != InvalidVirtualRegister,2,2,4
 p->iTable>=0 ,2,2,4
asObject(value)->inherits(&BooleanObject::s_info),2,2,4
!next || !next->m_isAllocated,2,2,4
 pExpr->pRight==0 ,2,2,4
 SLOT_2_0 == ((0x7f<<14) | (0x7f)) ,2,2,4
allocationEnd <= static_cast<void*>(this),2,2,4
 op!=TK_GE || c==WO_GE ,2,2,4
hasArrayMode(),2,2,4
!fixture->has_been_finished,2,2,4
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE || nNumberOfBytesToUnlockLow == 1,2,2,4
 i+size<=usableSize ,2,2,4
 sqlite3BtreeHoldsMutex(p->pSrc) ,2,2,4
"text, ==, ""This is a test.""",2,2,4
 y<=pWal->hdr.mxFrame ,2,2,4
!vm.structureStructure,2,2,4
src != dst,2,2,4
mMap.empty(),2,2,4
m_significand[0] == '0' || m_significand[m_precision - 1] != '0',2,2,4
 op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN ,2,2,4
 iPage==0 || *ppPage || rc!=SQLITE_OK ,2,2,4
asObject(value)->inherits(&RegExpConstructor::s_info),2,2,4
evasGL,2,2,4
find() == this,2,2,4
 op==TK_CASE ,2,2,4
numberOfJobs() == m_parameters.size(),2,2,4
 nTries==3 ,2,2,4
!m_start,2,2,4
m_containerNode->offsetInCharacters(),2,2,4
(size_t)nBuf>=(sizeof(time_t)+sizeof(int)),2,2,4
 iDelta>0 || (nDoclist==0 && iDelta==iDocid) ,2,2,4
 pPage->intKey || nKey>=0 ,2,2,4
"startOffset, ==, 25",2,2,4
 get2byteNotZero(&data[hdr+5])==nUsable ,2,2,4
m_buffer.capacity() != 1,2,2,4
 pParse->nVar==0 ,2,2,4
 pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) ,2,2,4
 pBlob==sqlite3_value_blob(argv[0]) ,2,2,4
(insn[3] & 0xf000) == MOVL_READ_OFFPC_OPCODE,2,2,4
 pE->pLeft!=0 ,2,2,4
m_position != m_set->m_head,2,2,4
ipos < GRADIENT_STOPTABLE_SIZE,2,2,4
 nExtra>=1 ,2,2,4
 pNew ,2,2,4
i < m_value.length(),2,2,4
 aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN ,2,2,4
 pPage->pDirtyNext || pPage==p->pDirtyTail ,2,2,4
 pExpr->pTab && j<pExpr->pTab->nCol ,2,2,4
 db->nStatement>=0 && db->nSavepoint>=0 ,2,2,4
 (pPg->flags&PGHDR_NEED_SYNC)==0 ,2,2,4
m_obj,2,2,4
m_inCopyingPhase,2,2,4
 pRight==0 || p->zMalloc==0 ,2,2,4
index < FirstConstantRegisterIndex,2,2,4
 pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage ,2,2,4
 pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage ,2,2,4
 !pBt->readOnly ,2,2,4
startX < width(),2,2,4
m_polygon,2,2,4
 sqlite3_value_type(argv[1])==SQLITE_NULL || sqlite3_context_db_handle(context)->mallocFailed ,2,2,4
 pSrc->a!=0 ,2,2,4
 pCur->wrFlag ,2,2,4
!m_size,2,2,4
to != DataFormatNone,2,2,4
 checkSavepointCount(db) ,2,2,4
 createFlag==1 || createFlag==0 ,2,2,4
 p->op==TK_UNION ,2,2,4
diff <= 8388607 && diff >= -8388608,2,2,4
 pRoot->nOverflow>0 ,2,2,4
opcodeBytes + modRMBytes <= maxJumpReplacementSize(),2,2,4
 k<=n ,2,2,4
 iCol>=0 && iCol<pTab->nColumn ,2,2,4
"i >= 0 && n >= 0 && i + n <= d->size, ""QVector<T>::remove"", ""index out of range""",2,2,4
 zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' ,2,2,4
 n<=9 ,2,2,4
m_rope,2,2,4
 pCur->apPage[pCur->iPage]->leaf ,2,2,4
 pNode->pNext==0 ,2,2,4
 db->aDb[iDb].pBt!=0 || iDb==1 ,2,2,4
 pInode->pPrev->pNext==pInode ,2,2,4
 pVfs!=0 ,2,2,4
isInt32Constant(nodeIndex),2,2,4
 mask==-1 || mask==0 ,2,2,4
 pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 ,2,2,4
"sizeof(UChar) == 2, UCharIsTwoBytes",2,2,4
(argw & 0x3) && !(max_delta & 0xf00),2,2,4
 (new_size & (new_size-1))==0 ,2,2,4
*m_referer == this,2,2,4
 !pSelect && pCons && pEnd ,2,2,4
 reg->fixUpperEdge ,2,2,4
"jsOne, ""1""",2,2,4
!object || object->isSVGContainer(),2,2,4
 pWriter->zTerm==pWriter->zMalloc ,2,2,4
 pPage->pDirtyNext->pDirtyPrev==0 ,2,2,4
 p->iStatement==(db->nStatement+db->nSavepoint) ,2,2,4
!object->m_inRemovedLastRefFunction,2,2,4
newSize < size_t(this->size),2,2,4
"pointer, pointer < Special::TableSize",2,2,4
 iHeight>=0 ,2,2,4
inputBitCount + inputBitStart <= (sizeof(T) * 8),2,2,4
 rc==SQLITE_ERROR ,2,2,4
 pc>=iCellFirst && pc<=iCellLast ,2,2,4
 pParse->pTriggerTab==0 ,2,2,4
 nArg<=ArraySize(azArg) ,2,2,4
 memIsValid(pRec) ,2,2,4
"height, ==, lline_window.height",2,2,4
isOperandConstantImmediateInt(index),2,2,4
isAvailable(sizeof(IntegralType)),2,2,4
index <= s_maxInternalRopeLength,2,2,4
 aData ,2,2,4
 cbrk>=iCellFirst ,2,2,4
v1.isCell() && v2.isCell(),2,2,4
!empty(),2,2,4
 (pPager->eLock>=locktype) || (pPager->eLock==NO_LOCK && locktype==SHARED_LOCK) || (pPager->eLock==RESERVED_LOCK && locktype==EXCLUSIVE_LOCK) ,2,2,4
n,2,2,4
!result->m_isAllocated,2,2,4
m_type == AnimatedPoints,2,2,4
 yy_lookahead[i]==iLookAhead ,2,2,4
m_isInitialized,2,2,4
 SizeofArray(azSql)==SizeofArray(p->aStmt) ,2,2,4
 pTable->pSchema==pTrigger->pSchema || iDb==1 ,2,2,4
 !pPrior->pLimit ,2,2,4
 (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 ,2,2,4
"i >= 0 && i < s, ""QVarLengthArray::remove"", ""index out of range""",2,2,4
ATK_IS_HYPERTEXT(paragraph2),2,2,4
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 ,2,2,4
 pbegin <= (int)pPage->pBt->usableSize-4 ,2,2,4
 next==0 || rc==SQLITE_DONE ,2,2,4
m_decl == o.m_decl,2,2,4
 db->aDb[iDb].pSchema ,2,2,4
 pWC->op==TK_AND ,2,2,4
 zSrcData ,2,2,4
!block || block->isRenderMathMLSpace(),2,2,4
 !pTrigger ,2,2,4
 pExpr->op!=TK_NE || op==OP_Eq ,2,2,4
pPgnoNext,2,2,4
valid(equivalentProperty),2,2,4
m_tokenLocalName,2,2,4
 !db->init.busy || !pSelect ,2,2,4
static_cast<intptr_t>(static_cast<unsigned>(result)) == result,2,2,4
 sqlite3PagerPageRefcount(pData)>0 ,2,2,4
 pgnoRoot>=3 ,2,2,4
p.isFixed(),2,2,4
 iScore>=0 ,2,2,4
!object || object->isRenderScrollbarPart(),2,2,4
"jsCFEmptyStringWithCharacters, """"",2,2,4
 nKey==(i64)(int)nKey ,2,2,4
 aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP ,2,2,4
 desiredEnc==SQLITE_UTF16BE ,2,2,4
 pFrom->zErrMsg==0 || pFrom->nErr ,2,2,4
item->item.script == HB_Script_Myanmar,2,2,4
 apVal || n==0 ,2,2,4
item->item.length < 13,2,2,4
 !p->pGroupBy ,2,2,4
(flags & (EX86_PREF_F2 | EX86_PREF_F3)) != (EX86_PREF_F2 | EX86_PREF_F3) && (flags & (EX86_PREF_F2 | EX86_PREF_66)) != (EX86_PREF_F2 | EX86_PREF_66) && (flags & (EX86_PREF_F3 | EX86_PREF_66)) != (EX86_PREF_F3 | EX86_PREF_66),2,2,4
 pList!=0 || db->mallocFailed!=0 ,2,2,4
 nString==0 ,2,2,4
 pCsr->apPage[pCsr->iPage]->intKey ,2,2,4
 pLock->iTable!=1 || pLock==&p->lock ,2,2,4
startY < height(),2,2,4
 pCache->n90pct == pCache->nMax*9/10 ,2,2,4
asObject(value)->inherits(&RegExpObject::s_info),2,2,4
 pBt->pPage1!=0 ,2,2,4
 p->nMem>9 ,2,2,4
(*insn & 0x0f7f0000) == 0x051f0000,2,2,4
!object || object->isRenderPart(),2,2,4
item->item.script == HB_Script_Tibetan,2,2,4
 pDest->pTable!=pSrc->pTable ,2,2,4
"kHashbits <= kKeybits, hash_function",2,2,4
 ((p->pBt->nPage)&0x8000000)==0 ,2,2,4
 rc!=0 ,2,2,4
 iStatement>p->db->nSavepoint ,2,2,4
 tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER ,2,2,4
 pIndex->pSchema==pTable->pSchema ,2,2,4
!(arg & OFFS_REG_MASK),2,2,4
info.registerFormat() != DataFormatNone && info.registerFormat() != DataFormatDouble,2,2,4
 p->eLock!=PENDING_LOCK ,2,2,4
s_navigationDisableCount,2,2,4
tagName.localName().impl(),2,2,4
 z[0]=='\0' && z>zRet ,2,2,4
 i<=usableSize-4 ,2,2,4
 WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 ,2,2,4
 pConstraint->pGeom ,2,2,4
isUInt7(),2,2,4
"y, ==, sline_window2.y",2,2,4
!m_replicaBranches.isEmpty(),2,2,4
 pWinMemData->hHeap!=INVALID_HANDLE_VALUE ,2,2,4
 sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 ,2,2,4
 pB!=0 ,2,2,4
 zAbsoluteName[0]=='/' ,2,2,4
type >= CompoundType || !(flags & OverridesVisitChildren),2,2,4
address.offset >= 0 && address.offset <= 255,2,2,4
m_codeBlockForCall,2,2,4
(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) != (EX86_BIN_INS | EX86_SHIFT_INS),2,2,4
 (offset-c)<JOURNAL_HDR_SZ(pPager) ,2,2,4
 ppStmt && *ppStmt==0 ,2,2,4
"profileLength, profileLength >= iccColorProfileHeaderLength",2,2,4
 TK_GE==TK_LE+2 ,2,2,4
 pParse->nzVar==0 ,2,2,4
 (pIn1->flags & MEM_Dyn)==0 ,2,2,4
" !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) ",2,2,4
reg_map[PIC_ADDR_REG] == 16 && PIC_ADDR_REG == TMP_REG2,2,2,4
 isNew==1 || isNew==0 ,2,2,4
outPoints,2,2,4
 pPager->errCode==SQLITE_FULL || pPager->errCode==SQLITE_OK || (pPager->errCode & 0xff)==SQLITE_IOERR ,2,2,4
endX <= width(),2,2,4
 iFreePg<iLastPg ,2,2,4
 (isSavepnt&~1)==0 ,2,2,4
dir == PopDirectionalFormat || dir == LeftToRightEmbedding || dir == LeftToRightOverride || dir == RightToLeftEmbedding || dir == RightToLeftOverride,2,2,4
 pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) ,2,2,4
hasHeapPrediction(),2,2,4
ATK_IS_TEXT(textObject1),2,2,4
"(q_val & quintptr(1u)) == quintptr(0), ""QWriteLocker"", ""QReadWriteLock pointer is misaligned""",2,2,4
 nCell<200 ,2,2,4
m_position <= m_table->compactSize,2,2,4
 pStep->op==TK_SELECT ,2,2,4
 pExpr->iTable==0 || pExpr->iTable==1 ,2,2,4
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM ,2,2,4
m_effectReferences.contains(effect),2,2,4
 (zCsr-zIn)==len ,2,2,4
 pWriter ,2,2,4
nOverflow>0 || iOverflow<i ,2,2,4
m_parent || !prev,2,2,4
 (flags&0xff)==flags ,2,2,4
 nCell==get2byte(&data[hdr+3]) ,2,2,4
 enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE ,2,2,4
"!isDestroyed(), ""Q_GLOBAL_STATIC"", ""The global static was used after being destroyed""",2,2,4
 hasUndecided(structure->indexingType()) || hasInt32(structure->indexingType()) || hasDouble(structure->indexingType()) || hasContiguous(structure->indexingType()),2,2,4
m_type == AnimatedPath,2,2,4
" !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) ",2,2,4
(label <= 2047) && (label >= -2048),2,2,4
 pWal->readLock<0 ,2,2,4
"atk_object_get_n_accessible_children(item3), ==, 1",2,2,4
"selectedFiles[0], ==, ""/foo""",2,2,4
 pPhrase->doclist.pList ,2,2,4
cell->isObject(),2,2,4
 eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK ,2,2,4
 pBt->nPage!=PENDING_BYTE_PAGE(pBt) ,2,2,4
(dst == SH4Registers::r0) && (imm <= 255) && (imm >= 0),2,2,4
!url.hasFragmentIdentifier(),2,2,4
 pPager->eState!=PAGER_OPEN || pPg==0 ,2,2,4
" get4byte(findCell(pParent, iIdx))==iChild ",2,2,4
 pCache->bPurgeable || pCache->nMin==0 ,2,2,4
!m_freeListHead,2,2,4
 pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) ,2,2,4
 j<nOld ,2,2,4
value.asCell()->isString(),2,2,4
 isOpen(pPager->fd) || pPager->exclusiveMode ,2,2,4
 pOp->opcode==OP_Eq || pOp->opcode==OP_Ne ,2,2,4
 encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE ,2,2,4
 matchSet<0x80 ,2,2,4
refcount > 0,2,2,4
"false, ""Old plugin system used""",2,2,4
 (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 ,2,2,4
spillOrder != SpillHintInvalid,2,2,4
 p==pOld ,2,2,4
"keyBits <= 16, bloom_filter_key_size",2,2,4
 pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) ,2,2,4
 i<nMaxCells ,2,2,4
 !p->pUnused ,2,2,4
item->item.length < 32,2,2,4
 sizeof(u16)==2 ,2,2,4
 (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) ,2,2,4
 !aPgno[idx] ,2,2,4
 (m-1)==toTheLeft ,2,2,4
size <= 256,2,2,4
 (p->locked==0 && p->sharable) || p->pBt->db==p->db ,2,2,4
 idx<p->nResColumn ,2,2,4
" !pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)",2,2,4
 !pPager->tempFile && isOpen(pPager->fd) ,2,2,4
 k>=0 && k<pSrc->nSrc ,2,2,4
 u.az.oc==OP_SeekGe || u.az.oc==OP_SeekGt ,2,2,4
 pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,2,2,4
 (rc & (v->db->errMask))==rc ,2,2,4
"id <= op_end, ASSERT_THAT_JS_OPCODE_IDS_ARE_VALID",2,2,4
thisObject == this,2,2,4
((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,2,4
 pp && p ,2,2,4
 p->locked==1 ,2,2,4
" VertLeq( u, v ) && VertLeq( v, w )",2,2,4
" ExprHasProperty(p, EP_Reduced)==0 ",2,2,4
 pCur->apPage[pCur->iPage]->nCell>0 ,2,2,4
 pMaskSet->n<=(int)sizeof(Bitmask)*8 ,2,2,4
asObject(value)->inherits(&Arguments::s_info),2,2,4
 db->nDb<=2 ,2,2,4
 iLeft<iRight ,2,2,4
 rc==SQLITE_CORRUPT ,2,2,4
 op!=TK_LE || c==WO_LE ,2,2,4
 sqlite3VdbeDb(v)==db ,2,2,4
 pFKey->isDeferred==0 || pFKey->isDeferred==1 ,2,2,4
 pVtab!=0 ,2,2,4
 pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) ,2,2,4
 rc==SQLITE_OK || p->pStmt==0 ,2,2,4
is8ByteAligned(reinterpret_cast<void*>(bytes)),2,2,4
fixture->item != NULL,2,2,4
 (PAGER_JOURNALMODE_MEMORY & 5)==4 ,2,2,4
!(*(insn - 1)) && !(*(insn - 5)),2,2,4
m_prototype,2,2,4
 (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef ,2,2,4
!object || object->isTableCaption(),2,2,4
vm.isInitializingObject(),2,2,4
isValidOffset(offset),2,2,4
atk_object_get_index_in_parent(rowHeader) == 7,2,2,4
 j<=nOut ,2,2,4
 p->explain ,2,2,4
 rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) ,2,2,4
ind < cpool_size && !(*last_pc_patch & (1 << 25)) && (*last_pc_patch & (1 << 20)),2,2,4
 zTabName ,2,2,4
 xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) ,2,2,4
 precision>0 ,2,2,4
 top+nByte <= (int)pPage->pBt->usableSize ,2,2,4
 pPage->leaf || !pPage->intKey ,2,2,4
 pPage->isPinned==0 ,2,2,4
!node || node->isMediaControls(),2,2,4
j<=nBuf,2,2,4
!next->m_isAllocated,2,2,4
 (balance_deeper_called++)==0 ,2,2,4
"G_OBJECT(fixture->item)->ref_count, ==, 1",2,2,4
nData>=1,2,2,4
isASCIILower(commandName[0U]),2,2,4
 zRawSql[0] || nToken==0 ,2,2,4
buffer_size < buffer_capacity,2,2,4
 iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage ,2,2,4
 eLock!=NO_LOCK || pagerUseWal(pPager)==0 ,2,2,4
 pIdx->onError!=OE_None ,2,2,4
 pExpr->op>=TK_GT && pExpr->op<=TK_GE ,2,2,4
inPool(next),2,2,4
 v->magic==VDBE_MAGIC_INIT ,2,2,4
m_deque,2,2,4
m_hints & ShouldUseCacheHint,2,2,4
 eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 || eType==PTRMAP_BTREE || eType==PTRMAP_ROOTPAGE ,2,2,4
 eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_TRUNCATE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF || eMode==PAGER_JOURNALMODE_WAL || eMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
 pDest->eDest==SRT_Output ,2,2,4
 sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) ,2,2,4
 !pSubParse->pAinc && !pSubParse->pZombieTab ,2,2,4
" !((X86Assembler::ConditionE | X86Assembler::ConditionNE | X86Assembler::ConditionA | X86Assembler::ConditionAE | X86Assembler::ConditionB | X86Assembler::ConditionBE) & DoubleConditionBits), DoubleConditionBits_should_not_interfere_with_X86Assembler_Condition_codes",2,2,4
!isDictionary(),2,2,4
it->m_next->m_previous == it,2,2,4
 rc!=SQLITE_OK || pPager->journalOff>=szJ ,2,2,4
 pPage == sqlite3PagerGetExtra(pPage->pDbPage) ,2,2,4
 p->pCache->pGroup==pGroup ,2,2,4
"id, !id.ordinal()",2,2,4
sizeof(T) == sizeof(Type),2,2,4
location,2,2,4
 eState==3 ,2,2,4
n <= this->alloc - uint(this->size),2,2,4
 pBt->pPage1 && pBt->pPage1->aData ,2,2,4
pg1<=pPg->pgno,2,2,4
true,2,2,4
argw >= 0 && (argw & 0xff) <= 0xff,2,2,4
newEnd != m_blocks.last() + blockLength,2,2,4
 SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART ,2,2,4
 pSelect->pOffset==0 ,2,2,4
 pIter>=&pDL->aAll[pDL->nAll] || *pIter ,2,2,4
 pTo->zErrMsg==0 || pTo->nErr ,2,2,4
p == PBAUTO || p == PBAVOID,2,2,4
 iStatement>0 ,2,2,4
 iFromCol>=0 ,2,2,4
m_canFill && m_registerFormat != DataFormatNone,2,2,4
 op!=TK_EQ || c==WO_EQ ,2,2,4
m_document,2,2,4
func->isDotAccessorNode(),2,2,4
" sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",2,2,4
 sqlite3_mutex_notheld(p->pBt->mutex) ,2,2,4
 memIsValid(&aMem[pOp->p1]) ,2,2,4
 p->sharable || (p->pNext==0 && p->pPrev==0) ,2,2,4
alignedSize <= freeablePoolSize,2,2,4
!pExpr,2,2,4
 aArg==aDyn || (aDyn==0 && aArg==aStatic) ,2,2,4
entry == it.m_position,2,2,4
!m_scriptExecutionContext,2,2,4
src1 == dest || src2 != dest,2,2,4
!(flags & LOAD_DATA) && DR(TMP_REG1) != reg_ar,2,2,4
uint(i) < 3u,2,2,4
"canBeJumpT1(instruction, target)",2,2,4
 pPage->aData == sqlite3PagerGetData(pPage->pDbPage) ,2,2,4
 SQLITE_OPEN_READWRITE == 0x02 ,2,2,4
imm.isUInt16(),2,2,4
asObject(value)->inherits(&DateInstance::s_info),2,2,4
m_registerFormat == DataFormatDouble,2,2,4
 pcache1.isInit==0 ,2,2,4
child->parentNode(),2,2,4
!m_isCheckingForDefaultMarkViolation,2,2,4
 gap+nByte<=top ,2,2,4
!mimeTypes,2,2,4
 z[n]=='\'' ,2,2,4
"!false, false_is_false",2,2,4
toInteger || !isRoundZero,2,2,4
m_type != QAccessible::TextUpdated,2,2,4
 (m.flags & MEM_Str)!=0 || db->mallocFailed ,2,2,4
 id-2 >= 0 ,2,2,4
 pEntry->count>=0 ,2,2,4
readSoFar == ret.size(),2,2,4
 !pSubParse->pTriggerPrg && !pSubParse->nMaxArg ,2,2,4
!(jump->flags & IS_BL),2,2,4
"atk_hyperlink_get_start_index(hLink), ==, 8",2,2,4
position + length <= size(),2,2,4
 pExpr->op==TK_OR ,2,2,4
 nDist>0 ,2,2,4
 pEList!=0 && pExpr->iColumn<pEList->nExpr ,2,2,4
m_type == AnimatedBoolean,2,2,4
deletedCount == m_deletedCount,2,2,4
 pCsr ,2,2,4
newCapacity >= m_keyCount,2,2,4
base == SH4Registers::pc,2,2,4
 sqlite3BtreeHoldsMutex(pBt) ,2,2,4
selectedFiles,2,2,4
 p>mem3.aPool && p<&mem3.aPool[mem3.nPool] ,2,2,4
"i >= 0 && i < p.size(), ""QList<T>::at"", ""index out of range""",2,2,4
 p->aList && p->nList<=(1<<iSub) ,2,2,4
 ((Fts3Table *)pVtab)->inTransaction ,2,2,4
 sqlite3_mutex_notheld(pBt->mutex) ,2,2,4
 pMem->flags & MEM_Real ,2,2,4
hasIndexingType(),2,2,4
 pOp->p3<SQLITE_N_BTREE_META ,2,2,4
 pPage==p->pDirtyTail ,2,2,4
 !p->locked || p->wantToLock>0 ,2,2,4
tag != payload,2,2,4
isAttributeSelector(),2,2,4
 !isFatalError(p->rc) ,2,2,4
 pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg ,2,2,4
(flags & ~(O_CLOEXEC | O_NONBLOCK)) == 0,2,2,4
 pOp->p3==0 ,2,2,4
newSize > uint(this->size),2,2,4
it->m_previous->m_next == it,2,2,4
" sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) ",2,2,4
!m_location,2,2,4
index >= m_start,2,2,4
!element || element->isInputFieldSpeechButtonElement(),2,2,4
 (pKey==0)==(pCur->pKeyInfo==0) ,2,2,4
argumentsRegister != -1,2,2,4
m_attributeName,2,2,4
 nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 ,2,2,4
 nByte>=8 ,2,2,4
!shouldShrink(),2,2,4
 p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) ,2,2,4
!(*ppStmt),2,2,4
 iSavepoint>=0 ,2,2,4
m_normalWorld->hasOneRef(),2,2,4
 argc==3 || argc==2 ,2,2,4
command,2,2,4
ATK_IS_OBJECT(menuPopup),2,2,4
m_doctypeData->m_hasSystemIdentifier,2,2,4
 !withoutRowid ,2,2,4
 pgszDest==sqlite3BtreeGetPageSize(p->pDest) ,2,2,4
nArg==1 || nArg==2,2,2,4
m_virtualRegister == InvalidVirtualRegister,2,2,4
 pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 ,2,2,4
 (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 ,2,2,4
 db->pVdbe==p ,2,2,4
 TK_BITAND==OP_BitAnd ,2,2,4
!error == !!m_programCodeBlock,2,2,4
gridWasPopulated(),2,2,4
!call.isFlagSet(Call::Near),2,2,4
m_executable,2,2,4
" sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) ",2,2,4
 (flags & BTREE_SINGLE)==0 || isTempDb ,2,2,4
!(flags & SRC2_IMM),2,2,4
 EIGHT_BYTE_ALIGNMENT(pNew) ,2,2,4
arg2 == GPRInfo::argumentGPR1 || arg3 == GPRInfo::argumentGPR1,2,2,4
 pMatch->iCursor==pExpr->iTable ,2,2,4
 sizeof(Pgno)==4 ,2,2,4
op == DoubleConstant,2,2,4
 pIdx->autoIndex ,2,2,4
!x || F(x).parent == 0,2,2,4
 isOpen(pPager->fd) || pPager->noSync ,2,2,4
m_processingMediaPlayerCallback,2,2,4
vfsList,2,2,4
compiler->local_size > 0,2,2,4
" 0==strcmp(sqlite3_errmsg(db), ""unknown tokenizer: nosuchtokenizer"") ",2,2,4
program,2,2,4
stackCount >= 0,2,2,4
pList || pParse->db->mallocFailed ,2,2,4
 pTab && pExpr->pTab==pTab ,2,2,4
src_r == TMP_REG2 && (src & SLJIT_MEM),2,2,4
 desiredEnc==SQLITE_UTF8 ,2,2,4
!m_zOrderListsDirty,2,2,4
 pNew->nCell>0 || (nNew==1 && cntNew[0]==0) ,2,2,4
"statement, regex",2,2,4
event,2,2,4
 iCsr>=iStart ,2,2,4
 p && p->pFunc && p->pFunc->xStep ,2,2,4
 pTokenizer ,2,2,4
 rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED ,2,2,4
 &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne ,2,2,4
item->item.script == HB_Script_Arabic || item->item.script == HB_Script_Syriac || item->item.script == HB_Script_Nko,2,2,4
 i<nNew-1 || j==nCell ,2,2,4
!m_next,2,2,4
" sqlite3SchemaMutexHeld(db, idx, 0) ",2,2,4
 pTable->nCol>=0 ,2,2,4
static_cast<bool>(allocation),2,2,4
 zPattern==sqlite3_value_text(argv[1]) ,2,2,4
 CURSOR_VALID < CURSOR_REQUIRESEEK ,2,2,4
!(op & SLJIT_INT_OP),2,2,4
!object || object->isSVGShape(),2,2,4
 pTo->nVar==pFrom->nVar ,2,2,4
 pSrc->a[iLeft].pTab ,2,2,4
error,2,2,4
 p->pgno < p->pDirty->pgno ,2,2,4
 aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH ,2,2,4
 iMeta==0 || iMeta==1 ,2,2,4
 pgno<=pBt->nPage ,2,2,4
internal_key.size() >= 8,2,2,4
 pSrcIdx ,2,2,4
 p->iAddr<nOp ,2,2,4
oldVal,2,2,4
 pbegin>addr || pbegin==0 ,2,2,4
nPage>0,2,2,4
 pWal->ckptLock && pWal->hdr.mxFrame>0 ,2,2,4
 pcache1.isInit!=0 ,2,2,4
 db->nStatement==0 ,2,2,4
*cc >= OP_KET && *cc <= OP_KETRPOS,2,2,4
 db->aDb==db->aDbStatic ,2,2,4
"JSValueIsString(context, value)",2,2,4
nArg==2,2,2,4
globalData.structureStructure,2,2,4
 sizeof(v)==sizeof(pMem->r) ,2,2,4
 sqlite3PagerIswriteable(pNew->pDbPage) ,2,2,4
!(sm & 0x1),2,2,4
 pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE ,2,2,4
 pCur->iPage<BTCURSOR_MAX_DEPTH ,2,2,4
 rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 ,2,2,4
 nMap>=0 || pFd->nFetchOut==0 ,2,2,4
 pPage->intKey ,2,2,4
currentOffset() >= currentLineStartOffset(),2,2,4
statement,2,2,4
!m_callback || m_scriptExecutionContext->isContextThread(),2,2,4
peek() == '[',2,2,4
desiredDigits,2,2,4
object1,2,2,4
 idx<pPage->nCell ,2,2,4
 sqlite3_mutex_notheld(mem0.mutex) ,2,2,4
"i >= 0 && i < d->size, ""QVector<T>::remove"", ""index out of range""",2,2,4
 (p->btreeMask & (((yDbMask)1)<<p1))!=0 ,2,2,4
m_saveAndRestore,2,2,4
 !(fg&(MEM_Str|MEM_Blob)) ,2,2,4
m_worldSet.isEmpty(),2,2,4
static_cast<unsigned>(reg) != InvalidGPRReg,2,2,4
 rc==SQLITE_OK || pCsr==0 ,2,2,4
 (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload ,2,2,4
 PAGER_JOURNALMODE_WAL==5 ,2,2,4
 p->nRef || (p->flags&PGHDR_NEED_SYNC) ,2,2,4
 zName!=0 ,2,2,4
m_type == ArrayType,2,2,4
reparented,2,2,4
 pTable->pSelect ,2,2,4
 (sizeof(struct MemBlockHdr)&7) == 0 ,2,2,4
 pNC ,2,2,4
 lwr+upr>=0 ,2,2,4
hash64,2,2,4
isDetached(),2,2,4
 winShmMutexHeld() ,2,2,4
"!T::isSync, AsyncMessageExpected",2,2,4
 (PAGER_JOURNALMODE_MEMORY & 5)!=1 ,2,2,4
 nArg==1 ,2,2,4
canSetIndex(i),2,2,4
 (m.flags & MEM_Term)!=0 || db->mallocFailed ,2,2,4
 pPage->iKey==iOld ,2,2,4
 pExpr->pPhrase->iDoclistToken==0 ,2,2,4
indexingType & IsArray,2,2,4
 pCol->zType==0 ,2,2,4
 p->inTrans!=TRANS_NONE ,2,2,4
 pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 ,2,2,4
 iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 ,2,2,4
ATK_IS_TEXT(link),2,2,4
 pExpr->bDeferred || pPhrase->doclist.bFreeList==0 ,2,2,4
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_ERROR ,2,2,4
 iOut>0 ,2,2,4
 pPage->leaf==0 || pPage->leaf==1 ,2,2,4
!value.isEmpty(),2,2,4
 eType!=PTRMAP_FREEPAGE ,2,2,4
registerFormat & DataFormatJS || registerFormat == DataFormatCell,2,2,4
!object || object->isRenderTableCol(),2,2,4
 pLock->eLock==READ_LOCK || pLock->pBtree==p ,2,2,4
 p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] ,2,2,4
 p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 ,2,2,4
isJSConstant(nodeIndex),2,2,4
 (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 ,2,2,4
 pSrc->nSrc>iRight ,2,2,4
 idxStr==0 ,2,2,4
 0==(1&SQLITE_PTR_TO_INT(pVal->z)) ,2,2,4
 pTrigger || tmask==0 ,2,2,4
 rc==SQLITE_ROW || rc==SQLITE_DONE || rc==SQLITE_ERROR || rc==SQLITE_BUSY || rc==SQLITE_MISUSE ,2,2,4
 zIn==sqlite3_value_text(argv[0]) ,2,2,4
 pc>=-1 && pc<p->nOp ,2,2,4
 TK_SLASH==OP_Divide ,2,2,4
 (size&1)==0 ,2,2,4
 isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF || pPager->journalMode==PAGER_JOURNALMODE_WAL ,2,2,4
 v || db->mallocFailed ,2,2,4
 TK_PLUS==OP_Add ,2,2,4
 pPager->dbSize==pPager->dbOrigSize ,2,2,4
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_FINISHED || (pagerUseWal(pPager) && pPager->eState==PAGER_WRITER_CACHEMOD) ,2,2,4
((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,2,4
 TK_RSHIFT==OP_ShiftRight ,2,2,4
!message,2,2,4
 pCache->bPurgeable==0 || pCache->nMin==10 ,2,2,4
 pIn->nSdst==1 ,2,2,4
!BadReg(rdHi),2,2,4
m_data[index].spillOrder == SpillHintInvalid,2,2,4
horizontalPolicy == webkit_web_frame_get_horizontal_scrollbar_policy(mainFrame),2,2,4
 (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) ,2,2,4
 mem5.currentCount>0 ,2,2,4
 pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage],2,2,4
m_dataFormat & DataFormatJS,2,2,4
 PAGER_JOURNALMODE_PERSIST==1 ,2,2,4
!function->isHostFunction(),2,2,4
 pWinMemData->magic1==WINMEM_MAGIC1 ,2,2,4
 ((VTable *)zP4)->db==p->db ,2,2,4
!m_isMonotonic,2,2,4
m_type == AnimatedString,2,2,4
exec->callee()->inherits(&JSFunction::s_info),2,2,4
 p->sharable==0 || p->locked==0 || p->db==p->pBt->db ,2,2,4
m_isFunction,2,2,4
 mem.nCurrent[i]>=0 ,2,2,4
 p->pInode==pFd->pInode ,2,2,4
shaderIndex >= 0 && shaderIndex <= ShaderCacheMaxEntries,2,2,4
 !pPager->pTmpSpace ,2,2,4
!m_cachedStructure,2,2,4
 TOKEN.z[0] ,2,2,4
where.isSet(),2,2,4
 rc==SQLITE_OK || !MEMDB ,2,2,4
isConstant(),2,2,4
 p->nList<=(1<<iSub) ,2,2,4
" !ExprHasProperty(p, EP_FromJoin) ",2,2,4
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_WRITER_LOCKED ,2,2,4
 iToken!=p->iDoclistToken ,2,2,4
 a!=0 ,2,2,4
" sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",2,2,4
 iPage>1 ,2,2,4
!run->m_next,2,2,4
maskedOwnerType,2,2,4
 fd!=0 ,2,2,4
!document || document->isHTMLDocument(),2,2,4
 pPager->eState>=PAGER_WRITER_CACHEMOD || (pPager->eState==PAGER_OPEN && pPager->eLock==EXCLUSIVE_LOCK) ,2,2,4
" GLOBAL(int, mutexIsInit) ",2,2,4
 newPgno>0 ,2,2,4
 WO_GE==SQLITE_INDEX_CONSTRAINT_GE ,2,2,4
 !memDb ,2,2,4
 pOrWc->nTerm>=2 ,2,2,4
qApp,2,2,4
 pOp->p4type==P4_INTARRAY ,2,2,4
 aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER,2,2,4
 zByte!=0 ,2,2,4
!isTornOff(),2,2,4
isGrowingDownward() ? (currentPosition < m_origin && currentPosition > m_bound) : (currentPosition > m_origin && currentPosition < m_bound),2,2,4
m_type == AnimatedNumber,2,2,4
"!HashTranslator::equal(KeyTraits::emptyValue(), key)",2,2,4
" xCmp(apSegment[i], apSegment[i+1])<0 ",2,2,4
 p->apCsr[pOp->p1]!=0 ,2,2,4
 debugMutexHeld(pX) ,2,2,4
 rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 ,2,2,4
 iFirst>=0 ,2,2,4
cond == DoubleNotEqualOrUnordered,2,2,4
 iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) ,2,2,4
 m.z || db->mallocFailed ,2,2,4
" osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",2,2,4
jump->u.target & 0x1,2,2,4
plugInElement->isPlugInImageElement(),2,2,4
 pAndTerm->pExpr ,2,2,4
(sd >= 0 && sd <= 31) && (sn >= 0 && sn <= 31) && (sm >= 0 && sm <= 31),2,2,4
 rc!=SQLITE_OK || isOpen(pFile) ,2,2,4
!head->root || !fragment(new_root)->parent,2,2,4
previousPool,2,2,4
 p->pEList && pPrior->pEList ,2,2,4
flags & HALF_SIZE,2,2,4
"QtPrivate::HasQ_OBJECT_Macro<ObjType>::Value, ""qobject_cast requires the type to have a Q_OBJECT macro""",2,2,4
m_initialized,2,2,4
 iType-2 < ArraySize(staticMutexes) ,2,2,4
imm.isUInt7(),2,2,4
 autoInc==0 || autoInc==1 ,2,2,4
start < end,2,2,4
 0==argc ,2,2,4
type == SCALE_X || type == SCALE_Y || type == SCALE_Z || type == SCALE || type == SCALE_3D,2,2,4
 !pS ,2,2,4
 pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] ,2,2,4
!m_callback || (m_scriptExecutionContext.get() && m_scriptExecutionContext->isContextThread()),2,2,4
 pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl ,2,2,4
 pthreadMutexHeld(p) ,2,2,4
 memIsValid(pIn2) ,2,2,4
 *pRes==0 || *pRes==1 ,2,2,4
 !pColl || pColl->xCmp ,2,2,4
"count, ==, 4",2,2,4
op2 <= 0xff,2,2,4
 p->wantToLock==0 ,2,2,4
!node || node->isInsertionPoint(),2,2,4
 pVfs->mxPathname==MAX_PATHNAME ,2,2,4
 pPage==p->pDirty ,2,2,4
 pOp->opcode==OP_Noop || pOp->opcode==OP_Explain ,2,2,4
 pNode->nRef==1 ,2,2,4
 ppDb ,2,2,4
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) ,2,2,4
(inst & 0xfff) == 0,2,2,4
 nReserve>=-1 && nReserve<=255 ,2,2,4
"thread != 0, ""QThread"", ""internal error""",2,2,4
 (PAGER_JOURNALMODE_DELETE & 5)!=1 ,2,2,4
 (int)strlen(conchPath) == len+7 ,2,2,4
 nData==(pRtree->nDim*2 + 3) ,2,2,4
 pDel==0 || pDel==pColl ,2,2,4
 0==pTable->pIndex ,2,2,4
 WO_LE==SQLITE_INDEX_CONSTRAINT_LE ,2,2,4
 leafCorrection==0 || leafCorrection==4 ,2,2,4
 (*ppLast)->pRight==0 ,2,2,4
 CURSOR_INVALID < CURSOR_REQUIRESEEK ,2,2,4
 pPrior!=0 && nByte>0 ,2,2,4
 pParse->pNewTrigger==pTrigger ,2,2,4
 pSrc->nSrc==1 ,2,2,4
loc->isDotAccessorNode(),2,2,4
 badHdr==0 || pWal->writeLock==0 ,2,2,4
 p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN ,2,2,4
 pTab->nCol>cnum ,2,2,4
 to_op==OP_ToReal || aff!=SQLITE_AFF_REAL ,2,2,4
m_start < m_buffer.capacity(),2,2,4
asObject(value)->inherits(&JSActivation::s_info),2,2,4
!value.isCell(),2,2,4
 idx>0 && idx<=p->nVar ,2,2,4
 *pbFirst==0 || iWrite>0 ,2,2,4
 0==(pMem->flags&MEM_Dyn) && !pMem->xDel ,2,2,4
 seenReplace==0 ,2,2,4
 offset%JOURNAL_HDR_SZ(pPager)==0 ,2,2,4
m_fpr != InvalidFPRReg,2,2,4
 (WO_EQ<<(op-TK_EQ)) < 0x7fff ,2,2,4
 pTokenizer && pModule ,2,2,4
exec,2,2,4
 iRead==iRead2 ,2,2,4
 !pParse->pNewTrigger ,2,2,4
!object || object->isRenderRegion(),2,2,4
"jsOneThird, ""0.3333333333333333""",2,2,4
 eMode==PAGER_LOCKINGMODE_QUERY || eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,2,2,4
webkit_web_data_source_is_loading(dataSource),2,2,4
!x.d->ref.deref(),2,2,4
GTK_IS_MENU(defaultMenu),2,2,4
 nExtra>=nColl ,2,2,4
!m_didEnd,2,2,4
 sqlite3_data_count(pStmt)==1 ,2,2,4
"beenThere, ==, TRUE",2,2,4
 TK_REM==OP_Remainder ,2,2,4
pDup,2,2,4
m_vector.m_segments.at(m_segment)->size() > 0,2,2,4
jumpType == JumpCondition,2,2,4
md5Sum.length() == 16,2,2,4
 nSrcPage>=0 ,2,2,4
m_boundThread == currentThread(),2,2,4
 pOp->p2!=0 ,2,2,4
 !pnCkpt || *pnCkpt==-1 ,2,2,4
 pParse==pWalker->pParse ,2,2,4
!scriptExecutionContext || scriptExecutionContext->isDocument(),2,2,4
 mem5.currentCount>0 || mem5.currentOut==0 ,2,2,4
 SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,2,2,4
"(reinterpret_cast<quintptr>(m) & quintptr(1u)) == quintptr(0), ""QMutexLocker"", ""QMutex pointer is misaligned""",2,2,4
 pExpr->op!=TK_LT || op==OP_Ge ,2,2,4
 SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE ,2,2,4
q_func()->testAttribute(Qt::WA_WState_InPaintEvent),2,2,4
 pTab && !pTab->pSelect && pExpr ,2,2,4
 iCur<p->nCursor ,2,2,4
 face ,2,2,4
 sizeof(res.azResult[0])>= sizeof(res.nData) ,2,2,4
m_data[index].name == InvalidVirtualRegister,2,2,4
 fg & MEM_Real ,2,2,4
"JSGlobalObject::AnonymousSlotCount == 1, JSGlobalObject_has_only_a_single_slot",2,2,4
 cursorHoldsMutex(pCsr) ,2,2,4
 pInode->nLock==0 ,2,2,4
bool,2,2,4
 db->lookaside.nOut==0 ,2,2,4
!blob || blob->isFile(),2,2,4
item->item.script == HB_Script_Khmer,2,2,4
 bRev==0 || bRev==1 ,2,2,4
 nExtra<1000 ,2,2,4
 pPager->dbFileSize>0 ,2,2,4
 pB->pRight==0 || pB->v<=pB->pRight->v ,2,2,4
 eMode>=0 && eMode<=ArraySize(azModeName) ,2,2,4
!(reinterpret_cast<intptr_t>(code) & 1),2,2,4
n->m_deletionHasBegun,2,2,4
 (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,2,2,4
!isRope(),2,2,4
!error == !!m_evalCodeBlock,2,2,4
 eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE,2,2,4
 pCur->aiIdx[ii]==pCur->apPage[ii]->nCell ,2,2,4
 pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v ,2,2,4
 pPg->nRef>0 ,2,2,4
 rc!=SQLITE_IOERR_BLOCKED ,2,2,4
" walFramePgno(pWal, iFrame)==iDbpage ",2,2,4
"timesElementInspected, ==, 1",2,2,4
 p->aCol==0 ,2,2,4
"webkit_web_view_can_show_mime_type(view, mime_type)",2,2,4
it->m_table->m_iterators == it,2,2,4
!isShared(),2,2,4
 nOld>0 ,2,2,4
"jsUndefined, ""undefined""",2,2,4
 to_op==OP_ToBlob || aff!=SQLITE_AFF_NONE ,2,2,4
 pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] ,2,2,4
 sqlite3_mutex_held(mem5.mutex) ,2,2,4
run != m_firstRun,2,2,4
 p->aColName!=0 ,2,2,4
 pPager->pWal==0 && pPager->tempFile==0 ,2,2,4
 (start + size) <= (int)pPage->pBt->usableSize ,2,2,4
isFirstOrLastCellInRow(),2,2,4
!object || object->isLayerModelObject(),2,2,4
" sz==cellSize(pPage, idx) ",2,2,4
 EIGHT_BYTE_ALIGNMENT(*ppFrom) ,2,2,4
offset >= invalidOffset,2,2,4
 pSem ,2,2,4
 rc!=SQLITE_OK || isOpen(pPager->fd) ,2,2,4
 pExpr->u.zToken[0]!=0 ,2,2,4
rdLo != rdHi,2,2,4
 zStr==sqlite3_value_text(argv[0]) ,2,2,4
 pPager->eState!=PAGER_READER ,2,2,4
m_type == AnimatedLengthList,2,2,4
!m_end,2,2,4
!is_finalized(),2,2,4
!object || object->isFrame(),2,2,4
 pPgHdr==0 || rc==SQLITE_OK ,2,2,4
 (p->flags&MEM_RowSet)==0 ,2,2,4
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY ,2,2,4
m_match != Tag,2,2,4
!m_filledPrimaryPage,2,2,4
"webkit_web_history_item_get_title(currentItem), ==, ""Site 3""",2,2,4
 nearby>0 ,2,2,4
m_type == AnimatedColor,2,2,4
 pCache->nMin==0 || pCache->bPurgeable ,2,2,4
!document || document->isSVGDocument(),2,2,4
 eStmt<SizeofArray(azSql) && eStmt>=0 ,2,2,4
 pPrevTrunk==0 ,2,2,4
" !hasReadConflicts(p, pCur->pgnoRoot) ",2,2,4
cell->inherits(&JSArray::s_info),2,2,4
 nReserve>=0 && nReserve<=255 ,2,2,4
 nByte < usableSize-8 ,2,2,4
 pBlob->pStmt || db->mallocFailed ,2,2,4
!(0xffffff00 & right.m_value),2,2,4
!m_value,2,2,4
 c==t ,2,2,4
 eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) ,2,2,4
code >= IDBDatabaseException::IDBDatabaseExceptionOffset,2,2,4
 x<mem5.nBlock ,2,2,4
aalloc >= asize,2,2,4
node->flags() & NodeHasVarArgs,2,2,4
 pPage->pDirtyPrev || pPage==p->pDirty ,2,2,4
 pMem->enc!=desiredEnc ,2,2,4
 p->sharable || p->wantToLock==0 ,2,2,4
 state==PAGER_OPEN || state==PAGER_READER ,2,2,4
index >= 0 && index < m_numberOfTriangles,2,2,4
 iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 ,2,2,4
 (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 ,2,2,4
!(op1 & 0x004f),2,2,4
ATK_IS_OBJECT(axParent),2,2,4
saveds >= 0 && saveds <= SLJIT_NO_GEN_REGISTERS,2,2,4
 p!=0 && (p->rsFlags & ROWSET_NEXT)==0 ,2,2,4
 iHeight>=1 && iHeight<128 ,2,2,4
 pExpr->u.zToken!=0 ,2,2,4
 *p2!=POS_END && *p2!=POS_COLUMN ,2,2,4
index < GPRInfo::numberOfRegisters,2,2,4
 sz > (int)sizeof(LookasideSlot*) ,2,2,4
 (*p1&0xFE)==0 && (*p2&0xFE)==0 ,2,2,4
 sqlite3PagerGetData(pPage->pDbPage) == data ,2,2,4
 pBt->usableSize > 4 ,2,2,4
 sqlite3_mutex_held(mem0.mutex) ,2,2,4
compiler->cpool_fill < CPOOL_SIZE && (inst & 0xfff) == 0,2,2,4
 iMin<0xffffffff ,2,2,4
" !usedAsColumnCache(pParse, i, i+n-1) ",2,2,4
m_polygon && m_polygon->numberOfEdges() > 1,2,2,4
" !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) ",2,2,4
 pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 ,2,2,4
reinterpret_cast<intptr_t>(ptr) & ~1,2,2,4
 iDb==1 ,2,2,4
 pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 ,2,2,4
diff <= 1023 && diff >= -1024 && !(jump->flags & IS_COND),2,2,4
 pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage ,2,2,4
 pIn3->flags & MEM_Blob ,2,2,4
JSContextGetGlobalContext(ctx) == context,2,2,4
_iterable,2,2,4
addr <= 0x03ffffff,2,2,4
 (pSelect->selFlags & SF_Resolved)!=0 ,2,2,4
 pParse->nested<10 ,2,2,4
 sqlite3PagerRefcount(pBt->pPager)==1 ,2,2,4
position <= pool->m_current,2,2,4
 aMerge==aList ,2,2,4
 p2==p1 ,2,2,4
!node || node->isDocumentNode(),2,2,4
WEBKIT_IS_WEB_VIEW(webView),2,2,4
 pPhrase->doclist.bFreeList==0 ,2,2,4
call.isFlagSet(Call::Near),2,2,4
 pBt->autoVacuum==1 || pBt->autoVacuum==0 ,2,2,4
fastMallocSize(p),2,2,4
 sizeof(RtreeCoord)==4 ,2,2,4
 TK_BITOR==OP_BitOr ,2,2,4
 sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0 || mem.mutex!=0 ,2,2,4
 ppIdx && *ppIdx==0 ,2,2,4
 pItem->zName==0 ,2,2,4
 op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE ,2,2,4
"y, ==, lline_window.y",2,2,4
 pcache1.nFreeSlot>=0 ,2,2,4
!webkit_file_chooser_request_get_select_multiple(request),2,2,4
listObj,2,2,4
 db == v->db ,2,2,4
 !pPrior->pOrderBy ,2,2,4
 pInode->pNext->pPrev==pInode ,2,2,4
 iTarget>0 ,2,2,4
" hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) ",2,2,4
valid(newProperty),2,2,4
 nCell<=nMaxCell ,2,2,4
 pExpr->op!=TK_GE || op==OP_Lt ,2,2,4
 pBt->incrVacuum==1 || pBt->incrVacuum==0 ,2,2,4
 sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno ,2,2,4
!isTop(),2,2,4
!filter,2,2,4
rect,2,2,4
 pNC->nRef>=nRef ,2,2,4
value() > 0.0,2,2,4
 iFreePg==iLastPg ,2,2,4
 eDest==SRT_Output || eDest==SRT_Coroutine ,2,2,4
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT ,2,2,4
m_top->node(),2,2,4
 pOp>p->aOp ,2,2,4
 pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) ,2,2,4
 regOld==0 && regNew!=0 ,2,2,4
 pCsr->nDoclist==0 ,2,2,4
 pOp->p4.pVtab!=0 ,2,2,4
 db->mallocFailed || !pOffset || pLimit ,2,2,4
 eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK ,2,2,4
 pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK ,2,2,4
 pMem->zMalloc ,2,2,4
 pLoop->addrOpenEphm[1]<0 ,2,2,4
(m_numParametersForCall == NUM_PARAMETERS_IS_HOST) == (m_numParametersForConstruct == NUM_PARAMETERS_IS_HOST),2,2,4
 pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR ,2,2,4
 u.bd.pC->rowidIsValid==0 ,2,2,4
value.asCell()->isGetterSetter(),2,2,4
 azCols[i]!=0 ,2,2,4
 p->nResColumn==pOp->p2 ,2,2,4
 encnames[SQLITE_UTF8].enc==SQLITE_UTF8 ,2,2,4
e == e->lexicalGlobalObject()->globalExec(),2,2,4
" p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0 || sqlite3GetInt32(p->u.zToken, &rc)==0 ",2,2,4
 pExpr->pLeft ,2,2,4
 p->addrOpenEphm[1] == -1 ,2,2,4
!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage,2,2,4
 (pPager->eLock==SHARED_LOCK) || (pPager->exclusiveMode && pPager->eLock>SHARED_LOCK) ,2,2,4
imContext,2,2,4
jsCast<JSFunction*>(exec->callee())->jsExecutable() == this,2,2,4
" sqlite3SchemaMutexHeld(db, 0, pSchema) ",2,2,4
 *pbFirst || *piPrev==0 ,2,2,4
" sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) ",2,2,4
m_edge,2,2,4
 nTemp>=20 ,2,2,4
Sign() > 0,2,2,4
 pNC->pSrcList!=0 ,2,2,4
pDb==&db->aDb[0],2,2,4
 p1>=0 && p1<(pTab->nCol*2+2) ,2,2,4
 pgno!=0 ,2,2,4
 p->sharable ,2,2,4
 p->op==TK_INTERSECT ,2,2,4
!m_isInParallelMode,2,2,4
 TRANS_WRITE==pBt->inTransaction ,2,2,4
 pSrc && iFrom>=0 && iFrom<pSrc->nSrc ,2,2,4
 pSubSrc ,2,2,4
 !pnLog || *pnLog==-1 ,2,2,4
 (regOld==0)!=(regNew==0) ,2,2,4
 nTries>1 ,2,2,4
" 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) ",2,2,4
character != kEndOfFileMarker,2,2,4
 !paiCol || *paiCol==0 ,2,2,4
 iOvflSpace <= (int)pBt->pageSize ,2,2,4
m_insertionPoint->inDocument(),2,2,4
diff <= 0xfff,2,2,4
 scratchAllocOut>=1 && scratchAllocOut<=2 ,2,2,4
 pPager->eState==PAGER_READER || pPager->eState==PAGER_OPEN || pPager->eState==PAGER_ERROR ,2,2,4
 aOp && !p->db->mallocFailed ,2,2,4
 pDb!=0 ,2,2,4
 rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) ,2,2,4
 zShellStatic ,2,2,4
 iDb>=2 ,2,2,4
 pNew->nOverflow==0 ,2,2,4
!it->m_next,2,2,4
 pOld==pIndex || pOld==0 ,2,2,4
type == TRANSLATE_X || type == TRANSLATE_Y || type == TRANSLATE_Z || type == TRANSLATE || type == TRANSLATE_3D,2,2,4
 jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) & SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN ),2,2,4
 var<COLNAME_N ,2,2,4
 pPager->memDb==0 ,2,2,4
 iCol>=-1 && iCol<32768 ,2,2,4
m_coordinates,2,2,4
addr <= 0xffff,2,2,4
 page0 || pWal->writeLock==0 ,2,2,4
 j<=usableSize-4 ,2,2,4
isNull(),2,2,4
 (pExpr->iTable&0x0000FFFF)==pExpr->iTable ,2,2,4
r0 == SH4Registers::r0,2,2,4
 isPrefix==0 || isScan==0 ,2,2,4
endY <= height(),2,2,4
 rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED ,2,2,4
 pTab!=0 && pTab->zName!=0 ,2,2,4
m_pos <= toRenderText(m_obj)->textLength(),2,2,4
 yyact == YYNSTATE + YYNRULE + 1 ,2,2,4
 pParent!=p ,2,2,4
"kValuebits <= sizeof(V) * 8, value_size",2,2,4
 nVal>=1 ,2,2,4
 db->pSavepoint || db->isTransactionSavepoint==0 ,2,2,4
 pFrom->a[0].pUsing==0 ,2,2,4
 pgsz>0 ,2,2,4
m_customHTMLTokenizerTimeDelay != -1,2,2,4
cc == ccend,2,2,4
 z && zName ,2,2,4
zType[i-1]==' ',2,2,4
target->document(),2,2,4
 p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE ,2,2,4
(*cc >= OP_ASSERT && *cc <= OP_ASSERTBACK_NOT) || (*cc >= OP_ONCE && *cc <= OP_SCOND),2,2,4
 zCsr <= &((char *)p)[nByte] ,2,2,4
 rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 ,2,2,4
 xtype==etINVALID ,2,2,4
 nFToken>0 ,2,2,4
addr <= 0x7fffffff,2,2,4
 eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK,2,2,4
!m_didStart,2,2,4
index < m_length,2,2,4
 pCsr->zTerm==0 ,2,2,4
 WO_GT==SQLITE_INDEX_CONSTRAINT_GT ,2,2,4
 (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 ,2,2,4
m_codeBlock->isConstantRegisterIndex(src),2,2,4
size == values.size(),2,2,4
!n->m_deletionHasBegun,2,2,4
isUInt16(),2,2,4
 nVal==1 || nVal==2 ,2,2,4
 pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER ,2,2,4
 p->rc==SQLITE_OK ,2,2,4
m_end < m_buffer.capacity(),2,2,4
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x2), float_transfer_bit_error",2,2,4
uniformSpacer >= 0 || spacing >= 0,2,2,4
 nIncr==1 ,2,2,4
 (pTerm->eOperator&(pTerm->eOperator-1))==0 ,2,2,4
 sz==info.nPayload ,2,2,4
size >= request,2,2,4
 pCache!=0 ,2,2,4
!m_jsFunction || static_cast<JSC::JSCell*>(m_jsFunction.get())->isObject(),2,2,4
 pgno!=0 || rc==SQLITE_CORRUPT ,2,2,4
"style, style == inlineStyle()",2,2,4
m_type == AnimatedEnumeration,2,2,4
 nArg<=(int)ArraySize(aStatic) || aArg==aDyn ,2,2,4
 pParent==p ,2,2,4
 z[0]=='?' ,2,2,4
 xConstruct ,2,2,4
 pParent->pGroupBy==0 ,2,2,4
m_scopeDepth,2,2,4
 (balance_quick_called++)==0 ,2,2,4
 pCursor->pNode==pChild ,2,2,4
 p->selFlags & SF_Resolved ,2,2,4
 iStart<=pSrc->nSrc ,2,2,4
 piLeaf || piLeaf2 ,2,2,4
m_type != QAccessible::TableModelChanged,2,2,4
buffer,2,2,4
style(),2,2,4
" hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) ",2,2,4
 offset>=c ,2,2,4
 i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 ,2,2,4
m_type == AnimatedPreserveAspectRatio,2,2,4
!has_alternatives,2,2,4
 pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT ,2,2,4
vector.data(),2,2,4
"!""Unexpected return value from ucol_strcoll()""",2,2,4
 !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) ,2,2,4
hasArrayStorage(structure->indexingType()),2,2,4
 pOrig!=0 ,2,2,4
 pagerUseWal(pPager)==0 || szJ==0 ,2,2,4
 pSub!=0 ,2,2,4
!keyboardMode,2,2,4
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) ,2,2,4
 aff1==0 || aff2==0 ,2,2,4
!error == !!m_codeBlockForCall,2,2,4
 !pLeft->bDeferred || !pRight->bDeferred ,2,2,4
 pToken->pDeferred==0 || pToken->pSegcsr==0 ,2,2,4
 i<nTemp ,2,2,4
 v->aVar[0].flags&MEM_Int ,2,2,4
 db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 ,2,2,4
 pLevel->iIdxCur>=0 ,2,2,4
 nTerm>0 ,2,2,4
 pOp->p5==0 || pOp->p5==1 ,2,2,4
 nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt) && (int)MX_CELL(pPage->pBt)<=10921,2,2,4
!(headValue & 64),2,2,4
type->type() == m_type,2,2,4
 p==pColl ,2,2,4
 iRight>=nRight || aContent[aRight[iRight]]>dbpage ,2,2,4
 iIdx<=pParent->nCell ,2,2,4
 pTerm->pExpr ,2,2,4
 iReg>0 ,2,2,4
 p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ,2,2,4
 op!=TK_IN || c==WO_IN ,2,2,4
"atk_selection_get_selection_count(atkSelection), ==, 1",2,2,4
"atk_object_get_n_accessible_children(item2), ==, 1",2,2,4
m_baseVal,2,2,4
m_previous->m_next == this,2,2,4
 rc!=SQLITE_ROW && rc!=SQLITE_DONE ,2,2,4
 (pIn3->flags & MEM_Zero)==0 ,2,2,4
 iDb<pParse->db->nDb ,2,2,4
 CURSOR_FAULT > CURSOR_REQUIRESEEK ,2,2,4
!BadReg(rt),2,2,4
"!(DoubleConditionBitSpecial & DoubleConditionMask), DoubleConditionBitSpecial_should_not_interfere_with_ARMAssembler_Condition_codes",2,2,4
 !pBt->pWriter ,2,2,4
!Heap::heap(value) || Heap::heap(value) == Heap::heap(object),2,2,4
"nLinks, ==, 0",2,2,4
 p1>=0 && p2>=0 ,2,2,4
 TK_MINUS==OP_Subtract ,2,2,4
"U::isSync, SyncMessageExpected",2,2,4
 pExpr->op==TK_AGG_FUNCTION ,2,2,4
std::is_fundamental<T>::value,2,2,4
 pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR ,2,2,4
 !isOpen(pJournal) ,2,2,4
 &db->pVtabCtx ,2,2,4
isStringImpl(),2,2,4
 p->cnt==0 ,2,2,4
 pIdxInfo->idxStr==0 ,2,2,4
size <= freeablePoolSize,2,2,4
 (pMem->flags & (MEM_Blob|MEM_Str))!=0 ,2,2,4
 pBt->nRef>0 ,2,2,4
 pParse->iCacheLevel>=N ,2,2,4
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,2,2,4
 pRtree->eCoordType==RTREE_COORD_INT32 ,2,2,4
 iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL ,2,2,4
 pgno>0 ,2,2,4
 p->pUnlockConnection || p->pBlockingConnection ,2,2,4
 k<nNew ,2,2,4
 pIndexedBy!=0 ,2,2,4
Size == 1 || Size == 2,2,2,4
 pWal->ckptLock==0 ,2,2,4
 p->pDestDb ,2,2,4
 (isTemp & 1)==isTemp ,2,2,4
 iPos>=0 ,2,2,4
i < m_scopeStack.size(),2,2,4
 pPage->aData ,2,2,4
d_ptr,2,2,4
didSucceed,2,2,4
 pHdr->pPrev->pNext==pHdr ,2,2,4
(ptr & 0x8000) == 0,2,2,4
 isOpen(pPager->jfd) || pPager->pInJournal==0 ,2,2,4
 inodeList==pInode ,2,2,4
 pParse->pTriggerTab && pParse->pToplevel ,2,2,4
"i >= 0 && i < s, ""QVarLengthArray::replace"", ""index out of range""",2,2,4
 (pTerm->wtFlags & TERM_ORINFO)!=0 ,2,2,4
 pWInfo->untestedTerms ,2,2,4
 WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ ,2,2,4
 iCol==0 ,2,2,4
atomicMode == BitmapAtomic,2,2,4
!m_purgeableData,2,2,4
 (pUpper->eOperator & (WO_LT|WO_LE))!=0 ,2,2,4
!object || object->isCounter(),2,2,4
 iCol<0 || iCol<p->nColumn ,2,2,4
const_pool - code_ptr <= CONST_POOL_ALIGNMENT,2,2,4
 pPager->errCode || pPager->eState!=PAGER_ERROR ,2,2,4
 pcacheCheckSynced(pCache) ,2,2,4
 db->init.iDb==0 || db->init.busy ,2,2,4
 pTo->db==pFrom->db ,2,2,4
index != PropertyName::NotAnIndex,2,2,4
"webkit_network_response_get_uri(response), ==, ""http://debian.org/""",2,2,4
"jsCFEmptyString, """"",2,2,4
!m_pushedChar1,2,2,4
 pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,2,2,4
 mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock ,2,2,4
 p->xUnlockNotify ,2,2,4
!object || object->isRubyRun(),2,2,4
 rc!=SQLITE_SCHEMA ,2,2,4
 nKey==4 ,2,2,4
 (pList->flags&PGHDR_NEED_SYNC)==0 ,2,2,4
 p->explain==0 ,2,2,4
 pPager->journalMode==PAGER_JOURNALMODE_WAL ,2,2,4
"common, current",2,2,4
 pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) ,2,2,4
 zData!=0 ,2,2,4
 pagerUseWal(pPager)==0 ,2,2,4
 pCache->nPage==nPage ,2,2,4
!is_finalized() && position_ < buffer_.length(),2,2,4
isTransition(),2,2,4
asObject(value)->isGlobalObject(),2,2,4
 zTerm && nTerm>0 ,2,2,4
 pLeft->iColumn!=(-1) ,2,2,4
 pNew->pInode==NULL ,2,2,4
 pLock->pBtree->inTrans>=pLock->eLock ,2,2,4
"webkit_web_history_item_get_title(currentItem), ==, ""Site 2""",2,2,4
 ppStmt ,2,2,4
m_type == NumberType,2,2,4
hasVarNumber(),2,2,4
 !zName || xDel!=SQLITE_DYNAMIC ,2,2,4
dst != TMP_REG1,2,2,4
 pInfo->aReadMark[0]==0 ,2,2,4
 (PAGER_JOURNALMODE_OFF & 5)==0 ,2,2,4
 pTab->addColOffset>0 ,2,2,4
immediate->hasConstant(),2,2,4
 pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 ,2,2,4
 pPager->dbOrigSize<=pPager->dbHintSize ,2,2,4
m_virtualRegister != InvalidVirtualRegister,2,2,4
m_index != SegmentSize,2,2,4
"selectedFiles[1], ==, ""/foo/bar""",2,2,4
!m_used[index],2,2,4
firstHalf,2,2,4
m_data[index].name != InvalidVirtualRegister,2,2,4
 READ_LOCK+1==WRITE_LOCK ,2,2,4
 yyact == YY_ERROR_ACTION ,2,2,4
 sqlite3GlobalConfig.nRefInitMutex==0 ,2,2,4
 pOp!=0 ,2,2,4
 db==0 || p->pUnlockConnection!=db ,2,2,4
"w, ""QStylePainter::QStylePainter"", ""Widget must be non-zero""",2,2,4
m_didStart == m_didEnd,2,2,4
 pagerUseWal(p)==0 ,2,2,4
 z[0]!=0 ,2,2,4
script == HB_Script_Thai,2,2,4
 pVTab->nRef>0 ,2,2,4
size > m_size,2,2,4
m_adoptionIsRequired,2,2,4
hasID(),2,2,4
 csr.nSegment>0 ,2,2,4
 mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch ,2,2,4
leadingZeros < 24,2,2,4
!scrollbar || scrollbar->isCustomScrollbar(),2,2,4
horizontalPolicy == GTK_POLICY_AUTOMATIC,2,2,4
" !ExprHasProperty(pColExpr, EP_IntValue) ",2,2,4
 pParse->iCacheLevel==0 ,2,2,4
 pBt->nPage>0 ,2,2,4
 db->autoCommit==0 || db->nVTrans==0 ,2,2,4
index < length(),2,2,4
 pPage->nCell>0 ,2,2,4
 pEType!=0 ,2,2,4
"atk_text_get_n_selections(paragraph2), ==, 1",2,2,4
 size>=0 ,2,2,4
property.name,2,2,4
m_doctypeData->m_hasPublicIdentifier,2,2,4
 pDbPage->pBt==pBt ,2,2,4
 pCsr->eState!=CURSOR_REQUIRESEEK ,2,2,4
 useJournal || pPager->tempFile ,2,2,4
ATK_IS_TEXT(text),2,2,4
 sqlite3VdbeCheckMemInvariants(p) ,2,2,4
 pbegin>addr ,2,2,4
 pPage->pLruPrev==0 && pPage->pLruNext==0 ,2,2,4
m_tableSizeMask,2,2,4
 !isSavepnt ,2,2,4
((insn[2] & 0xff00) == BT_OPCODE) || ((insn[2] & 0xff00) == BF_OPCODE),2,2,4
 q - (unsigned char *)p <= FTS3_VARINT_MAX ,2,2,4
"text, ==, ""1. A list item""",2,2,4
"X86Registers::xmm0 == 0, xmm0_is_0",2,2,4
 tempFile==PAGER_LOCKINGMODE_NORMAL || tempFile==PAGER_LOCKINGMODE_EXCLUSIVE ,2,2,4
"i >= 0 && i < p.size(), ""QList<T>::take"", ""index out of range""",2,2,4
 pName1->z ,2,2,4
 pPage->nOverflow==1 ,2,2,4
vm.structureStructure,2,2,4
 pPager->eLock>=eLock ,2,2,4
m_type != QAccessible::TextInserted,2,2,4
 !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 ,2,2,4
 pKeyDup==0 ,2,2,4
 pCsr->nRowAvg>0 ,2,2,4
 *pp==pId ,2,2,4
 idx>=0 && idx<pPage->nCell ,2,2,4
 pPgOld ,2,2,4
 (p->selFlags & SF_Expanded)!=0 ,2,2,4
 eDest==SRT_Discard ,2,2,4
length <= static_cast<unsigned>(s->length()),2,2,4
 p->owner==tid ,2,2,4
 get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild ,2,2,4
 isSavepnt || pDone==0 ,2,2,4
pBt[0],2,2,4
 pOp->p4.ai ,2,2,4
array,2,2,4
 (h>='0' && h<='9') || (h>='a' && h<='f') || (h>='A' && h<='F') ,2,2,4
pX->pLeft,2,2,4
m_lineTo,2,2,4
"sizeof(Register) == sizeof(WriteBarrier<Unknown>), Register_must_be_same_size_as_WriteBarrier_Unknown",2,2,4
"jsNull, ""null""",2,2,4
 iTrigDb==iDb || iTrigDb==1 ,2,2,4
 pNextTo->pPrevTo==0 ,2,2,4
 flags==EXPRDUP_REDUCE || flags==0 ,2,2,4
 EIGHT_BYTE_ALIGNMENT(aSpace1) ,2,2,4
 p->eLock>=EXCLUSIVE_LOCK ,2,2,4
 pInfo->nBackfill==pWal->hdr.mxFrame ,2,2,4
!object || object->isRenderMultiColumnBlock(),2,2,4
diff <= 524287 && diff >= -524288 && (jump->flags & IS_COND),2,2,4
 (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 ,2,2,4
 rc==SQLITE_OK || pFile->pMethods==0 ,2,2,4
 iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) ,2,2,4
typeInfo().type() == StringType,2,2,4
index < FPRInfo::numberOfRegisters,2,2,4
m_variables.isEmpty(),2,2,4
 iCol>=0 && iCol<pEList->nExpr ,2,2,4
 N >= ROUND8(sizeof(*p)) ,2,2,4
(position < pool->m_start) || (position > static_cast<void*>(pool)),2,2,4
"true, true_is_true",2,2,4
 pOp->p4.pI64!=0 ,2,2,4
 (p->selFlags & SF_Resolved)==0 ,2,2,4
 db->flags&SQLITE_CountRows ,2,2,4
 u<=pKeyInfo->nField + 1 ,2,2,4
"G_OBJECT(backForwardList)->ref_count, ==, 1",2,2,4
 pOp->opcode==OP_InsertInt ,2,2,4
 idx>=1 && idx<=15 ,2,2,4
m_layoutStateDisableCount > 0,2,2,4
 (nBytes&(nBytes-1))==0 ,2,2,4
isUInt4(),2,2,4
 TK_LSHIFT==OP_ShiftLeft ,2,2,4
BtCursor *pCur,2,2,4
!object || object->isMeter(),2,2,4
 pWal->exclusiveMode==0 ,2,2,4
 pVtab->pModule!=0 ,2,2,4
 op!=TK_LT || c==WO_LT ,2,2,4
m_nextToFinalize->next(),2,2,4
 1==sqlite3BtreeIsInTrans(pMain) ,2,2,4
 p->rSetup==0 || pTemplate->rSetup==0 || p->rSetup==pTemplate->rSetup ,2,2,4
 sqlite3BtreeCursorIsValid(u.am.pCrsr) ,2,2,4
 desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE || desiredEnc==SQLITE_UTF16BE ,2,2,4
 pItem && pSrc->nSrc==1 ,2,2,4
 sqlite3_mutex_held(p->pGroup->mutex) ,2,2,4
 EIGHT_BYTE_ALIGNMENT(pPager->jfd) ,2,2,4
siz > 0,2,2,4
m_valid,2,2,4
 pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize,2,2,4
 p->pTabSchema!=0 ,2,2,4
 pCsr->nDoc>0 ,2,2,4
!m_canFill,2,2,4
asObject(value)->inherits(&InternalFunction::s_info),2,2,4
sizeOfConstantPool() - m_uninterruptedConstantSequenceBegin <= constSpace,2,2,4
!(flags & EX86_SHIFT_INS) || a == SLJIT_PREF_SHIFT_REG,2,2,4
" (x = va_arg(ap,int))!=0 ",2,2,4
divot.offset >= divotStart.offset,2,2,4
 pMem->enc!=0 ,2,2,4
 ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint ,2,2,4
!isZombie(owner),2,2,4
!m_bumpRemaining,2,2,4
 pFd->nFetchOut>=0 ,2,2,4
 WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE ,2,2,4
 pList->nExpr==2 ,2,2,4
" sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) ",2,2,4
m_deque == other.m_deque,2,2,4
m_streamCurrent < m_streamEnd,2,2,4
" pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, pParse->azVar[pExpr->iColumn-1])==0 ",2,2,4
" walFramePgno(pWal, iFrame)!=1 ",2,2,4
 p->nOp - i >= 3 ,2,2,4
 zFile[0]!=0 ,2,2,4
 nByte>=0 ,2,2,4
" sqlite3ExprIsInteger(pE, &i)==0 ",2,2,4
 p->pgno>0 ,2,2,4
 pParse->nErr==0 || rc ,2,2,4
 PAGER_JOURNALMODE_DELETE==0 ,2,2,4
 p->pPrev==0 || p->pPrev->db==p->db ,2,2,4
 !pBt->pCursor ,2,2,4
 sizeof(zMagicHeader)==16 ,2,2,4
 pCol->affinity-SQLITE_AFF_TEXT >= 0 ,2,2,4
!object || object->isRenderMultiColumnSet(),2,2,4
 p->eType==FTSQUERY_AND ,2,2,4
m_type != QAccessible::TextRemoved,2,2,4
 iType-2 < ArraySize(winMutex_staticMutexes) ,2,2,4
 pIx->pSchema==pTab->pSchema ,2,2,4
 cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) ,2,2,4
op2 <= 0xff && rd <= 15,2,2,4
anchorType() == PositionIsOffsetInAnchor,2,2,4
 pBt->nTransaction>0 ,2,2,4
" !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) ",2,2,4
 pLater->sharable ,2,2,4
 !pLater->locked || pLater->wantToLock>0 ,2,2,4
" sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) ",2,2,4
dd <= 15 && sm <= 15,2,2,4
 MEM_Str==(MEM_Blob>>3) ,2,2,4
 idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0 || idxNum==FTS4AUX_LE_CONSTRAINT || idxNum==FTS4AUX_GE_CONSTRAINT || idxNum==(FTS4AUX_LE_CONSTRAINT|FTS4AUX_GE_CONSTRAINT) ,2,2,4
 TOLERANCE_NONZERO ,2,2,4
 isMainJrnl || pDone ,2,2,4
structure->isValidOffset(offset),2,2,4
 iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) ,2,2,4
 pIndex->onError!=OE_None ,2,2,4
 (PAGER_JOURNALMODE_DELETE & 5)==0 ,2,2,4
!object || (object->isRenderMathMLBlock() && toRenderMathMLBlock(object)->isRenderMathMLFraction()),2,2,4
isUInt8(),2,2,4
 pVal==0 || pVal->db==db ,2,2,4
p.first != end(),2,2,4
m_spillFormat == DataFormatNone,2,2,4
 nList<=HASHTABLE_NPAGE && nList>0 ,2,2,4
 pIn!=0 ,2,2,4
 !pReader->pOffsetList ,2,2,4
 pE->aMI==0 ,2,2,4
 p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK ,2,2,4
pArg->z < p->z,2,2,4
m_nestedIsolateCount >= 1,2,2,4
 pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) ,2,2,4
((first->from == second->from) && (first->to == second->to)) || ((first->from == second->to) && (first->to == second->from)),2,2,4
 p->pLimit==0 ,2,2,4
nKey==elem->nKey,2,2,4
!error == !!m_codeBlockForConstruct,2,2,4
 pCsr->nTerm==0 ,2,2,4
 pOut->zMalloc==pOut->z ,2,2,4
 to_op==OP_ToText || aff!=SQLITE_AFF_TEXT ,2,2,4
 sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 ,2,2,4
title,2,2,4
" !ExprHasProperty(pE, EP_xIsSelect) ",2,2,4
 leafCorrection==0 ,2,2,4
shaper_item->item.script == HB_Script_Hebrew,2,2,4
stringLength >= from + len,2,2,4
 i > mem3.aPool[i-1].u.hdr.prevSize ,2,2,4
 pIter ,2,2,4
 iLimit>0 ,2,2,4
 pPager->eLock>=SHARED_LOCK ,2,2,4
 fd>=0 ,2,2,4
m_returnType == Value || m_returnType == VoidPtr || m_returnType == Int || m_returnType == Cell,2,2,4
 u.az.oc==OP_SeekLt || u.az.oc==OP_SeekLe ,2,2,4
uint(i) < 4u,2,2,4
q_sm,2,2,4
 eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,2,2,4
"jsZero, ""0""",2,2,4
" sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 ",2,2,4
 argc>1 ,2,2,4
 u.bf.pC->isTable ,2,2,4
 nPrefix<nTerm ,2,2,4
m_object,2,2,4
 pPg->pgno!=PAGER_MJ_PGNO(pPager) ,2,2,4
!m_pushedChar2,2,2,4
 id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) ,2,2,4
m_registerFormat && m_registerFormat != DataFormatDouble,2,2,4
isUInt12(),2,2,4
 len==sqlite3_value_bytes(argv[0]) ,2,2,4
frameworkLibrary,2,2,4
s.length() > 1,2,2,4
shouldReallocateBuffer(newCapacity),2,2,4
 fg&(MEM_Int|MEM_Real) ,2,2,4
 !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize ,2,2,4
!value.isZombie(),2,2,4
shaper_item->item.script == HB_Script_Greek,2,2,4
 j==0 || j>i+size ,2,2,4
(*(insn + 1) & 0xfc000000) == 0x34000000,2,2,4
WEBKIT_DOM_IS_EVENT(event),2,2,4
 db->mallocFailed || pItem->pExpr==pSpan->pExpr ,2,2,4
 pCol->iMem>0 ,2,2,4
common->has_set_som,2,2,4
"G_OBJECT(webFrame)->ref_count, ==, 1",2,2,4
m_deque->m_iterators == this,2,2,4
" strcmp(pDb->zName,""vacuum_db"")==0 ",2,2,4
 pMaskSet->n < ArraySize(pMaskSet->ix) ,2,2,4
 nNew==1 ,2,2,4
childBefore == (offset ? container->childNode(offset - 1) : 0),2,2,4
 pList!=0 || pParse->db->mallocFailed!=0 ,2,2,4
first,2,2,4
!object || object->isVideo(),2,2,4
compiler->cpool_diff == CONST_POOL_EMPTY || compiler->size - compiler->cpool_diff < MAX_DIFFERENCE(4092),2,2,4
m_bank == other.m_bank,2,2,4
m_type != QAccessible::TextSelectionChanged,2,2,4
rm != ARMRegisters::pc,2,2,4
"jsOneString, ""1""",2,2,4
"sizeof(TO) == sizeof(FROM), WTF_bitwise_cast_sizeof_casted_types_is_equal",2,2,4
size < allocation.size(),2,2,4
y<m_height,2,2,4
 pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) ,2,2,4
size <= m_size,2,2,4
 pcache1.nFreeSlot<=pcache1.nSlot ,2,2,4
m_direction == OtherNeutral,2,2,4
 pParent->isInit ,2,2,4
 pVdbe!=0 ,2,2,4
 p->op==SQLITE_INDEX_CONSTRAINT_MATCH ,2,2,4
 p->lock.pBtree==p && p->lock.iTable==1 ,2,2,4
m_type == DateType,2,2,4
(pg1+nPage)>pPg->pgno,2,2,4
 pExpr->op!=TK_ISNULL || op==OP_NotNull ,2,2,4
counter <= 31,2,2,4
stateKey == 0 || stateKey & Qt::KeyboardModifierMask,2,2,4
arrayIndex < 3,2,2,4
waitingForStyleAvailable(),2,2,4
"webkit_network_request_get_uri(request), ==, ""http://debian.org/""",2,2,4
"jsEmptyString, """"",2,2,4
"soup_session_get_feature(session, SOUP_TYPE_CONTENT_DECODER) != NULL",2,2,4
m_cubicTo,2,2,4
 rc!=SQLITE_BUSY ,2,2,4
offset <= static_cast<unsigned>(s->length()),2,2,4
 TK_NOT==OP_Not ,2,2,4
 rc!=SQLITE_OK || *ppTok ,2,2,4
 !pPgOld || pPgOld->nRef==1 ,2,2,4
 (rc&0xff)!=SQLITE_BUSY ,2,2,4
 zVal[nVal]=='\'' ,2,2,4
 iLastPg>nFin ,2,2,4
!(arg & 0xf0),2,2,4
sizeof(int) <= sizeof(char *),2,2,4
 sqlite3_value_type(argv[1])!=SQLITE_NULL ,2,2,4
 CURSOR_VALID==pCur->eState ,2,2,4
 azResult!=0 ,2,2,4
!m_isDouble,2,2,4
globalObject->scriptExecutionContext()->isDocument(),2,2,4
 pPg || !MEMDB ,2,2,4
 pOld->hdrOffset==0 ,2,2,4
 bArgList==0 ,2,2,4
 mem.pFirst==pHdr ,2,2,4
 p->rc!=SQLITE_IOERR_BLOCKED ,2,2,4
 rc==SQLITE_OK || pPager->eState==PAGER_READER ,2,2,4
"X86Registers::xmm3 == 3, xmm3_is_3",2,2,4
index <= m_end,2,2,4
 aiCol[i]!=pTab->iPKey ,2,2,4
 n==pPage->pgno && e==PTRMAP_OVERFLOW1 ,2,2,4
 p && p->pMem && p->pFunc && p->pFunc->xStep ,2,2,4
m_hasRareData,2,2,4
 (&p[1])==pEnd || p[0].db==p[1].db ,2,2,4
isOpcode(opcode),2,2,4
!m_cache,2,2,4
 p->zSql==0 ,2,2,4
 pbOpen==0 || *pbOpen==0 ,2,2,4
" !ExprHasProperty(pE->pLeft, EP_IntValue) ",2,2,4
 TK_AND==OP_And ,2,2,4
 eType!=PTRMAP_ROOTPAGE ,2,2,4
m_position != m_endPosition,2,2,4
m_offsetInContainer >= 0,2,2,4
 pToken ,2,2,4
 szNew <= MX_CELL_SIZE(pBt) ,2,2,4
 p->flags&PGHDR_DIRTY ,2,2,4
info.registerFormat() != DataFormatJSDouble,2,2,4
!object || object->isListItem(),2,2,4
obj,2,2,4
size() < capacity(),2,2,4
 PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 ,2,2,4
 pMem->u.pRowSet!=0 ,2,2,4
y>=0,2,2,4
m_worldSet.contains(world),2,2,4
reinterpret_cast<intptr_t>(ptr) & 1,2,2,4
 pU8[nReserve]==0x65 ,2,2,4
newPosition >= 0 && newPosition < priv->length(),2,2,4
index > 0,2,2,4
 *pRc!=SQLITE_OK || pRight->bStart ,2,2,4
!(inst & 0xffff0000),2,2,4
 iNextLeaf==iFree ,2,2,4
 pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol ,2,2,4
 pCur->skipNext==0 || pCur->eState!=CURSOR_VALID ,2,2,4
 pInode!=0 ,2,2,4
 PENDING_BYTE+1==RESERVED_BYTE ,2,2,4
(static_cast<char*>(previousPool->m_current) + size) > static_cast<void*>(previousPool),2,2,4
 r<nMaxCells ,2,2,4
isUInt32(),2,2,4
address.type == ArmAddress::HasIndex,2,2,4
static_cast<unsigned>(reg) < 16,2,2,4
 SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) ,2,2,4
 idx1<=szHdr1 || CORRUPT_DB ,2,2,4
 pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) ,2,2,4
 pOffset == 0 ,2,2,4
!isZombie(m_cell),2,2,4
!isFull(),2,2,4
 pPhrase->doclist.pList[nNew]=='\0' ,2,2,4
 pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab,2,2,4
 db==0 || db->pnBytesFreed==0 ,2,2,4
currentItem,2,2,4
"i >= 0 && i < d->size, ""QVector<T>::replace"", ""index out of range""",2,2,4
"commandName == ""insertText:""",2,2,4
 !pCur->apPage[0]->intKey || !pCur->pKey ,2,2,4
" !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) ",2,2,4
m_cache,2,2,4
 pPager->eState>=PAGER_READER && !MEMDB ,2,2,4
 pWal->nWiData>walFramePage(pWal->hdr.mxFrame) ,2,2,4
 p->tempFile==0 || pPager->changeCountDone ,2,2,4
" db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",2,2,4
 (pTrigger && tmask) || (pTrigger==0 && tmask==0) ,2,2,4
"X86Registers::xmm5 == 5, xmm5_is_5",2,2,4
 first != NULL ,2,2,4
 info.nData==(u32)(nData+nZero) ,2,2,4
ATK_IS_OBJECT(comboBox),2,2,4
 EIGHT_BYTE_ALIGNMENT(zCsr) ,2,2,4
isTransition() || isReplace(),2,2,4
colHeader == 0,2,2,4
!it->m_previous,2,2,4
"pos >= 0 && pos < INT_MAX, ""QContiguousCache<T>::insert"", ""index out of range""",2,2,4
n <= m_length,2,2,4
 nOrderBy>=nExpr || db->mallocFailed ,2,2,4
 n<=pTab->nCol ,2,2,4
needed/fragmentSize > head->allocated,2,2,4
 pDatabase==0 || pTable!=0 ,2,2,4
 (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 ,2,2,4
 nDoclist>0 || iDelta==iDocid ,2,2,4
"Int32Tag == JSValue::Int32Tag, Int32Tag_out_of_sync",2,2,4
WEBKIT_DOM_IS_HTML_COLLECTION(rows),2,2,4
 pTerm->pExpr!=0 ,2,2,4
*expectedCharacters++,2,2,4
 rc==SQLITE_OK || pPage==0 ,2,2,4
 db->aDb[i].zName!=0 ,2,2,4
 !isView ,2,2,4
i >= 0 && i < m_len,2,2,4
args >= 0 && args <= 3,2,2,4
 rc!=SQLITE_OK || zErr==0 ,2,2,4
 p->pOffset==0 || p->pLimit!=0 ,2,2,4
 !db || sqlite3_mutex_held(db->mutex) ,2,2,4
fixture->has_been_first_visually_non_empty_layout,2,2,4
 (p->selFlags & SF_Aggregate)==0 ,2,2,4
 idx>0 ,2,2,4
 PAGER_JOURNALMODE_OFF==2 ,2,2,4
m_cachedPropertyType == Custom,2,2,4
!object || object->isFlexibleBox(),2,2,4
!const_ || const_->addr >= half_count,2,2,4
 pTab->iPKey<pTab->nCol ,2,2,4
 iSavepoint>=0 || op==SAVEPOINT_ROLLBACK ,2,2,4
 p1>=0 && p1<db->nDb ,2,2,4
 p->noSync ,2,2,4
argw,2,2,4
 pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) ,2,2,4
fpr != InvalidFPRReg,2,2,4
 n>=1 && n<SQLITE_SHM_NLOCK ,2,2,4
ErrorString*,2,2,4
 j<pTabList->nSrc ,2,2,4
 UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET ,2,2,4
 TK_GT>TK_EQ ,2,2,4
isUInt5(),2,2,4
 *p1!=POS_END && *p1!=POS_COLUMN ,2,2,4
 p->nPgsz>0 || rc!=SQLITE_OK ,2,2,4
 pPager->journalMode==PAGER_JOURNALMODE_DELETE || pPager->journalMode==PAGER_JOURNALMODE_MEMORY || pPager->journalMode==PAGER_JOURNALMODE_WAL ,2,2,4
 b.rc!=SQLITE_OK ,2,2,4
!head->root || !fragment(head->root)->parent,2,2,4
sizeof(T) == sizeof(char),2,2,4
 n>3 && n<=9 ,2,2,4
 pSrc->a[iRight].pTab ,2,2,4
i < NUM_REGS && !m_data[i].lockCount,2,2,4
!document || document->isImageDocument(),2,2,4
 pFKey->nCol==1 || (aiFree && pIdx) ,2,2,4
info.registerFormat() == DataFormatDouble,2,2,4
m_type == HTMLToken::Comment,2,2,4
scratches >= 0 && scratches <= SLJIT_NO_TMP_REGISTERS,2,2,4
 pTop->pVdbe ,2,2,4
 (op==TK_UPDATE)==(pChanges!=0) ,2,2,4
!(reinterpret_cast<intptr_t>(to) & 1),2,2,4
 pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) ,2,2,4
m_type == AnimatedInteger,2,2,4
newLength <= m_length,2,2,4
m_type == AnimatedLength,2,2,4
!(m_value & ~0x1f),2,2,4
 zRep==sqlite3_value_text(argv[2]) ,2,2,4
m_status.last != NonSpacingMark && m_status.last != BoundaryNeutral && m_status.last != RightToLeftEmbedding && m_status.last != LeftToRightEmbedding && m_status.last != RightToLeftOverride && m_status.last != LeftToRightOverride && m_status.last != PopDirectionalFormat,2,2,4
m_opaqueRoots.isEmpty(),2,2,4
 mem3.szMaster>=nBlock ,2,2,4
 iBuddy>=0 ,2,2,4
!(a & SLJIT_IMM) || !(flags & EX86_SSE2),2,2,4
ipos >= 0,2,2,4
 pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER ,2,2,4
deletionHasBegun(),2,2,4
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID ,2,2,4
position <= m_current,2,2,4
 wrFlag==0 || wrFlag==1 ,2,2,4
reg_map[TMP_REG2] <= 7 && dst != TMP_REG2,2,2,4
 sqlite3PcacheRefCount(pPager->pPCache)==0 ,2,2,4
pp,2,2,4
age >= 0,2,2,4
widget->testAttribute(Qt::WA_StaticContents),2,2,4
 pPager->errCode!=SQLITE_OK ,2,2,4
 pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db ,2,2,4
 pnBlob ,2,2,4
 db->aDb[1].pSchema ,2,2,4
 (pDest->tabFlags & TF_Autoincrement)==0 ,2,2,4
"atk_hyperlink_get_end_index(hLink), ==, 9",2,2,4
 pOp->p2<SQLITE_N_BTREE_META ,2,2,4
 pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) ,2,2,4
 pName1 && pName2 ,2,2,4
 pIn1!=pOut ,2,2,4
 !db->xCollNeeded || !db->xCollNeeded16 ,2,2,4
!m_condition,2,2,4
 pExpr->x.pList==0 ,2,2,4
 (isMainJrnl&~1)==0 ,2,2,4
 sizeof(i64)==8 || sizeof(i64)==4 ,2,2,4
"kKeybits - kHashbits + kValuebits <= kTbits, entry_size_must_be_big_enough",2,2,4
((inst[0] & 0xfbf0) == (MOVW >> 16)) && ((inst[2] & 0xfbf0) == (MOVT >> 16)) && dst == (inst[3] & 0x0f00),2,2,4
 nSuspect<=nSegment ,2,2,4
 zWalName && zWalName[0] ,2,2,4
iStart<=iEnd,2,2,4
 to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC ,2,2,4
 pP1!=0 ,2,2,4
 nShift<=nDesired ,2,2,4
exec->callee(),2,2,4
 pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) ,2,2,4
 iCurrent<=iMinPos ,2,2,4
 pReader->aDoclist ,2,2,4
!std::numeric_limits<T>::is_signed,2,2,4
!widget || widget->isPluginViewBase(),2,2,4
index < arraySize,2,2,4
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 ,2,2,4
 !sqlite3IsNaN(*pOp->p4.pReal) ,2,2,4
 iBlock>=0 && iBlock<mem5.nBlock ,2,2,4
segmentIndex <= m_segments.size(),2,2,4
 WIN_SHM_BASE==WALINDEX_LOCK_OFFSET ,2,2,4
!value.isGetterSetter() && !(attributes & Accessor),2,2,4
 pTrigger->pSchema==pTab->pSchema || pTrigger->pSchema==db->aDb[1].pSchema ,2,2,4
 pTree->aData==(char *)&pTree[1] ,2,2,4
length > 1,2,2,4
 pData0<=pLast ,2,2,4
(*insn & LdrPcImmediateInstructionMask) == LdrPcImmediateInstruction,2,2,4
!widget || widget->isPluginView(),2,2,4
currentLowest != NUM_REGS && currentSpillOrder != SpillHintInvalid,2,2,4
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) ",2,2,4
 contentOffset<=usableSize ,2,2,4
pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0 || pVal->db->mallocFailed ,2,2,4
 pList==0 ,2,2,4
isNumber(),2,2,4
pSelect->pSrc,2,2,4
 pLower || pUpper ,2,2,4
 pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0) == (int)sqlite3VdbeSerialTypeLen(serial_type) ,2,2,4
 rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr ,2,2,4
 argc==1 || p==0 || p->n>0x7fffffff || p->n==sqlite3_aggregate_count(context) ,2,2,4
 (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 ,2,2,4
 pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) ,2,2,4
 nBytes>0 ,2,2,4
 iPrev>=0 ,2,2,4
 pExpr->op!=TK_GT || op==OP_Le ,2,2,4
 aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED ,2,2,4
 pPager->eState==PAGER_READER || !pbOpen ,2,2,4
 iBlock+size-1<(u32)mem5.nBlock ,2,2,4
*node == e || (*node)->next,2,2,4
 p->sharable || 0==*ppIter ,2,2,4
m_origin != m_bound,2,2,4
 pC->isOrdered ,2,2,4
" (res==0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)==0) || (res<0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)<0) || (res>0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)>0) || CORRUPT_DB ",2,1,3
 pSorter->nPMA==0 ,1,1,2
 z && pColl && pColl->xCmp ,1,1,2
m_technique == Constant,1,1,2
 (pMem->flags & MEM_Int)!=0 ,1,1,2
"been_to_resource_request_starting, ==, 2",1,1,2
 pPage->isPinned==1 ,1,1,2
 testAddr>0 || pParse->db->mallocFailed ,1,1,2
kind == CodeForCall,1,1,2
!node || (node->hasTagName(SVGNames::radialGradientTag) || node->hasTagName(SVGNames::linearGradientTag)),1,1,2
set2,1,1,2
!needsSectionRecalc(),1,1,2
 pVal==0 || pVal->db==pParse->db ,1,1,2
formObject,1,1,2
 zFilename!=0 ,1,1,2
global,1,1,2
track->type() == TrackBase::TextTrack,1,1,2
 pOrderBy || (pCost->plan.wsFlags&WHERE_ORDERBY)==0 ,1,1,2
"codestart, &firstcharflags, FALSE",1,1,2
ATK_IS_TABLE(table1),1,1,2
it != map.end(),1,1,2
 idx1==szHdr1 && rc ,1,1,2
 p->bHasStat==0 || p->bHasStat==1 ,1,1,2
GET_OPCODE(op) >= SLJIT_MOV && GET_OPCODE(op) <= SLJIT_CLZ,1,1,2
edge.useKind() == UntypedUse || edge.useKind() == KnownCellUse,1,1,2
&ptr != this,1,1,2
!webkit_download_get_total_size(download),1,1,2
attribute.m_nameRange.m_end,1,1,2
m_type == GetById,1,1,2
 sizeof(t)+sizeof(randomnessPid)<=(size_t)nBuf ,1,1,2
m_shape,1,1,2
m_type == Character || m_type == Comment || m_type == StartTag || m_type == EndTag,1,1,2
m_bounds.size() >= requiredCapacity,1,1,2
m_nextInputCharacter == source.currentChar(),1,1,2
 u.ag.apVal || u.ag.n==0 ,1,1,2
 pIdx==0 || bStat3 || pIdx->nSample==0 ,1,1,2
 p->pForest==0 ,1,1,2
iter != end,1,1,2
"reg_map[SLJIT_SCRATCH_REG1] < 8, temporary_reg1_is_loreg",1,1,2
"textChangedResult, ==, ""|1|0|11|'foo bar baz'|""",1,1,2
 p->eLock>=SHARED_LOCK ,1,1,2
 u.at.iDb>=0 && u.at.iDb<db->nDb ,1,1,2
 ArraySize(pLoop->aLTermSpace)==4 ,1,1,2
length < MAX_ARRAY_INDEX,1,1,2
"::testing::internal::CmpHelperSTRCASENE, s1, s2",1,1,2
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit ,1,1,2
!(op & (SLJIT_INT_OP | SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
"isValidIterator(alast), ""QList::erase"", ""The specified iterator argument 'alast' is invalid""",1,1,2
!m_isReadOnly,1,1,2
 isSorter(pC)==0 ,1,1,2
m_requestedState != SQLTransactionState::Idle,1,1,2
mode != KeyMustBePresentInArray || size,1,1,2
!node || node->hasTagName(HTMLNames::objectTag),1,1,2
 (*pNum)==SMALLEST_INT64 ,1,1,2
useKind >= 0 && useKind < LastUseKind,1,1,2
atk_object_get_role(hLinkObject1) == ATK_ROLE_LINK,1,1,2
 pC->rowidIsValid==0 ,1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_C)),1,1,2
m_childNodeList = list,1,1,2
 ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) ,1,1,2
 nRef==sqlite3PagerRefcount(pPager) ,1,1,2
!object || object->isCanvas(),1,1,2
jitType != None,1,1,2
 (u.be.pMem->flags & MEM_Int)!=0 ,1,1,2
"google::severity < google::NUM_SEVERITIES, INVALID_REQUESTED_LOG_SEVERITY",1,1,2
 nLoop<=pWInfo->pTabList->nSrc ,1,1,2
 u.bm.pC->deferredMoveto==0 ,1,1,2
ATK_OBJECT(paragraph2),1,1,2
 0==sqlite3LogEst(1) ,1,1,2
m_returnType == VoidPtr || m_returnType == Cell,1,1,2
marker,1,1,2
 pItem->u.x.iOrderByCol>0 ,1,1,2
 ( decoder->len_buildchar == 0 ) == ( decoder->buildchar == NULL ) ,1,1,2
fixture->loaded,1,1,2
 p->nIndex>=1 ,1,1,2
"!atk_selection_is_child_selected(atkSelection, 0)",1,1,2
(void*)1 == JSObjectGetPrivate(object),1,1,2
n < size(),1,1,2
 u.ao.nField>0 && pOp->p2>0 && pOp->p2+u.ao.nField<=p->nMem+1 ,1,1,2
m_state == FreeListed,1,1,2
 pPrior->pRightmost!=pPrior ,1,1,2
"text, ==, ""A text header""",1,1,2
m_collectionType == static_cast<unsigned>(collectionType),1,1,2
 eType!=SQLITE_OPEN_MAIN_DB ,1,1,2
 nEq>=1 ,1,1,2
 pIn1<=&aMem[p->nMem] ,1,1,2
"mode, mode == ManualOperandSpeculation || (edge.useKind() == NumberUse || edge.useKind() == KnownNumberUse || edge.useKind() == RealNumberUse)",1,1,2
ATK_IS_TEXT(shortText2),1,1,2
"atk_text_get_text(ATK_TEXT(item1), 0, -1), ==, ""1. text only""",1,1,2
 pBuilder->nRecValid<nEq ,1,1,2
m_jumpsToLink.isEmpty(),1,1,2
m_ref.m_code.executableAddress(),1,1,2
ascii_isspace('\r'),1,1,2
 type==NC_IsCheck || type==NC_PartIdx ,1,1,2
aend <= d->end(),1,1,2
 iNewLevel>=(iIndex*FTS3_SEGDIR_MAXLEVEL) ,1,1,2
"text, ==, ""Hello world.""",1,1,2
fixture->documentFrame,1,1,2
"expectedCharacter, currentChar() == expectedCharacter",1,1,2
 !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE || type==SQLITE_WIN32_TEMP_DIRECTORY_TYPE ,1,1,2
cell->structure()->classInfo()->methodTable.copyBackingStore == JSObject::copyBackingStore,1,1,2
"atk_action_get_keybinding(ATK_ACTION(hLink1), 0), ==, """"",1,1,2
"JSValueIsEqual(context, v, arrayConstructor, NULL)",1,1,2
"atk_hyperlink_get_start_index(hLinkInListItem), ==, 20",1,1,2
(i) == 0 && (p) != SLJIT_UNUSED,1,1,2
 x<pIdx->pTable->nCol ,1,1,2
"jsCFStringWithCharacters, true",1,1,2
previousRun,1,1,2
iface,1,1,2
"QAtomicOpsSupport<sizeof(T)>::IsSupported, ""template parameter is an integral of a size not supported on this platform""",1,1,2
 pParse->nLabel==0 ,1,1,2
hasGlyphName,1,1,2
 pOrTerm->eOperator==0 ,1,1,2
!child->attached() || childAttachedAllowedWhenAttachingChildren(this),1,1,2
 (nVal==0)==(idxNum==FTS3_FULLSCAN_SEARCH) ,1,1,2
 pKeyInfo->nField>0 ,1,1,2
 mesh->vHead.next == &mesh->vHead ,1,1,2
 u.cb.n>=0 ,1,1,2
x,1,1,2
!is_finalized() && position_ + n < buffer_.length(),1,1,2
!m_value || !validateType(m_value),1,1,2
!inIsolate() || m_currentExplicitEmbeddingSequence.isEmpty(),1,1,2
"sizeof(T), ""Type argument of Q_DECLARE_METATYPE(T*) must be fully defined""",1,1,2
type() == NPVariantData::String,1,1,2
flags & ARG2_IMM,1,1,2
src == dst && srcw == dstw,1,1,2
m_families.size() == 1,1,1,2
 pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 ,1,1,2
 pParse->nTab>iCur+i+1 ,1,1,2
ATK_IS_TEXT(textEntry),1,1,2
 oc!=OP_SeekLT || r.default_rc==+1 ,1,1,2
hasStructureSet(),1,1,2
GTK_IS_FILE_FILTER(filter),1,1,2
common->req_char_ptr != 0,1,1,2
 memIsValid(u.cl.pName) ,1,1,2
"G_OBJECT(forwardItem)->ref_count, ==, 2",1,1,2
 OPFLAG_BULKCSR==BTREE_BULKLOAD ,1,1,2
 i<pIdx->nSample ,1,1,2
(delay_slot & DST_INS_MASK) == UNMOVABLE_INS || (delay_slot & DST_INS_MASK) == MOVABLE_INS || (delay_slot & DST_INS_MASK) == ((ins >> 25) & 0x1f),1,1,2
"getById, m_graph[getById].op == GetById",1,1,2
((op2 & ~Op2Immediate) <= 0xfff) || (((op2 & ~ImmediateForHalfWordTransfer) <= 0xfff)),1,1,2
!ATK_IS_TEXT(menuPopup),1,1,2
 (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) || zUtf8Name[sqlite3Strlen30(zUtf8Name)+1]==0 ,1,1,2
 pParent->nOverflow==0 || pParent->aOvfl[0].idx==iParentIdx ,1,1,2
!(ptr[1] & 0x0F00),1,1,2
!getFlag(IsShadowRootFlag) && !isSVGShadowRoot(),1,1,2
!m_bstr,1,1,2
 dirSync==0 || dirSync==1 ,1,1,2
 u.ar.desiredAutoCommit==1 ,1,1,2
child1(),1,1,2
i < storage->length(),1,1,2
 0 < db->nProgressOps ,1,1,2
 pWC->vmask==0 && pMaskSet->n==0 ,1,1,2
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || x>=0 ,1,1,2
structure()->totalStorageCapacity() == structure()->inlineCapacity(),1,1,2
m_technique == DisplacedInJSStack || m_technique == Int32DisplacedInJSStack || m_technique == DoubleDisplacedInJSStack || m_technique == CellDisplacedInJSStack || m_technique == BooleanDisplacedInJSStack,1,1,2
 pIter->pFile ,1,1,2
"textChangedResult, ==, ""|2|2|2|'\342\200\242\342\200\242'|""",1,1,2
newBytes > oldBytes,1,1,2
((op2 & ~OP2_IMM) <= 0xfff) || (((op2 & ~OP2_IMMh) <= 0xfff)),1,1,2
"it != iterator(d->end()), ""QMap::erase"", ""Unable to locate same key in erase after detach.""",1,1,2
enabled,1,1,2
"type, type == HTMLTagNodeListType",1,1,2
atk_object_get_role(item2) == ATK_ROLE_MENU_ITEM,1,1,2
"webkit_dom_html_element_get_inner_text(htmlElement), ==, names[i]",1,1,2
(lsb + width) <= 32,1,1,2
 sqlite3BtreeIsInTrans(pTo) ,1,1,2
w != ARMAssembler::InvalidImmediate,1,1,2
 u.bj.pC!=0 ,1,1,2
"!StringObject::AnonymousSlotCount, StringPrototype_stomps_on_your_anonymous_slot",1,1,2
 pCsr->pKeyInfo && pCsr->pBt==0 ,1,1,2
value < (1 << 30),1,1,2
nOverflow<3 || pOld->aOvfl[1].idx==pOld->aOvfl[2].idx-1,1,1,2
"element_text_equal_to(context, ""a"")",1,1,2
cs_,1,1,2
 33==sqlite3LogEst(10) ,1,1,2
iter.m_iterator != m_map.end(),1,1,2
 memIsValid(pMem) ,1,1,2
 db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 ,1,1,2
!(index & 1),1,1,2
m_size >= size,1,1,2
whichProperty < it->properties.size(),1,1,2
m_smallAllocationPool,1,1,2
 iLevel>=0 && iLevel<=RTREE_MAX_DEPTH ,1,1,2
 rc!=SQLITE_OK || nDocSize>0 ,1,1,2
!m_nestedIsolateCount,1,1,2
context.clipRectsType < NumCachedClipRectsTypes,1,1,2
value >= 0,1,1,2
dst == SLJIT_MEM1(SLJIT_LOCALS_REG),1,1,2
(sljit_sw)addr <= SIMM_MAX && (sljit_sw)addr >= SIMM_MIN,1,1,2
capacity() >= asize,1,1,2
atk_object_get_role(hLinkObject) == ATK_ROLE_COMBO_BOX,1,1,2
 winSysInfo.dwPageSize>0 ,1,1,2
values,1,1,2
(options&U_SHAPE_TEXT_DIRECTION_MASK) == U_SHAPE_TEXT_DIRECTION_LOGICAL,1,1,2
 nBuf>=0 ,1,1,2
 memIsValid(&u.bc.r.aMem[i]) ,1,1,2
"jsFalse, 0",1,1,2
" DbHasProperty(db, iDb, DB_SchemaLoaded) ",1,1,2
 -1-pOp->p2<p->nLabel ,1,1,2
m_checkedForSolidColor,1,1,2
"eglErrorCode == EGL_SUCCESS, ""Found %s"", toEGLErrorConstant(eglErrorCode)",1,1,2
strlen(markupPrefix) <= strlen(markup),1,1,2
 p == table + 518 ,1,1,2
this->structure()->propertyStorageCapacity() == JSFinalObject_inlineStorageCapacity,1,1,2
isStackingContainer() || !m_negZOrderList,1,1,2
atk_object_get_parent(axRoot) == axParent,1,1,2
!exception || !*exception,1,1,2
webkit_dom_node_has_child_nodes(WEBKIT_DOM_NODE(head)),1,1,2
 rc==SQLITE_OK || mxLevel==0 ,1,1,2
animatedValue <= SVGPropertyTraits<EnumType>::highestEnumValue(),1,1,2
 (FT_ULong)IP <= coderange->size ,1,1,2
startOffset < m_len,1,1,2
branchDirection == TakeFalse,1,1,2
 rc!=SQLITE_OK || bMaxSet ,1,1,2
"reg_map[SLJIT_SCRATCH_REG1] == 0, scratch_reg1_must_be_eax",1,1,2
 pDest->nMem==nResultCol ,1,1,2
"sizeof(uint32_t) == 4, uint32_t_is_four_bytes",1,1,2
 OP_SeekGE == OP_SeekLT+2 ,1,1,2
 v->prev == vPrev ,1,1,2
m_parameters.size(),1,1,2
 (u.cc.pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,1,1,2
!block->isPinned(),1,1,2
!m_segments.head()->m_top,1,1,2
 ! regUp->fixUpperEdge && ! regLo->fixUpperEdge ,1,1,2
 pIdx->zName || (pIdx->nColumn==1 && pIdx->aiColumn[0]==-1) ,1,1,2
 zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 ,1,1,2
"JSValueGetType(context, jsEmptyString) == kJSTypeString",1,1,2
!isAddress() && static_cast<GPRReg>(m_baseOrTag) != InvalidGPRReg,1,1,2
maxSingleCharacterString == 0xff,1,1,2
GET_OPCODE(op) >= SLJIT_ADDD && GET_OPCODE(op) <= SLJIT_DIVD,1,1,2
 p->a || p->nSrc==0 ,1,1,2
"::testing::internal::CmpHelperNE, val1, val2",1,1,2
!iter->from.isSet(),1,1,2
(total_size && free_blocks) || (!total_size && !free_blocks),1,1,2
"atk_text_get_n_selections(paragraph2), ==, 0",1,1,2
"element_text_equal_to(context, ""abc"")",1,1,2
!source.provider()->source().isNull(),1,1,2
 memIsValid(&aMem[p1+idx]) ,1,1,2
 pSrc->pIndex==0 || pCost->plan.u.pIdx==0 || pCost->plan.u.pIdx==pSrc->pIndex ,1,1,2
m_pseudoType == PseudoNotParsed,1,1,2
(options&U_SHAPE_LENGTH_MASK) != U_SHAPE_LENGTH_GROW_SHRINK,1,1,2
!x->ref.isStatic(),1,1,2
d != Data::unsharableEmpty(),1,1,2
!m_freeList.head,1,1,2
 seenVar && seenIn ,1,1,2
 sqlite3BtreeIsInTrans(u.as.pBt) ,1,1,2
 -1-pOp->p2<pParse->nLabel ,1,1,2
shouldEmitProfiling(),1,1,2
!jsCast<FunctionExecutable*>(inlineCallFrame->executable.get())->symbolTable(inlineCallFrame->isCall ? CodeForCall : CodeForConstruct)->slowArguments(),1,1,2
 nOp<=(1024/sizeof(Op)) ,1,1,2
 (u.am.payloadSize64 & SQLITE_MAX_U32)==(u64)u.am.payloadSize64 ,1,1,2
"textChangedResult, ==, ""|1|4|8|'qux quux'|""",1,1,2
 pCol->affinity==SQLITE_AFF_NONE || pCol->affinity==sqlite3AffinityType(zType) ,1,1,2
 (PAGER_FULLFSYNC | PAGER_CKPT_FULLFSYNC | PAGER_CACHESPILL) == PAGER_FLAGS_MASK ,1,1,2
"atk_object_get_n_accessible_children(uList), ==, 3",1,1,2
"int(ewkName) == int(webcoreName), mismatchingEnums",1,1,2
(dst & 0xf) != (src & 0xf) && ((dst >> 4) & 0xf) != (src & 0xf),1,1,2
(jump->flags & (PATCH_ABS48 | PATCH_ABS64)) || addr <= 0xffffffffl,1,1,2
sizeof(node) == 8,1,1,2
MarkedBlock::isAtomAligned(p),1,1,2
inlineCapacity < JSFinalObject::maxInlineCapacity(),1,1,2
cfg,1,1,2
m_labels,1,1,2
 r2->default_rc==0 ,1,1,2
" MIN( orgUp->t, dstUp->t ) <= isect.t ",1,1,2
( is_signed<qint32>::value),1,1,2
 db->init.busy==0 || saveSqlFlag==0 ,1,1,2
!handled,1,1,2
state() == Live,1,1,2
"!webkit_web_back_forward_list_contains_item(webBackForwardList, addItem)",1,1,2
(!is_unsigned<qint16>::value),1,1,2
fixture->role == ATK_ROLE_COMBO_BOX,1,1,2
 nNew<=pFd->mmapSizeMax ,1,1,2
hasVariableAccessData(),1,1,2
 pNode->n<=pNode->nAlloc ,1,1,2
!object || object->isList(),1,1,2
ATK_OBJECT(uList),1,1,2
"JSObjectIsFunction(context, function)",1,1,2
 iChng<p->nCol ,1,1,2
!(hash & m_hashAndFlags),1,1,2
Header::fromPayload(m_data)->length == size,1,1,2
 f2&MEM_Int ,1,1,2
 u.aw.p2<=p->nMem ,1,1,2
x->ref.isSharable() || options.testFlag(QArrayData::Unsharable),1,1,2
(myValue & mask()) == myValue,1,1,2
Parent::isGlobalObject(),1,1,2
!m_normalFlowListDirty,1,1,2
m_sharable || currentThread() == m_openingThread,1,1,2
 nDestTruncate==0 || (i64)nDestTruncate*(i64)pgszDest >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+pgszDest ),1,1,2
structure->typeInfo().overridesVisitChildren() == this->structure()->typeInfo().overridesVisitChildren(),1,1,2
 pPage->pData==(void *)&pPage[1] ,1,1,2
 pPgHdr->pCache==pCache ,1,1,2
spillFormat == DataFormatInteger || spillFormat == DataFormatCell || spillFormat & DataFormatJS,1,1,2
 p->zText!=0 || p->nChar==0 || p->accError ,1,1,2
 pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 ,1,1,2
mutex_++ == -1,1,1,2
 u.az.oc==OP_SeekLe || u.az.oc==OP_SeekGt ,1,1,2
 pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_AND || pExpr->eType==FTSQUERY_NEAR ,1,1,2
(lexerFlags & LexerFlagsIgnoreReservedWords),1,1,2
 flags==0 || flags==PAGER_GET_NOCONTENT || flags==PAGER_GET_READONLY ,1,1,2
"sizeof(uint64_t) == 8, uint64_t_is_eight_bytes",1,1,2
 pColl->enc==SQLITE_UTF8 ,1,1,2
"text, ==, ""This paragraph is borked!""",1,1,2
 pOp->p3>=0 && pOp->p3<p->nOp ,1,1,2
index < NumUnnamedDocumentCachedTypes,1,1,2
this[JSStack::ScopeChain].Register::scope(),1,1,2
 db->activeVdbeCnt>=db->writeVdbeCnt ,1,1,2
fNew != NULL,1,1,2
e_ == other.e_,1,1,2
"JSValueIsStrictEqual(context, jsTrue, jsTrue)",1,1,2
 iIdxCur+i!=iDataCur || pPk==pIdx ,1,1,2
compiler->args >= 0,1,1,2
 nCoord==2 || nCoord==4 || nCoord==6 || nCoord==8 || nCoord==10 ,1,1,2
"!strncmp(markupPrefix, markup, strlen(markupPrefix))",1,1,2
othercasebit,1,1,2
 db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE ,1,1,2
 bestPlan.plan.u.pIdx==pIdx ,1,1,2
SQLTransactionState::End < SQLTransactionState::Idle,1,1,2
Header::fromPayload(m_data)->length == other.size(),1,1,2
compiler->size > 0,1,1,2
static_cast<int>(reg) < 32,1,1,2
storageManager,1,1,2
"oldStructure, hadIndexingHeader == hasIndexingHeader(oldStructure->indexingType())",1,1,2
 OP_SeekGe == OP_SeekLt+2 ,1,1,2
hasSegments(),1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_FAMILY_NAME, ""monospace"")",1,1,2
"text, ==, ""An option in a combo box""",1,1,2
 u.bg.pC->deferredMoveto==0 ,1,1,2
set1,1,1,2
 id->h>2 ,1,1,2
 pSubWInfo->a[0].iIdxCur==iCovCur ,1,1,2
stackpos == STACK(stacktop),1,1,2
!weak,1,1,2
IS_HALFWORD(srcw),1,1,2
 nByte>0 || (rc!=SQLITE_OK && p==0) ,1,1,2
!!newCallFrame,1,1,2
 pItem->iCol>0 && pItem->iCol<=p->pEList->nExpr ,1,1,2
 pSel ,1,1,2
(code_ptr[-3] & 0xfc00ffff) == 0x780007c6,1,1,2
m_returnType == VoidPtr || m_returnType == Int || m_returnType == Cell,1,1,2
"type, type == RadioNodeListType",1,1,2
 p->aMem[i].flags==MEM_Undefined ,1,1,2
result == m_segments.head()->m_top++,1,1,2
 pIdx==0 || pIdx->nKeyCol==pFKey->nCol ,1,1,2
 MX_CELL(pPage->pBt)<=10921 ,1,1,2
"atk_text_get_n_selections(listItem), ==, 1",1,1,2
m_observer,1,1,2
isASCIIHexDigit(upperValue) && isASCIIHexDigit(lowerValue),1,1,2
"!sizeof(T*), PassRefPtr_should_never_be_assigned_to",1,1,2
*opcode == OP_CLASS || *opcode == OP_NCLASS || *opcode == OP_XCLASS,1,1,2
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP | SLJIT_INT_OP)),1,1,2
"sizeof(StringImpl) == sizeof(StringImpl::StaticASCIILiteral), StringImpl_should_match_its_StaticASCIILiteral",1,1,2
 nEq>=pLoop->u.btree.nSkip ,1,1,2
" pPager->fd->pMethods==0 || sqlite3OsFileControl(pPager->fd,SQLITE_FCNTL_DB_UNCHANGED,0)>=SQLITE_OK ",1,1,2
webkit_file_chooser_request_get_select_multiple(request),1,1,2
 pWInfo->nLevel<=pTabList->nSrc ,1,1,2
atk_object_get_role(ATK_OBJECT(passwordEntry)) == ATK_ROLE_PASSWORD_TEXT,1,1,2
"ReadOnly < FirstInternalAttribute, ReadOnly_is_below_FirstInternalAttribute",1,1,2
 pLower->eOperator==WO_GT || pLower->eOperator==WO_GE ,1,1,2
JSObjectGetPrivate(o) == (void*)3,1,1,2
sizeof(EncodedJSValue) == sizeof(IndexingHeader),1,1,2
 pCsr->curFlags & BTCF_Incrblob ,1,1,2
 sizeof(x)==8 && sizeof(a)==8 ,1,1,2
!hasHash(),1,1,2
m_size + 4 <= m_capacity,1,1,2
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)==0 ,1,1,2
(m_state != SimpleTransition) == !m_structureChain,1,1,2
m_values.isEmpty(),1,1,2
is_finalized(),1,1,2
!computedColumnHeight(),1,1,2
"G_OBJECT(item3)->ref_count, ==, 1",1,1,2
!fastEntry.isNull(),1,1,2
"::testing::internal:: EqHelper<GTEST_IS_NULL_LITERAL_(expected)>::Compare, expected, actual",1,1,2
wrappers.isEmpty(),1,1,2
(insn[0] & 0xf000) == MOVL_READ_OFFPC_OPCODE,1,1,2
 sqlite3SafetyCheckSickOrOk(db) ,1,1,2
!hasIndexedProperties(oldType) || hasUndecided(oldType) || hasInt32(oldType) || hasDouble(oldType),1,1,2
" !ExprHasProperty(pE, EP_FromJoin) ",1,1,2
 p->eCreate==1 ,1,1,2
m_structure->typeInfo().type() == ObjectType,1,1,2
"JSValueMakeString(context, string), ""function foo(foo) { return foo;\n}""",1,1,2
currentLevel() >= 1,1,1,2
is8ByteAligned(oldPtr),1,1,2
 SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG ,1,1,2
 pIdx!=0 || pFKey->nCol==1 ,1,1,2
hasContainingScope(),1,1,2
 pWInfo->pTabList->nSrc>=1 ,1,1,2
 pWInfo->wctrlFlags & WHERE_GROUPBY ,1,1,2
 sqlite3SafetyCheckOk(db) ,1,1,2
hasChild(m_op),1,1,2
"x == head_ || compare_(x->key, key) < 0",1,1,2
 u.bd.pC->pseudoTableReg==0 ,1,1,2
found,1,1,2
"atk_text_get_n_selections(link), ==, 1",1,1,2
(!scriptObject) != (!errorMessage),1,1,2
 sqlite3VdbeCheckMemInvariants(pMem) ,1,1,2
 n==0 ,1,1,2
"endOffset, ==, 9",1,1,2
 chngKey || pTrigger || hasFK || regOldRowid==regNewRowid ,1,1,2
 zAffinity[0]==0 || pRec<=pLast ,1,1,2
dylib,1,1,2
 lo->Lnext != up ,1,1,2
"G_OBJECT(currentItem)->ref_count, ==, 1",1,1,2
 (u.bc.aMx[u.bc.nField].flags & MEM_Null)==0 ,1,1,2
op() == WeakJSConstant,1,1,2
 v!=(-2147483647-1) ,1,1,2
(extra->flags & PCRE_EXTRA_STUDY_DATA) != 0,1,1,2
 IsVirtual(p) ,1,1,2
"endOffset, ==, 37",1,1,2
!receiver,1,1,2
 u.bg.pC->isTable ,1,1,2
!image->bitmap() || image->bitmap()->isBackedBySharedMemory(),1,1,2
"jitType, jitType == BaselineJIT || jitType == DFGJIT",1,1,2
!key->isIdentifier() && !key->hasHash(),1,1,2
 pSavepoint==db->pSavepoint ,1,1,2
!object || object->isAccessibilitySVGRoot(),1,1,2
 SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC ,1,1,2
size <= m_allocated,1,1,2
"text, ==, textResult",1,1,2
 rc==SQLITE_OK || rc==SQLITE_FULL || (rc&0xFF)==SQLITE_IOERR ,1,1,2
hasFunction(),1,1,2
type == CreateOther || type == CreateText || type == CreateEditingText,1,1,2
" isect.s <= MAX( orgLo->s, orgUp->s )",1,1,2
"reg_map[SLJIT_SAVED_EREG1] >= 8, saved_ereg1_is_hireg",1,1,2
!(inst & UPDATE_REQ),1,1,2
 pWInfo->pOrderBy==0 || pWInfo->pOrderBy->nExpr==1 || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 ,1,1,2
 e->Org == v ,1,1,2
(propertyID == CSSPropertyVariable) == (m_value && m_value->isVariableValue()),1,1,2
minidumpDir,1,1,2
m_top == m_segments.head()->m_top,1,1,2
 pCache->szExtra<512 ,1,1,2
m_symbolTable,1,1,2
m_inherit,1,1,2
m_ovector[1] >= position,1,1,2
isIntegerValue(m_marginBox.right()),1,1,2
p != PROCESS_OK,1,1,2
reg < 14,1,1,2
 pWinMemData->hHeap!=0 ,1,1,2
 pFrom->isRecursive==0 || pFrom->pTab ,1,1,2
 u.aj.i<u.aj.pKeyInfo->nField ,1,1,2
 ((p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1 ,1,1,2
"index, index <= m_buffer.capacity()",1,1,2
referenceNode,1,1,2
"height, <=, mline_window.height",1,1,2
FAST_IS_REG(src),1,1,2
!(value & ~DataTransferOffsetMask),1,1,2
m_ovector[0] == position,1,1,2
 p2>0 ,1,1,2
!node || node->isWebVTTElement(),1,1,2
m_apply,1,1,2
 pTab->nCol<=0x7fff && j<=0x7fff ,1,1,2
!node || isHTMLStyleElement(node),1,1,2
possibleAlias.op == GetByVal,1,1,2
sourceType != ArrayBufferView::TypeDataView,1,1,2
"atk_object_get_n_accessible_children(oList), ==, 3",1,1,2
"ARMRegisters::d1 == 1, d1_is_1",1,1,2
"exclude, iter.regID() != exclude",1,1,2
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_CALL3,1,1,2
m_dataType == DataTypeScriptValue,1,1,2
!m_value || validateType(m_value),1,1,2
 eOp!=2 || offset==0 ,1,1,2
!m_registerArray,1,1,2
 pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 ,1,1,2
 sqlite3BtreeIsInTrans(u.ce.pBt)==0 ,1,1,2
 (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0 || (pLevel->plan.wsFlags & WHERE_INDEXED)!=0 ,1,1,2
"::testing::internal::DoubleNearPredFormat, val1, val2, abs_error",1,1,2
"!JSValueIsStrictEqual(context, jsOne, jsOneString)",1,1,2
 wrFlag==0 ,1,1,2
 p->nCol>1 ,1,1,2
"q_static_assert_result, __COUNTER__",1,1,2
 pName->z!=0 ,1,1,2
bytes <= MarkedSpace::maxCellSize,1,1,2
"atk_action_do_action(ATK_ACTION(hLink1), 0)",1,1,2
ATK_IS_ACTION(menuPopup),1,1,2
"webkit_network_response_get_uri(response), ==, ""http://gnome.org/""",1,1,2
atk_object_get_role(oList) == ATK_ROLE_LIST,1,1,2
"jsOneString, 1",1,1,2
 pTerm->sortOrder==0 || pTerm->sortOrder==1 ,1,1,2
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x4), float_transfer_bit_error",1,1,2
 pIdxKey->isCorrupt==0 || c==0 ,1,1,2
 cmap->indices != NULL ,1,1,2
 sqlite3_mutex_held(p->pCache->pGroup->mutex) ,1,1,2
 (errCode&0xff)==SQLITE_CONSTRAINT ,1,1,2
!((bra == OP_BRAZERO && ket == OP_KETRMIN) || (bra == OP_BRAMINZERO && ket == OP_KETRMAX)),1,1,2
"sizeof(RealTypes) == sizeof(CopyTypes), LinkRecordCopyStructSizeEqualsRealStruct",1,1,2
 sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 ,1,1,2
!isForward(),1,1,2
 e->Lface == f ,1,1,2
!node || isHTMLFormElement(node),1,1,2
 db->activeVdbeCnt>0 ,1,1,2
 pStart->leftCursor==iCur ,1,1,2
 !VdbeMemDynamic(pOut) ,1,1,2
?!,1,1,2
src == SLJIT_UNUSED && srcw == 0,1,1,2
 argc==2 ,1,1,2
 pCrsr!=0 || pC->nullRow ,1,1,2
 resetSchemaOnFault==0 || resetSchemaOnFault==iDb+1 ,1,1,2
type == UpdateContents || type == SetContents,1,1,2
"G_OBJECT(backItem)->ref_count, ==, 1",1,1,2
std::isfinite(flt),1,1,2
 pOp->opcode==OP_OpenWrite || pOp->p5==0 ,1,1,2
static_cast<size_t>(n) <= strlen(s),1,1,2
region == m_emptyRegions.head(),1,1,2
!m_overridesItemAfter || !isNodeList(collectionType),1,1,2
(m_state != SimpleTransition) == !m_newStructure,1,1,2
 (u.ci.pQuery->flags&MEM_Int)!=0 && u.ci.pArgc->flags==MEM_Int ,1,1,2
"false, ""Q_UNREACHABLE()"", ""Q_UNREACHABLE was reached""",1,1,2
rx::IsIntegerCastSafe<int>(param),1,1,2
 *ppVtab==0 ,1,1,2
"sizeof(GradientAttributes) == sizeof(SameSizeAsGradientAttributes), GradientAttributes_size_guard",1,1,2
!box || box->isSVGInlineFlowBox(),1,1,2
m_minTrackBreadth == m_maxTrackBreadth,1,1,2
 (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) ,1,1,2
 bBulk==0 ,1,1,2
!m_completed,1,1,2
atk_object_get_role(paragraph1) == ATK_ROLE_PARAGRAPH,1,1,2
!(bitwise_cast<uintptr_t>(to) & 1),1,1,2
size() == capacity(),1,1,2
m_state == NoInformation || m_state == TakesSlowPath,1,1,2
!node || isHTMLContentElement(node),1,1,2
"atk_hyperlink_get_n_anchors(hLink1), ==, 1",1,1,2
cls,1,1,2
"sizeof(int16_t) == 2, int16_t_is_two_bytes",1,1,2
0.0 <= tess->relTolerance && tess->relTolerance <= 1.0,1,1,2
sizeof(QPixelFormat) == sizeof(quint64),1,1,2
verticalPolicy == GTK_POLICY_ALWAYS,1,1,2
!node || isMediaElement(node),1,1,2
max - min > 0,1,1,2
 iOut<pSorter->nTree && iOut>0 ,1,1,2
this[RegisterFile::ScopeChain].Register::scopeChain(),1,1,2
hasArrayStorage(structure()->indexingType()),1,1,2
 pCur->apPage[pCur->iPage]->isInit ,1,1,2
height <= kMaxHeight,1,1,2
nltype == NLTYPE_FIXED && common->newline < 256,1,1,2
 u.ag.n==0 || (pOp->p2>0 && pOp->p2+u.ag.n<=p->nMem+1) ,1,1,2
 u.bo.pC->deferredMoveto==0 ,1,1,2
blendingNeedsRendererSize(),1,1,2
z,1,1,2
inputBitCount < (sizeof(T) * 8),1,1,2
proofStatus == IsProved || proofStatus == NeedsCheck,1,1,2
 pLeft->pColl ,1,1,2
block >= m_blocks.begin() && block < m_blocks.end(),1,1,2
 zAffinity[pOp->p2]==0 ,1,1,2
outOfLineCapacity() >= outOfLineSize(),1,1,2
"G_OBJECT(item2)->ref_count, ==, 1",1,1,2
!m_globals.size(),1,1,2
"JSValueGetType(context, jsOneString) == kJSTypeString",1,1,2
!glyphName.isEmpty() || !unicodeString.isEmpty(),1,1,2
(void*)2 == JSObjectGetPrivate(object),1,1,2
!fromListSize || fromListSize == toListSize,1,1,2
 p->iBufEnd<p->nBuffer ,1,1,2
 nPinned>=0 ,1,1,2
WEBKIT_WEB_RESOURCE(sub_resources->data) == sub_resource || WEBKIT_WEB_RESOURCE(sub_resources->next->data) == sub_resource,1,1,2
 nIn>0 ,1,1,2
ATK_IS_OBJECT(comboBoxOption),1,1,2
 (m.flags & MEM_Dyn)!=0 || db->mallocFailed ,1,1,2
 u.bf.pC->pCursor!=0 ,1,1,2
!(m_isCaptured && !m_shouldNeverUnbox),1,1,2
!tryLock(),1,1,2
 pExpr->op!=TK_REGISTER ,1,1,2
tokenLocation->startOffset >= tokenLocation->lineStartOffset,1,1,2
 !pIdx || pIdx->pTable==pTab ,1,1,2
!rep_.empty(),1,1,2
ATK_IS_TEXT(shortText1),1,1,2
 p->xDel==0 ,1,1,2
"jsCFString, true",1,1,2
 p->pRightmost==p ,1,1,2
 pOrderBy==0 ,1,1,2
m_technique == InGPR || m_technique == UnboxedInt32InGPR || m_technique == UnboxedBooleanInGPR || m_technique == UInt32InGPR,1,1,2
reg < 32,1,1,2
"atk_hyperlink_get_uri(hLink1, 0), ==, ""http://foo.bar.baz/""",1,1,2
expectedFormat & DataFormatJS,1,1,2
"None < FirstInternalAttribute, None_is_below_FirstInternalAttribute",1,1,2
 memIsValid(pData) ,1,1,2
 regOldRowid>0 ,1,1,2
!(pushed_size & 0x7),1,1,2
 pIter->aBuffer==0 ,1,1,2
 u.bb.pC!=0 ,1,1,2
isInBounds<To>(value),1,1,2
"!JSValueIsInstanceOfConstructor(context, JSValueMakeNull(context), arrayConstructor, NULL)",1,1,2
 u.bq.pC->deferredMoveto==0 ,1,1,2
(hasInt32Result() || hasDoubleResult()) == !hasJSResult(),1,1,2
m_size + 1 <= m_capacity,1,1,2
(i) == 0,1,1,2
m_dataFormat,1,1,2
"webkit_web_history_item_get_uri(currentItem), ==, ""http://example.com/""",1,1,2
resolver,1,1,2
"JSValue(JSValue::EncodeAsDouble, d).isNumber()",1,1,2
 (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 ,1,1,2
"value, value",1,1,2
 (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0 || j<pIdx->nColumn ,1,1,2
"atk_hyperlink_get_start_index(hLink), ==, 0",1,1,2
subexpressionDivot <= divot(),1,1,2
 memIsValid(u.ci.pQuery) ,1,1,2
high_short && high_short <= 0x7fffffffl && high_short >= -0x80000000l,1,1,2
sibling->left,1,1,2
(sljit_sw) addr <= SIMM_17BIT_MAX && (sljit_sw) addr >= SIMM_17BIT_MIN,1,1,2
 j<pCsr->nSegment && pSeg->iIdx==i ,1,1,2
 pC->pseudoTableReg==0 || pC->nullRow ,1,1,2
!vm.canUseJIT(),1,1,2
!m_structure || m_structure->transitionWatchpointSetHasBeenInvalidated() || m_structure.get() == structure,1,1,2
 u.am.pReg->flags & MEM_Blob ,1,1,2
!node || (node->isElementNode() && toElement(node)->isMathMLElement()),1,1,2
hasRegexpIndex(),1,1,2
"JSValueIsNull(context, NULL)",1,1,2
 ArraySize(aSyscall)==25 ,1,1,2
parseTypeFromString,1,1,2
*outPtr,1,1,2
!m_shadow,1,1,2
 u.bp.pC->deferredMoveto==0 ,1,1,2
 pStart!=0 || pEnd!=0 ,1,1,2
 u.bn.pC->isTable==0 ,1,1,2
*current() != '\n',1,1,2
(instruction[2] & LdrPcImmediateInstructionMask) == LdrPcImmediateInstruction,1,1,2
 HasRowid(pDest) || destHasUniqueIdx ,1,1,2
 pUnpacked->flags & UNPACKED_IGNORE_ROWID ,1,1,2
!ascii_isspace('\177'),1,1,2
"reg_map[SLJIT_SAVED_REG3] >= 8, saved_reg3_is_hireg",1,1,2
!propertyName.isNull(),1,1,2
"!isExpandedShorthand(equivalentProperty), ""Shorthand property id = %d shouldn't be inserted into StyleBuilder. Shorthands should be expanded at parsing time."", equivalentProperty",1,1,2
!m_used[i] || m_used[i] == max(),1,1,2
 iCnt==1 ,1,1,2
length >= 0,1,1,2
 rc==SQLITE_OK || sCur.n==0 ,1,1,2
 v>0 ,1,1,2
 c>=0 ,1,1,2
" isect.t <= MAX( orgLo->t, dstLo->t )",1,1,2
rexBytes + opcodeBytes <= maxJumpReplacementSize(),1,1,2
 pzOriginTab && pzOriginCol ,1,1,2
 u.aw.p2>0 ,1,1,2
m_position != m_set->m_tail,1,1,2
" i==0 || sqlite3VdbeRecordCompare(aSample[i-1].n, aSample[i-1].p, pRec, 0)<0 || pParse->db->mallocFailed ",1,1,2
 p->zText ,1,1,2
structure()->globalObject(),1,1,2
state < states.count(),1,1,2
"selectedText, ==, ""raph with a li""",1,1,2
s_count,1,1,2
 p->iDoclistToken<MAX_INCR_PHRASE_TOKENS ,1,1,2
"checkMimeTypeForFilter(filter, ""video/*"")",1,1,2
!accumulator,1,1,2
"icon_uri, ==, expected_uri",1,1,2
"!JSValueIsNumber(context, NULL)",1,1,2
r >= 0,1,1,2
"endOffset, ==, endOffsetResult",1,1,2
 (pIn3->flags & MEM_Real)!=0 ,1,1,2
 u.bh.pC->pCursor!=0 ,1,1,2
callback && context && context->isContextThread(),1,1,2
!hasIndexedProperties(structure->indexingType()),1,1,2
 pPager->doNotSyncSpill==0 ,1,1,2
 VdbeMemDynamic(pDest)==0 ,1,1,2
"numberOfFramesCreated, ==, 2",1,1,2
sizeof(JSChar) == sizeof(UniChar),1,1,2
isIntegerValue(m_marginBox.top()),1,1,2
"charData->str, ==, ""<html></html>""",1,1,2
f == NULL || dynamic_cast<To>(f) != NULL,1,1,2
((!!m_location) && m_location.executableAddress() != JITWriteBarrierFlag) || (location.executableAddress() == m_location.executableAddress()),1,1,2
 nEq<=p->nColumn ,1,1,2
( is_unsigned<quint32>::value),1,1,2
 pPager->readOnly==0 ,1,1,2
 (eOp & WO_IN) || nIn==0 ,1,1,2
m_loopDepth,1,1,2
 pOp->p4type==P4_FUNCDEF ,1,1,2
"JSValueIsStrictEqual(context, JSObjectGetPrototype(context, object1), object2)",1,1,2
"atk_hyperlink_get_end_index(hLink), ==, 1",1,1,2
 pPhrase->aToken[0].pSegcsr ,1,1,2
divotOffset >= lineStart,1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, addItem2)",1,1,2
!m_baselineCodeBlock->alternative(),1,1,2
"!static_cast<int>(value >> 31), HashTableNoCapacityOverflow",1,1,2
"putById, m_graph[putById].op == PutById",1,1,2
ascii_isspace('\t'),1,1,2
 state->free_ent < state->prefix_size ,1,1,2
 rc!=SQLITE_OK || sqlite3_memory_used()==0 ,1,1,2
feature != PageDestruction,1,1,2
"atk_text_get_text(ATK_TEXT(item3), 0, -1), ==, ""\342\200\242 text and a link""",1,1,2
"text, ==, ""A paragraph with a link in the middle""",1,1,2
iframe,1,1,2
 p->x.pList==0 || p->pRight==0 ,1,1,2
valueProfileOffset < (1u << 3),1,1,2
(width >= 1) && (width <= 32),1,1,2
 p2<=(p->nMem-p->nCursor) ,1,1,2
rootStructure == rootStructure->structure(),1,1,2
"atk_text_get_text(ATK_TEXT(item1), 0, -1), ==, ""\342\200\242 text only""",1,1,2
 u.br.iCnt==1 ,1,1,2
!isRelative(),1,1,2
!object || object->isApplet(),1,1,2
baseValue,1,1,2
hasWeakConstant(m_op),1,1,2
!!scope,1,1,2
 pPager->zFilename && pPager->zFilename[0] ,1,1,2
"ARMRegisters::d3 == 3, d3_is_3",1,1,2
lexErrorMessage.isNull() != lexError,1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O)),1,1,2
buf_ptr == buf_end,1,1,2
 pIdx->nColumn>=pIdx->nKeyCol+n ,1,1,2
valueType == QJsonValue::Array || valueType == QJsonValue::Object,1,1,2
!HandleTypes<T>::toJSValue(externalType) || !HandleTypes<T>::toJSValue(externalType).isCell() || Heap::isMarked(HandleTypes<T>::toJSValue(externalType).asCell()),1,1,2
"x, ==, sline_window2.x",1,1,2
!primaryKey.isEmpty(),1,1,2
level >= 0,1,1,2
cc == ccend && stackptr == stacktop && (save || (tmp1empty && tmp2empty)),1,1,2
 rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff ,1,1,2
m_tail,1,1,2
!node || isHTMLInputElement(node),1,1,2
"normalizedTypeName == QMetaObject::normalizedType(normalizedTypeName.constData()), ""qRegisterNormalizedMetaType"", ""qRegisterNormalizedMetaType was called with a not normalized type name, please call qRegisterMetaType instead.""",1,1,2
"!QIsSameTConstChar::value, ""const char* is not allowed as a test data format.""",1,1,2
status->Int() == KRequestPending,1,1,2
"isValidIterator(pos), ""QMap::insert"", ""The specified const_iterator argument 'it' is invalid""",1,1,2
 pCost->plan.u.pIdx==0 || (pCost->plan.wsFlags&WHERE_ROWID_EQ)==0 ,1,1,2
 u.be.pC!=0 ,1,1,2
 n>0 && p1>0 && p2>0 ,1,1,2
m_operationInProgress == NoOperation,1,1,2
amount <= m_connectedFrameCount,1,1,2
size > dataStart,1,1,2
 nFull>=pVfs->mxPathname ,1,1,2
(void*)3 == JSObjectGetPrivate(object),1,1,2
jumplist,1,1,2
"s >= 0, ""QVarLengthArray::QVarLengthArray()"", ""Size must be greater than or equal to 0.""",1,1,2
--mutex_ == -1,1,1,2
 db->nVdbeActive>0 || db->autoCommit==0 || db->nStatement==0 ,1,1,2
"oldStructure, !indexingHeader()->preCapacity(oldStructure)",1,1,2
"isValidIterator(before), ""QList::insert"", ""The specified iterator argument 'before' is invalid""",1,1,2
"cell, &WTF::RemovePointer<T>::Type::s_info",1,1,2
fontData,1,1,2
 pStart==0 ,1,1,2
 pSize!=0 ,1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_FG_COLOR, ""120,121,122"")",1,1,2
"sizeof(RuleData) == sizeof(SameSizeAsRuleData), RuleData_should_stay_small",1,1,2
"text, ==, ""Block span in a table cell\nInline span in a table cell""",1,1,2
replacement()->getJITType() == JITCode::DFGJIT,1,1,2
number && std::isfinite(number) && !std::signbit(number),1,1,2
string,1,1,2
( is_unsigned<quint16>::value),1,1,2
"!(low <= m_offset && m_offset <= high), ""Unsafe branch over register allocation at instruction offset %u in jump offset range %u..%u"", m_offset, low, high",1,1,2
!IsSpecial(),1,1,2
ascii_isspace('\n'),1,1,2
status != WEBKIT_LOAD_FINISHED,1,1,2
 pIdx->nSample>0 ,1,1,2
!(op & (SLJIT_SET_U | SLJIT_SET_S)),1,1,2
!info.u.proto,1,1,2
JSValue(result).isFunction(),1,1,2
(IsUnknown && !(IsCore || IsWidget || IsGui)) || (IsCore && !(IsUnknown || IsWidget || IsGui)) || (IsWidget && !(IsUnknown || IsCore || IsGui)) || (IsGui && !(IsUnknown || IsCore || IsWidget)),1,1,2
*cc == XCL_PROP || *cc == XCL_NOTPROP,1,1,2
d->ref.isSharable() == sharable,1,1,2
!node || node->hasTagName(HTMLNames::selectTag),1,1,2
" CORRUPT_DB || memcmp(&info, &pCur->info, sizeof(info))==0 ",1,1,2
 u.bp.pC!=0 ,1,1,2
 destIfFalse!=destIfNull || rRhsHasNull==0 ,1,1,2
 zToken!=0 ,1,1,2
"mode, mode == ManualOperandSpeculation || edge.useKind() == UntypedUse",1,1,2
"gtk_adjustment_get_value(adjustment), !=, 0.0",1,1,2
 pPage->pLruPrev || pPage==pGroup->pLruHead ,1,1,2
type() == NPVariantData::RemoteNPObjectID,1,1,2
m_top->stackItem(),1,1,2
 sqlite3KeyInfoIsWriteable(pInfo) ,1,1,2
m_completed,1,1,2
 aEntry[0]<key ,1,1,2
 DbMaskAllZero(p->btreeMask) ,1,1,2
 p->pAuxData==0 ,1,1,2
"text, ==, ""\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242""",1,1,2
 (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 ,1,1,2
(sljit_sw)addr <= MAX_DISP && (sljit_sw)addr >= MIN_DISP,1,1,2
dataFormat & DataFormatJS,1,1,2
ATK_IS_OBJECT(axAlternativeParent),1,1,2
 pIndex->aiColumn[nColumn-1]==(-1) || !HasRowid(pIndex->pTable),1,1,2
 pFree ,1,1,2
!it->value,1,1,2
!node || (node->isStyledElement() && node->isSVGElement()),1,1,2
arg_assert_info,1,1,2
!(hash & (s_flagMask << (8 * sizeof(hash) - s_flagCount))),1,1,2
 (payloadSize64 & SQLITE_MAX_U32)==(u64)payloadSize64 ,1,1,2
"count, ==, 2",1,1,2
"mimeTypes[1], ==, ""video/*""",1,1,2
reply->m_type == T::ReplyType,1,1,2
"atkAttributeSetAttributeHasValue(set3, ATK_TEXT_ATTR_WEIGHT, ""700"")",1,1,2
 db!=0 || rc==SQLITE_NOMEM ,1,1,2
current < start + size(),1,1,2
 nField>0 ,1,1,2
other.checkConsistency(),1,1,2
(a)->avail <= (a)->limit,1,1,2
type() == NPVariantData::Double,1,1,2
m_document || !getFlag(InDocumentFlag),1,1,2
!tmp1empty,1,1,2
 pPage->pExtra==(void *)&((char *)&pPage[1])[pCache->szPage] ,1,1,2
"jsFalse, false",1,1,2
 z!=0 || pIndex->aiColumn[i]<0 ,1,1,2
!isStackingContainer(),1,1,2
"sizeof(APIClientTraits<ClientInterface>::interfaceSizesByVersion) / sizeof(size_t) == currentVersion + 1, size_of_some_interfaces_are_unknown",1,1,2
ATK_OBJECT(paragraph1),1,1,2
JITCode::isBaselineCode(result->getJITType()),1,1,2
"!JSValueIsString(context, NULL)",1,1,2
divisor && !(divisor & (divisor - 1)),1,1,2
inlineCapacity > 0,1,1,2
atk_object_get_role(paragraph2) == ATK_ROLE_PARAGRAPH,1,1,2
ownerNode,1,1,2
"reg_map[SLJIT_SAVED_REG3] < 8, saved_reg3_is_loreg",1,1,2
"!sizeof(T*), PassOwnPtr_should_never_be_assigned_to",1,1,2
" offsetof(PgHdr1,page)==0 ",1,1,2
m_baseVal->animatedProperty() == this,1,1,2
"Page::maxNumberOfFrames < 1024, Frame_limit_should_fit_in_rare_data_count",1,1,2
 win_mem_data.magic2==WINMEM_MAGIC2 ,1,1,2
c > 1 && r > 1 && c <= 4 && r <= 4,1,1,2
index < m_rareData->m_callReturnIndexVector.size(),1,1,2
isCalculated(),1,1,2
 u.aw.pX!=0 ,1,1,2
static_cast<int>(m_bytecodeOffset) >= 0,1,1,2
" CORRUPT_DB || pPKey2->default_rc==vdbeRecordCompareDebug(nKey1, pKey1, pPKey2) || pKeyInfo->db->mallocFailed ",1,1,2
"!atkAttributeSetAreEqual(set1, set2)",1,1,2
 pTrunk!=0 ,1,1,2
!object || object->isSummary(),1,1,2
JITCode::isBaselineCode(replacement()->getJITType()),1,1,2
!(s_regionSize % blockSize),1,1,2
!m_responses.contains(requestID),1,1,2
enableWebGL,1,1,2
!from || from->JSCell::inherits(&WTF::RemovePointer<To>::Type::s_info),1,1,2
ATK_IS_TABLE(table2),1,1,2
 pPrior->pRightmost==p->pRightmost ,1,1,2
!z->left(),1,1,2
ATK_IS_EDITABLE_TEXT(passwordEntry),1,1,2
inlineCapacity <= JSFinalObject::maxInlineCapacity(),1,1,2
"jsOneString, true",1,1,2
 winMemGetOwned() ,1,1,2
"!text || !strcmp(text, fixture->info->expectedContent)",1,1,2
"pointer, pointer + 1 <= m_end",1,1,2
condition == Equal || condition == NotEqual,1,1,2
"isValidIterator(afirst), ""QList::erase"", ""The specified iterator argument 'afirst' is invalid""",1,1,2
!weakref.load(),1,1,2
other_cases[0] < other_cases[1] && other_cases[1] < other_cases[2],1,1,2
ATK_HYPERLINK(hLink1),1,1,2
 winMutex_isNt==0 || winMutex_isNt==1 ,1,1,2
!o.m_transform,1,1,2
length,1,1,2
activeCustomElementRegistries().isEmpty(),1,1,2
((uimm & 0xc000000000000000l) == 0x4000000000000000l) && (shift > 0) && (shift <= 32),1,1,2
 pPgHdr->pgno==pgno ,1,1,2
has16BitCodeMatchOnly(),1,1,2
 OP_SeekLE==(OP_SeekLT+1) ,1,1,2
mul->op() == ArithMul,1,1,2
"mimeTypes[2], ==, ""image/*""",1,1,2
size < static_cast<size_t>(std::numeric_limits<int32_t>::max()),1,1,2
!zero,1,1,2
 u.bt.pDb->pBt!=0 ,1,1,2
!m_vendedIterators.contains(iterator),1,1,2
 u.be.v>0 ,1,1,2
 u.ba.pC!=0 ,1,1,2
atk_object_get_index_in_parent(rowHeader) == 3,1,1,2
 (u.bv.pnErr->flags & MEM_Int)!=0 ,1,1,2
 iRes<0 || c>=aEntry[iRes].iCode ,1,1,2
" sqlite3GetVTable(pParse->db, pTab) ",1,1,2
"OBJECT_OFFSETOF(JSFinalObject, m_inlineStorage) % sizeof(double) == 0",1,1,2
!BadReg(rn1),1,1,2
mimeTypes,1,1,2
(dst & REG_MASK) != (src & REG_MASK) && OFFS_REG(dst) != (src & REG_MASK),1,1,2
 db->nVdbeRead>=db->nVdbeWrite ,1,1,2
 (createFlag*(1+(!pCache->bPurgeable||!pCache->pDirty)))==eCreate ,1,1,2
!ascii_isspace('\a'),1,1,2
"!DateInstance::AnonymousSlotCount, DatePrototype_stomps_on_your_anonymous_slot",1,1,2
opcodeID == op_call_varargs,1,1,2
 j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) ,1,1,2
ATK_IS_ACTION(item2),1,1,2
"JSValueGetType(context, jsUndefined) == kJSTypeUndefined",1,1,2
isAutoLogicalHeightRegionsCountConsistent(),1,1,2
 (pSpace - (u8*)p)==n ,1,1,2
 u.bd.pC->isTable ,1,1,2
 p->zContentTbl==0 || bContent==0 ,1,1,2
 pIdx->aiColumn[j]>=0 ,1,1,2
"G_OBJECT(backItem)->ref_count, ==, 2",1,1,2
"G_OBJECT(forwardItem)->ref_count, ==, 1",1,1,2
 ArraySize(aSyscall)==76 ,1,1,2
"canBeJumpT4(instruction, target)",1,1,2
!world->m_wrappers.contains(domObject),1,1,2
"SLJIT_INT_OP == SLJIT_SINGLE_OP, int_op_and_single_op_must_be_the_same",1,1,2
 nCellKey==intKey ,1,1,2
"list == m_nameCaches.get(namedNodeListKey(collectionType, name))",1,1,2
initialCapacity >= other.m_keyCount,1,1,2
totalStorageCapacity() >= propertyTable()->propertyStorageSize(),1,1,2
m_source,1,1,2
a->type == b->type,1,1,2
!hasIndexedProperties(oldType),1,1,2
 winMemGetHeap()!=NULL ,1,1,2
!(value & ~0xfff),1,1,2
 pOp->p3<=u.be.pFrame->nMem ,1,1,2
!main_resource,1,1,2
"atkAttributeSetAreEqual(set1, set2)",1,1,2
 *pRc==SQLITE_OK ,1,1,2
"requestedJobNumber, requestedJobNumber > 0",1,1,2
GTK_POLICY_NEVER == webkit_web_frame_get_horizontal_scrollbar_policy(mainFrame),1,1,2
m_baselineCodeBlock,1,1,2
!m_structure,1,1,2
arrayModes,1,1,2
(op >= SLJIT_BREAKPOINT && op <= SLJIT_SMUL) || ((op & ~SLJIT_INT_OP) >= SLJIT_UDIV && (op & ~SLJIT_INT_OP) <= SLJIT_SDIV),1,1,2
!object || object->isSpinButtonPart(),1,1,2
m_token->type() != HTMLToken::Uninitialized,1,1,2
!m_separator.isNull(),1,1,2
inputString,1,1,2
src == 0 && srcw == 0,1,1,2
"x, ==, lline_window.x",1,1,2
m_current != const_cast<CSSMutableStyleDeclaration*>(m_decl)->m_properties.end(),1,1,2
pq != NULL,1,1,2
 SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS ,1,1,2
m_tableSize >= m_minTableSize,1,1,2
"firstOutOfLineOffset < 256, firstOutOfLineOffset_fits",1,1,2
"existingHash() == StringHasher::computeHashAndMaskTop8Bits(characters8(), length())",1,1,2
line <= MaxFatLineModeLine,1,1,2
 key>=aEntry[iRes] ,1,1,2
!m_isExcess,1,1,2
 pEnd!=0 ,1,1,2
!result->ref.isShared(),1,1,2
 ap[1]==pBusyHandlerArg ,1,1,2
"x, ==, lline_window.x + lline_window.width - width",1,1,2
tile >= 0 && tile < numTiles(),1,1,2
 SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE ,1,1,2
!webkit_download_get_current_size(download),1,1,2
m_layers.contains(id),1,1,2
"webkit_web_history_item_get_title(currentItem), ==, ""Added site""",1,1,2
 oc!=OP_SeekGT || r.default_rc==-1 ,1,1,2
!m_unrealizedSaveCount,1,1,2
 db->writeVdbeCnt>0 || db->autoCommit==0 || db->nDeferredCons==0 ,1,1,2
"webkit_web_history_item_get_uri(currentItem), ==, ""http://example.com/1/""",1,1,2
m_currentString.m_length > 1,1,1,2
 u.bh.pC->pseudoTableReg==0 ,1,1,2
 pIdx->nColumn>=j ,1,1,2
"isValidIterator(it), ""QList::erase"", ""The specified iterator argument 'it' is invalid""",1,1,2
 CORRUPT_DB || (serial_type>=1 && serial_type<=9 && serial_type!=7) ,1,1,2
 zName!=0 || pNew==0 ,1,1,2
 pNode->block.nAlloc>=p->nNodeSize ,1,1,2
(sljit_sw)addr <= 0x1ffffff && (sljit_sw)addr >= -0x2000000,1,1,2
namespaceURI != starAtom,1,1,2
sizeof(IndexingHeader) == sizeof(EncodedJSValue),1,1,2
"jsOne, true",1,1,2
 iCol>0 ,1,1,2
 u.bh.pC->isTable || pOp->opcode==OP_RowKey ,1,1,2
webView,1,1,2
size < BLOCK_SIZE,1,1,2
 u.bg.pC->pCursor!=0 ,1,1,2
 OP_SeekLT==(OP_SeekLE-1) ,1,1,2
ATK_IS_TEXT(preformattedText),1,1,2
" (res==0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)==0) || (res<0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)<0) || (res>0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)>0) || CORRUPT_DB || pPKey2->pKeyInfo->db->mallocFailed ",1,1,2
this->address_reader_,1,1,2
"atkAttributeSetAreEqual(set3, set4)",1,1,2
!m_segments.tail()->isFull(),1,1,2
m_namespaceURI == starAtom,1,1,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] < 7 && reg_map[TMP_REG1] == 2, invalid_register_assignment_for_div_mul",1,1,2
x < image->width && y < image->height,1,1,2
"text, ==, """"",1,1,2
!(bitwise_cast<uintptr_t>(result) & 7),1,1,2
 p->nSample>0 ,1,1,2
 pc==pFrame->pc ,1,1,2
 reg->windingNumber == 0 ,1,1,2
 pCur->aNode[ii]==0 ,1,1,2
uint(d->size) <= d->alloc,1,1,2
m_technique == InFPR,1,1,2
 u.bb.pC->isTable==0 ,1,1,2
 pList->nAlloc==0 ,1,1,2
 memIsValid(&u.bb.r.aMem[i]) ,1,1,2
"isValidIterator(before), ""QVarLengthArray::insert"", ""The specified const_iterator argument 'before' is invalid""",1,1,2
 u.aw.iDb>=0 && u.aw.iDb<db->nDb ,1,1,2
scratch != src,1,1,2
 pTabItem->pIndex==0 || (sCost.plan.wsFlags & WHERE_NOT_FULLSCAN)==0 || sCost.plan.u.pIdx==pTabItem->pIndex ,1,1,2
 face && face->bdffont ,1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, addItem)",1,1,2
!element || element->isGradientStop(),1,1,2
!block->dataSize(),1,1,2
 pCur->curFlags & BTCF_WriteFlag ,1,1,2
!object || object->isSnapshottedPlugIn(),1,1,2
!(common->req_char_ptr != 0 && common->start_used_ptr != 0),1,1,2
 p->pNext==0 ,1,1,2
hasCustomStyleCallbacks(),1,1,2
m_completed || (!m_executableMemory && m_effort == JITCompilationCanFail),1,1,2
sourceHeight != 1,1,1,2
"G_OBJECT(webFrame)->ref_count, ==, 2",1,1,2
 db->aLimit[SQLITE_LIMIT_LENGTH]>=0 ,1,1,2
!m_args[i].isZombie(),1,1,2
 sqlite3BtreeIsInTrans(pTo)==0 ,1,1,2
ATK_IS_OBJECT(preformattedText),1,1,2
"isValidIterator(pos), ""QMap::insertMulti"", ""The specified const_iterator argument 'pos' is invalid""",1,1,2
"!object || !strcmp(object->renderName(), ""RenderEmbeddedObject"")",1,1,2
other_cases[0] != NOTACHAR && other_cases[1] != NOTACHAR && other_cases[2] != NOTACHAR,1,1,2
 pPager->fullSync==0 ,1,1,2
"::testing::internal::CmpHelperFloatingPointEQ<float>, expected, actual",1,1,2
function,1,1,2
m_register.fpr != InvalidFPRReg,1,1,2
event && event->isMouseEvent(),1,1,2
!!executable == !!structure,1,1,2
 pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK || pPager->noReadlock,1,1,2
 p->flags==PGHDR_MMAP ,1,1,2
!regions.isEmpty(),1,1,2
pColl || pParse->nErr,1,1,2
RuntimeEnabledFeatures::shadowDOMEnabled(),1,1,2
 oc!=OP_SeekLE || r.default_rc==-1 ,1,1,2
!sibling->red,1,1,2
 OP_SeekGE==(OP_SeekGT-1) ,1,1,2
 orgUp != tess->event && orgLo != tess->event ,1,1,2
length <= s_capacity,1,1,2
 szRegion==pNode->szRegion ,1,1,2
"sizeof(int64) == sizeof(long long), sizeof_int64_is_not_sizeof_long_long",1,1,2
"atk_text_get_n_selections(paragraph1), ==, 1",1,1,2
"JSValueGetType(context, jsCFEmptyStringWithCharacters) == kJSTypeString",1,1,2
 aPragmaNames[mid].ePragTyp==PragTyp_BUSY_TIMEOUT ,1,1,2
value <= std::numeric_limits<int8_t>::max(),1,1,2
!node || isHTMLAudioElement(node),1,1,2
 pModule->xNext ,1,1,2
image_format_valid(dst),1,1,2
!rule || rule->isSupportsRule(),1,1,2
"reg_map[SLJIT_SAVED_REG2] < 8, saved_reg2_is_loreg",1,1,2
"v, 2",1,1,2
"o, ""Wed Dec 31 1969 16:00:00 GMT-0800 (PST)""",1,1,2
 bufpt>zOut ,1,1,2
divotStart.offset >= divotStart.lineStartOffset,1,1,2
!iconURI,1,1,2
!object || object->isSVGResourceFilter(),1,1,2
oldCapacity <= newStructure->outOfLineCapacity(),1,1,2
 rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT || rc==SQLITE_NOMEM || (rc&0xFF)==SQLITE_IOERR || rc==SQLITE_CANTOPEN ,1,1,2
 pIn1<=&aMem[(p->nMem-p->nCursor)] ,1,1,2
signalName,1,1,2
!hasVariableReference(),1,1,2
stateFunction,1,1,2
high_short && !(inst & (INT_ALIGNED | UPDATE_REQ)),1,1,2
flag >= (1 << 8),1,1,2
atk_object_get_role(uList) == ATK_ROLE_LIST,1,1,2
typeInfo().structureHasRareData(),1,1,2
 zAffinity!=0 ,1,1,2
 sqlite3OpcodeProperty[pOut->opcode] & OPFLG_JUMP ,1,1,2
"vm.heap.tryAllocateStorage(size, &temp)",1,1,2
 pCtx==0 ,1,1,2
 f->marked ,1,1,2
"offset, !offset",1,1,2
 (WHERE_UNQ_WANTED>>16)==1 ,1,1,2
 aFrom[0].isOrdered==0 ,1,1,2
u.ch.pVtab && u.ch.pModule,1,1,2
"jsCFStringWithCharacters, nan("""")",1,1,2
 pCache->nHash>0 && pCache->apHash ,1,1,2
"!JSObjectMakeFunction(context, NULL, 0, NULL, functionBody, NULL, 1, &exception)",1,1,2
pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union || pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard || pDest->eDest==SRT_Queue || pDest->eDest==SRT_DistFifo || pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo,1,1,2
s >= last_sequence_,1,1,2
m_renderCounterCount > 0,1,1,2
 u.aq.p1==SAVEPOINT_BEGIN||u.aq.p1==SAVEPOINT_RELEASE||u.aq.p1==SAVEPOINT_ROLLBACK ,1,1,2
 pGroup->nMaxPage >= pCache->nMax ,1,1,2
!RopeImpl::isRope(item.fibers[item.i]),1,1,2
 u.cm.nArg>1 && u.cm.apArg[0] && (u.cm.apArg[0]->flags&MEM_Null) ,1,1,2
 pOp->opcode==OP_IdxGE ,1,1,2
ket == OP_KET || ket == OP_KETRMAX || ket == OP_KETRMIN,1,1,2
listboxObj,1,1,2
"startOffset, ==, 3",1,1,2
"atk_hyperlink_get_uri(hLink2, 0), ==, ""http://bar.baz.foo/""",1,1,2
m_free.contains(i),1,1,2
structureSet.size(),1,1,2
 (OP_IdxLE&1)==(OP_IdxLT&1) && (OP_IdxGE&1)==(OP_IdxGT&1) ,1,1,2
 pItem->u.x.iOrderByCol>0 && pItem->u.x.iOrderByCol<=p->pEList->nExpr ,1,1,2
 pKeyInfo->nField+pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB ,1,1,2
m_segments.head()->next()->m_top == s_segmentCapacity,1,1,2
 pCsr->nSegment==0 ,1,1,2
 (pMem->flags & MEM_Null)==0 ,1,1,2
"phase, ==, 3",1,1,2
m_sweepResult.isNull(),1,1,2
arrayConstructor,1,1,2
 ++fixedEdges == 1 ,1,1,2
 pPage->nCell<=MX_CELL(pPage->pBt) || CORRUPT_DB ,1,1,2
code_ptr - code <= (sljit_sw)compiler->size - (sizeof(struct sljit_function_context) / sizeof(sljit_ins)),1,1,2
 eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 ,1,1,2
i < storage->m_numValuesInVector,1,1,2
"sizeof(int32_t) == 4, int32_t_is_four_bytes",1,1,2
WEBKIT_DOM_IS_MOUSE_EVENT(event),1,1,2
 biasRight==0 || biasRight==1 ,1,1,2
 sqlite3KeyInfoIsWriteable(pRet) ,1,1,2
!m_stack.m_isInParallelMode,1,1,2
"webkit_web_resource_get_uri(web_resource), ==, base_uri",1,1,2
"atk_hyperlink_get_end_index(hLink1), ==, 6",1,1,2
!sign && exponent >= 0,1,1,2
 pRoot->intKey==1 || pRoot->intKey==0 ,1,1,2
rep->is8Bit(),1,1,2
 resetSchemaOnFault==0 || resetSchemaOnFault==u.br.iDb+1 ,1,1,2
 pTabItem->pTab ,1,1,2
"result, ==, GTK_PRINT_OPERATION_RESULT_APPLY",1,1,2
m_stack.m_isInParallelMode,1,1,2
 iNewLevel<((iIndex+1)*FTS3_SEGDIR_MAXLEVEL) ,1,1,2
buf_used_ >= len + 1,1,1,2
!isSlotObject,1,1,2
 (pSubLoop->wsFlags & WHERE_AUTO_INDEX)==0 ,1,1,2
!m_code,1,1,2
 j==nByte ,1,1,2
m_nextState == SQLTransactionState::Idle,1,1,2
 sqlite3VdbeCurrentAddr(v)==iJump ,1,1,2
!current->nextbacktracks && !current->topbacktracks,1,1,2
block->containingBlock() == m_containingBlockForInflowPosition.block(),1,1,2
"Accessor < FirstInternalAttribute, Accessor_is_below_FirstInternalAttribute",1,1,2
 pCrsr!=0 || pC->pseudoTableReg>0 ,1,1,2
"textSelectionChangedResult, ==, ""|paragraph|5|25|""",1,1,2
 p->aMem==0 || p->aMem[i].flags==MEM_Null ,1,1,2
isImage(),1,1,2
 pKey->flags & MEM_Int ,1,1,2
"offset, ==, 20",1,1,2
m_purgePreventCount,1,1,2
this->structure()->propertyStorageCapacity() == JSNonFinalObject_inlineStorageCapacity,1,1,2
 pLoop->u.btree.nSkip==0 ,1,1,2
 unionTab==dest.iParm || dest.eDest!=priorOp ,1,1,2
 pzOrigTab && pzOrigCol ,1,1,2
contains(ptr),1,1,2
*cc == OP_DNREF || *cc == OP_DNREFI,1,1,2
 memIsValid(&u.bo.r.aMem[i]) ,1,1,2
"JSValueIsEqual(context, jsOne, jsOneString, NULL)",1,1,2
!node || node->hasTagName(SVGNames::filterTag),1,1,2
 iWrite2==0 ,1,1,2
"sline_window1.x, ==, sline_window2.x",1,1,2
ptr == end,1,1,2
!m_isolatedWorld->isNormal() || m_wrapper || !m_jsFunction,1,1,2
offset == invalidOffset || offset < inlineCapacity || isOutOfLineOffset(offset),1,1,2
 regRowid==(regStat4+2) ,1,1,2
!hasIndexedProperties(oldType) || hasUndecided(oldType) || hasInt32(oldType),1,1,2
count == 1,1,1,2
m_type == PutById,1,1,2
isTopLevelCommand(),1,1,2
!cachedStructure,1,1,2
 pFarg->a[0].pExpr!=0 ,1,1,2
"ctype_word == 0x10, ctype_word_must_be_16",1,1,2
nextSiblingSlow(node) == node->nextSibling(),1,1,2
bytes == image->size,1,1,2
 u.bp.pC->isTable==0 ,1,1,2
!object || object->isSVGTextPath(),1,1,2
!region->isFull(),1,1,2
 EXPR_FULLSIZE<=0xfff ,1,1,2
scriptExecutionContext(),1,1,2
"startOffset, ==, 43",1,1,2
 pNew->u.btree.nEq<pProbe->nColumn ,1,1,2
"(charactersCount - 1 <= ((unsigned(~0) - sizeof(StringImpl)) / sizeof(LChar))), StringImplFromLiteralCannotOverflow",1,1,2
conn->content_len >= conn->consumed_content,1,1,2
nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1,1,1,2
 pFree==0 ,1,1,2
isOutOfLineOffset(offset),1,1,2
"o, ""/foo/gi""",1,1,2
 sizeof(unsigned short)==2 && sizeof(unsigned char)==1 ,1,1,2
ref == 1,1,1,2
m_exec->globalData().stringRecursionCheckVisitedObjects.contains(m_thisObject),1,1,2
m_type >= 0 && m_type <= Custom,1,1,2
"atk_hyperlink_get_end_index(hLinkInListItem), ==, 43",1,1,2
m_cachedVertexShader.get() || m_cachedFragmentShader.get(),1,1,2
 p1+n<=p2 || p2+n<=p1 ,1,1,2
 pCur->curFlags & BTCF_ValidOvfl ,1,1,2
"lline_window.y + lline_window.height + sline_window2.height, <=, mline_window.y",1,1,2
(position != AbsolutePosition && position != FixedPosition) || isBox(),1,1,2
 offset==ii*(4+pPager->pageSize) ,1,1,2
"webkit_dom_node_list_get_length(list), ==, 0",1,1,2
 p->bHasStat==p->bFts4 ,1,1,2
nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1,1,1,2
 u.bu.iDb>=0 && u.bu.iDb<db->nDb ,1,1,2
"jsEmptyString, false",1,1,2
 pPager->doNotSyncSpill==1 ,1,1,2
!idValue.isEmpty(),1,1,2
"count, ==, 3",1,1,2
 z[i] ,1,1,2
 !pWinMemData->bOwned ,1,1,2
 regRow!=pDest->iSdst+i ,1,1,2
type != NoFloat,1,1,2
ptr == NULL,1,1,2
 *pRc || pNode->block.nAlloc==0 ,1,1,2
 memIsValid(&pMem[i]) ,1,1,2
 regChng==(regStat4+1) ,1,1,2
"sizeof(m_quirks) * 8 >= NumPluginQuirks, not_enough_room_for_quirks",1,1,2
!value.isGetterSetter(),1,1,2
!m_node->isShadowRoot(),1,1,2
"atk_text_get_text(ATK_TEXT(item2), 0, -1), ==, ""2. link only""",1,1,2
"webkit_dom_html_anchor_element_get_href(anchor), ==, uris[i]",1,1,2
"!""not reached""",1,1,2
 u.by.pProgram->nMem+u.by.pProgram->nCsr==u.by.pFrame->nChildMem ,1,1,2
"1 == JSValueToNumber(context, exception, NULL)",1,1,2
 pProgram->nMem+pProgram->nCsr==pFrame->nChildMem ,1,1,2
 u.be.pC->isTable ,1,1,2
operand != -1,1,1,2
m_divotStart.offset >= m_divotStart.lineStartOffset,1,1,2
common->capture_last_ptr != 0,1,1,2
!isNull(),1,1,2
 pPgHdr->pExtra==(void *)&pPgHdr[1] ,1,1,2
int(d->alloc) == aalloc,1,1,2
 isIgnoreErrors==0 || (regOld!=0 && regNew==0) ,1,1,2
 j+1 < ArraySize(apCopy) ,1,1,2
 pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) ,1,1,2
 os2MutexHeld(p) ,1,1,2
weakOwner(),1,1,2
!node->hasVariableAccessData(),1,1,2
storage->m_inCompactInitialization,1,1,2
lsb < 32,1,1,2
!m_replies.contains(requestID),1,1,2
 pData->flags & (MEM_Blob|MEM_Str) ,1,1,2
m_index == m_rope->fiberCount(),1,1,2
 (pDb->safety_level & PAGER_SYNCHRONOUS_MASK)==pDb->safety_level ,1,1,2
 nField>=0 ,1,1,2
 (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree ,1,1,2
!entry || entry->offset >= m_anonymousSlotCount,1,1,2
"jsNull, false",1,1,2
!node || isHTMLTextFormControlElement(node),1,1,2
 pc==u.by.pFrame->pc ,1,1,2
 p1>0 && p1+n<=(p->nMem-p->nCursor)+1 ,1,1,2
((p) & OFFS_REG_MASK) != TO_OFFS_REG(SLJIT_LOCALS_REG) && !(i & ~0x3),1,1,2
 pNew->nLSlot>=nConstraint ,1,1,2
n <= size(),1,1,2
(!is_unsigned<qint8>::value),1,1,2
mObject == NULL,1,1,2
"::testing::internal::CmpHelperGT, val1, val2",1,1,2
"atk_hyperlink_get_start_index(hLink2), ==, 12",1,1,2
m_nextState < SQLTransactionState::NumberOfStates,1,1,2
WEBKIT_DOM_IS_HTML_BODY_ELEMENT(body),1,1,2
 pOp->p1<=p->nMem ,1,1,2
block.docHandle(),1,1,2
table.size() >= 2,1,1,2
 p->bIsReader!=0 || p->btreeMask==0 ,1,1,2
element == 0,1,1,2
 pSorter->iWriteOff==0 ,1,1,2
!node || isHTMLTableElement(node),1,1,2
!node || node->hasTagName(HTMLNames::videoTag),1,1,2
m_used[index] != max(),1,1,2
allocation_state_ == ARRAY,1,1,2
isAnonymous(),1,1,2
"HandleHeap::heapFor(slot())->hasWeakOwner(slot(), weakOwner)",1,1,2
 rc!=SQLITE_OK || ( pPhrase->pList==0 && pPhrase->pHead==0 && pPhrase->pTail==0 ),1,1,2
!node || isSVGImageElement(node),1,1,2
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)==0 ,1,1,2
row(),1,1,2
block->containingBlock() == m_containingBlockForFixedPosition.block(),1,1,2
repeat_length != 0 && repeat_type != 0 && repeat_count != 0,1,1,2
 pSort==0 ,1,1,2
"endOffset, ==, 30",1,1,2
 pC->isTable==0 || pOp->opcode==OP_RowData ,1,1,2
WEBKIT_DOM_IS_HTML_PARAGRAPH_ELEMENT(ptr),1,1,2
 (idxStr==0 && argc==0) || (idxStr && (int)strlen(idxStr)==argc*2) ,1,1,2
"jsCFEmptyStringWithCharacters, false",1,1,2
 pRC!=0 ,1,1,2
!node || toSVGElement(node)->isSVGSVGElement(),1,1,2
 p->aNode ,1,1,2
 sqlite3BtreeIsInTrans(pBt) ,1,1,2
"rule, !rule",1,1,2
refs_ >= 0,1,1,2
collection2,1,1,2
 pIdx->azColl[i]!=0 ,1,1,2
 zStartAff==0 || sqlite3Strlen30(zStartAff)>=nEq ,1,1,2
"!atkAttributeSetAreEqual(set2, set3)",1,1,2
 u.bq.pC->isOrdered ,1,1,2
"i, i >= 0 && i < numTilesX()",1,1,2
shift > 0,1,1,2
 sqlite3BtreeIsInTrans(pBt)==0 ,1,1,2
!heap.vm()->isInitializingObject(),1,1,2
"JSValueGetType(context, jsOne) == kJSTypeNumber",1,1,2
 pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE ,1,1,2
i < nodeCapacity(),1,1,2
"sizeof(uint8_t) == 1, uint8_t_is_one_byte",1,1,2
uri,1,1,2
sub_resources,1,1,2
 rc==SQLITE_OK || db->nDeferredCons>0 || db->nDeferredImmCons>0 ,1,1,2
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p3]) ,1,1,2
 seenVar ,1,1,2
m_assertion,1,1,2
 pInfo->estimatedCost>1000000.0 ,1,1,2
 pTab->nRef==1 || ((pSel->selFlags&SF_Recursive) && pTab->nRef==2 ),1,1,2
capacity && isPageAligned(capacity),1,1,2
m_op == Phantom && (child1()->op() == Phi || child1()->op() == SetLocal || child1()->op() == SetArgument),1,1,2
child1().useKind() == child2().useKind(),1,1,2
 pSorter->pUnpacked==(UnpackedRecord *)d ,1,1,2
 (i64)nDestTruncate*(i64)pgszDest >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+pgszDest ),1,1,2
ascii_isspace(' '),1,1,2
(m_flags & (ImplementsHasInstance | OverridesHasInstance)) != OverridesHasInstance,1,1,2
atk_object_get_parent(axParentChild) == axParent,1,1,2
 u.by.pProgram->nOp>0 ,1,1,2
size == m_values.size(),1,1,2
!m_nextToFinalize,1,1,2
assertion,1,1,2
 pRec->nField>0 && iCol<pIdx->nSampleCol ,1,1,2
m_overrideComputedStyle,1,1,2
m_segmentRanges.size() < m_segments.size(),1,1,2
!(flags & LOAD_DATA) && TMP_REG1_mapped != reg_ar,1,1,2
 pLoop->aLTermSpace==pLoop->aLTerm ,1,1,2
 rc==SQLITE_OK || pExpr==0 ,1,1,2
"atkAttributeSetAttributeHasValue(set3, ATK_TEXT_ATTR_JUSTIFICATION, ""center"")",1,1,2
"reg_map[SLJIT_SAVED_EREG2] >= 8, saved_ereg2_is_hireg",1,1,2
"text, ==, ""This is one line wrapped because of the maximum width of its container.""",1,1,2
 nReg==pAggInfo->mxReg-pAggInfo->mnReg+1 ,1,1,2
" countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE ",1,1,2
characters,1,1,2
m_type == Type::Character || m_type == Type::TimestampTag,1,1,2
 wctrlFlags & WHERE_ONEPASS_DESIRED ,1,1,2
 (zRawSql - zStart) > 0 ,1,1,2
"OBJECT_OFFSETOF(JSFinalObject, m_inlineStorage) == OBJECT_OFFSETOF(JSNonFinalObject, m_inlineStorage)",1,1,2
 pItem->isCorrelated==0 && nRef<=0 ,1,1,2
 desiredAutoCommit==1 || iRollback==0 ,1,1,2
 wrFlag==0 || wrFlag==BTCF_WriteFlag ,1,1,2
"((r)==EDecimal)||((r)==EHex),Panic(EInvalidRadix)",1,1,2
"atkAttributeSetAttributeHasValue(set4, ATK_TEXT_ATTR_STYLE, ""normal"")",1,1,2
"webkit_web_view_get_icon_uri(web_view), ==, expected_uri",1,1,2
 u.am.p1<p->nCursor ,1,1,2
 pConstraint->op==RTREE_MATCH || pConstraint->op==RTREE_QUERY ,1,1,2
function && !exception,1,1,2
globalData,1,1,2
 nTemp==0 ,1,1,2
 u.az.oc!=OP_SeekLe || u.az.r.flags==UNPACKED_INCRKEY ,1,1,2
 pModule->xRowid ,1,1,2
 db->nVdbeWrite>=0 ,1,1,2
 pTerm->eOperator & WO_OR ,1,1,2
 pIdx!=0 || HasRowid(pTab) ,1,1,2
s->list_ == this,1,1,2
block->canBeRecycled(),1,1,2
ATK_IS_EDITABLE_TEXT(textEntry),1,1,2
slowDetails == *details,1,1,2
m_connectedFrameCount,1,1,2
WEBKIT_DOM_IS_HTML_HTML_ELEMENT(node),1,1,2
 pDL->pNextDocid==0 ,1,1,2
type >= SLJIT_C_EQUAL && type < SLJIT_JUMP,1,1,2
"false, ""Support of exceptions is disabled""",1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_WEIGHT, ""400"")",1,1,2
documentInternal() || (nodeType() == DOCUMENT_TYPE_NODE && !inDocument()),1,1,2
!propertyHandler(newProperty).isValid(),1,1,2
 ConstFactorOk(pParse) ,1,1,2
"webkit_web_history_item_get_uri(fixture->item), ==, ""http://example.com/""",1,1,2
m_prototype.isObject() || m_prototype.isNull(),1,1,2
m_parentRule,1,1,2
"x, ==, sline_window2.x + sline_window2.width - width",1,1,2
 pPk->tnum=pTab->tnum ,1,1,2
"!(length % 4), length_must_be_a_multible_of_four",1,1,2
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p2]) ,1,1,2
 p->pSrc!=0 ,1,1,2
isDelete && !syncDir,1,1,2
 flag != NULL ,1,1,2
get(index) == value,1,1,2
"!JSObjectSetPrivate(myConstructor, (void*)1)",1,1,2
"sizeof(WriteBarrier<Unknown>) == sizeof(Register), Register_should_be_same_size_as_WriteBarrier",1,1,2
scopeChain()->globalData,1,1,2
"JSValueGetType(context, jsCFString) == kJSTypeString",1,1,2
 pRec->pKeyInfo->enc==ENC(db) ,1,1,2
"webkit_dom_node_list_get_length(list), ==, 2",1,1,2
 pListItem->pExpr->op==TK_COLLATE ,1,1,2
!canBeOptimizedOrInlined() || m_mappedTag == regT1,1,1,2
"atk_text_get_n_selections(link), ==, 0",1,1,2
 pParse->pNewTable==pTab ,1,1,2
m_path,1,1,2
dataFormat == DataFormatInteger || dataFormat == DataFormatCell || dataFormat == DataFormatBoolean,1,1,2
!m_allocator,1,1,2
 pRec->pKeyInfo->nField+pRec->pKeyInfo->nXField==nCol ,1,1,2
pointer,1,1,2
 nInMul==0 || (pNew->wsFlags & WHERE_COLUMN_NULL)!=0 || (pNew->wsFlags & WHERE_COLUMN_IN)!=0 || (pNew->wsFlags & WHERE_SKIPSCAN)!=0 ,1,1,2
indexingPayloadSizeInBytes ? hasIndexingHeader : true,1,1,2
property->animatedPropertyType() == AnimatedEnumeration,1,1,2
 nDb>0 ,1,1,2
 rc!=SQLITE_OK || a[p->nToken-1].bIgnore==0 ,1,1,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] == 2 && reg_map[TMP_REGISTER] > 7, invalid_register_assignment_for_div_mul",1,1,2
 r2->nField>0 ,1,1,2
 fd>2 ,1,1,2
machineCodeOffset >= m_previousMachineCodeOffset,1,1,2
 pList->a!=0 || pList->nExpr==0 ,1,1,2
flags & NodeDoesNotExit,1,1,2
count * sizeof(JSValue) == desiredScratchBufferSize(),1,1,2
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p1]) ,1,1,2
bytes > 0,1,1,2
 i<pKeyInfo->nField ,1,1,2
 u.ba.pC->isTable ,1,1,2
"webkit_network_request_get_uri(initialRequest), ==, ""http://www.google.com/""",1,1,2
 !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) ,1,1,2
result->m_bytecodeOffset == -1,1,1,2
m_isInParallelMode,1,1,2
"type, type == TagNodeListType",1,1,2
!m_element,1,1,2
 aSortCost==0 || &pSpace[nSpace]==(char*)&aSortCost[nOrderBy] ,1,1,2
"y, ==, mline_window.y + mline_window.height - height",1,1,2
wrappers,1,1,2
!isRoundZero,1,1,2
ATK_IS_ACTION(comboBox),1,1,2
 pBtree->inTrans==TRANS_NONE ,1,1,2
"webkit_web_back_forward_list_get_back_length(webBackForwardList), ==, 1",1,1,2
main_resource,1,1,2
(len == 32 && imm != 0 && imm != -1) || (len == 16 && (sljit_si)imm != 0 && (sljit_si)imm != -1),1,1,2
 p->zText!=0 || p->nChar==0 ,1,1,2
weakImpl->state() == WeakImpl::Deallocated,1,1,2
 u.am.pC->pVtabCursor==0 ,1,1,2
(type & 0xff) >= SLJIT_C_FLOAT_EQUAL && (type & 0xff) <= SLJIT_C_FLOAT_ORDERED,1,1,2
!nodes.size(),1,1,2
initialPositionIndex <= finalPositionIndex,1,1,2
"!U::isSync, AsyncMessageExpected",1,1,2
attribute.m_valueRange.m_end,1,1,2
m_futurePossibleStructure.isClear(),1,1,2
offsets[1] == -1 || (offsets[0] < offsets[1]),1,1,2
!(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C)),1,1,2
s,1,1,2
"kind, kind == Fixed",1,1,2
 (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 ,1,1,2
!node->next(),1,1,2
isStackingContainer() || !m_posZOrderList,1,1,2
 rc==SQLITE_OK || *ppExpr==0 ,1,1,2
 p->pParent==0 || p->pParent->pLeft==p ,1,1,2
id != InvalidCoordinatedLayerID,1,1,2
 rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) ,1,1,2
m_isIncrementSet || !m_incrementValue,1,1,2
m_root,1,1,2
ATK_IS_OBJECT(item1),1,1,2
"text, ==, ""a table cell""",1,1,2
!m_tail,1,1,2
"webkit_download_get_uri(download), ==, uri",1,1,2
currentChar() == '\n',1,1,2
 u.bf.pC->iDb>=0 ,1,1,2
rootBlock->isSelectionRoot(),1,1,2
"startOffset, ==, 17",1,1,2
!m_animatedPathByteStream,1,1,2
 pCur->apPage[pCur->iPage]->nCell>0 || pCur->eState==CURSOR_INVALID ,1,1,2
 cnt==(cnt&0x1ffff) ,1,1,2
"atkAttributeSetAttributeHasValue(set2, ATK_TEXT_ATTR_BG_COLOR, ""80,81,82"")",1,1,2
!m_ovector.isEmpty(),1,1,2
 (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 ,1,1,2
result != badIndex(),1,1,2
 v->expired==0 ,1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C)),1,1,2
 p->apCsr==0 || p->apCsr[i]==0 ,1,1,2
!!node->next(),1,1,2
x->ref.atomic.load() == 0,1,1,2
m_root == z,1,1,2
!leftAncestors.empty() || !rightAncestors.empty(),1,1,2
 sqlite3_mutex_held(pNode->mutex) || pNode->nRef==0 ,1,1,2
 zMaster[sqlite3Strlen30(zMaster)-3]=='9' ,1,1,2
"::testing::internal::CmpHelperFloatingPointEQ<double>, expected, actual",1,1,2
 pAggInfo->aCol[i].iMem>=pAggInfo->mnReg && pAggInfo->aCol[i].iMem<=pAggInfo->mxReg ,1,1,2
 pIter->aAlloc==0 ,1,1,2
has8BitCodeMatchOnly(),1,1,2
"text, ==, ""foo baz""",1,1,2
range_right >= 0 || offsets[0] >= 0,1,1,2
"JSValueIsObject(context, jsGlobalValue)",1,1,2
atk_object_get_role(hLinkObject) == ATK_ROLE_PUSH_BUTTON,1,1,2
 pAggInfo->aFunc[i].iMem>=pAggInfo->mnReg && pAggInfo->aFunc[i].iMem<=pAggInfo->mxReg ,1,1,2
!!result,1,1,2
 pIdx->isResized==0 ,1,1,2
msg,1,1,2
 p->current.anEq[i] ,1,1,2
 ulCount==0 ,1,1,2
currentFixture->info->expectedContent,1,1,2
d->data(),1,1,2
!(m_dataFormat & DataFormatJS),1,1,2
 iCur>=0 ,1,1,2
 u.ac.n>0 && u.ac.p1>0 && u.ac.p2>0 ,1,1,2
m_structure || !globalData.dummyMarkableCellStructure,1,1,2
 (pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,1,1,2
webProcessProxy,1,1,2
!inIsolate(),1,1,2
isDelete && !isOpenDirectory,1,1,2
 szExtra < 300 ,1,1,2
static_cast<GPRReg>(m_baseOrTag) != InvalidGPRReg,1,1,2
 (pNew->wsFlags & WHERE_TOP_LIMIT)==0 ,1,1,2
"JSValueGetType(context, jsTrue) == kJSTypeBoolean",1,1,2
 yymsp[-1].minor.yy473!=0 ,1,1,2
"disposition, ==, ""attachment""",1,1,2
isArgument(argument),1,1,2
!node || isHTMLOptionElement(node),1,1,2
 (pPg->flags & PGHDR_MMAP)==0 ,1,1,2
"title, ==, ""This is the second title""",1,1,2
 *pbDone==0 ,1,1,2
 bFree==0 || pParse->pWith==0 ,1,1,2
dst >= SLJIT_SCRATCH_REG1 && dst <= TMP_REGISTER,1,1,2
"iterator, m_vendedIterators.contains(iterator)",1,1,2
index == s_maxInternalRopeLength,1,1,2
"G_OBJECT(backList->data)->ref_count, ==, 1",1,1,2
JSLock::lockCount() > 0,1,1,2
(!is_unsigned<qint64>::value),1,1,2
value.latinKey,1,1,2
!(bitwise_cast<uintptr_t>(to) & 3),1,1,2
" iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) ",1,1,2
offset >= -255 && offset <= 255,1,1,2
atk_object_get_role(hLinkObject) == ATK_ROLE_LINK,1,1,2
(offset <= BOFFSET_MAX && offset >= BOFFSET_MIN),1,1,2
 (M & I)==I ,1,1,2
bytes && bytes < maxCellSize,1,1,2
" p->pRight==0 || ExprHasProperty(p->pRight, EP_IntValue) || p->pRight->u.zToken==0 || p->pRight->u.zToken[0]!=0 ",1,1,2
 aSortCost!=0 || &pSpace[nSpace]==(char*)pX ,1,1,2
ATK_IS_OBJECT(textEntry),1,1,2
"!isExpandedShorthand(newProperty), ""Shorthand property id = %d shouldn't be inserted into StyleBuilder. Shorthands should be expanded at parsing time."", newProperty",1,1,2
 i < charmap->face->num_charmaps ,1,1,2
base >= this->base() && base < static_cast<char*>(this->base()) + size(),1,1,2
m_baselineCodeBlock->getJITType() == JITCode::BaselineJIT,1,1,2
HasIsNullMethod<SelfTest1>::Value,1,1,2
"!JSEvaluateScript(context, code, 0, file, 1, &exception) , ""An exception should be thrown""",1,1,2
 (p->selFlags & SF_NestedFrom)==0 || ((flags & SQLITE_FullColNames)==0 && (flags & SQLITE_ShortColNames)!=0) ,1,1,2
"x, ==, sline_window1.x + sline_window1.width - width",1,1,2
 u.bh.pC->deferredMoveto==0 ,1,1,2
 oc==OP_SeekLT || oc==OP_SeekLE ,1,1,2
 n==nKeyCol ,1,1,2
from < to,1,1,2
atk_object_get_index_in_parent(colHeader) == 0,1,1,2
 pParse->nErr>0 || pFK==0 ,1,1,2
 pOp->opcode!=OP_PrevIfOpen || pOp->p4.xAdvance==sqlite3BtreePrevious,1,1,2
(sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,1,1,2
free != LONG_MAX,1,1,2
"icon_uri, ==, webkit_web_view_get_icon_uri(web_view)",1,1,2
" sqlite3SchemaMutexHeld(db, i, 0) ",1,1,2
"JSValueGetType(context, jsZero) == kJSTypeNumber",1,1,2
 pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 ,1,1,2
!isInt32Constant(codeBlock),1,1,2
add->op() == ValueAdd || add->op() == ArithAdd || add->op() == ArithSub,1,1,2
"!JSValueIsUndefined(context, NULL)",1,1,2
(static_cast<GPRReg>(m_tagGPR) == InvalidGPRReg) == (static_cast<GPRReg>(payloadGPR) == InvalidGPRReg),1,1,2
 pCur->iDb==pOp->p3 ,1,1,2
height > 0,1,1,2
atk_object_get_role(preformattedText) == ATK_ROLE_PANEL,1,1,2
 u.ck.pModule->xNext ,1,1,2
cond == Below || cond == BelowOrEqual || cond == Above || cond == AboveOrEqual,1,1,2
 (chngRowid & chngPk)==0 ,1,1,2
 yymsp[-1].minor.yy203!=0 ,1,1,2
 nArg>=(-2) ,1,1,2
ATK_OBJECT(hLinkObject3),1,1,2
"frame_name, ==, ""Example.com""",1,1,2
"jsTrue, 1",1,1,2
"been_to_load_finished, ==, TRUE",1,1,2
ref.load() == 0,1,1,2
"this, &s_info",1,1,2
"upper, ==, gtk_adjustment_get_upper(adjustment)",1,1,2
 globals->metrics[nn]->clazz == clazz ,1,1,2
 pParse->pToplevel==0 ,1,1,2
 nRef>=sqlite3PagerRefcount(pPager) ,1,1,2
 nKey==nPk ,1,1,2
 pItem->addrFillSub==0 ,1,1,2
 OP_SeekGt == OP_SeekLt+3 ,1,1,2
value <= 60,1,1,2
"nLinks, ==, 2",1,1,2
"jsTrue, true",1,1,2
 winMemGetHeap()==NULL ,1,1,2
"webkit_dom_element_get_tag_name(element), ==, ""LI""",1,1,2
Base::isGlobalObject(),1,1,2
"g_strrstr(uri, webkit_download_get_suggested_filename(download))",1,1,2
 p!=0 && *p1!=0 && *p2!=0 ,1,1,2
m_identifiers.isEmpty(),1,1,2
"isValidIterator(abegin), ""QVarLengthArray::insert"", ""The specified const_iterator argument 'abegin' is invalid""",1,1,2
!structure()->hasGetterSetterProperties(),1,1,2
"startOffset, ==, 7",1,1,2
QVariantIntegrator<long int>::CanUseInternalSpace,1,1,2
!node || isHTMLAreaElement(node),1,1,2
"x, ==, sline_window1.x",1,1,2
 pNode->nAlloc>=1 ,1,1,2
"G_OBJECT(nthItem)->ref_count, ==, 2",1,1,2
vNew != NULL,1,1,2
numberOfBuckets + i < totalNumberOfBuckets,1,1,2
"selectedText, ==, ""a li""",1,1,2
 pPhrase->pList==0 && pPhrase->pHead==0 && pPhrase->pTail==0 ,1,1,2
 IsStat4 || nEqZero==0 ,1,1,2
"JSValueIsStrictEqual(context, JSObjectGetPrototype(context, object2), object1)",1,1,2
"atkAttributeSetAttributeHasValue(set2, ATK_TEXT_ATTR_UNDERLINE, ""single"")",1,1,2
!(expression),1,1,2
"(WTF::IsSameType<RefPtr<RefCountedType>, T>::value || WTF::IsSameType<PassRefPtr<RefCountedType>, T>::value || WTF::IsSameType<RefCountedType*, T>::value), OnlyAllowOneTypeModification",1,1,2
!node || node->hasTagName(HTMLNames::frameTag) || node->hasTagName(HTMLNames::iframeTag),1,1,2
WEBKIT_DOM_IS_NODE(node),1,1,2
 (p->flags & MEM_Dyn)!=0 || p->xDel==0 ,1,1,2
 bUseHint==1 || bUseHint==0 ,1,1,2
m_match == Tag,1,1,2
 sleepObj!=NULL ,1,1,2
isNeitherClearNorTop(),1,1,2
"text, ==, ""\t\n\tfirst line\n\tsecond line\n""",1,1,2
"webkit_web_history_item_get_alternate_title(fixture->item), ==, ""Alternate title""",1,1,2
 eOp & (WO_LT|WO_LE) ,1,1,2
!eventContext || eventContext->isTouchEventContext(),1,1,2
" memcmp(&info, &pCur->info, sizeof(info))==0 ",1,1,2
 p->bFts4 ,1,1,2
!address.offset,1,1,2
*ccend != OP_END && common->control_head_ptr != 0,1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, item2)",1,1,2
 yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) ,1,1,2
 VdbeMemDynamic(pOut)==0 ,1,1,2
!sourceString->is8Bit(),1,1,2
"atk_action_get_name(ATK_ACTION(hLink1), 0), ==, ""jump""",1,1,2
type <= 0xFF,1,1,2
 pList->pDirty==0 || isCommit ,1,1,2
m_hash,1,1,2
 rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile ,1,1,2
isFinite(),1,1,2
"STR_END == SLJIT_SAVED_REG2, str_end_must_be_saved_reg2",1,1,2
 u.ar.desiredAutoCommit==1 || u.ar.iRollback==0 ,1,1,2
(op & (SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C)) == 0,1,1,2
"v, 20",1,1,2
initialLength < MIN_SPARSE_ARRAY_INDEX,1,1,2
"code >= IDBDatabaseException::IDBDatabaseExceptionOffset, ""%d >= %d"", code, IDBDatabaseException::IDBDatabaseExceptionOffset",1,1,2
!enabled,1,1,2
 u.bx.iSet==-1 || u.bx.iSet>=0 ,1,1,2
object != 0,1,1,2
 IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 ,1,1,2
!!node->prev(),1,1,2
 p->readOnly==0 || pOp->p2==0 ,1,1,2
 yymsp[-2].minor.yy203!=0 ,1,1,2
uint(TotalFieldWidthByWidths) == uint(TotalFieldWidthByOffsets),1,1,2
"selectedText, ==, ""agraph with plain te""",1,1,2
"statement, ::testing::internal::ExitedUnsuccessfully, regex",1,1,2
 iContinue!=0 ,1,1,2
!JSObjectGetPrivate(myConstructor),1,1,2
is8ByteAligned(reinterpret_cast<void*>(m_remaining)),1,1,2
m_ref.code().executableAddress(),1,1,2
"JSValueGetType(context, jsFalse) == kJSTypeBoolean",1,1,2
"title, ==, ""This is the title""",1,1,2
size >= sizeof(T),1,1,2
code < IDBDatabaseException::IDBDatabaseExceptionOffset,1,1,2
"atk_hyperlink_get_end_index(hLink2), ==, 32",1,1,2
 pOut<=&aMem[p->nMem] ,1,1,2
" chngToIN==getMask(pMaskSet, iCursor) ",1,1,2
imm < 0,1,1,2
 op==OP_ShiftRight || op==OP_ShiftLeft ,1,1,2
globalData()->identifierTable == wtfThreadData().currentIdentifierTable(),1,1,2
!m_previous || m_previous > this,1,1,2
"jsCFEmptyStringWithCharacters, 0",1,1,2
 pTrunk->aData!=0 ,1,1,2
ATK_IS_TEXT(multilineText),1,1,2
kind >= SourceNotSet && kind < HaveNode,1,1,2
f_ >= other.f_,1,1,2
"startOffset, ==, 12",1,1,2
 pPk || iIdxCur==iDataCur+1 ,1,1,2
isGood,1,1,2
 oc!=OP_SeekGE || r.default_rc==+1 ,1,1,2
 p2<pC->nField ,1,1,2
"int(SignalType::ArgumentCount) >= SlotArgumentCount, ""The slot requires more arguments than the signal provides.""",1,1,2
"iconURI, ==, expectedURI",1,1,2
 p->flags & UNPACKED_NEED_DESTROY ,1,1,2
 pOp->opcode==OP_IdxLE || pOp->opcode==OP_IdxGT ,1,1,2
"mode, mode == ManualOperandSpeculation || edge.useKind() == BooleanUse",1,1,2
 iCol>=0 && iCol<=p->nColumn+1 ,1,1,2
 pWInfo->iContinue!=0 ,1,1,2
display >= INLINE && display <= NONE,1,1,2
 pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,1,1,2
 u.am.payloadSize==0 || u.am.zRec!=0 ,1,1,2
!parent->left,1,1,2
 pExpr->op==TK_COLLATE || pExpr->op==TK_AS ,1,1,2
dataFormat != DataFormatNone && dataFormat != DataFormatStorage,1,1,2
"ErrorString*, String frameId",1,1,2
m_scopeStack.size() > 1,1,1,2
"endOffset, ==, 12",1,1,2
 u.ac.p1+u.ac.n<=u.ac.p2 || u.ac.p2+u.ac.n<=u.ac.p1 ,1,1,2
 u.aj.p2>0 && u.aj.p2+mx<=p->nMem+1 ,1,1,2
shared != previouslyShared,1,1,2
 first == node ,1,1,2
"(QtPrivate::AreArgumentsCompatible<SlotReturnType, typename SignalType::ReturnType>::value), ""Return type of the slot is not compatible with the return type of the signal.""",1,1,2
!element->previousSibling(),1,1,2
"globalObject, !structure->globalObject() || structure->globalObject() == globalObject",1,1,2
 p->nSample==0 || pNew->anLt[p->nCol-1] > p->a[p->nSample-1].anLt[p->nCol-1] ,1,1,2
 p->pGroupBy==0 || (p->selFlags & SF_Aggregate)!=0 ,1,1,2
 (pDest->flags & (MEM_Blob|MEM_Str))==0 || pDest->z==sMem.z ,1,1,2
"mach_msg_header_t*, mach_msg_trailer_t*, uint64_t*",1,1,2
"webkit_web_view_get_load_status(view), ==, WEBKIT_LOAD_FINISHED",1,1,2
m_transparencyCount > 0,1,1,2
propertyName.asIndex() == PropertyName::NotAnIndex,1,1,2
"(OP_CRSTAR & 0x1) == 0, crstar_opcode_must_be_even",1,1,2
 p->pEList->a[0].pExpr!=0 ,1,1,2
 pSO ,1,1,2
"reg_map[SLJIT_SAVED_REG1] < 8, saved_reg1_is_loreg",1,1,2
" !ExprHasAnyProperty(pA, EP_TokenOnly|EP_Reduced) ",1,1,2
 iCol>=0 && iCol<=p->nColumn+2 ,1,1,2
 mask==BTREE_BULKLOAD || mask==0 ,1,1,2
 sqlite3BtreeCursorIsValid(pC->pCursor) ,1,1,2
ATK_IS_HYPERTEXT(paragraph3),1,1,2
 pParent==0 || pParent->pLeft==p ,1,1,2
 pNode->n>0 ,1,1,2
 isAgg || pGroupBy ,1,1,2
 rc!=SQLITE_OK || pSorter->pTemp1 ,1,1,2
startIndex <= length,1,1,2
!token.isAll8BitData() || string.is8Bit(),1,1,2
 pIdx->nColumn==1 ,1,1,2
u->le->type == UD_TAB__OPC_TABLE,1,1,2
op() == GetLocalUnlinked,1,1,2
m_parentStyleSheet,1,1,2
 IsPowerOfTwo(chngToIN) ,1,1,2
" ! VertEq( dstLo, dstUp )",1,1,2
free_blocks == free_block,1,1,2
m_retainCount >= count,1,1,2
!node || node->hasTagName(HTMLNames::scriptTag),1,1,2
 pParse->aLabel==0 ,1,1,2
start.offset >= start.lineStartOffset,1,1,2
"::testing::internal::CmpHelperSTRCASEEQ, expected, actual",1,1,2
m_segments.size() == m_numberOfSegments,1,1,2
object->inherits(classInfo),1,1,2
m_currentAttribute->valueRange.start,1,1,2
!block->m_isPinned,1,1,2
column <= MaxFatLineModeColumn,1,1,2
 ArraySize(aSyscall)==16 ,1,1,2
 argc==2 || argc==3 ,1,1,2
m_type == WebVTTTokenTypes::StartTag || m_type == WebVTTTokenTypes::EndTag,1,1,2
 isCommit ,1,1,2
 win_mem_data.magic1==WINMEM_MAGIC1 ,1,1,2
 (p->flags & MEM_Dyn)==0 || p->xDel!=0 ,1,1,2
 pReg->flags & MEM_Blob ,1,1,2
m_marks.get(atomNumber(p)),1,1,2
 !_node->child2() && !_node->child3(),1,1,2
!value.latinKey,1,1,2
!node || isHTMLOptGroupElement(node),1,1,2
"endOffset, ==, 0",1,1,2
m_contextElement,1,1,2
is8ByteAligned(reinterpret_cast<void*>(oldBytes)),1,1,2
"text_encoding, ==, ""utf8""",1,1,2
 rc==SQLITE_OK || p->rc==SQLITE_CONSTRAINT ,1,1,2
"jsCFString, nan("""")",1,1,2
returnAddress >= instructions().begin() && returnAddress < instructions().end(),1,1,2
d_ptr.load(),1,1,2
m_animVal->animatedProperty() == this,1,1,2
!node->prev(),1,1,2
"value, !value",1,1,2
 (pOp->p5 & SQLITE_JUMPIFNULL)==0 ,1,1,2
"text, ==, ""\342\200\242\342\200\242\342\200\242\342\200\242""",1,1,2
reg < 20,1,1,2
!loop,1,1,2
"endOffset, ==, 21",1,1,2
 SQLITE_FullFSync==PAGER_FULLFSYNC ,1,1,2
m_markSets.isEmpty(),1,1,2
 sqlite3KeyInfoIsWriteable(pKey) ,1,1,2
 !winMemGetOwned() ,1,1,2
"vgErrorCode == VG_NO_ERROR, ""Found %s"", toVGErrorConstant(vgErrorCode)",1,1,2
m_structure->isEmpty(),1,1,2
 (rc==SQLITE_OK)==(pMod!=0) ,1,1,2
 pColExpr!=0 ,1,1,2
 pCsr->pSorter->pUnpacked!=0 ,1,1,2
"codeBlock, codeBlock == codeBlocksBeingCompiled.last()",1,1,2
 u.ao.i==u.ao.nByte ,1,1,2
 lwr==upr+1 || (pPage->intKey && !pPage->leaf) ,1,1,2
"!JSValueChecker<T>::IsJSValue, WriteBarrier_JSValue_is_invalid__use_unknown",1,1,2
"G_OBJECT(item4)->ref_count, ==, 1",1,1,2
"scode, &dflags, op == OP_ASSERT",1,1,2
 *pRc || pNode->key.nAlloc==0 ,1,1,2
!object || object->isDetails(),1,1,2
idbKey->isValid(),1,1,2
 v->db->init.busy==0 ,1,1,2
 (idxStr==0 && argc==0) || (int)strlen(idxStr)==argc*2 ,1,1,2
abegin >= d->begin(),1,1,2
 sMem.z==sMem.zMalloc ,1,1,2
 (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 ,1,1,2
fixture->loaded == FALSE,1,1,2
 nUri>=0 ,1,1,2
m_divotEnd.offset >= m_divotEnd.lineStartOffset,1,1,2
"jsEmptyString, 0",1,1,2
"webkit_web_history_item_get_title(fixture->item), ==, ""Example1""",1,1,2
 pOut->flags==MEM_Null ,1,1,2
"text, ==, ""This is another line wrapped\nbecause of one forced\nline break in the middle.""",1,1,2
"JSValueIsInstanceOfConstructor(context, result, arrayConstructor, NULL)",1,1,2
"StructureFlags & OverridesVisitChildren, OverridesVisitChildrenWithoutSettingFlag",1,1,2
"!JSValueIsEqual(context, jsObjectNoProto, JSValueMakeNumber(context, 1), &exception)",1,1,2
!weakref,1,1,2
comboboxMenu,1,1,2
v && !exception,1,1,2
 pSorter->iWriteOff>iStart ,1,1,2
"isValidIterator(before), ""QVector::insert"", ""The specified iterator argument 'before' is invalid""",1,1,2
 rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) ,1,1,2
world->m_wrappers.find(domObject)->second.get() == wrapper,1,1,2
 pCaller->opcode==OP_Yield ,1,1,2
 bBulk==0 || bBulk==1 ,1,1,2
 pPage!=0 ,1,1,2
 SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 ,1,1,2
totalStorageCapacity() >= propertyTable()->size(),1,1,2
SLOW_IS_REG(dst),1,1,2
 43==sqlite3LogEst(20) ,1,1,2
 pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 ,1,1,2
 (pMem[i].flags & MEM_Ephem)==0 || (pMem[i].flags & (MEM_Str|MEM_Blob))==0 ,1,1,2
!m_suspended,1,1,2
 p2>0 && p2+n<=(p->nMem-p->nCursor)+1 ,1,1,2
"(!QMetaTypeId2<T>::IsBuiltIn), ""QMetaType::registerComparators: The type must be a custom type.""",1,1,2
"length, ==, 1",1,1,2
 key>=aDia[iRes] ,1,1,2
 j<p->nLabel ,1,1,2
m_wrappers->isEmpty(),1,1,2
!isInUse(),1,1,2
m_kind == SetLocalEvent || m_kind == MovHintEvent,1,1,2
 reader.aNode ,1,1,2
c != oc,1,1,2
(uimm & 0x8000000000000000l) && (shift2 > 0) && (shift2 <= 16),1,1,2
"element_text_equal_to(context, """")",1,1,2
 nLookaside==0 || nLookaside==db->lookaside.nOut ,1,1,2
atk_object_get_index_in_parent(colHeader) == 1,1,1,2
!m_selector->isAttributeSelector(),1,1,2
!node || isHTMLTextAreaElement(node),1,1,2
 prev == node ,1,1,2
!propertyHandler(property),1,1,2
"canBeJumpT4(instruction, target, scratch)",1,1,2
 (p->btreeMask & (((yDbMask)1)<<u.at.iDb))!=0 ,1,1,2
m_region,1,1,2
sourceString->is8Bit(),1,1,2
structure()->isObject(),1,1,2
"SLJIT_REWRITABLE_JUMP != SLJIT_SINGLE_OP, rewritable_jump_and_single_op_must_not_be_the_same",1,1,2
 (pLoop->wsFlags & WHERE_MULTI_OR)==0 ,1,1,2
p && isAtomAligned(p) && atomNumber(p) < atomsPerBlock,1,1,2
"startOffset, ==, startOffsetResult",1,1,2
 sqlite3BtreeCursorIsValid(u.bh.pCrsr) ,1,1,2
Base_didFinalize,1,1,2
!a->m_parent,1,1,2
 pPage->nOverflow<=ArraySize(pPage->aOvfl) ,1,1,2
 iSortOrder==0 || iSortOrder==1 ,1,1,2
"!JSValueIsObject(context, NULL)",1,1,2
 pFrom->pSelect ,1,1,2
 unionTab==dest.iSDParm || dest.eDest!=priorOp ,1,1,2
strongref <= 0,1,1,2
" sampleIsBetter(p, pNew, pOld) ",1,1,2
been_to_icon_loaded,1,1,2
code_ptr - code <= (sljit_si)compiler->size,1,1,2
 pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) ,1,1,2
!(dst & SLJIT_MEM) || (dst & REG_MASK) != SLJIT_LOCALS_REG,1,1,2
divotEnd.offset >= divot.offset,1,1,2
 memIsValid(u.bf.pData) ,1,1,2
m_profileSelectionMode == UseOverrideSandboxProfilePath,1,1,2
last,1,1,2
selectedItem == item1,1,1,2
"ErrorString*, Frame*",1,1,2
 pParent==pRoot ,1,1,2
 pPager->syncFlags==0 ,1,1,2
"!string || isInAtomicStringTable(string), ""The atomic string comes from an other thread!""",1,1,2
"databasePath, ==, webkit_favicon_database_get_path(database)",1,1,2
 pToken->z!=0 || pToken->n==0 ,1,1,2
 idx<=pPage->nCell ,1,1,2
d->alloc >= uint(aalloc),1,1,2
!m_hash,1,1,2
"JSValueIsUndefined(context, JSObjectGetPropertyAtIndex(context, o, 0, &exception))",1,1,2
"y, ==, 5",1,1,2
 (p->btreeMask & (((yDbMask)1)<<u.br.iDb))!=0 ,1,1,2
"DontDelete < FirstInternalAttribute, DontDelete_is_below_FirstInternalAttribute",1,1,2
"constant, ""%s"", dlerror()",1,1,2
!node || isHTMLTitleElement(node),1,1,2
 pPager->doNotSpill==0 ,1,1,2
m_values[0] < oneGreaterThanMaxUInt16,1,1,2
 nNew>=(p->nOpAlloc+nOp) ,1,1,2
dst_r == TMP_REGISTER,1,1,2
removedIndex != -1,1,1,2
contents,1,1,2
!m_used[m_free[i]],1,1,2
addr <= 0x7fffffffffffl,1,1,2
result->m_bytecodeOffset != -1,1,1,2
itemIndex < m_values->size(),1,1,2
 p->pEntry==0 ,1,1,2
 p->eLock>=SHARED_LOCK || p->noReadlock ,1,1,2
"webkit_dom_html_element_get_inner_text(htmlElement), ==, ""first""",1,1,2
++mutex_ > 0,1,1,2
atk_object_get_role(hLinkObject2) == ATK_ROLE_LINK,1,1,2
 j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) ,1,1,2
strlen(buffer_.start()) == static_cast<size_t>(position_),1,1,2
 sDistinct.isTnct ,1,1,2
 u.bk.pC!=0 ,1,1,2
dataTypeID,1,1,2
dst_r == TMP_REG1,1,1,2
this != noDocumentInstance(),1,1,2
 aOut==0 ,1,1,2
"NULL == JSValueToObject(context, jsNull, &exception)",1,1,2
column <= MaxFatColumnModeColumn,1,1,2
" countValidCursors(pBt, 1)==0 ",1,1,2
buffer.size() >= static_cast<size_t>(p - buffer.data()),1,1,2
"putByVal, m_graph[putByVal].op == PutByIdDirect",1,1,2
transform.isAffine(),1,1,2
 ArraySize(aSyscall)==24 ,1,1,2
icon,1,1,2
parent_window != NULL,1,1,2
!ATK_IS_TEXT(comboBox),1,1,2
 !IsVirtual(pSrc->pTab) ,1,1,2
m_numParameters >= 0,1,1,2
 p->pTab!=0 ,1,1,2
"WTF::IsArithmetic<T>::value, type_must_have_known_encoded_size",1,1,2
"0, mutex_lock_decl_missing_var_name",1,1,2
"cell, table()->cellAfter(cell) == this",1,1,2
"sizeof(uint64) == sizeof(unsigned long long), sizeof_uint64_is_not_sizeof_long_long",1,1,2
!cell->isZapped(),1,1,2
 rc==SQLITE_OK || *ppStmt==0 ,1,1,2
"CheckCompatibleArguments<FunctionPointer<Signal>::Arguments, FunctionPointer<Slot>::Arguments>::value",1,1,2
" LEQ( **(i+1), **i )",1,1,2
hasFastArrayStorage(oldType),1,1,2
 cur[0]->clazz ,1,1,2
isIntegerValue(m_marginBox.bottom()),1,1,2
"!(IsSubclass<T, RefCountedBase>::value), DoNotUseAdoptPtrWithRefCounted",1,1,2
ascii_isspace('\f'),1,1,2
*opcode == OP_CRRANGE || *opcode == OP_CRMINRANGE || *opcode == OP_CRPOSRANGE,1,1,2
m_invalidationType == static_cast<unsigned>(invalidationType),1,1,2
"sline_window1.width, <, lline_window.width",1,1,2
selectedItem == item2,1,1,2
!grandpa->red,1,1,2
m_type == Type::TimestampTag,1,1,2
(pExpr->x.pList->nExpr % 2) == 0,1,1,2
numberOfSlots <= indexingHeader()->preCapacity(structure),1,1,2
"(!QMetaTypeId2<T>::IsBuiltIn), ""QMetaType::registerDebugStreamOperator: The type must be a custom type.""",1,1,2
"atkAttributeSetContainsAttributeName(set2, ""layout-guess"")",1,1,2
argumentCountIncludingThis < newCodeBlock->numParameters(),1,1,2
"JSValueIsStrictEqual(context, JSObjectGetPrototype(context, object2), object3)",1,1,2
!m_generatedBefore,1,1,2
offset < size(),1,1,2
 iOpt==6 ,1,1,2
 *pPgno==iTrunk ,1,1,2
!m_supplements.get(key),1,1,2
!child->replacement,1,1,2
ATK_HYPERLINK(hLink2),1,1,2
 p->iOff<=p->nNode ,1,1,2
event && event->isFocusEvent(),1,1,2
" DbMaskTest(p->btreeMask, pOp->p2) ",1,1,2
ba.ref.isStatic(),1,1,2
 IsUniqueIndex(pIdx) ,1,1,2
"::testing::internal::CmpHelperSTRNE, s1, s2",1,1,2
type == DirtyContents,1,1,2
kind() != SourceNotSet,1,1,2
b >= 0,1,1,2
tess->windingRule == GLU_TESS_WINDING_ODD || tess->windingRule == GLU_TESS_WINDING_NONZERO || tess->windingRule == GLU_TESS_WINDING_POSITIVE || tess->windingRule == GLU_TESS_WINDING_NEGATIVE || tess->windingRule == GLU_TESS_WINDING_ABS_GEQ_TWO,1,1,2
 MAP_FAILED!=0 ,1,1,2
!region->isEmpty(),1,1,2
 pIdxKey->default_rc==1 || pIdxKey->default_rc==0 || pIdxKey->default_rc==-1 ,1,1,2
 aRegIdx ,1,1,2
 idx==pCur->aiIdx[pCur->iPage] ,1,1,2
 u.cl.pName->flags & MEM_Str ,1,1,2
"!(length % 2), length_must_be_a_multiple_of_two",1,1,2
ATK_OBJECT(oList),1,1,2
((flags & EMIT_TRAILING_DECIMAL_POINT) != 0) || !((flags & EMIT_TRAILING_ZERO_AFTER_POINT) != 0),1,1,2
"text, ==, ""foo""",1,1,2
ATK_OBJECT(hLinkObject2),1,1,2
!m_markSet,1,1,2
 u.am.pC!=0 ,1,1,2
!m_currentSegment || m_currentSegment->size(),1,1,2
type == QJsonValue::Array || type == QJsonValue::Object,1,1,2
 pOut<=&aMem[(p->nMem-p->nCursor)] ,1,1,2
!d->registerArray,1,1,2
" !ExprHasProperty(p, EP_NoReduce) ",1,1,2
"text, ==, ""foo qux quux baz""",1,1,2
!m_color || m_valid,1,1,2
 memIsValid(u.cm.pX) ,1,1,2
!node || node->hasTagName(SVGNames::scriptTag),1,1,2
"expectedCharacter, *current() == expectedCharacter",1,1,2
!JSObjectGetPrivate(printFunction),1,1,2
provider()->source()[closeBrace] == '}',1,1,2
"Function < FirstInternalAttribute, Function_is_below_FirstInternalAttribute",1,1,2
 pSorter->pRecord==0 ,1,1,2
 OP_SeekLe == OP_SeekLt+1 ,1,1,2
webkit_web_view_can_go_forward(webView),1,1,2
WriteBarrier<Unknown>* registerPointer,1,1,2
!globalData.structureStructure,1,1,2
WEBKIT_DOM_IS_HTML_ANCHOR_ELEMENT(parent),1,1,2
"Index >= 0 && Index < Count, ""Index out of bounds""",1,1,2
 (flags1 & MEM_Cleared)==0 ,1,1,2
count >= 3,1,1,2
constant,1,1,2
 reg->eUp->winding == 0 ,1,1,2
 p->accError==0 || p->nAlloc==0 ,1,1,2
"atkAttributeSetAttributeNameHasValue(set2, ""layout-guess"", ""true"")",1,1,2
HasIsNullMethod<SelfTestFinal1>::Value,1,1,2
 u.aj.p2>0 && u.aj.p2+u.aj.n<=p->nMem+1 ,1,1,2
location.startOffset >= location.lineStartOffset,1,1,2
 p->nToken==1 ,1,1,2
 nVal==0 || nVal==1 ,1,1,2
m_used.size() == m_free.size(),1,1,2
"!JSObjectIsFunction(context, NULL)",1,1,2
!hasIndexedProperties(oldType) || hasUndecided(oldType),1,1,2
 pStep!=0 ,1,1,2
 pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 ,1,1,2
(((p) >> 4) & 0xf) == 0,1,1,2
 sqlite3VdbeCheckMemInvariants(pDest) ,1,1,2
m_op == GetById || m_op == GetByIdFlush,1,1,2
(sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) >= -0x80000000ll && (sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) <= 0x7fffffffll,1,1,2
!node->wrapper(),1,1,2
"webkit_web_history_item_get_title(currentItem), ==, ""Site 1""",1,1,2
"JSValueIsUndefined(context, v)",1,1,2
!std::isnan(time),1,1,2
mutex_ == 0,1,1,2
op() == ResolveGlobal,1,1,2
"fline_window.x, ==, afline_window.x",1,1,2
 mem1.flags & MEM_Int ,1,1,2
!(size % 2),1,1,2
 r>=0.0 ,1,1,2
"JSValueIsNull(context, JSObjectGetPrototype(context, object1)), ""It is possible to close a prototype chain cycle""",1,1,2
structure->classInfo() == m_structure->classInfo(),1,1,2
 pCache->nPage >= pCache->nRecyclable ,1,1,2
subexpressionDivot.offset >= divot().offset,1,1,2
 1 >= ((pMem->zMalloc && pMem->zMalloc==pMem->z) ? 1 : 0) + (((pMem->flags&MEM_Dyn)&&pMem->xDel) ? 1 : 0) + ((pMem->flags&MEM_Ephem) ? 1 : 0) + ((pMem->flags&MEM_Static) ? 1 : 0) ,1,1,2
m_codeType == FunctionCode,1,1,2
 EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) ,1,1,2
 pCur->cachedRowid==iRowid ,1,1,2
!autoLoadImages,1,1,2
gtk_widget_get_realized(widget),1,1,2
 pParse->ckBase>0 ,1,1,2
buf_used_ > 0,1,1,2
 snode->count <= FTC_SBIT_ITEMS_PER_NODE ,1,1,2
"hash == StringHasher::computeHash(m_data, m_length)",1,1,2
WEBKIT_DOM_IS_HTML_TITLE_ELEMENT(ptr),1,1,2
m_local == find()->m_local,1,1,2
tableEntry < std::numeric_limits<unsigned short>::max(),1,1,2
"!object || !strcmp(object->renderName(), ""RenderSVGTextPath"")",1,1,2
d->size == asize,1,1,2
!current->nextbacktracks,1,1,2
m_profileSelectionMode == UseSandboxProfile,1,1,2
 iDb>=0 && iDb<pParse->db->nDb ,1,1,2
m_classInfo,1,1,2
line <= MaxFatColumnModeLine,1,1,2
 u.am.avail>=0 ,1,1,2
mutex_-- > 0,1,1,2
propertyId != CSSPropertyInvalid,1,1,2
 pPage->pgno==pgno ,1,1,2
!m_cell || !isZombie(m_cell),1,1,2
 pIndex!=0 ,1,1,2
"webkit_web_view_get_load_status(view), ==, WEBKIT_LOAD_PROVISIONAL",1,1,2
"characterCount, ==, 25",1,1,2
*position,1,1,2
asValue() == jsBoolean(true) || asValue() == jsBoolean(false),1,1,2
 u.ar.desiredAutoCommit==1 || u.ar.desiredAutoCommit==0 ,1,1,2
 cnt==db->activeVdbeCnt ,1,1,2
WEBKIT_DOM_IS_HTML_ELEMENT(table),1,1,2
m_lastAllocated < NUM_REGS,1,1,2
"x, ==, 5",1,1,2
enableFullscreen,1,1,2
 p->base.zErrMsg==0 ,1,1,2
 flags & MEM_Str ,1,1,2
!(forNode(edge).m_type & ~typeFilterFor(edge.useKind())),1,1,2
 pParse->pWith==pWith ,1,1,2
index <= m_buffer.capacity(),1,1,2
"sizeof(qunicodechar) == 2, ""qunicodechar must typedef an integral type of size 2""",1,1,2
 known_othersubr_result_cnt == 0 || unknown_othersubr_result_cnt == 0 ,1,1,2
" pCol->affinity==SQLITE_AFF_NONE || pCol->affinity==sqlite3AffinityType(zType, 0) ",1,1,2
sibling->right,1,1,2
!(dataFormat & DataFormatJS),1,1,2
m_structure || !vm.structureStructure,1,1,2
"webkit_web_view_get_uri(web_view), ==, ""about:blank""",1,1,2
 pOp->opcode!=OP_NextIfOpen || pOp->p4.xAdvance==sqlite3BtreeNext ,1,1,2
 chngPk==0 || chngPk==1 ,1,1,2
offset <= size(),1,1,2
addend.checkConsistency(),1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, item1)",1,1,2
 idxNum>=0 && idxNum<=(FTS3_FULLTEXT_SEARCH+p->nColumn) ,1,1,2
"text, ==, ""Block span in a link in a table cell\nInline span in a link in a table cell""",1,1,2
useKind == WriteBarrierForGenericAccess,1,1,2
"JSValueGetType(context, jsOneThird) == kJSTypeNumber",1,1,2
 pPhrase->nToken==1 ,1,1,2
 iFrom>=iTo+nReg || iFrom+nReg<=iTo ,1,1,2
decodedCharacter.isEmpty(),1,1,2
"!getCachedWrapper(currentWorld(exec), domObject)",1,1,2
"webkit_dom_html_collection_get_length(rows), ==, 1",1,1,2
hasJITReturnAddress(),1,1,2
isNPObjectProxy(npObject),1,1,2
 pCsr->bPoint==1 ,1,1,2
static_cast<void*>(inlineStorage) == static_cast<void*>(this + 1),1,1,2
attributeMap(),1,1,2
"1 == JSValueToNumber(context, JSObjectGetPropertyAtIndex(context, o, 0, &exception), &exception)",1,1,2
!m_vertexShader || m_vertexShader->isCachedShader(),1,1,2
 (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int ,1,1,2
!m_stream && stream,1,1,2
 pEnd->leftCursor==iCur ,1,1,2
 pPager->walSyncFlags==0 ,1,1,2
 pMinMax==0 || pMinMax->nExpr==1 ,1,1,2
 p->eCreate==2 ,1,1,2
 pPk->nColumn==j ,1,1,2
!node || isHTMLLabelElement(node),1,1,2
 desiredAutoCommit==1 ,1,1,2
y2 >= y1,1,1,2
 pNew->iCol==pOld->iCol ,1,1,2
type == WEBKIT_SCRIPT_DIALOG_PROMPT,1,1,2
 eOp!=2 ,1,1,2
 pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) ,1,1,2
m_data.string8Ptr,1,1,2
(std::numeric_limits<size_t>::max() - granularity) > request,1,1,2
sibling->right->red,1,1,2
indexToRemove != -1,1,1,2
!data.isNull(),1,1,2
m_numNodeListCaches > 0,1,1,2
 pIdx->pTable==pTab ,1,1,2
 up->Lnext != up && up->Lnext->Lnext != up ,1,1,2
m_argumentValueProfiles.size() == static_cast<unsigned>(m_numParameters),1,1,2
 OP_SeekLE == OP_SeekLT+1 ,1,1,2
"charactersCount > 1, AtomicStringFromLiteralNotEmpty",1,1,2
m_type == LengthTrackSizing,1,1,2
byte_set[0] > 0 && byte_set[0] < 255,1,1,2
"!G_TYPE_INSTANCE_GET_INTERFACE(object, ATK_TYPE_TEXT, AtkTextIface)",1,1,2
 seenIn ,1,1,2
 zBuffer ,1,1,2
 nKeyCol<=nCol ,1,1,2
x >= 0,1,1,2
 u.bf.pKey->flags & MEM_Int ,1,1,2
!glyph || fontData == m_fontDataForAllGlyphs,1,1,2
"i, ==, 3",1,1,2
 pProgram->nOp>0 ,1,1,2
sizeof(QGlyphAttributes) == 1,1,1,2
"isValidIterator(abegin), ""QVector::erase"", ""The specified iterator argument 'abegin' is invalid""",1,1,2
 lwr==upr+1 ,1,1,2
 a & 0x80 ,1,1,2
"(JSFinalObject_inlineStorageCapacity >= JSNonFinalObject_inlineStorageCapacity), final_storage_is_at_least_as_large_as_non_final",1,1,2
format_size == 4 || format_size == 8,1,1,2
this->offset_reader_,1,1,2
 pOld->isPSample==0 && pNew->isPSample==0 ,1,1,2
 bestJ>=0 ,1,1,2
ATK_HYPERLINK(hLink3),1,1,2
object->methodTable(),1,1,2
 f->prev == fPrev ,1,1,2
(static_cast<uint32_t>(cond & 0x0fffffff)) == 0 && static_cast<uint32_t>(cond) < static_cast<uint32_t>(ARMAssembler::AL),1,1,2
"G_OBJECT(item1)->ref_count, ==, 1",1,1,2
 pEList->nExpr>0 ,1,1,2
key->isIdentifier() || key->isEmptyUnique(),1,1,2
 winMutex_isNt>=-1 && winMutex_isNt<=1 ,1,1,2
 pIn1 <= &p->aMem[p->nMem] ,1,1,2
isCell() && isObject(),1,1,2
 pCur->wrFlag && pBt->inTransaction==TRANS_WRITE && !pBt->readOnly ,1,1,2
"ScriptState*, PassRefPtr<ScriptArguments>, bool condition",1,1,2
"atkAttributeSetAttributeHasValue(set4, ATK_TEXT_ATTR_SIZE, ""14"")",1,1,2
rm != 14,1,1,2
!m_heap->vm()->isInitializingObject(),1,1,2
 !(u.am.pDest->flags & MEM_Dyn) ,1,1,2
 u.aj.n>0 ,1,1,2
 pExpr->op==TK_COLLATE ,1,1,2
sheet,1,1,2
 e->Dst != NULL ,1,1,2
 eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) ,1,1,2
 pOp->p5==0 || pOp->p4type==P4_INT32 ,1,1,2
"atk_hyperlink_get_start_index(hLink1), ==, 0",1,1,2
 (isCommit!=0)==(nTruncate!=0) ,1,1,2
 iDb==0 || pId2->z ,1,1,2
!m_maxTrackBreadth.isUndefined(),1,1,2
conn->is_async,1,1,2
"JSValueIsEqual(context, result, jsOne, NULL)",1,1,2
!node || isHTMLFormControlElement(node),1,1,2
WEBKIT_DOM_IS_XPATH_RESULT(result),1,1,2
" EdgeSign( dstUp, tess->event, orgUp ) <= 0 ",1,1,2
leftAncestors.back() == root && rightAncestors.back() == root,1,1,2
length < std::numeric_limits<unsigned>::max(),1,1,2
remainder == static_cast<uint32_t>(remainder),1,1,2
isInlineOffset(offset),1,1,2
 iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) ,1,1,2
"""text/html"", ==, webkit_web_resource_get_mime_type(resource)",1,1,2
!NoEventDispatchAssertion::isEventDispatchForbidden(),1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
!BadReg(rd2),1,1,2
 bPreserve==0 || pMem->flags&(MEM_Blob|MEM_Str) ,1,1,2
 (p->flags2 & EP2_MallocedToken)==0 ,1,1,2
 SQLITE_CacheSpill==PAGER_CACHESPILL ,1,1,2
"""http://this.host.does.not.exist/doireallyexist.html"", ==, webkit_web_data_source_get_unreachable_uri(datasource)",1,1,2
type == QJsonValue::String && !latinOrIntValue,1,1,2
 p->nChar+N >= p->nAlloc ,1,1,2
current->topbacktracks == NULL,1,1,2
!(inp_flags & WRITE_BACK) && !(inst & UPDATE_REQ),1,1,2
"max, nParam <= max",1,1,2
 N>=0 ,1,1,2
"canBeJumpT3(instruction, target, scratch)",1,1,2
"isnan((float)JSValueToNumber(context, jsObjectNoProto, &exception))",1,1,2
 (pCur->curFlags & BTCF_WriteFlag)!=0 && pBt->inTransaction==TRANS_WRITE && (pBt->btsFlags & BTS_READ_ONLY)==0 ,1,1,2
 desiredAutoCommit==1 || desiredAutoCommit==0 ,1,1,2
 pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE ,1,1,2
!node || node->isFixedNode(),1,1,2
GTK_IS_MENU(gtk_menu_item_get_submenu(item)),1,1,2
!(src & SLJIT_MEM) || (src & REG_MASK) != SLJIT_LOCALS_REG,1,1,2
m_end >= m_freePtr,1,1,2
"sizeof(int8_t) == 1, int8_t_is_one_byte",1,1,2
"atk_object_get_n_accessible_children(list), ==, 3",1,1,2
!m_insertions.size() || m_insertions.last().index() <= insertion.index(),1,1,2
 pTab->nCol==pSelect->pEList->nExpr || db->mallocFailed ,1,1,2
child_role == role,1,1,2
"::testing::internal::IsHRESULTFailure, (expr)",1,1,2
u.am.aType,1,1,2
"jsOne, 1",1,1,2
instruction,1,1,2
 p->apCsr[i]==0 ,1,1,2
hasIdentifierNumberForCheck(),1,1,2
 pTerm->eOperator & (WO_LT|WO_LE) ,1,1,2
webkit_download_get_status(download) == WEBKIT_DOWNLOAD_STATUS_CREATED,1,1,2
NOASSERT_UNIMPLEMENTED,1,1,2
addr <= 0x7fffffffffff,1,1,2
"atk_text_get_text(ATK_TEXT(item3), 0, -1), ==, ""3. text and a link""",1,1,2
 iMin>=0 ,1,1,2
 nWrite==0 || nWrite<=(DWORD)nRem ,1,1,2
ownerNode->nodeLists() == this,1,1,2
"valueOfExpression, ""Q_ASSUME()"", ""Assumption in Q_ASSUME(\"""" #Expr ""\"") was not correct""",1,1,2
 iFrame>iRead ,1,1,2
"textCaretMovedResult, ==, ""|paragraph|30|""",1,1,2
"dylib, ""%s"", dlerror()",1,1,2
 pPhrase->doclist.nList>0 ,1,1,2
 p2>0 && p2+mx<=(p->nMem-p->nCursor)+1 ,1,1,2
 pParse->nested==0 ,1,1,2
"ErrorString*, SecurityOrigin*",1,1,2
region->isCustomSize(),1,1,2
stackpos >= stacktop + 2,1,1,2
 stream && stream->cursor == 0 ,1,1,2
 EIGHT_BYTE_ALIGNMENT(pIndex->azColl) ,1,1,2
found->isRefCountedWrapper(),1,1,2
!(ptr[1] & 0xF000),1,1,2
ascii_isspace('\v'),1,1,2
Blob::isNormalizedContentType(type),1,1,2
m_errorStructure->isObject(),1,1,2
messageSenderConnection(),1,1,2
 pIn1 <= &p->aMem[(p->nMem-p->nCursor)] ,1,1,2
 (u32)n==pLevel->plan.nEq ,1,1,2
 FT_ABS( point->out_dir ) == major_dir && point->in_dir != point->out_dir ,1,1,2
 (pDup->flags & (EP_Reduced|EP_TokenOnly))==0 ,1,1,2
"caretOffset, ==, characterCount",1,1,2
 memIsValid(pName) ,1,1,2
 nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) ,1,1,2
"outOfLineGrowthFactor == 2, outOfLineGrowthFactor_is_two",1,1,2
!m_installed,1,1,2
 pPKey2->pKeyInfo->nField>0 ,1,1,2
"length, ==, 2",1,1,2
 pOp->p1+pOp->p2<=p->nMem+1 ,1,1,2
 pLevel->plan.wsFlags & WHERE_INDEXED ,1,1,2
OFFS_REG(p) == 0,1,1,2
"inlineCapacity, !inlineCapacity",1,1,2
*cc == OP_BRA || *cc == OP_CBRA || *cc == OP_CBRAPOS || *cc == OP_SCBRA || *cc == OP_SCBRAPOS,1,1,2
!m_wrapper,1,1,2
outputBitCount < (sizeof(T) * 8),1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, addItem1)",1,1,2
std::isfinite(number),1,1,2
" ! VertEq( eUp->Dst, eLo->Dst )",1,1,2
 u.bi.pC->pCursor!=0 ,1,1,2
"atk_hyperlink_get_uri(hLink3, 0), ==, ""http://baz.foo.bar/""",1,1,2
 memIsValid(pX) ,1,1,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] < 7 && reg_map[TMP_REGISTER] == 2, invalid_register_assignment_for_div_mul",1,1,2
!object || !object->isAnonymousBlock(),1,1,2
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || (pLoop->wsFlags & WHERE_INDEXED)!=0 ,1,1,2
m_codeOrigin == codeOrigin,1,1,2
 zPath[nDb]!='\n' ,1,1,2
 (iEq==0 && iGe==-1) || (iEq==-1 && iGe==0) ,1,1,2
byteStream,1,1,2
left && right,1,1,2
" !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) ",1,1,2
m_executableMemory->start(),1,1,2
 pCaller->p2>=0 && pCaller->p2<p->nOp ,1,1,2
p <= limit,1,1,2
 oc==OP_SeekGE || oc==OP_SeekGT ,1,1,2
!attributeName.isEmpty(),1,1,2
isText(),1,1,2
"!""unexpected size""",1,1,2
!decoder.numberOfEntriesRemaining(),1,1,2
 p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK ,1,1,2
 u.bg.pC!=0 ,1,1,2
" !ExprHasAnyProperty(pB, EP_TokenOnly|EP_Reduced) ",1,1,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_first",1,1,2
type() == NPVariantData::Bool,1,1,2
"timesElementInspected, ==, 2",1,1,2
static_cast<int>(type) <= 0xff,1,1,2
"(static_cast<Parent*>(thisObject)), &JSCallbackObject<Parent>::s_info",1,1,2
 pCur->bPoint || pCur->nPoint ,1,1,2
 ((int(*)(void *))(ap[0]))==xBusyHandler ,1,1,2
!static_cast<const Base*>(this)->get() || !static_cast<const Base*>(this)->get().isZombie(),1,1,2
 axis_count <= T1_MAX_MM_AXIS ,1,1,2
 block == NULL ,1,1,2
"numberOfSlotsForLastOffset(m_offset, m_inlineCapacity) == propertyTable->propertyStorageSize()",1,1,2
 iIdxCur!=0 || (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 ,1,1,2
ATK_IS_OBJECT(table),1,1,2
it->value.was(value),1,1,2
atk_object_get_parent(axRoot) == axAlternativeParent,1,1,2
"isValidIterator(it), ""QHash::erase"", ""The specified iterator argument 'it' is invalid""",1,1,2
thisObject->Parent::structure()->typeInfo().overridesVisitChildren(),1,1,2
 res==0 || (res==1 && pC->isTable==0) ,1,1,2
 pItem->isPopulated==0 ,1,1,2
"y, ==, mline_window.y",1,1,2
 !pCsr->pBt->readOnly && pCsr->pBt->inTransaction==TRANS_WRITE ,1,1,2
"G_OBJECT(forwardList->data)->ref_count, ==, 1",1,1,2
WEBKIT_DOM_IS_HTML_HEAD_ELEMENT(head),1,1,2
"isValidIterator(aend), ""QVarLengthArray::insert"", ""The specified const_iterator argument 'aend' is invalid""",1,1,2
 i>=0 && i<=SQLITE_INDEX_SAMPLES ,1,1,2
 p1>0 && p1+mx<=(p->nMem-p->nCursor)+1 ,1,1,2
 memIsValid(u.ag.pArg) ,1,1,2
function->structure()->globalObject(),1,1,2
 pItem->iCol>0 ,1,1,2
 pToken->pSegcsr || pPhrase->iDoclistToken>=0 ,1,1,2
 u.az.oc!=OP_SeekLt || u.az.r.flags==0 ,1,1,2
"webkit_web_resource_get_uri(fixture->webResource) ,==,""http://example.com/""",1,1,2
 u.az.oc!=OP_SeekGt || u.az.r.flags==UNPACKED_INCRKEY ,1,1,2
 zTabName!=0 ,1,1,2
text || !fixture->info->expectedContent,1,1,2
ch >= info->begin && ch <= info->end,1,1,2
 pPager->noReadlock==0 || pPager->readOnly ,1,1,2
m_code,1,1,2
common->start_used_ptr != 0 && common->start_ptr != 0 && (common->mode == JIT_PARTIAL_SOFT_COMPILE ? common->hit_start != 0 : common->hit_start == 0),1,1,2
 bDescDoclist==0 || bDescDoclist==1 ,1,1,2
 e->Lnext != e ,1,1,2
 nRead>0 ,1,1,2
m_isolatedRuns.isEmpty(),1,1,2
"endOffset, ==, 17",1,1,2
m_kind == BirthToFill || m_kind == Fill || m_kind == BirthToSpill || m_kind == Spill || m_kind == SetLocalEvent,1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue ,1,1,2
 pWal==0 || pWal->readLock>=0 ,1,1,2
child <= pq->max,1,1,2
atk_object_get_role(hLinkObject) == ATK_ROLE_CHECK_BOX,1,1,2
m_arguments[idx] == Traits::defaultValue(),1,1,2
key == extractKey(&array[0]),1,1,2
 pagerUseWal(pPager) || pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,1,1,2
 eOp & (WO_ISNULL|WO_EQ|WO_IN) ,1,1,2
m_kind == BirthToFill || m_kind == Fill || m_kind == BirthToSpill || m_kind == Spill || m_kind == Death || m_kind == MovHintEvent,1,1,2
"webkit_web_view_go_to_back_forward_item(webView, item1)",1,1,2
hasLocal(),1,1,2
(uint)i < (uint)m_length,1,1,2
 pParse==p->pParse ,1,1,2
aalloc ? d != Data::sharedNull() : d == Data::sharedNull(),1,1,2
 db->nVdbeActive>=db->nVdbeRead ,1,1,2
subexpressionDivot >= divot(),1,1,2
state >= 0,1,1,2
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,1,1,2
"JSValueIsNull(context, JSObjectGetPrototype(context, object1))",1,1,2
 iIndexCur>=0 ,1,1,2
 u.bl.pC!=0 ,1,1,2
z->parent() || z == m_root,1,1,2
 flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) ,1,1,2
m_errorStructure,1,1,2
 p->pSchema==0 || p->zDatabase==0 ,1,1,2
length == 0 || (length > 0 && data != NULL),1,1,2
 yymsp[-2].minor.yy473!=0 ,1,1,2
ATK_IS_ACTION(item1),1,1,2
 aToOpen==0 ,1,1,2
 p==p->pParent->pRight || p==p->pParent->pLeft ,1,1,2
 p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) ,1,1,2
!webkit_download_get_progress(download),1,1,2
!isUnreachableNode(relatedTarget.get()),1,1,2
m_state == Unused,1,1,2
m_type == Type::Uninitialized || m_type == Type::Character,1,1,2
"!object || !strcmp(object->renderName(), ""RenderSVGViewportContainer"")",1,1,2
 pModule->xColumn ,1,1,2
sibling->left->red,1,1,2
common->optimized_cbracket[offset >> 1] == 0,1,1,2
event && event->isTouchEvent(),1,1,2
m_jsValue && m_jsValue.isCell(),1,1,2
!b->m_parent,1,1,2
 0==pParse->nQueryLoop ,1,1,2
global.attributes & DontDelete,1,1,2
"::testing::internal::CmpHelperSTREQ, expected, actual",1,1,2
T::expectedType() == CachedResourceClient::expectedType() || next->resourceClientType() == T::expectedType(),1,1,2
 pSorter->aTree==0 ,1,1,2
curr != LONG_MAX,1,1,2
 ((pgsz-1)&pgsz)==0 ,1,1,2
 pPager->fd->pMethods->iVersion>=3 ,1,1,2
found == &backtrack->common.topbacktracks,1,1,2
priorContextLength <= priorContextCapacity,1,1,2
!ascii_isspace(uchar('\377')),1,1,2
"GPOINTER_TO_INT(g_object_get_data(G_OBJECT(webView), ""signal-handled"")), ==, TRUE",1,1,2
"endOffset, ==, 80",1,1,2
"webkit_web_history_item_get_uri(backItem), ==, ""http://example.com/""",1,1,2
 aNext!=p->aAlloc ,1,1,2
 u.aq.pSavepoint==db->pSavepoint ,1,1,2
 pIdx->azColl!=0 ,1,1,2
"atkAttributeSetAreEqual(set2, set3)",1,1,2
"expectedCharacter, WTF::Unicode::foldCase(*current()) == WTF::Unicode::foldCase(expectedCharacter)",1,1,2
 nEq<=(p->nKeyCol+1) ,1,1,2
 op==OP_OpenRead || op==OP_OpenWrite ,1,1,2
 pPhrase->aToken[iToken].pSegcsr==0 ,1,1,2
webkit_dom_node_has_child_nodes(WEBKIT_DOM_NODE(body)) == FALSE,1,1,2
"fline_window.height, ==, afline_window.height",1,1,2
info.base,1,1,2
decoder->destinationID() == destinationID,1,1,2
"!(OBJECT_OFFSETOF(JSNonFinalObject, m_inlineStorage) % sizeof(double))",1,1,2
(addr & ~0x3FFFFFFFL) == ((jump->addr + sizeof(sljit_ins)) & ~0x3FFFFFFFL),1,1,2
 memIsValid(u.be.pMem) ,1,1,2
"!JSObjectSetPrivate(printFunction, (void*)1)",1,1,2
!*freeList || ((char*)*freeList > (char*)this && (char*)*freeList < (char*)this + blockSize),1,1,2
!ascii_isspace(uchar('\xA0')),1,1,2
s->fiberCount() == 1,1,1,2
(static_cast<uintptr_t>(LastUseKind) << 1) <= (static_cast<uintptr_t>(1) << shift()),1,1,2
hasFunctionExprIndex(),1,1,2
pEList == 0 || pSelect == 0,1,1,2
 pOp->p5<ArraySize(p->aCounter) ,1,1,2
"url, ==, ""http://example.com/""",1,1,2
 pTerm->leftCursor==iCur ,1,1,2
code != 0,1,1,2
fenceValue == actualValue,1,1,2
(insn[0] & 0x00ff) != 1,1,1,2
 memIsValid(u.by.pRt) ,1,1,2
 pIdx->aSortOrder!=0 || iColumn==-1 ,1,1,2
m_type & SpecCell,1,1,2
result == --m_segments.head()->m_top,1,1,2
 (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 ,1,1,2
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)!=0 ,1,1,2
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] ,1,1,2
m_ancestorIdentifierFilter,1,1,2
"textCaretMovedResult, ==, ""|paragraph|5|""",1,1,2
!force || common->mode != JIT_COMPILE,1,1,2
m_slowArguments[i].status == SlowArgument::Normal,1,1,2
"text, ==, ""3. Block span in a link in a list item\nInline span in a link in a list item""",1,1,2
atk_object_get_role(item1) == ATK_ROLE_MENU_ITEM,1,1,2
need < UINT_MAX / itemSize / 2,1,1,2
type == WindowNamedItems,1,1,2
 (*(u8*)pKey1)<=0x3F || CORRUPT_DB ,1,1,2
mode == JIT_PARTIAL_HARD_COMPILE,1,1,2
" chngToIN==getMask(&pWInfo->sMaskSet, iCursor) ",1,1,2
!asFunction(callFrame->callee())->jsExecutable()->parameterCount(),1,1,2
"selectedText, ==, ""A list""",1,1,2
!node->red,1,1,2
"loadingEventsResult, ==, ""|load-complete""",1,1,2
"type, type == LabelsNodeListType",1,1,2
atk_object_get_role(panel) == ATK_ROLE_PANEL,1,1,2
 j+1 < nOld ,1,1,2
"atk_hyperlink_get_uri(hLinkInListItem, 0), ==, ""http://foo.bar.baz/""",1,1,2
 rc==0 ,1,1,2
 u.bh.pC->nullRow==0 ,1,1,2
!block->isOversize(),1,1,2
(insn[1] & 0xf000) == 0x3000,1,1,2
"webkit_web_view_get_load_status(fixture->webView), ==, WEBKIT_LOAD_PROVISIONAL",1,1,2
 rc==SQLITE_OK || db->nDeferredCons>0 ,1,1,2
"kind, kind == Variable",1,1,2
"ARMRegisters::d4 == 4, d4_is_4",1,1,2
"bitCount < sizeof(void*) * 8, bitCount_shall_not_exceed_address_space_limit",1,1,2
common->positive_assert_quit == NULL,1,1,2
" !ExprHasAnyProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) ",1,1,2
policy == DontInitialize,1,1,2
!classValue.isEmpty(),1,1,2
 bAlnum==0 || bAlnum==1 ,1,1,2
 regOut!=regStat4 && regOut!=regStat4+1 ,1,1,2
!d->tempOvector().isEmpty(),1,1,2
(((instruction == BT_OPCODE) || (instruction == BF_OPCODE)) && (offset >= -256) && (offset <= 254)) || ((instruction == BRA_OPCODE) && (offset >= -4096) && (offset <= 4094)),1,1,2
private_data_ptr == OVECTOR(offset),1,1,2
" i==pIdx->nSample || sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec, 0)>0 || pParse->db->mallocFailed ",1,1,2
 nRead==db->nVdbeRead ,1,1,2
atk_object_get_role(ATK_OBJECT(textEntry)) == ATK_ROLE_ENTRY,1,1,2
 pOp->p5>=1 && pOp->p5<=4 ,1,1,2
 42==sqlite3LogEst(18) ,1,1,2
type == CreateComment || type == CreateText,1,1,2
 p->xDel!=SQLITE_DYNAMIC && p->xDel!=0 ,1,1,2
attribute.m_valueRange.m_start,1,1,2
colorOffset - 4 == colorArrayLength,1,1,2
 db->mallocFailed==0 || pNew==0 ,1,1,2
getJITType() == JITCode::BaselineJIT,1,1,2
m_base != InvalidGPRReg,1,1,2
!(JSObject::offsetOfInlineStorage() % sizeof(EncodedJSValue)),1,1,2
opcode == OP_COND || opcode == OP_SCOND,1,1,2
hasArgumentPositionStart(),1,1,2
 pBt->readOnly==0 ,1,1,2
"(!std::is_convertible<T, id>::value), ""Don't use adoptCF with Objective-C pointer types, use adoptNS.""",1,1,2
 (pNew->wsFlags & (WHERE_COLUMN_NULL|WHERE_COLUMN_IN|WHERE_SKIPSCAN))!=0 || nInMul==0 ,1,1,2
c != '\0',1,1,2
GObject* object,1,1,2
!list->isRootedAtDocument(),1,1,2
structure()->isEmpty(),1,1,2
isValid(),1,1,2
(options & U_SHAPE_DIGITS_MASK) == U_SHAPE_DIGITS_NOOP,1,1,2
(!!m_location) && m_location.executableAddress() != JITWriteBarrierFlag,1,1,2
(jump->flags & PATCH_ABS64) || addr <= 0xffffffffffffl,1,1,2
"atk_hyperlink_get_n_anchors(hLink3), ==, 1",1,1,2
m_op == PutById || m_op == PutByIdDirect,1,1,2
!webkit_download_get_elapsed_time(download),1,1,2
"isValidIterator(const_iterator(it)), ""QMap::erase"", ""The specified iterator argument 'it' is invalid""",1,1,2
m_state != New && m_state != FreeListed,1,1,2
 (nByte % pgsz)==0 ,1,1,2
!canBeOptimizedOrInlined() || m_mappedPayload == regT0,1,1,2
WEBKIT_DOM_IS_HTML_HEAD_ELEMENT(ptr),1,1,2
 u.am.sMem.z==u.am.sMem.zMalloc ,1,1,2
( is_signed<qint8>::value),1,1,2
v.asCell()->isString(),1,1,2
 p->rSetup==pTemplate->rSetup ,1,1,2
sizeof(QIcon) == sizeof(void *),1,1,2
" ~ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) ",1,1,2
"sizeof(uint16_t) == 2, uint16_t_is_two_bytes",1,1,2
 db->aDb[iDb].pSchema==pTab->pSchema ,1,1,2
isTriviallyRecoverable(),1,1,2
dataFormat != DataFormatDouble,1,1,2
m_role == AnimValRole,1,1,2
 pNew->pSrc!=0 || pParse->nErr>0 ,1,1,2
common->start_ptr == OVECTOR(0),1,1,2
 pOp->p2>=0 && pOp->p2<p->nOp ,1,1,2
feature < NumberOfFeatures,1,1,2
 (pStart->wtFlags & TERM_VNULL)==0 ,1,1,2
!hasIndexedProperties(oldType) || hasUndecided(oldType) || hasInt32(oldType) || hasDouble(oldType) || hasContiguous(oldType),1,1,2
 pC->isEphemeral ,1,1,2
 chngRowid || pTrigger || hasFK || regOldRowid==regNewRowid ,1,1,2
" iOffset==walFrameOffset(iFrame, szPage) ",1,1,2
block->containingBlock() == m_containingBlockForAbsolutePosition.block(),1,1,2
m_view,1,1,2
 (0xfff & (EP_Reduced|EP_TokenOnly))==0 ,1,1,2
result == (const_cast<UnionFind<T>*>(this)->find() == this),1,1,2
hasStructureTransitionData(),1,1,2
m_shadowRoot,1,1,2
*ccend == OP_END || (*ccend >= OP_ALT && *ccend <= OP_KETRPOS),1,1,2
m_startCount,1,1,2
"ARMRegisters::d2 == 2, d2_is_2",1,1,2
m_liveBytes >= bytes,1,1,2
 (slot->internal->flags & FT_GLYPH_OWN_BITMAP) == 0 ,1,1,2
 u.bf.pC->pseudoTableReg==0 ,1,1,2
HasIsNullMethod<SelfTestFinal3>::Value,1,1,2
 db->nVdbeWrite>0 || db->autoCommit==0 || (db->nDeferredCons==0 && db->nDeferredImmCons==0) ,1,1,2
"jsZero, 0",1,1,2
value.isGetterSetter() == !!(attributes & Accessor),1,1,2
WEBKIT_DOM_IS_ELEMENT(element),1,1,2
!mimeTypes[3],1,1,2
 u.bf.pData->flags & (MEM_Blob|MEM_Str) ,1,1,2
 pWriter || bIgnoreEmpty ,1,1,2
"0, rmutex_lock_decl_missing_var_name",1,1,2
" MIN( dstLo->s, dstUp->s ) <= isect.s ",1,1,2
thread,1,1,2
 iSet==-1 || iSet>=0 ,1,1,2
 (u.bv.pnErr->flags & (MEM_Str|MEM_Blob))==0 ,1,1,2
"text, ==, ""This is a test. This is the second sentence. And this the third.""",1,1,2
"text, ==, ""Block span in a link in a heading\nInline span in a link in a heading""",1,1,2
 i==nHdr ,1,1,2
 pE->op!=TK_DOT || pRight!=0 ,1,1,2
"3 * height, ==, mline_window.height",1,1,2
 pC->pCursor ,1,1,2
(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C)) == 0,1,1,2
m_executableMemory->isManaged(),1,1,2
framesize != no_stack,1,1,2
"webkit_web_view_go_to_back_forward_item(webView, addItem1)",1,1,2
" !ExprHasAnyProperty(pEq, EP_TokenOnly|EP_Reduced) ",1,1,2
TMP1 == SLJIT_SCRATCH_REG1 && STACK_TOP == SLJIT_SCRATCH_REG2 && TMP2 == SLJIT_SCRATCH_REG3,1,1,2
!isDistinct,1,1,2
(void*)newExec <= stack->end(),1,1,2
 pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 || pOp->p4type==P4_KEYINFO ,1,1,2
fiberCount,1,1,2
HasIsNullMethod<SelfTest3>::Value,1,1,2
type() == IntegerPosition,1,1,2
"v, 0",1,1,2
 p->aBuffer ,1,1,2
m_bytecodeIndex < std::numeric_limits<unsigned>::max() - 1,1,1,2
isIntegerValue(m_marginBox.left()),1,1,2
 pPg!=0 ,1,1,2
!object || object->isNativeSpinButton(),1,1,2
" !ExprHasProperty(pIn, EP_xIsSelect) ",1,1,2
 pExpr->op==TK_FUNCTION ,1,1,2
"SUCCEEDED(hr), Q_FUNC_INFO, qPrintable(qt_error_string(hr))",1,1,2
repeat_type != 0 && repeat_count != 0,1,1,2
 pPk || iDataCur==iTabCur ,1,1,2
 *ppVal==0 ,1,1,2
 iIdxCur>=0 ,1,1,2
reg > 0 && reg <= SLJIT_NO_FLOAT_REGISTERS,1,1,2
 v->prev == vPrev && v->anEdge == NULL && v->data == NULL ,1,1,2
 p->bIsReader!=0 || DbMaskAllZero(p->btreeMask) ,1,1,2
"SLJIT_MOV + 8 == SLJIT_MOVU, movu_offset",1,1,2
 pOp->p5<=ArraySize(p->aCounter) ,1,1,2
"message->status_code, ==, 404",1,1,2
m_graph.isNumberConstant(node),1,1,2
 f1&MEM_Int ,1,1,2
 rc==SQLITE_EMPTY || rc==SQLITE_OK ,1,1,2
 iKey>=0 && iKey<pTab->nCol ,1,1,2
 nDir>0 ,1,1,2
!policy,1,1,2
"text, ==, ""Block span in a heading\nInline span in a heading""",1,1,2
pEList != 0 || pSelect != 0 || db->mallocFailed,1,1,2
"!JSObjectIsConstructor(context, NULL)",1,1,2
 (FT_UInt)( char_code - FTC_CMAP_NODE( node )->first ) < FTC_CMAP_INDICES_MAX ,1,1,2
 zName[strlen(zName)+1]==0 ,1,1,2
 u.am.p2<u.am.nField ,1,1,2
isViewportPercentage(),1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_STYLE, ""normal"")",1,1,2
"startOffset, ==, 5",1,1,2
 flag==0 ,1,1,2
GET_OPCODE(op) >= SLJIT_CMPD && GET_OPCODE(op) <= SLJIT_ABSD,1,1,2
div,1,1,2
fixture->role == ATK_ROLE_MENU,1,1,2
u->le->table[0xc] != 0,1,1,2
!isShadowRoot(),1,1,2
!node || isHTMLProgressElement(node),1,1,2
attribute.nameRange.end,1,1,2
forwardList,1,1,2
 n>=0 && p1>0 && p2>0 ,1,1,2
 pNew->nLTerm<=pNew->nLSlot ,1,1,2
error->code == WEBKIT_NETWORK_ERROR_CANCELLED,1,1,2
numberOfEntriesRemaining(),1,1,2
"!(sizeof(JSObject) % sizeof(WriteBarrierBase<Unknown>)), JSObject_inline_storage_has_correct_alignment",1,1,2
index < TypedArrayBase<float>::m_length,1,1,2
 u.bn.pC->deferredMoveto==0 ,1,1,2
m_register.pair.tagGPR != InvalidGPRReg && m_register.pair.payloadGPR != InvalidGPRReg,1,1,2
"charactersCount > 1, StringImplFromLiteralNotEmpty",1,1,2
QCoreApplication::instance(),1,1,2
 pNew->pPrior!=0 ,1,1,2
GTK_POLICY_NEVER == webkit_web_frame_get_vertical_scrollbar_policy(mainFrame),1,1,2
!node || isHTMLImageElement(node),1,1,2
newPropertyCapacity > oldPropertyCapacity,1,1,2
m_animatedWrappers.isEmpty(),1,1,2
" EdgeSign( dstLo, tess->event, orgLo ) >= 0 ",1,1,2
 nArg>=(-1) || createFlag==0 ,1,1,2
 pPage->pDbPage!=0 ,1,1,2
*max != 0,1,1,2
"(sizeof(Enum) <= sizeof(int)), ""QFlags uses an int as storage, so an enum with underlying "" ""long long will overflow.""",1,1,2
((p) & 0xf0) != (SLJIT_LOCALS_REG << 4) && !(i & ~0x3),1,1,2
isCounter(),1,1,2
m_linkType == LinkInvalid,1,1,2
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP | SLJIT_SINGLE_OP)),1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_Fifo ,1,1,2
uName,1,1,2
hasInlineCapacity(),1,1,2
!gtk_clipboard_wait_is_uris_available(clipboard),1,1,2
 pWInfo->nLevel==nLoop ,1,1,2
!element->nextSibling(),1,1,2
op == SLJIT_MOV || GET_OPCODE(op) == SLJIT_MOV_UI || GET_OPCODE(op) == SLJIT_MOV_SI || (GET_OPCODE(op) >= SLJIT_AND && GET_OPCODE(op) <= SLJIT_XOR),1,1,2
Position::findParent(node),1,1,2
 p->nIndex>0 ,1,1,2
"!JSValueIsStrictEqual(context, JSObjectGetPrototype(context, object3), object1), ""It is possible to close a prototype chain cycle""",1,1,2
 nOrderBy>0 && 66==sqlite3LogEst(100) ,1,1,2
jump->flags & (JUMP_LABEL | JUMP_ADDR),1,1,2
source.isEmpty(),1,1,2
 bReadonly==PAGER_GET_READONLY || bReadonly==0 ,1,1,2
"common, matchingpath, assert, TRUE",1,1,2
 iCol>=0 && iCol<pTab->nCol ,1,1,2
 nCol==pSelect->pEList->nExpr || db->mallocFailed ,1,1,2
 e->Sym->next == ePrev->Sym ,1,1,2
currentChar() != '\n',1,1,2
 *ppMinMax==0 || (*ppMinMax)->nExpr==1 ,1,1,2
NULL,1,1,2
"CFEqual(cfJSString, cfString)",1,1,2
outOfLineCapacity() >= currentSize,1,1,2
 memIsValid(pArg) ,1,1,2
"textSelectionChangedResult, ==, ""|paragraph|27|37|""",1,1,2
transitionWatchpointSetIsStillValid(),1,1,2
message,1,1,2
 28==sqlite3LogEst(7) ,1,1,2
offset >= entry.offset,1,1,2
"bitCount, bitCount_shall_not_be_zero",1,1,2
m_pendingPreemptiveEvents >= 0,1,1,2
"selectedText, ==, ""the middle""",1,1,2
(addr & ~0xfffffff) == ((jump->addr + sizeof(sljit_ins)) & ~0xfffffff),1,1,2
"webkit_web_history_item_get_title(backItem), ==, ""Added site""",1,1,2
is8ByteAligned(reinterpret_cast<void*>(newBytes)),1,1,2
"sline_window1.height, ==, lline_window.height",1,1,2
"webkit_web_history_item_get_title(currentItem), ==, ""Added site 2""",1,1,2
m_numberOfEntriesRemaining || m_bufferIndex == m_jitCodeMap->m_size,1,1,2
srcw[0] != 0 && srcw[1] != 0,1,1,2
"tmpDir, ==, webkit_download_get_destination_uri(download)",1,1,2
type() == NPVariantData::LocalNPObjectID,1,1,2
ImageDecoder::isSizeAvailable(),1,1,2
!value || !value.isCell() || Heap::isMarked(value.asCell()),1,1,2
JSLock::currentThreadIsHoldingLock(),1,1,2
m_frameCount,1,1,2
"error && g_error_matches(error, G_IO_ERROR, G_IO_ERROR_CANCELLED)",1,1,2
 u.ck.pCur->pVtabCursor ,1,1,2
 sqlite3KeyInfoIsWriteable(pKeyDup) ,1,1,2
"jsUndefined, false",1,1,2
 pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious ,1,1,2
 iIdx>=0 ,1,1,2
"CFEqual(cfJSEmptyString, cfEmptyString)",1,1,2
axWebView,1,1,2
from.isCell() && from.asCell()->JSCell::inherits(&WTF::RemovePointer<To>::Type::s_info),1,1,2
!BadReg(rn2),1,1,2
"ICC_IS_SET == SET_FLAGS, icc_is_set_and_set_flags_must_be_the_same",1,1,2
"!JSValueIsBoolean(context, NULL)",1,1,2
!rule || rule->isStyleRule(),1,1,2
"textChangedResult, ==, ""|2|4|3|'bar'|""",1,1,2
 encoding->code_first <= encoding->code_last ,1,1,2
"atkAttributeSetAttributeHasValue(set2, ATK_TEXT_ATTR_STYLE, ""italic"")",1,1,2
 pC->isTable || pOp->opcode!=OP_RowData ,1,1,2
inlineCallFrame,1,1,2
ref.load() == 1,1,1,2
rootbacktrack.prev == NULL,1,1,2
!client || client->isSVGImageChromeClient(),1,1,2
"i, !i",1,1,2
 coderange->base != NULL ,1,1,2
cell->unvalidatedStructure()->unvalidatedStructure() == cell->unvalidatedStructure()->unvalidatedStructure()->unvalidatedStructure(),1,1,2
"offset, ==, 30",1,1,2
"!(IsSubclass<T, ThreadSafeRefCountedBase>::value), DoNotUseAdoptPtrWithThreadSafeRefCounted",1,1,2
(!is_signed<quint64>::value),1,1,2
 (pnErr->flags & MEM_Int)!=0 ,1,1,2
"webkit_network_request_get_uri(request), ==, ""http://gnome.org/""",1,1,2
 pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.ag.n ,1,1,2
!m_copiedAllocator.isValid(),1,1,2
!this->structure()->totalStorageCapacity(),1,1,2
 rc!=SQLITE_OK || winMemGetHeap()!=NULL ,1,1,2
"webkit_web_resource_get_frame_name(fixture->webResource),==,""Example.com""",1,1,2
 ii==0 || ii==1 ,1,1,2
 ret>0 ,1,1,2
 u.au.pDb->pBt!=0 ,1,1,2
asize >= 0 && asize <= aalloc,1,1,2
type == DocumentNamedItems,1,1,2
 u.bi.pC!=0 ,1,1,2
"sline_window1.y + sline_window1.height, <=, lline_window.y",1,1,2
 (pEnd->wtFlags & TERM_VNULL)==0 ,1,1,2
 pKey!=0 || db->mallocFailed || pParse->nErr ,1,1,2
 **acur == '{' ,1,1,2
!scheduleRelayout || !newRoot,1,1,2
offset == SH4Registers::r0,1,1,2
 u.bi.pModule->xRowid ,1,1,2
ATK_IS_TEXT(longText),1,1,2
!(length % 2),1,1,2
zBuf[0]=='\0',1,1,2
m_allocator,1,1,2
common->optimized_cbracket[offset] == 0,1,1,2
!gtk_clipboard_wait_is_image_available(clipboard),1,1,2
 nArg==1 || nArg==(2 + p->nColumn + 3) ,1,1,2
"textCaretMovedResult, ==, ""|paragraph|20|""",1,1,2
 pDel==0 || pDel->pParent==0 ,1,1,2
toReplace,1,1,2
"ErrorString*, const String& frameId",1,1,2
atk_object_get_role(hLinkObject3) == ATK_ROLE_LINK,1,1,2
"!atk_selection_is_child_selected(atkSelection, 1)",1,1,2
" pagerUseWal(pPager) || pageInJournal(pPager, pPg) || pPg->pgno>pPager->dbOrigSize ",1,1,2
"type, type == NameNodeListType",1,1,2
size > 0 && size < 16,1,1,2
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP)),1,1,2
 eStmt==SQL_SELECT_DOCSIZE || eStmt==SQL_SELECT_DOCTOTAL ,1,1,2
 u.an.zAffinity[pOp->p2]==0 ,1,1,2
 pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC ,1,1,2
ATK_IS_OBJECT(form),1,1,2
 pCur->iPage>=0 ,1,1,2
 pEList->nExpr==nColumn ,1,1,2
"::testing::internal::CmpHelperGE, val1, val2",1,1,2
!node || node->hasTagName(HTMLNames::iframeTag),1,1,2
 pIn1->u.i>=0 && pIn1->u.i<p->nOp ,1,1,2
"emit_lea_binary(compiler, SLJIT_KEEP_FLAGS, dst, dstw, SLJIT_LOCALS_REG, 0, TMP_REG1, 0) != SLJIT_ERR_UNSUPPORTED",1,1,2
 countWriteCursors(pBt)==0 ,1,1,2
"webkit_dom_html_collection_get_length(rows), ==, 0",1,1,2
m_wrapper || !m_jsFunction,1,1,2
 pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey ,1,1,2
 !yyendofinput ,1,1,2
 c==0 ,1,1,2
outOfLineSize > initialOutOfLineCapacity,1,1,2
 pIdx->aSample ,1,1,2
" sqlite3VdbeGetOp(v, 0)->opcode==OP_Init ",1,1,2
 module->clazz && module->clazz->get_interface ,1,1,2
"JSValueToBoolean(context, myObject)",1,1,2
 rc!=SQLITE_OK || (pOut->flags & MEM_Blob) ,1,1,2
 nDestTruncate>0 ,1,1,2
isQuote(),1,1,2
m_document || (nodeType() == DOCUMENT_TYPE_NODE && !inDocument()),1,1,2
rowIndexWasSet(),1,1,2
 (u.ad.pMem[u.ad.i].flags & MEM_Ephem)==0 || (u.ad.pMem[u.ad.i].flags & (MEM_Str|MEM_Blob))==0 ,1,1,2
 !HasRowid(pIdx->pTable) || pIdx->nColumn==pIdx->nKeyCol+1 ,1,1,2
main_resource && sub_resource,1,1,2
replacement() == this,1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O)),1,1,2
!tmp2empty,1,1,2
contentNode,1,1,2
 nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE ,1,1,2
WEBKIT_DOM_IS_NODE(html),1,1,2
 (pNode->a[0]=='\0')==(aDoclist!=0) ,1,1,2
horizontalPolicy == GTK_POLICY_ALWAYS,1,1,2
sourceWidth != 1,1,1,2
ATK_OBJECT(hLinkObject1),1,1,2
"atk_hyperlink_get_n_anchors(hLinkInListItem), ==, 1",1,1,2
"DontEnum < FirstInternalAttribute, DontEnum_is_below_FirstInternalAttribute",1,1,2
"int(SlotType::ArgumentCount) <= 0, ""The slot must not have any arguments.""",1,1,2
 u.bv.nRoot>0 ,1,1,2
 pParse->okConstFactor==0 ,1,1,2
"timesClosed, ==, 2",1,1,2
!conditional,1,1,2
 memIsValid(u.ao.pRec) ,1,1,2
 f->prev == fPrev && f->anEdge == NULL && f->data == NULL ,1,1,2
!node || node->isScrollingNode(),1,1,2
 nIter>0 ,1,1,2
" !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) ",1,1,2
 pFd->mmapSizeActual>=pFd->mmapSize ,1,1,2
 nRoot>0 ,1,1,2
hasConstantNumber(m_op),1,1,2
"isValidIterator(aend), ""QVector::erase"", ""The specified iterator argument 'aend' is invalid""",1,1,2
m_state == Resolved,1,1,2
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, p) ",1,1,2
GET_OPCODE(op) >= SLJIT_ADD && GET_OPCODE(op) <= SLJIT_ASHR,1,1,2
"textChangedResult, ==, ""|1|0|6|'\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242'|""",1,1,2
" DbHasProperty(db, u.bu.iDb, DB_SchemaLoaded) ",1,1,2
 pVtab->pModule->xRename ,1,1,2
!(a & SLJIT_IMM) || compiler->mode32 || IS_HALFWORD(imma),1,1,2
isReplace(),1,1,2
"jsCFEmptyString, false",1,1,2
"ARMRegisters::d0 == 0, d0_is_0",1,1,2
!child2(),1,1,2
 pBt->isPending==0 || pBt->pWriter ,1,1,2
!isGlobalObject() || ((JSObject*)structure()->globalObject()) == this,1,1,2
 scaling ,1,1,2
data.realTypes.m_linkType == LinkInvalid,1,1,2
cond == LessThan || cond == LessThanOrEqual || cond == GreaterThan || cond == GreaterThanOrEqual,1,1,2
!(op & (SLJIT_INT_OP | SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
m_position <= m_inspector.length(),1,1,2
"G_OBJECT(currentItem)->ref_count, ==, 2",1,1,2
 pParse->nOpAlloc==0 ,1,1,2
 pName->flags & MEM_Str ,1,1,2
 (p->selFlags & SF_Recursive)==0 || p->op==TK_ALL || p->op==TK_UNION ,1,1,2
(instructionPtr[0] & 0xf000) == MOVL_READ_OFFRM_OPCODE,1,1,2
 pRangeEnd==0 || (pRangeEnd->wtFlags & TERM_VNULL)==0 ,1,1,2
iter.first->offset <= offset,1,1,2
RuntimeEnabledFeatures::styleScopedEnabled(),1,1,2
 pNew!=&standin ,1,1,2
 pTab->nCol==j ,1,1,2
!ascii_isspace('a'),1,1,2
jump->flags & SLJIT_REWRITABLE_JUMP,1,1,2
 u.bu.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bu.iDb].pBt) ,1,1,2
"value > (2 * size), HashTableCapacityHoldsContentSize",1,1,2
 p->bIgnoreSavepoint==0 ,1,1,2
 pNew->n<=pNew->nAlloc ,1,1,2
atk_object_get_role(comboBoxOption) == ATK_ROLE_MENU_ITEM,1,1,2
"sline_window1.height, ==, sline_window2.height",1,1,2
"JSValueGetType(context, jsNull) == kJSTypeNull",1,1,2
opcode >= OP_ASSERT && opcode <= OP_ASSERTBACK_NOT,1,1,2
 pOp->p2>0 && pOp->p2+pOp->p3<=(p->nMem-p->nCursor)+1 ,1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_STRIKETHROUGH, ""false"")",1,1,2
instructions()[bytecodeOffset + opcodeLength( m_vm->interpreter->getOpcodeID( instructions()[ bytecodeOffset].u.opcode)) - 1].u.profile == result,1,1,2
x2 >= x1,1,1,2
 memIsValid(&r.aMem[ii]) ,1,1,2
(op & (SLJIT_SET_E | SLJIT_SET_S)),1,1,2
 pCx->pKeyInfo->db==db ,1,1,2
 cmap->code_to_sid != NULL ,1,1,2
 pFree!=0 ,1,1,2
 p->nCol>0 ,1,1,2
(!is_signed<quint16>::value),1,1,2
m_op == ToPrimitive,1,1,2
 pProgram->nCsr==pFrame->nChildCsr ,1,1,2
m_free[i] != m_free[j],1,1,2
 pNew->u.btree.nEq<=pProbe->nKeyCol ,1,1,2
common->read_only_data_ptr == common->read_only_data,1,1,2
!ascii_isspace('\0'),1,1,2
 (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter ,1,1,2
m_dataType == DataTypeBlob,1,1,2
str.ref.isStatic(),1,1,2
 23==sqlite3LogEst(5) ,1,1,2
reg > 0 && reg <= SLJIT_NO_REGISTERS,1,1,2
 *p1!=0 && *p2!=0 ,1,1,2
static_cast<DestT>(static_cast<SrcT>(std::numeric_limits<DestT>::min())) == std::numeric_limits<DestT>::min(),1,1,2
"reg_map[SLJIT_SCRATCH_REG2] == 6 && reg_map[SLJIT_SCRATCH_REG1] < 8 && reg_map[SLJIT_SCRATCH_REG3] < 8, args_registers",1,1,2
globalData().dynamicGlobalObject,1,1,2
 pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED ,1,1,2
"mode, mode == ManualOperandSpeculation || edge.useKind() == KnownInt32Use",1,1,2
 pUpper->eOperator==WO_LT || pUpper->eOperator==WO_LE ,1,1,2
 iParam==STAT_GET_STAT1 ,1,1,2
type == QJsonValue::Double,1,1,2
"offset, ==, 2",1,1,2
 p->pPage==0 ,1,1,2
"reg_map[SLJIT_SAVED_REG2] >= 8, saved_reg2_is_hireg",1,1,2
"atk_hyperlink_get_start_index(hLink3), ==, 65",1,1,2
 memIsValid(&aMem[u.aj.p1+u.aj.idx]) ,1,1,2
 u.by.pProgram->nCsr==u.by.pFrame->nChildCsr ,1,1,2
"::testing::internal::CmpHelperLE, val1, val2",1,1,2
 regRow!=pDest->iMem+i ,1,1,2
 pBt->pCursor==0 || pBt->inTransaction>TRANS_NONE ,1,1,2
 p->iGet<p->nSample ,1,1,2
(metadata.m_propertyID == CSSPropertyVariable) == (m_value && m_value->isVariableValue()),1,1,2
 EIGHT_BYTE_ALIGNMENT(pIndex->aiRowLogEst) ,1,1,2
!_node->child3(),1,1,2
 pC->pseudoTableReg>0 ,1,1,2
has8BitCode(),1,1,2
 pName && pName->z ,1,1,2
 pRight->pColl ,1,1,2
stringPrototypeStructure->transitionWatchpointSetIsStillValid(),1,1,2
 pIdx->nColumn>=nEq ,1,1,2
!element || element->hasTagName(SVGNames::pathTag),1,1,2
i > 0 || _iteratorCapabilities & BiDirectionalCapability,1,1,2
" CORRUPT_DB || (rc<0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)<0) || (rc>0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)>0) || pKeyInfo->db->mallocFailed ",1,1,2
WEBKIT_DOM_IS_HTML_IMAGE_ELEMENT(node),1,1,2
"jsUndefined, nan("""")",1,1,2
 nBuf==(nBuf&0x1ffff) ,1,1,2
"JSValueIsObject(context, result)",1,1,2
JSContextGetGlobalContext(context) == context,1,1,2
(m_state == NoInformation || m_state == TakesSlowPath) == (m_offset == invalidOffset),1,1,2
(*insn & BlxInstructionMask) == BlxInstruction,1,1,2
 i<=p2 && zHdr<zEndHdr ,1,1,2
"LastFontWidthVariant >> FontWidthVariantWidth == 0, FontWidthVariantWidth_is_correct",1,1,2
 iA1*iB0==0 || iA0*iB1==0 ,1,1,2
d->alloc,1,1,2
"atkAttributeSetAttributeHasValue(set4, ATK_TEXT_ATTR_JUSTIFICATION, ""right"")",1,1,2
"isValidIterator(i), ""QSet::erase"", ""The specified const_iterator argument 'i' is invalid""",1,1,2
strongref.load() <= 0,1,1,2
!box || box->isSVGInlineTextBox(),1,1,2
 *pbFound==0 ,1,1,2
!propertyHandler(newProperty),1,1,2
 iSegment>0 ,1,1,2
uint(TotalFieldWidthByWidths) == 8 * sizeof(quint64),1,1,2
 pOp->p4.i>0 && pOp->p4.i<=p->nMem ,1,1,2
exception && !*exception,1,1,2
 db->mallocFailed==0 || pTab==0 ,1,1,2
shifted < static_cast<unsigned>(LastUseKind),1,1,2
 pX->op==TK_COLUMN ,1,1,2
"webkit_web_resource_get_mime_type(fixture->webResource),==,""text/html""",1,1,2
!jumplist,1,1,2
!typeInfo().structureHasRareData(),1,1,2
 pUpper==0 || (pUpper->wtFlags & TERM_VNULL)==0 ,1,1,2
 PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 ,1,1,2
 iIdx==nVal ,1,1,2
m_connectionStack.current() == m_connection,1,1,2
 p->isSorted==0 ,1,1,2
 num_args >= 0 ,1,1,2
 pIdx->idxType!=SQLITE_IDXTYPE_APPDEF ,1,1,2
maxGlobals && isPageAligned(maxGlobals),1,1,2
 pPKey2->pKeyInfo->nField+pPKey2->pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB ,1,1,2
!m_fragmentShader || m_fragmentShader->isCachedShader(),1,1,2
"JSValueGetType(context, jsCFEmptyString) == kJSTypeString",1,1,2
"JSObjectGetProperty(context, JSValueToObject(context, jsonObject, 0), propertyName, 0), true",1,1,2
 (chngToIN&(chngToIN-1))==0 ,1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_C)),1,1,2
scratch != dest,1,1,2
"!JSObjectCallAsFunction(context, NULL, NULL, 0, NULL, NULL)",1,1,2
 u.cj.pModule->xColumn ,1,1,2
 u.ah.op==OP_ShiftRight || u.ah.op==OP_ShiftLeft ,1,1,2
 nFarg>=1 ,1,1,2
vm().dynamicGlobalObject,1,1,2
"text, ==, ""Hello world.\nThis sentence is green.\nThis one is not.""",1,1,2
 u.bo.pC!=0 ,1,1,2
*cc != OP_BRAMINZERO,1,1,2
 isScan==0 || p->aIndex==0 ,1,1,2
iframeDocument,1,1,2
value >= std::numeric_limits<int8_t>::min(),1,1,2
i != PropertyName::NotAnIndex,1,1,2
 pMem->xDel!=0 && pMem->xDel!=SQLITE_DYNAMIC ,1,1,2
 pOp->p1+pOp->p2<=(p->nMem-p->nCursor)+1 ,1,1,2
 (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 ,1,1,2
 ((u8*)pSpace)-nByte==(u8*)(pIdx->aSample) ,1,1,2
 memIsValid(&aMem[u.aj.p2+u.aj.idx]) ,1,1,2
 pOp->p3<=pFrame->nMem ,1,1,2
m_subframeCount,1,1,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] == 2 && reg_map[TMP_REG1] > 7, invalid_register_assignment_for_div_mul",1,1,2
 pPage->pLruNext || pPage==pGroup->pLruTail ,1,1,2
 pPager->doNotSpill==1 ,1,1,2
array_ != NULL,1,1,2
(sljit_sw)addr <= 0x3ffff && (sljit_sw)addr >= -0x40000,1,1,2
"x, <=, mline_window.x + mline_window.width - width",1,1,2
prototype,1,1,2
 nKey==0 ,1,1,2
length == static_cast<size_t>(static_cast<int>(length)),1,1,2
m_pluginID,1,1,2
 eType==SQLITE_TEXT || eType==SQLITE_BLOB ,1,1,2
 pOp->p1<=(p->nMem-p->nCursor) ,1,1,2
 memIsValid(&aMem[p2+idx]) ,1,1,2
"endOffset, ==, 40",1,1,2
 nNew>pFd->mmapSize ,1,1,2
m_rootType == static_cast<unsigned>(rootType),1,1,2
type == QJsonValue::Bool,1,1,2
 u.az.nField>0 ,1,1,2
common->currententry->entry == NULL && common->recursive_head_ptr != 0,1,1,2
plans.isEmpty(),1,1,2
"(FunctorArgumentCount >= 0), ""Signal and slot arguments are not compatible.""",1,1,2
!(m_registerFormat & DataFormatJS) && m_registerFormat != DataFormatDouble,1,1,2
"window, window",1,1,2
s_widgetHierarchyUpdateSuspendCount,1,1,2
!globalObject() || !globalObject()->vm().heap.isBusy(),1,1,2
!butterfly == (!structure->outOfLineCapacity() && !hasIndexingHeader(structure->indexingType())),1,1,2
m_connection,1,1,2
"canBeJumpT3(instruction, target)",1,1,2
 nLocal<=nKey ,1,1,2
!HasIsNullMethod<bool>::Value,1,1,2
0 <= from,1,1,2
"(charactersCount - 1 <= ((unsigned(~0) - sizeof(StringImpl)) / sizeof(LChar))), AtomicStringFromLiteralCannotOverflow",1,1,2
 point <= end_point && ( point->flags & touch_flag ) != 0 ,1,1,2
 pSubWInfo || pParse->nErr || db->mallocFailed ,1,1,2
!from.isRelative(),1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_S | SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
 iDb<0 ,1,1,2
"mergeSpeculations(m_type, speculationFromValue(m_value)) == m_type",1,1,2
hasStructure(),1,1,2
"reg_map[SLJIT_SCRATCH_REG2] == 2 && reg_map[SLJIT_SCRATCH_REG1] < 8 && reg_map[SLJIT_SCRATCH_REG3] < 8, args_registers",1,1,2
 pRec!=0 ,1,1,2
 db->aDb[u.at.iDb].pBt!=0 ,1,1,2
m_op == CheckStructure || m_op == ForwardCheckStructure || m_op == ArrayifyToStructure,1,1,2
!(bits & (static_cast<uintptr_t>(1) << maxInlineBits())),1,1,2
quirk < NumPluginQuirks,1,1,2
main_resource != sub_resource,1,1,2
 pGroup->nMinPage >= pCache->nMin ,1,1,2
quirk >= 0,1,1,2
(offset <= MaximumBranchOffsetDistance && offset >= MinimumBranchOffsetDistance),1,1,2
"g_param_spec_get_name(pspec), ==, ""icon-uri""",1,1,2
 pC->pVtabCursor==0 ,1,1,2
nOverflow<2 || pOld->aOvfl[0].idx==pOld->aOvfl[1].idx-1,1,1,2
 u.bn.pC!=0 ,1,1,2
code_ptr <= code + compiler->size,1,1,2
!sub_resources->next->next,1,1,2
 1==(int)pParse->nQueryLoop ,1,1,2
"text, ==, ""fo""",1,1,2
!node || isHTMLMeterElement(node),1,1,2
 OP_SeekGT==(OP_SeekGE+1) ,1,1,2
ATK_IS_TEXT(paragraph3),1,1,2
 structure->indexingType() == ArrayWithSlowPutArrayStorage || structure->indexingType() == ArrayWithArrayStorage,1,1,2
argCount >= 0,1,1,2
 FT_Outline_Check( outline ) == 0 ,1,1,2
putToBaseIndex,1,1,2
 pWInfo->wctrlFlags & WHERE_SORTBYGROUP ,1,1,2
 cnt==db->nVdbeActive ,1,1,2
ATK_IS_ACTION(hLink1),1,1,2
 eStat==SQLITE_DBSTATUS_CACHE_HIT || eStat==SQLITE_DBSTATUS_CACHE_MISS || eStat==SQLITE_DBSTATUS_CACHE_WRITE ,1,1,2
 p->pPager==pPager ,1,1,2
dataFormat != DataFormatNone,1,1,2
"webkit_web_view_get_load_status(view), ==, WEBKIT_LOAD_FAILED",1,1,2
ATK_IS_SELECTION(comboBox),1,1,2
 eCall==STAT_GET_STAT1 || eCall==STAT_GET_NEQ || eCall==STAT_GET_ROWID || eCall==STAT_GET_NLT || eCall==STAT_GET_NDLT ,1,1,2
previousSiblingSlow(node) == node->previousSibling(),1,1,2
 p->bIsReader || p->readOnly!=0 ,1,1,2
 curr < pq->max && pq->keys[curr] != NULL ,1,1,2
"sizeof(DFGHandler::Union) == sizeof(uint64_t), DFGHandler_Union_is_64bit",1,1,2
"JSCheckScriptSyntax(context, goodSyntax, NULL, 0, NULL)",1,1,2
 (pTerm->prereqRight & pLevel->notReady)!=0 ,1,1,2
 nCellKey>intKey ,1,1,2
"numberOfResources, ==, g_list_length(subResources)",1,1,2
"soup_session_get_feature(session, WEBKIT_TYPE_SOUP_AUTH_DIALOG) == NULL",1,1,2
!((rt | rn) & 8),1,1,2
flag <= (1 << 7),1,1,2
m_impl->is8Bit(),1,1,2
static_cast<DestT>(static_cast<SrcT>(std::numeric_limits<DestT>::max())) == std::numeric_limits<DestT>::max(),1,1,2
 chngRowid==0 || chngRowid==1 ,1,1,2
!isStringImpl(),1,1,2
m_value >= 0,1,1,2
idx >= m_locals.size() || m_locals[idx] == Traits::defaultValue(),1,1,2
allocator->cellSize(),1,1,2
!RopeImpl::isRope(fiber),1,1,2
"textChangedResult, ==, ""|1|3|3|'\342\200\242\342\200\242\342\200\242'|""",1,1,2
 iEst<=SQLITE_INDEX_SAMPLES ,1,1,2
"i, ==, 2",1,1,2
state == NoInformation || state == TakesSlowPath || state == MakesCalls,1,1,2
result == (isInt32Constant(codeBlock) || isDoubleConstant(codeBlock)),1,1,2
!notEnoughCharacters,1,1,2
"atk_object_get_n_accessible_children(table), ==, 4",1,1,2
!m_impl || m_impl->isIdentifier(),1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, item3)",1,1,2
property,1,1,2
"!JSCheckScriptSyntax(context, badSyntax, NULL, 0, NULL)",1,1,2
"jsOneThird, true",1,1,2
 pOut->flags & MEM_Dyn ,1,1,2
(state == Simple) == (offset != invalidOffset),1,1,2
"A(0) == 0, a0_must_be_0",1,1,2
"pointer, ""%s"", dlerror()",1,1,2
!m_animatedProperty,1,1,2
 memIsValid(&u.bq.r.aMem[i]) ,1,1,2
structure()->isValidOffset(offset),1,1,2
!blendingNeedsRendererSize(),1,1,2
 pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext ,1,1,2
"mime_type, ==, ""text/plain""",1,1,2
"v, 1",1,1,2
"G_OBJECT(nthItem)->ref_count, ==, 1",1,1,2
 pPKey2->pKeyInfo->aSortOrder!=0 ,1,1,2
!(flags & NodeDoesNotExit),1,1,2
"i <= position && position <= e, Q_FUNC_INFO, ""position out of bounds""",1,1,2
m_gpr != InvalidGPRReg,1,1,2
"atk_action_get_n_actions(ATK_ACTION(hLink1)), ==, 1",1,1,2
u->le->type == UD_TAB__OPC_3DNOW,1,1,2
 rc!=SQLITE_OK || winMemGetOwned() ,1,1,2
 sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff ,1,1,2
!(src & SLJIT_MEM) || (src & 0xf) != SLJIT_LOCALS_REG,1,1,2
input.length() == strlen(string),1,1,2
(sljit_sw)addr <= 0x1fffffff && (sljit_sw)addr >= -0x20000000,1,1,2
 &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) ,1,1,2
 p->iPrevDocid==*pRowid ,1,1,2
"JSValueIsNull(context, JSObjectGetPrototype(context, object1)), ""It is possible to assign self as a prototype""",1,1,2
backItem,1,1,2
spillFormat == DataFormatCell || spillFormat & DataFormatJS,1,1,2
 u.bg.pC->iDb>=0 ,1,1,2
"startOffset, ==, 21",1,1,2
 pCx->pKeyInfo->enc==ENC(db) ,1,1,2
!object->isText() || static_cast<unsigned>(stop) <= toRenderText(object)->textLength(),1,1,2
"element_text_equal_to(context, fixture->info->text)",1,1,2
!contains(structure),1,1,2
 pOp->p1<p->nOnceFlag ,1,1,2
"atk_hyperlink_get_end_index(hLink3), ==, 75",1,1,2
 db->aDb[i].zName ,1,1,2
blob,1,1,2
valueProfile,1,1,2
"caretOffset, ==, characterCount - 1",1,1,2
animVal->wrappers().size() == m_wrappers.size(),1,1,2
 regTabname+1==regIdxname && regTabname+2==regSampleno && regTabname+3==regCol ,1,1,2
(shiftedValue >> shift()) == bitwise_cast<uintptr_t>(node),1,1,2
isCompactPtrAlignedAddressOffset(value),1,1,2
m_retainCount > 0,1,1,2
 memIsValid(pKey) ,1,1,2
m_tableSize >= KeyTraits::minimumTableSize,1,1,2
object == globalObject,1,1,2
"!JSScriptCreateFromString(contextGroup, 0, 0, badSyntax, 0, 0)",1,1,2
"jsCFEmptyString, 0",1,1,2
"checkMimeTypeForFilter(filter, ""audio/*"")",1,1,2
 pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx ,1,1,2
hasOptimizableIndexingForClassInfo(structure->classInfo()),1,1,2
newDirectorySize < oldDirectorySize,1,1,2
 pTerm->eOperator==WO_OR ,1,1,2
 isSorter(pC)==(pOp->opcode==OP_SorterInsert) ,1,1,2
 db->nProgressOps!=0 ,1,1,2
isInt32Constant(nodeIndex) || isDoubleConstant(nodeIndex) || isJSConstant(nodeIndex),1,1,2
 zColl ,1,1,2
databaseManager,1,1,2
" DbMaskTest(p->btreeMask, pOp->p5) ",1,1,2
character >= 'a' && character <= 'z',1,1,2
 pIdx->nKeyCol==1 ,1,1,2
newRuns.runCount(),1,1,2
m_format != QFontEngine::Format_None,1,1,2
(void*)4 == JSObjectGetPrivate(object),1,1,2
ATK_IS_TEXT(comboBoxOption),1,1,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_second",1,1,2
"webkit_web_history_item_get_uri(currentItem), ==, ""http://example.com/4/""",1,1,2
"atkAttributeSetAreEqual(set1, 0)",1,1,2
(!is_unsigned<qint32>::value),1,1,2
 pPage->nOverflow<=ArraySize(pPage->apOvfl) ,1,1,2
fixture->role == ATK_ROLE_DOCUMENT_FRAME,1,1,2
HTMLIdentifier::hasIndex(qName.localName().impl()),1,1,2
count && length,1,1,2
op >= SLJIT_MOV && op <= SLJIT_MOV_P,1,1,2
m_structures.size() == 1,1,1,2
pVtab && pModule,1,1,2
number == floor(number),1,1,2
"atk_hyperlink_get_n_anchors(hLink2), ==, 1",1,1,2
 pNew->anEq[pNew->iCol]>0 ,1,1,2
 p->pEList!=0 ,1,1,2
"x, ==, mline_window.x",1,1,2
 nOut==0 || rc==SQLITE_OK ,1,1,2
 pLevel->plan.wsFlags & WHERE_IN_ABLE ,1,1,2
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)!=0 ,1,1,2
 pOp->opcode==OP_IdxGE || pOp->opcode==OP_IdxLT ,1,1,2
"o, ""Error: an error message""",1,1,2
"emit_lea_binary(compiler, SLJIT_KEEP_FLAGS, dst, dstw, SLJIT_LOCALS_REG, 0, TMP_REGISTER, 0) != SLJIT_ERR_UNSUPPORTED",1,1,2
(!is_signed<quint32>::value),1,1,2
!isString(),1,1,2
(inst[0] & 0xffe00000) == MOVZ && (inst[1] & 0xffe00000) == (MOVK | (1 << 21)),1,1,2
 u.bf.pC!=0 ,1,1,2
 z==0 ,1,1,2
!element || element->hasTagName(SVGNames::polygonTag) || element->hasTagName(SVGNames::polylineTag),1,1,2
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_C)),1,1,2
callerFrame == noCaller() || callerFrame->removeHostCallFrameFlag()->registerFile()->end() >= this,1,1,2
!(op & (SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,1,2
 hCurr >= 1 && hCurr <= pq->max && h[hCurr].key != NULL ,1,1,2
 pPager->errCode==0 ,1,1,2
"m_logicalLeftSelectionOffset == m_block->logicalLeftSelectionOffset(rootBlock, position, *m_cache)",1,1,2
 pOp->opcode!=OP_Next || pOp->opcode!=OP_NextIfOpen || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found,1,1,2
 eNew==PAGER_JOURNALMODE_DELETE || eNew==PAGER_JOURNALMODE_TRUNCATE || eNew==PAGER_JOURNALMODE_PERSIST || eNew==PAGER_JOURNALMODE_OFF || eNew==PAGER_JOURNALMODE_MEMORY || eNew==PAGER_JOURNALMODE_WAL || eNew==PAGER_JOURNALMODE_QUERY ,1,1,2
!(flags & LOAD_DATA) && reg_map[TMP_REG1] != reg_ar,1,1,2
 p->bHasStat ,1,1,2
!hasIndexedProperties(oldType) || hasUndecided(oldType) || hasInt32(oldType) || hasDouble(oldType) || hasContiguous(oldType) || hasContiguous(oldType),1,1,2
offsets[2] == -1 || (offsets[0] < offsets[2] && offsets[1] > offsets[2]),1,1,2
 u.bh.pC->isIndex || pOp->opcode==OP_RowData ,1,1,2
 bufpt>buf ,1,1,2
*common->start == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,1,1,2
"hash == (is8Bit() ? StringHasher::computeHashAndMaskTop8Bits(m_data8, m_length) : StringHasher::computeHashAndMaskTop8Bits(m_data16, m_length))",1,1,2
 u.az.oc!=OP_SeekGe || u.az.r.flags==0 ,1,1,2
argw != 0,1,1,2
!node || node->isStickyNode(),1,1,2
subexpressionDivot.offset <= divot().offset,1,1,2
kind() != HaveNode,1,1,2
"isRaw8Bit(source, length)",1,1,2
 (p->flags2 & EP2_Irreducible)==0 ,1,1,2
" !ExprHasProperty(p, EP_MemToken) ",1,1,2
 EIGHT_BYTE_ALIGNMENT(sWLB.pNew) ,1,1,2
 u.cb.apVal || u.cb.n==0 ,1,1,2
 eTopLeft != eTopRight ,1,1,2
!m_shadowRoot,1,1,2
 (p->btreeMask & (((yDbMask)1)<<u.aw.iDb))!=0 ,1,1,2
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) >= -128 && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) <= 127,1,1,2
"v, 10",1,1,2
 rc!=SQLITE_ROW ,1,1,2
 (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 ,1,1,2
!contains(structure) && !isTop(),1,1,2
!object || object->isEmbeddedObject(),1,1,2
"webkit_web_resource_get_encoding(fixture->webResource),==,""utf8""",1,1,2
" pPager->journalMode==PAGER_JOURNALMODE_OFF || pageInJournal(pPager, pPg) || pPg->pgno>pPager->dbOrigSize ",1,1,2
!isFat(),1,1,2
atk_object_get_role(textEntry) == ATK_ROLE_ENTRY,1,1,2
 nAlloc>0 && zSql!=0 ,1,1,2
node->parentNode(),1,1,2
 sqlite3_mutex_held(p->pBt->mutex) ,1,1,2
!node || node->hasTagName(SVGNames::useTag),1,1,2
 pOp->opcode==OP_OpenRead || pOp->opcode==OP_ReopenIdx || p->readOnly==0 ,1,1,2
"atkAttributeSetAttributeHasValue(set1, ATK_TEXT_ATTR_STRIKETHROUGH, ""true"")",1,1,2
result == static_cast<uint32_t>(result),1,1,2
"ARMRegisters::d5 == 5, d5_is_5",1,1,2
"JSValueIsObject(context, globalObject)",1,1,2
"atkAttributeSetAreEqual(set2, 0)",1,1,2
m_callbackToRelease && context && context->isContextThread(),1,1,2
divotEnd.offset >= divotEnd.lineStartOffset,1,1,2
"!atkAttributeSetAttributeHasValue(set2, ATK_TEXT_ATTR_FG_COLOR, ""120,121,122"")",1,1,2
!isActiveInsertionPoint(m_node),1,1,2
 nWrite==db->writeVdbeCnt ,1,1,2
"header, 0, &m_assertion",1,1,2
 pStart==0 || pEnd!=0 ,1,1,2
m_refCount > 0,1,1,2
pSelect != 0 || db->mallocFailed,1,1,2
*current() == '\n',1,1,2
 pOp->opcode==OP_OpenRead || p->readOnly==0 ,1,1,2
weakImpl->state() == WeakImpl::Dead,1,1,2
!object || object->isMockObject(),1,1,2
 *pnOut<=n1+n2+FTS3_VARINT_MAX-1 ,1,1,2
"blockAlignment, blockAlignment <= s_regionSize",1,1,2
"jsZero, false",1,1,2
 zErr!=0 || db->mallocFailed ,1,1,2
 memIsValid(pReg) ,1,1,2
node() || result == UntypedUse,1,1,2
 u.az.pC->isOrdered ,1,1,2
" sizeof(sljit_sb) == 1 && sizeof(sljit_ub) == 1 && sizeof(sljit_sh) == 2 && sizeof(sljit_uh) == 2 && sizeof(sljit_si) == 4 && sizeof(sljit_ui) == 4 && (sizeof(sljit_p) == 4 || sizeof(sljit_p) == 8) && sizeof(sljit_p) <= sizeof(sljit_sw) && (sizeof(sljit_sw) == 4 || sizeof(sljit_sw) == 8) && (sizeof(sljit_uw) == 4 || sizeof(sljit_uw) == 8), invalid_integer_types",1,1,2
attribute.valueRange.start,1,1,2
!(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_C)),1,1,2
isAngle(),1,1,2
 !(u.am.pDest->flags & (MEM_Blob|MEM_Str)) || u.am.pDest->z==u.am.sMem.z ,1,1,2
 m.z==m.zMalloc ,1,1,2
(totalSize < inlineCapacity() ? 0 : totalSize - inlineCapacity()) == numberOfOutOfLineSlotsForLastOffset(m_offset),1,1,2
m_isResetSet || !m_resetValue,1,1,2
flags <= 0x1FF,1,1,2
attribute.valueRange.end,1,1,2
ballot < 2,1,1,2
!parent->right,1,1,2
!callee->isHostFunction(),1,1,2
 nCol>0 ,1,1,2
webkit_web_view_can_go_back(webView),1,1,2
"QTypeInfo<T>::isIntegral, ""template parameter is not an integral type""",1,1,2
op() == Resolve || op() == ResolveBase || op() == ResolveBaseStrictPut,1,1,2
m_dataType == DataTypeSerializedScriptValue,1,1,2
(*insn & 0x012fff30) == 0x012fff30,1,1,2
!element || element->isHTMLUnknownElement(),1,1,2
JSStringGetCharactersPtr(constantStringRef) == constantString,1,1,2
CAN_SIGN_EXTEND_8_32(offset),1,1,2
!(source[i+checkIndex] & 0xff00),1,1,2
 u.bv.z==0 ,1,1,2
abegin <= aend,1,1,2
insn[5] == NOP_OPCODE,1,1,2
"cell, cell",1,1,2
"webkit_dom_element_get_tag_name(element), ==, ""A""",1,1,2
 p->pParent && p->pParent->pLeft==p ,1,1,2
 pPager->ckptSyncFlags==0 ,1,1,2
target == WEBKIT_DOM_EVENT_TARGET(view),1,1,2
itemIndex < m_wrappers->size(),1,1,2
weak,1,1,2
" notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) ",1,1,2
"!g_str_equal((pathName = g_get_current_dir()), ""/"")",1,1,2
 sqlite3VdbeCurrentAddr(v)==iJump || pParse->db->mallocFailed ,1,1,2
"::testing::internal::IsHRESULTSuccess, (expr)",1,1,2
type >= FirstUnnamedDocumentCachedType,1,1,2
WEBKIT_DOM_IS_HTML_ELEMENT(body),1,1,2
m_blocksInUse,1,1,2
"textCaretMovedResult, ==, ""|paragraph|17|""",1,1,2
" VertLeq( e->Org, e->Dst )",1,1,2
bitwise_cast<SamplingRegion*>(s_currentOrReserved & ~1) == this,1,1,2
"!webkit_web_view_can_show_mime_type(view, mime_type)",1,1,2
m_flowThreadsWithAutoLogicalHeightRegions > 0,1,1,2
m_currentAttribute->m_valueRange.m_start,1,1,2
m_inheritorID->isEmpty(),1,1,2
 (u32)n==pLoop->u.btree.nEq ,1,1,2
atk_object_get_index_in_parent(rowHeader) == 0,1,1,2
isDoubleConstant(nodeIndex),1,1,2
"webkit_web_view_get_uri(fixture->webView), ==, uri_string2",1,1,2
weak.was(cell),1,1,2
"!atkAttributeSetAreEqual(set1, set3)",1,1,2
!z->right(),1,1,2
"""http://www.webkit.org/"", ==, webkit_web_resource_get_uri(resource)",1,1,2
"common, current->cc, &backtrack, FALSE",1,1,2
"size > 0, HashTableNonZeroMinimumCapacity",1,1,2
(*instruction & 0x0f700000) == LoadUint32,1,1,2
 pOp->opcode==OP_IdxGE || pOp->opcode==OP_IdxGT ,1,1,2
"Prealloc > 0, ""QVarLengthArray Prealloc must be greater than 0.""",1,1,2
 p->bIncr==1 ,1,1,2
z->color() == Red,1,1,2
 pParse->iCacheLevel>=1 ,1,1,2
hasConstantBuffer(),1,1,2
 u.ci.pCur->pVtabCursor ,1,1,2
tryGetAllocationProfile(),1,1,2
 pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n ,1,1,2
"JSValueGetType(context, jsCFStringWithCharacters) == kJSTypeString",1,1,2
dataSource,1,1,2
 (nMap % winSysInfo.dwPageSize)==0 ,1,1,2
 u.an.zAffinity!=0 ,1,1,2
 u.bg.pC->rowidIsValid ,1,1,2
"!JSValueToStringCopy(context, jsObjectNoProto, &exception)",1,1,2
callFrame,1,1,2
m_checked,1,1,2
 memIsValid(u.am.pReg) ,1,1,2
isMainThreadOrGCThread(),1,1,2
"count, ==, 1",1,1,2
 SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 ,1,1,2
 pPager->tempFile ,1,1,2
"webkit_web_back_forward_list_get_forward_length(webBackForwardList), ==, 1",1,1,2
pthread_self() == nativeThread,1,1,2
 p->pExtra==(void *)&p[1] ,1,1,2
"webkit_network_request_get_uri(request), ==, ""http://www.webkit.org/""",1,1,2
 i==pIndex->nColumn ,1,1,2
m_position < m_table->compactSize,1,1,2
UCD_BLOCK_SIZE == 128 && sizeof(ucd_record) == 8,1,1,2
 e->Org != NULL ,1,1,2
font.primaryFont(),1,1,2
"list == m_atomicNameCaches.get(namedNodeListKey(collectionType, name))",1,1,2
save && common->recursive_head_ptr != 0,1,1,2
GTK_IS_SEPARATOR_MENU_ITEM(item),1,1,2
result == (*this != oldMe),1,1,2
buffer_->start <= here && here <= buffer_->end,1,1,2
QTypeInfo<T>::isComplex || sizeof(T) > sizeof(QVariant::Private::Data),1,1,2
m_kind == BirthToSpill || m_kind == Spill,1,1,2
sub_resources->next,1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_Queue ,1,1,2
"!atkAttributeSetContainsAttributeName(set1, ""layout-guess"")",1,1,2
!m_guard,1,1,2
m_isDouble,1,1,2
" sqlite3SchemaMutexHeld(db, u.aw.iDb, 0) ",1,1,2
!node || toSVGElement(node)->isSVGGraphicsElement(),1,1,2
vptr() == JSGlobalData::jsStringVPtr,1,1,2
m_state == Put,1,1,2
(type & 0xff) == SLJIT_C_EQUAL || (type & 0xff) == SLJIT_C_NOT_EQUAL,1,1,2
"textCaretMovedResult, ==, ""|heading|5|""",1,1,2
list == m_tagNodeListCacheNS.get(name),1,1,2
m_cachedThreadGlobalTimerHeap,1,1,2
 eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) ,1,1,2
"FIXED_LOCALS_OFFSET >= 2 * sizeof(sljit_uw), require_at_least_two_words",1,1,2
 pWinMemData->bOwned ,1,1,2
"text, ==, ""ar""",1,1,2
"expectedCharacter, WTF::Unicode::foldCase(currentChar()) == WTF::Unicode::foldCase(expectedCharacter)",1,1,2
 p->nToken<=MAX_INCR_PHRASE_TOKENS ,1,1,2
"webkit_web_resource_get_uri(web_resource), ==, uri",1,1,2
 OP_SeekGT == OP_SeekLT+3 ,1,1,2
"startOffset, ==, 27",1,1,2
 pBuilder->nRecValid==nRecValid ,1,1,2
!m_waiting,1,1,2
 iLower>=0 && iUpper<=SQLITE_INDEX_SAMPLES ,1,1,2
 db->nVdbeActive>0 ,1,1,2
"mime_type, ==, ""application/pdf""",1,1,2
!propertyHandler(property).isValid(),1,1,2
type() == NPVariantData::Int32,1,1,2
backList,1,1,2
m_impl && m_impl->isEmptyUnique(),1,1,2
 pRtree->nBusy==1 ,1,1,2
sizeof(quintptr) == sizeof(Ptr *),1,1,2
 sizeof(t)+sizeof(pid)<=(size_t)nBuf ,1,1,2
 p2<pC->nHdrParsed ,1,1,2
 p->aOp ,1,1,2
m_column != unsetColumnIndex,1,1,2
!rule || rule->isRegionRule(),1,1,2
buf_used_,1,1,2
 u.aj.pKeyInfo!=0 ,1,1,2
 nKey==1 ,1,1,2
 p->pRight==0 ,1,1,2
m_structure->propertyStorageCapacity() < baseExternalStorageCapacity,1,1,2
 pWInfo->nLevel==1 || pWInfo->nLevel==pTabList->nSrc ,1,1,2
"checkMimeTypeForFilter(filter, ""image/*"")",1,1,2
"size, size == sizeof(JSC::DFG::Node)",1,1,2
 pOp->p1>0 && pOp->p1<=p->nMem ,1,1,2
 pOld->iCol>pNew->iCol ,1,1,2
 sqlite3BtreeCursorIsValid(u.be.pC->pCursor) ,1,1,2
bytecodeIndex >= m_previousBytecodeIndex,1,1,2
hasPerGlyphFontData(),1,1,2
 pC->nullRow==0 ,1,1,2
maxSize == webkit_application_cache_get_maximum_size(),1,1,2
m_dataType == DataTypeString,1,1,2
 pTab->azModuleArg && pTab->azModuleArg[0] ,1,1,2
"x == NULL || !Equal(key, x->key)",1,1,2
!sign && exponent < 0,1,1,2
 nColumn>0 ,1,1,2
!map.get(key),1,1,2
m_segments.head()->m_top == s_segmentCapacity,1,1,2
 e->Sym->next == ePrev->Sym && e->Sym == &mesh->eHeadSym && e->Sym->Sym == e && e->Org == NULL && e->Dst == NULL && e->Lface == NULL && e->Rface == NULL ,1,1,2
"scope, scope.index() == m_scopeStack.size() - 1",1,1,2
m_bornForOSR,1,1,2
!m_selectorArray,1,1,2
 pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) ,1,1,2
length <= maximumLength,1,1,2
 pOp->opcode!=OP_Prev || pOp->opcode!=OP_PrevIfOpen || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE || pC->seekOp==OP_Last ,1,1,2
has_alternatives && *matchingpath >= OP_ASSERT && *matchingpath <= OP_ASSERTBACK_NOT,1,1,2
 pList->nExpr<=pList->nAlloc ,1,1,2
 n==nColumn ,1,1,2
 u.ce.eNew==PAGER_JOURNALMODE_DELETE || u.ce.eNew==PAGER_JOURNALMODE_TRUNCATE || u.ce.eNew==PAGER_JOURNALMODE_PERSIST || u.ce.eNew==PAGER_JOURNALMODE_OFF || u.ce.eNew==PAGER_JOURNALMODE_MEMORY || u.ce.eNew==PAGER_JOURNALMODE_WAL || u.ce.eNew==PAGER_JOURNALMODE_QUERY ,1,1,2
newScope,1,1,2
"text, ==, ""bar""",1,1,2
!m_mapPoint,1,1,2
usedCount == m_directoryCount || !m_directory[usedCount],1,1,2
 pOp->p3>=0 ,1,1,2
 pOther->szExtra<512 ,1,1,2
 zType!=0 || pOp->p4.z!=0 ,1,1,2
!rule || rule->isMediaRule(),1,1,2
 i<j ,1,1,2
common->start_ptr != OVECTOR(0),1,1,2
ATK_HYPERLINK(hLinkInListItem),1,1,2
 j<pPk->nColumn ,1,1,2
 FTS3_SEGCURSOR_PENDING==-1 ,1,1,2
tess->boundaryOnly == TRUE || tess->boundaryOnly == FALSE,1,1,2
m_initial,1,1,2
"jsOneThird, 1.0 / 3.0",1,1,2
 isSorter(pC)==(pOp->opcode==OP_SorterSort) ,1,1,2
"container, container",1,1,2
!structure()->outOfLineCapacity(),1,1,2
QVariantIntegrator<qulonglong>::CanUseInternalSpace,1,1,2
"!sizeof(T*), PassOwnArrayPtr_should_never_be_assigned_to",1,1,2
 zAff==0 || (int)strlen(zAff)>=nEq ,1,1,2
" !ExprHasProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) ",1,1,2
"sizeof(int64_t) == 8, int64_t_is_eight_bytes",1,1,2
 rc!=SQLITE_OK || pPhrase->bIncr==0 ,1,1,2
m_sharable || currentThread() == m_openingThread || !m_db,1,1,2
 u.az.pC->pseudoTableReg==0 ,1,1,2
 pItem->pExpr->op==TK_COLLATE ,1,1,2
!node || node->hasTagName(SVGNames::markerTag),1,1,2
baseURL,1,1,2
" 0==sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec, 0) || pParse->db->mallocFailed ",1,1,2
!ascii_isspace(uchar('\200')),1,1,2
 memIsValid(pQuery) ,1,1,2
"LastUntaggedToken < 64, LessThan64UntaggedTokens",1,1,2
!node || isHTMLMapElement(node),1,1,2
"element_text_equal_to(context, ""ab"")",1,1,2
!m_notifyingObserversInSet,1,1,2
( is_unsigned<quint64>::value),1,1,2
"T::isSync, SyncMessageExpected",1,1,2
m_readOffset + size <= m_buffer.first()->size(),1,1,2
"QMetaTypeId2<T>::Defined, ""Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt's meta-object system""",1,1,2
( is_signed<qint64>::value),1,1,2
mUniqueId != 0,1,1,2
"atk_selection_is_child_selected(atkSelection, 1)",1,1,2
JSValue(d).isNumber(),1,1,2
(op & (SLJIT_SET_E | SLJIT_KEEP_FLAGS)) != (SLJIT_SET_E | SLJIT_KEEP_FLAGS),1,1,2
 u.bq.pC!=0 ,1,1,2
state >= this->state(),1,1,2
 pIdx==0 || pIdx->pTable==pTab ,1,1,2
m_refCount,1,1,2
text && ATK_IS_OBJECT(text),1,1,2
"m_logicalRightSelectionOffset == m_block->logicalRightSelectionOffset(rootBlock, position, *m_cache)",1,1,2
!m_isPinnedPropertyTable,1,1,2
"int(webkitName) == int(webcoreName), mismatchingEnums",1,1,2
track->type() == TrackBase::AudioTrack,1,1,2
animationElement,1,1,2
is8ByteAligned(*outPtr),1,1,2
frame,1,1,2
"!object || !strcmp(object->renderName(), ""RenderHTMLCanvas"")",1,1,2
 zC!=0 ,1,1,2
"text, ==, ""\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242\342\200\242""",1,1,2
m_prototype.isNull(),1,1,2
 destIfNull==destIfFalse ,1,1,2
!!m_prev == !!m_next,1,1,2
 u.aj.p1>0 && u.aj.p1+u.aj.n<=p->nMem+1 ,1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo ,1,1,2
b == PBAUTO || b == PBAVOID,1,1,2
 j>=0 && j<p->nLabel ,1,1,2
track->type() == TrackBase::VideoTrack,1,1,2
axParentChild == axRoot,1,1,2
m_dataFormat == DataFormatDouble,1,1,2
 p->rc!=SQLITE_OK ,1,1,2
 u.bi.pC->pseudoTableReg==0 ,1,1,2
allocation_state_ == SINGLE_OBJECT_WITH_ARRAY,1,1,2
"atk_text_get_text(ATK_TEXT(item2), 0, -1), ==, ""\342\200\242 link only""",1,1,2
asize <= aalloc,1,1,2
 u.bh.pC!=0 ,1,1,2
 list->num_nodes == 0 ,1,1,2
std::isfinite(number) && !std::signbit(number),1,1,2
 z!=0 || N==0 ,1,1,2
property->contextElement(),1,1,2
get() == value,1,1,2
documentInternal() || !getFlag(InDocumentFlag),1,1,2
 pCsr->bDesc==0 || pCsr->bDesc==1 ,1,1,2
"o.get(), ""attempt to use null RetainPtr in HashTable""",1,1,2
 !(flags&WHERE_AUTO_INDEX) || (flags&WHERE_IDX_ONLY) ,1,1,2
offset < m_structure->propertyStorageCapacity(),1,1,2
m_responses.isEmpty(),1,1,2
"nLinks, ==, 3",1,1,2
*rootbacktrack.cc == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,1,1,2
 pSub->pSrc!=0 ,1,1,2
 u.bd.pC!=0 ,1,1,2
0 <= index && index < length_,1,1,2
start <= end,1,1,2
!node || node->isShadowRoot(),1,1,2
 ArraySize(aSyscall)==77 ,1,1,2
!!id,1,1,2
"q_static_assert_result, __LINE__",1,1,2
!(dst & SLJIT_MEM) || (dst & 0xf) != SLJIT_LOCALS_REG,1,1,2
 p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft ,1,1,2
"::testing::internal::CmpHelperLT, val1, val2",1,1,2
!GET_FLAGS(op) || !(op & SLJIT_KEEP_FLAGS),1,1,2
"fontSize, ==, ""16px""",1,1,2
webkit_download_get_network_request(download) == request,1,1,2
!cachedStructure && !cachedPrototypeStructure,1,1,2
( is_signed<qint16>::value),1,1,2
"handled, ==, fixture->info->shouldBeHandled",1,1,2
 nFarg==1 ,1,1,2
"atk_selection_is_child_selected(atkSelection, 0)",1,1,2
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) >= -0x80000000ll && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) <= 0x7fffffffll,1,1,2
 pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree ,1,1,2
!node || isHTMLAnchorElement(node),1,1,2
to <= length_,1,1,2
"jsNull, 0",1,1,2
"mimeTypes[0], ==, ""audio/*""",1,1,2
 roundUp==0 || roundUp==1 ,1,1,2
(!is_signed<quint8>::value),1,1,2
"cell, table()->cellBefore(cell) == this",1,1,2
 !u.bh.pC->isTable ,1,1,2
"s_flagCount == StringHasher::flagCount, StringHasher_reserves_enough_bits_for_StringImpl_flags",1,1,2
(m_state == NoInformation || m_state == TakesSlowPath) == !m_oldStructure,1,1,2
 zName ,1,1,2
 u.cl.pVtab->pModule->xRename ,1,1,2
 pCur->wrFlag && pBt->inTransaction==TRANS_WRITE && (pBt->btsFlags & BTS_READ_ONLY)==0 ,1,1,2
slowArguments[argument].status == SlowArgument::Captured,1,1,2
"!JSValueIsEqual(context, jsTrue, jsFalse, NULL)",1,1,2
key == extractKey(result),1,1,2
"reg_map[SLJIT_TEMPORARY_EREG2] >= 8, temporary_ereg2_is_hireg",1,1,2
 regPrev->windingNumber - e->winding == reg->windingNumber ,1,1,2
!m_directory[block],1,1,2
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_C_SIG_LESS_EQUAL,1,1,2
condition,1,1,2
command->isSimpleEditCommand(),1,1,2
m_strictMode,1,1,2
 pParent->pParent==0 || pParent->pParent->pLeft==pParent ,1,1,2
m_op == GetLocalUnlinked,1,1,2
 pDel==0 || pDel==pMod ,1,1,2
widgetPrivate->renderToTexture,1,1,2
 nWrite==db->nVdbeWrite ,1,1,2
status != WEBKIT_LOAD_FAILED,1,1,2
type == ResizeContents,1,1,2
 p->pLeft && p->pRight ,1,1,2
"text, ==, ""2. Block span in a list item\nInline span in a list item""",1,1,2
 memIsValid(u.cb.pRec) ,1,1,2
*ppLink,1,1,2
 x==0 ,1,1,2
s[0],1,1,2
 nColumn==nKeyCol+1 || !HasRowid(pIndex->pTable) ,1,1,2
RuntimeEnabledFeatures::shadowDOMEnabled() || RuntimeEnabledFeatures::styleScopedEnabled(),1,1,2
"webkit_web_history_item_get_title(currentItem), ==, ""Site 4""",1,1,2
lexicalGlobalObject,1,1,2
m_freePtr <= m_end,1,1,2
 memIsValid(&u.az.r.aMem[i]) ,1,1,2
 memIsValid(&u.ad.pMem[u.ad.i]) ,1,1,2
" DbMaskTest(p->btreeMask, p1) ",1,1,2
grandpa,1,1,2
(char*)freeCell > (char*)this && (char*)freeCell < (char*)this + blockSize,1,1,2
m_data.string16Ptr,1,1,2
 (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0 && pCsr->pBt->inTransaction==TRANS_WRITE ,1,1,2
"pointer, pointer >= m_begin",1,1,2
hasContiguous(structure()->indexingType()) || hasInt32(structure()->indexingType()) || hasDouble(structure()->indexingType()) || hasUndecided(structure()->indexingType()),1,1,2
!(bitwise_cast<uintptr_t>(instructionStart) & 3),1,1,2
 pMem->n<=nBuf ,1,1,2
isTornOff(),1,1,2
!(op & (SLJIT_SET_S | SLJIT_SET_U)),1,1,2
ref == 0,1,1,2
!HasIsNullMethod<SelfTestFinal2>::Value,1,1,2
 n==0 || (pOp->p2>0 && pOp->p2+n<=(p->nMem-p->nCursor)+1) ,1,1,2
!node || node->isTextNode(),1,1,2
 noContent==0 || bMmapOk==0 ,1,1,2
!m_impl->is8Bit(),1,1,2
 SQLITE_CkptFullFSync==PAGER_CKPT_FULLFSYNC ,1,1,2
 avail<=65536 ,1,1,2
"mode, mode == ManualOperandSpeculation || (edge.useKind() == CellUse || edge.useKind() == KnownCellUse || edge.useKind() == ObjectUse || edge.useKind() == StringUse || edge.useKind() == KnownStringUse || edge.useKind() == StringObjectUse || edge.useKind() == StringOrStringObjectUse)",1,1,2
 pCur->info.nSize>0 ,1,1,2
has16BitCode(),1,1,2
dx != 0 || dy != 0,1,1,2
data->len > 100,1,1,2
 i<ArraySize(aTable) ,1,1,2
 offset==(i64)ii*(4+pPager->pageSize) ,1,1,2
ATK_IS_OBJECT(panel),1,1,2
delay_slot == MOVABLE_INS || delay_slot >= UNMOVABLE_INS || delay_slot == ((ins >> 11) & 0x1f) || delay_slot == ((ins >> 16) & 0x1f),1,1,2
 i==0 || i==1 ,1,1,2
!(doubleState && shouldNeverUnbox()),1,1,2
hasFunctionDeclIndex(),1,1,2
x == d,1,1,2
"node->parentNode() == parentSlow(node, &slowDetails)",1,1,2
"compiler_common *common, pcre_uchar *cc, assert_backtrack *backtrack, BOOL conditional",1,1,2
ATK_IS_HYPERTEXT(listItem),1,1,2
command->isCompositeEditCommand(),1,1,2
provider()->source()[openBrace] == '{',1,1,2
 (OP_SeekLE & 0x0001)==(OP_SeekGT & 0x0001) ,1,1,2
 u.aj.p1>0 && u.aj.p1+mx<=p->nMem+1 ,1,1,2
pointer < Special::TableSize,1,1,2
WEBKIT_DOM_IS_HTML_TABLE_ROW_ELEMENT(row),1,1,2
 isOptimal || (sCost.used&notReady)==0 ,1,1,2
"webkit_web_back_forward_list_contains_item(webBackForwardList, item4)",1,1,2
"sline_window1.width, ==, sline_window2.width",1,1,2
 pParse->nQueryLoop >= (double)1 ,1,1,2
registerArray != m_registerArray,1,1,2
"addResult, addResult.isNewEntry",1,1,2
ATK_IS_OBJECT(item2),1,1,2
"!JSScriptCreateReferencingImmortalASCIIText(contextGroup, 0, 0, badSyntaxConstant, strlen(badSyntaxConstant), 0, 0)",1,1,2
asObject(value)->inherits(&JSFunction::s_info),1,1,2
"wrapper, node->wrapper() == wrapper",1,1,2
m_dataFormat != DataFormatDouble,1,1,2
m_exec->vm().stringRecursionCheckVisitedObjects.contains(m_thisObject),1,1,2
s[1],1,1,2
"fline_window.y, ==, afline_window.y",1,1,2
QVariantIntegrator<double>::CanUseInternalSpace,1,1,2
isInt32Constant(node) || isNumberConstant(node) || isJSConstant(node),1,1,2
!isPreferredLogicalHeightDirty(),1,1,2
"int(SlotType::ArgumentCount) == 0, ""The slot must not have any arguments.""",1,1,2
 nField>0 && pOp->p2>0 && pOp->p2+nField<=(p->nMem-p->nCursor)+1 ,1,1,2
!node || isSVGFontElement(node),1,1,2
"!isExpandedShorthand(property), ""Shorthand property id = %d shouldn't be inserted into StyleBuilder. Shorthands should be expanded at parsing time."", property",1,1,2
 IsStat4 || (pNew->iCol==0 && pOld->iCol==0) ,1,1,2
 pStr->z!=0 && (pStr->nAlloc >= pStr->n+nAppend+1) ,1,1,2
 p->pRightmost!=p ,1,1,2
newBlock,1,1,2
 pOp->opcode==OP_IdxLE || pOp->opcode==OP_IdxLT ,1,1,2
conn,1,1,2
 pWInfo->sorted==0 ,1,1,2
m_registerFormat == DataFormatDouble || m_registerFormat == DataFormatJSDouble,1,1,2
common->read_only_data + (common->read_only_data_size >> SLJIT_WORD_SHIFT) == common->read_only_data_ptr,1,1,2
!ATK_IS_TEXT(table),1,1,2
 SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG ,1,1,2
 u.az.pC!=0 ,1,1,2
f_ != 0,1,1,2
( is_unsigned<quint8>::value),1,1,2
negate->op() == ArithNegate,1,1,2
0 == (size % MarkStack::pageSize()),1,1,2
 pItem->pExpr->pLeft==pE ,1,1,2
!m_transparencyCount,1,1,2
m_item,1,1,2
"lower, ==, gtk_adjustment_get_lower(adjustment)",1,1,2
line >= firstLine,1,1,2
 (pnErr->flags & (MEM_Str|MEM_Blob))==0 ,1,1,2
next,1,1,2
 u.bc.pCx->deferredMoveto==0 ,1,1,2
 pLoop->u.btree.nEq==1 ,1,1,2
"0, wmutex_lock_decl_missing_var_name",1,1,2
" iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) ",1,1,2
type == QJsonValue::String && latinOrIntValue,1,1,2
"!JSObjectCallAsConstructor(context, NULL, 0, NULL, NULL)",1,1,2
scope()->vm(),1,1,2
"defaultEncoding, ==, ""utf-8""",1,1,2
 rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT ,1,1,2
!inferredName.isNull(),1,1,2
image_format_valid(src),1,1,2
"webkit_dom_html_element_get_inner_text(htmlElement), ==, n",1,1,2
m_numberOfLoanedBlocks > 0,1,1,2
"endOffset, ==, 4",1,1,2
blockSize <= s_regionSize,1,1,2
 len<=(u32)nBuf ,1,1,2
 memIsValid(u.bf.pKey) ,1,1,2
!z->parent(),1,1,2
!element || element->isTextContent(),1,1,2
m_isExcess,1,1,2
"JSStringIsEqual(expected, actual)",1,1,2
m_exceptionCheckIndex == index,1,1,2
hasStorageAccessData(),1,1,2
 !pC->isTable ,1,1,2
symbolType == SHADER_SYMBOL_TYPE_ATTRIBUTE || symbolType == SHADER_SYMBOL_TYPE_UNIFORM,1,1,2
 left->start >= 0 ,1,1,2
!m_currentBlock,1,1,2
 (pNew->wsFlags & WHERE_COLUMN_IN)==0 || iCol<0 ,1,1,2
m_labels->size(),1,1,2
 iTerm<pNew->nLSlot ,1,1,2
!BadReg(rd1),1,1,2
!!newCallFrame->scope(),1,1,2
m_watchedObjects.isEmpty(),1,1,2
callerFrame == noCaller() || callerFrame->removeHostCallFrameFlag()->stack()->end() >= this,1,1,2
!node || node->isFrameOwnerElement(),1,1,2
"text, ==, ""with a link""",1,1,2
!(doubleState && isCaptured()),1,1,2
document2,1,1,2
"j, j >= 0 && j < numTilesY()",1,1,2
"putByVal, m_graph[putByVal].op == PutByVal || m_graph[putByVal].op == PutByValAlias",1,1,2
m_dataType == DataTypeArrayBuffer,1,1,2
isNPJSObject(npObject),1,1,2
 memIsValid(u.ca.pIn1) ,1,1,2
kind == BirthToSpill || kind == Spill,1,1,2
" !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) ",1,1,2
bytecodeIndex <= maximumBytecodeIndex,1,1,2
"JSValueGetType(context, NULL) == kJSTypeNull",1,1,2
!m_generatedAfter,1,1,2
!(jump->flags & IS_JAL),1,1,2
!!frame->scope(),1,1,2
 dest.nMem==nColumn ,1,1,2
 IsUniqueIndex(pIndex) ,1,1,2
 pPgHdr->pData==pPage->pBuf ,1,1,2
value->IsObject(),1,1,2
executable->structure()->classInfo() == &FunctionExecutable::s_info,1,1,2
!HasIsNullMethod<SelfTest2>::Value,1,1,2
 pTabItem->iCursor==pLevel->iTabCur ,1,1,2
" CORRUPT_DB || pPKey2->default_rc==vdbeRecordCompareDebug(nKey1, pKey1, pPKey2) ",1,0,1
