x_val,y_added,y_removed,y_combined
"r, ""insert should succeed""",29,22,51
"j3a->heap_index == 0, ""should match""",9,6,15
"j3->heap_index == 1, ""should match""",9,6,15
"j2->heap_index == 0, ""should match""",9,6,15
"get_all_jobs_used() == 1, ""should match""",9,6,15
"job_pri_cmp(a, b) < 0, ""should be a < b""",6,6,12
"j, ""allocation""",6,4,10
"j1, ""allocate job""",6,4,10
"r, ""heapinsert""",6,4,10
"j3b->heap_index == 1, ""should match""",6,4,10
"get_all_jobs_used() == 0, ""should match""",6,4,10
"job_pri_less(a, b), ""should be less""",6,3,9
"j->pri >= last_pri, ""should come out in order""",4,4,8
"j == j2, ""j2 should come out second.""",4,3,7
"j == j3c, ""j3c should come out third.""",4,3,7
"j == j1, ""j1 should come back out""",4,3,7
"j == j3a, ""j3a should come out first.""",4,3,7
"j == j3b, ""j3b should come out second.""",4,3,7
"j == j1, ""j1 should come out first.""",4,3,7
"strcmp(srv.user, ""kr"") == 0",4,2,6
"*all_jobs_used_ptr == 1, ""should match""",3,3,6
verbose == 2,4,2,6
srv.wal.nocomp == 0,4,2,6
srv.wal.wantsync == 0,4,2,6
srv.wal.nocomp == 1,4,2,6
"j->r.pri >= last_pri, ""should come out in order""",4,2,6
"j, ""allocate job""",4,2,6
"strcmp(srv.addr, ""localhost"") == 0",4,2,6
"j3b, ""allocate job""",3,2,5
"j3c->heap_index == 1, ""should match""",3,2,5
"j2->heap_index == 2, ""should match""",3,2,5
"!job_find(jid), ""job should be missing""",3,2,5
"a->ht_next == b, ""b should be chained to a""",3,2,5
"j2, ""allocate job""",3,2,5
"h.data[2] == j3c, ""j3c should be in pos 2""",3,2,5
"j == j3, ""j3 should come out third.""",3,2,5
"j->heap_index == 0, ""should match""",3,2,5
"h.data[1] == j3b, ""j3b should be in pos 1""",3,2,5
"j3a, ""allocate job""",3,2,5
"h.len == 0, ""h should be empty.""",3,2,5
"j->heap_index == -1, ""j's heap index should be invalid""",3,2,5
"j3b->heap_index == 0, ""should match""",3,2,5
"j3c, ""allocate job""",3,2,5
"a->ht_next == NULL, ""job should be missing""",3,2,5
"get_all_jobs_used() == 100000, ""should match""",3,2,5
"j3c->heap_index == 0, ""should match""",3,2,5
"j3c->heap_index == 2, ""should match""",3,2,5
"h.len == 1, ""h should contain one item.""",3,2,5
"j1->heap_index == 0, ""should match""",3,2,5
"h.data[0] == j3a, ""j3a should be in pos 0""",3,2,5
"j3->heap_index == 0, ""should match""",3,2,5
"j3, ""allocate job""",3,2,5
"job_pri_cmp(a, b) > 0, ""should be a > b""",2,2,4
s.wal.nocomp == 0,2,2,4
"WIFSIGNALED(srvst) && WTERMSIG(srvst) == 9, ""srv status""",2,2,4
"j->pri == 1, ""priority should match""",2,2,4
"strcmp(s.addr, ""localhost"") == 0",2,2,4
"diffst == 0, ""diff status""",2,2,4
"q->used == 0, ""q should be empty.""",2,2,4
"job_cmp(a, b) < 0, ""should be a < b""",2,2,4
s.wal.wantsync == 0,2,2,4
srv.addr == NULL,2,1,3
job_data_size_limit == 1234,2,1,3
srv.wal.filesize == 1234,2,1,3
srv.wal.filesize == Filesizedef,2,1,3
job_data_size_limit == JOB_DATA_SIZE_LIMIT_DEFAULT,2,1,3
srv.user == NULL,2,1,3
"strcmp(srv.port, Portdef) == 0",2,1,3
verbose == 0,2,1,3
"strcmp(""hello, world 5"", got) == 0, ""got \""%s\"""", got",2,1,3
"0, ""optparse failed to call exit""",2,1,3
"gotsize == size, ""binlog.1 %d != %d"", gotsize, size",2,1,3
srv.wal.use == 1,2,1,3
"exist(fmtalloc(""%s/binlog.1"", ctdir()))",2,1,3
srv.wal.use == 0,2,1,3
"!job_pri_less(a, b), ""should not be less""",2,1,3
"gotsize == size, ""binlog.2 %d != %d"", gotsize, size",2,1,3
"strcmp(srv.wal.dir, ""foo"") == 0",2,1,3
"strcmp(exp, line) == 0, ""\""%s\"" != \""%s\"""", exp, line",2,1,3
verbose == 1,2,1,3
verbose == 3,2,1,3
"j->r.pri == 1, ""priority should match""",2,1,3
srv.wal.syncrate == 1234000000,2,1,3
srv.wal.wantsync == 1,2,1,3
"strstr(line, sub), ""\""%s\"" not in \""%s\"""", sub, line",2,1,3
nanoseconds() - s >= 1000000000,2,1,3
srv.wal.dir == NULL,2,1,3
"strcmp(srv.port, ""1234"") == 0",2,1,3
"!!j1, ""Allocation should work""",1,1,2
"q->heap[2] == j3c, ""j3c should be in pos 2""",1,1,2
s.addr == NULL,1,1,2
s.wal.use == 0,1,1,2
"j == j3a, ""j3a should come out third.""",1,1,2
s.wal.nocomp == 1,1,1,2
"q->heap[0] == j3a, ""j3a should be in pos 0""",1,1,2
"!!j, ""allocation""",1,1,2
"j->pri >= last_pri, ""should come out in order.""",1,1,2
"exist(fmtalloc(""%s/binlog.1"", dir))",1,1,2
"strcmp(s.wal.dir, ""foo"") == 0",1,1,2
s.wal.filesz == 1234,1,1,2
"*all_jobs_used_ptr == 0, ""should match""",1,1,2
"!!j3b, ""Allocation should work""",1,1,2
"strcmp(s.port, ""1234"") == 0",1,1,2
"WIFSIGNALED(srvst) && WTERMSIG(srvst) == 9, ""status %d, signal %d"", WEXITSTATUS(srvst), WTERMSIG(srvst)",1,1,2
"j == j1, ""j1 should come out.""",1,1,2
srv.wal.filesz == Filesizedef,1,1,2
c == *exp,1,1,2
s.wal.filesz == Filesizedef,1,1,2
"q->heap[1] == j3b, ""j3b should be in pos 1""",1,1,2
"j == NULL, ""no job should match.""",1,1,2
srv.wal.filesz == 1234,1,1,2
s.wal.dir == NULL,1,1,2
"!!j3c, ""Allocation should work""",1,1,2
s.wal.syncrate == 1234000000,1,1,2
"q->used == 1, ""q should contain one item.""",1,1,2
s.wal.wantsync == 1,1,1,2
"diffst == 0, ""was %d"", diffst",1,1,2
"strcmp(s.port, Portdef) == 0",1,1,2
"!!j2, ""Allocation should work""",1,1,2
"status == 0, ""diff status""",1,1,2
"!!j3a, ""Allocation should work""",1,1,2
s.user == NULL,1,1,2
s.wal.use == 1,1,1,2
"strcmp(s.user, ""kr"") == 0",1,1,2
j[i],1,0,1
j,1,0,1
