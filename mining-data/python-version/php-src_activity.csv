x_val,y_added,y_removed,y_combined
 cursorHoldsMutex(pCur) ,246,191,437
0,187,158,345
 sqlite3_mutex_held(pPage->pBt->mutex) ,200,145,345
 sqlite3_mutex_held(db->mutex) ,205,131,336
 rc==SQLITE_OK ,198,138,336
 sqlite3_mutex_held(pBt->mutex) ,195,131,326
 i>=0 && i<p->nCursor ,114,145,259
 sqlite3_mutex_held(pCtx->s.db->mutex) ,136,119,255
callback,126,122,248
 p ,139,101,240
 pFile ,134,91,225
 iDb>=0 && iDb<db->nDb ,116,100,216
 pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) ,128,86,214
 p->magic==VDBE_MAGIC_INIT ,99,110,209
 pTos>=p->aStack ,65,140,205
Z_TYPE(rv) == IS_INDIRECT,93,93,186
 !db->mallocFailed ,105,80,185
pPager,115,70,185
 sqlite3_mutex_held(p->db->mutex) ,108,73,181
 pOp->p1>=0 && pOp->p1<p->nCursor ,111,67,178
" sqlite3SchemaMutexHeld(db, iDb, 0) ",110,65,175
 pC!=0 ,109,61,170
 v!=0 ,94,71,165
 assert_pager_state(pPager) ,105,60,165
 pCur->eState==CURSOR_VALID ,93,70,163
 p!=0 ,99,64,163
 sqlite3PagerIswriteable(pPage->pDbPage) ,86,72,158
 argc==1 ,88,69,157
 !MEMDB ,75,62,137
 id!=0 ,70,66,136
 n>0 ,72,56,128
 sqlite3BtreeHoldsMutex(p) ,74,51,125
 rc!=SQLITE_DONE ,65,59,124
 pPage->isInit ,57,64,121
 db!=0 ,76,34,110
 pOp->p1>=0 && pOp->p1<db->nDb ,57,52,109
 v ,63,43,106
 pTab!=0 ,55,47,102
 pOp->p3>0 && pOp->p3<=p->nMem ,50,49,99
 sqlite3_mutex_held(mem.mutex) ,56,42,98
" !ExprHasProperty(pExpr, EP_IntValue) ",58,39,97
 pC->deferredMoveto==0 ,55,40,95
 p->apCsr[i]!=0 ,43,52,95
 pOp->p2>0 ,55,40,95
 p->id==SQLITE_MUTEX_RECURSIVE || sqlite3_mutex_notheld(p) ,50,41,91
VALID(format),44,44,88
 i>=0 ,40,45,85
 pPager!=0 ,41,43,84
 pEList!=0 ,47,37,84
 !pagerUseWal(pPager) ,50,32,82
 id ,43,38,81
 pCur->pVtabCursor ,43,38,81
 p->pEList ,42,39,81
 pPager->state>=PAGER_SHARED ,40,40,80
 sqlite3_mutex_held(pCur->pBtree->db->mutex) ,46,34,80
 (pMem->flags & MEM_RowSet)==0 ,50,30,80
 locktype<=SHARED_LOCK ,39,39,78
 pPager->state>=PAGER_RESERVED ,38,40,78
 pPager->journalOpen ,32,45,77
 pOp->p3>0 ,45,32,77
 pTabList->nSrc==1 ,38,38,76
 pC->pCursor!=0,46,30,76
 pIn1->flags&MEM_Int ,44,30,74
 pFile!=0 ,40,33,73
 id>=0 && id<SQLITE_FAULTINJECTOR_COUNT ,40,33,73
cb,43,30,73
 pC->isTable ,43,30,73
 (pH->htsize & (pH->htsize-1))==0 ,36,36,72
 sqlite3BtreeHoldsAllMutexes(db) ,45,27,72
 sqlite3BtreeHoldsAllMutexes(pParse->db) ,42,29,71
PHP_REGEX_NOPE,28,42,70
 p->pSegments==0 ,43,25,68
src2 == TMP_REG2,68,0,68
 n>=0 ,33,34,67
 nColumn==1 ,30,36,66
 pOp->p2<=p->nMem ,34,31,65
 pOp->p1>0 ,37,28,65
EG(exception),61,3,64
self,32,32,64
stream != NULL,26,37,63
 pX!=0 ,33,30,63
 pList!=0 ,34,28,62
 p->nRef>0 ,40,22,62
" !ExprHasProperty(pExpr, EP_xIsSelect) ",38,24,62
 omitTable==0 ,31,31,62
 xHash!=0 ,32,30,62
 pPager->needSync ,29,32,61
 pH!=0 ,34,26,60
 (p->btreeMask & (1<<pOp->p1))!=0 ,32,28,60
 p->nOp>0 ,32,28,60
 pBt->inTransaction==TRANS_WRITE ,34,26,60
 iDb>=0 ,35,24,59
 IsVirtual(pTab) ,35,24,59
 pPg->nRef>0 ,28,31,59
 pPage->nOverflow==0 ,29,29,58
 pNew!=0 ,31,27,58
 iDb<db->nDb ,32,25,57
 pIdx->pSchema==pTab->pSchema ,31,26,57
 mem.mutex!=0 ,32,25,57
 pWal->writeLock ,35,21,56
 id->isOpen ,18,36,54
 argc==3 ,28,26,54
 pBt->autoVacuum ,28,25,53
 pOp->p4type==P4_INT32 ,33,20,53
 db->mallocFailed ,32,20,52
 pFile->locktype!=NO_LOCK || locktype==SHARED_LOCK ,27,25,52
 EIGHT_BYTE_ALIGNMENT(pMem) ,33,19,52
 locktype!=RESERVED_LOCK || pFile->locktype==SHARED_LOCK ,27,25,52
 amt>0 ,30,22,52
 pPager->pInJournal==0 ,30,22,52
 nCell<nMaxCells ,27,25,52
 (pageSize & 7)==0 ,26,26,52
 p==0 || p->magic==VDBE_MAGIC_INIT ,26,25,51
 pName->nSrc==1 ,26,25,51
 !sqlite3MallocFailed() ,20,31,51
 pgno!=0 ,25,26,51
0 < i && i <= m->g->nsub,20,30,50
 locktype!=PENDING_LOCK ,25,25,50
 pPager->eState!=PAGER_ERROR ,30,20,50
 p->wantToLock>0 ,27,22,49
 iDummy>0 ,28,21,49
 rc==SQLITE_OK || rc==SQLITE_NOMEM ,29,20,49
pPager->fd->pMethods||pPager->tempFile,26,23,49
 iIndex>=0 && iIndex<p->nIndex ,32,17,49
 pPager->errCode==SQLITE_OK ,31,18,49
 !dlrAtEnd(pReader) ,28,21,49
 pOp->p3<=p->nMem ,24,24,48
 (rc&0xff)==rc ,26,22,48
 sqlite3PagerIswriteable(pParent->pDbPage) ,28,20,48
 pPager->state!=PAGER_UNLOCK ,23,25,48
 db ,24,24,48
 pTab->pSelect==0 ,25,23,48
SQLITE_IOCAP_ATOMIC64K==(65536>>8),27,21,48
 isOpen(pPager->jfd) ,29,19,48
SQLITE_IOCAP_ATOMIC512==(512>>8),27,21,48
 pNos>=p->aStack ,14,33,47
 pTerm!=0 ,26,21,47
 pCur->idx>=0 && pCur->idx<pCur->pPage->nCell ,21,26,47
 rc!=SQLITE_OK ,27,20,47
 pMem->z!=0 ,25,22,47
 pTab ,24,22,46
ms != NULL,23,23,46
 p->nPendingData==0 ,28,17,45
 pOp->p1<=p->nMem ,24,21,45
 !pBt->readOnly ,19,26,45
 p->nRef==0 ,28,17,45
 p->id==SQLITE_MUTEX_FAST || p->id==SQLITE_MUTEX_RECURSIVE ,24,21,45
 pFrom->pTab==0 ,27,18,45
src1 == TMP_REG1 && !(flags & SRC2_IMM),44,0,44
 rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 ,28,16,44
 pTriggerStack->pTab ,20,24,44
 pCur->idx>=0 && pCur->idx<pPage->nCell ,20,24,44
 sqlite3_mutex_held(pcache.mutex) ,22,22,44
 sqlite3_mutex_held(pcache_g.mutex) ,22,22,44
 argc==1 || argc==2 ,25,19,44
 p->pBt->pPager!=0 ,24,20,44
other,22,22,44
 pC->iDb>=0 ,25,18,43
 ((Fts3Table *)pCsr->base.pVtab)->pSegments==0 ,27,16,43
"!""Invalid flags argument""",24,19,43
 pTable!=0 ,22,20,42
 pC->isTable==0 ,24,18,42
 pPage!=0 ,22,20,42
 n+iDummy>0 ,24,18,42
 (pTos->flags & MEM_Dyn)==0 ,12,30,42
VALID(self),21,21,42
 pTab->nCol>0 ,20,22,42
 pParse->disableColCache>0 ,24,18,42
 !pPager->tempFile ,23,19,42
 iLookAhead!=YYNOCODE ,25,17,42
 pPage->pBt!=0 ,23,19,42
 *pPgno!=PENDING_BYTE_PAGE(pBt) ,21,20,41
 pParse->pNewTable==0 ,23,18,41
 pCur->pPage->nCell==0 ,19,22,41
 pH->htsize>0 ,23,17,40
 (p->btreeMask & (((yDbMask)1)<<pOp->p1))!=0 ,20,20,40
 pTable ,20,20,40
 pPager->state>=SHARED_LOCK ,20,20,40
 sqlite3_mutex_held(pCtx->pOut->db->mutex) ,39,1,40
TK_NE==OP_Ne,22,18,40
 i>0 ,25,15,40
TK_EQ==OP_Eq,22,18,40
 iCol==-1 || (iCol>=0 && iCol<pTab->nCol) ,20,20,40
 db->init.busy ,20,20,40
pCur,22,18,40
 pPager->eState==PAGER_OPEN ,25,15,40
 iSpace<=pBt->pageSize*5 ,18,21,39
 pBt!=0 ,22,17,39
 TK_NOTNULL==OP_NotNull ,20,18,38
leafCorrection==4,21,17,38
 TK_ISNULL==OP_IsNull ,20,18,38
 seenReplace==0 ,16,22,38
 rc!=SQLITE_OK || pPager->jfd->pMethods ,20,18,38
 p->rc==SQLITE_OK ,31,7,38
 pNC!=0 ,20,18,38
 pPager->useJournal ,20,18,38
 pParse->nErr==0 ,22,15,37
 pIn3->flags & MEM_Int ,23,14,37
 p && p->pFunc && p->pFunc->xStep ,17,20,37
 pOp[-1].opcode==OP_CollSeq ,19,18,37
 pLeft!=0 ,18,18,36
 pCur->pPage!=0 ,16,20,36
 nData>0 ,21,15,36
 unixMutexHeld() ,22,14,36
retval != NULL,25,11,36
 isOpen(p->jfd) || p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_WAL ,21,15,36
 p->addrOpenEphm[0] == -1 ,20,16,36
TK_GT==OP_Gt,20,16,36
 (info.nData+(pPage->intKey?0:info.nKey))==info.nPayload ,18,18,36
TK_LT==OP_Lt,20,16,36
TK_GE==OP_Ge,20,16,36
TK_LE==OP_Le,20,16,36
 pParse->pNewTrigger==0 ,18,17,35
 pOp->p1>0 && pOp->p1<=p->nMem ,18,17,35
 TK_LT==TK_GT+2 ,19,16,35
 p->db!=0 ,21,14,35
 !db->init.busy ,19,16,35
 !plrAtEnd(pReader) ,20,15,35
 v->nPendingData<0 ,20,15,35
 isOpen(pPager->fd) || pPager->tempFile ,20,14,34
 keyClass==FTS3_HASH_BINARY ,20,14,34
 eFileLock<=SHARED_LOCK ,22,12,34
 pOp[-1].p4type==P4_COLLSEQ ,18,16,34
 pExpr->pRight==0 ,17,17,34
 jumpIfNull==SQLITE_JUMPIFNULL || jumpIfNull==0 ,20,14,34
 x>='a' && x<='z' ,20,14,34
 pSelect==0 ,18,16,34
 apVal || n==0 ,18,16,34
 pOp->p4type==P4_VTAB ,20,14,34
 !p->locked || p->wantToLock>0 ,19,15,34
 pExpr->pLeft==0 && pExpr->pRight==0 ,18,16,34
 p->locked ,18,16,34
 esc==0 ,16,18,34
 pOp->p1>=0 ,20,14,34
arg & SLJIT_MEM,34,0,34
 n>=1 ,18,15,33
 pE!=0 ,16,17,33
 rc==SQLITE_NOMEM || rc==SQLITE_OK ,19,14,33
 rc==SQLITE_ERROR ,18,15,33
GC_REFCOUNT(ht) == 1,29,4,33
 (p->btreeMask & (1<<iDb))!=0 ,18,15,33
 pPg->flags & PGHDR_DIRTY ,20,13,33
 pOut!=pIn1 ,20,13,33
 i>=0 && i<db->nDb ,17,16,33
 pbegin<=pPage->pBt->usableSize-4 ,15,18,33
 pParse!=0 ,21,12,33
 iLevel<FTS3_SEGDIR_MAXLEVEL ,21,12,33
 pPager->pInJournal!=0 ,18,14,32
data != NULL,16,16,32
pPg,16,16,32
 rc==SQLITE_OK || pStmt==0 ,18,14,32
 db->aDb[iDb].pBt!=0 ,19,13,32
 pPg->needSync==0 ,14,18,32
 pCur->eState==CURSOR_INVALID || pCur->eState==CURSOR_VALID ,16,16,32
 pCur->aiIdx[pCur->iPage]<pCur->apPage[pCur->iPage]->nCell ,21,11,32
 pVfs->mxPathname==MAX_PATHNAME ,18,14,32
 sqlite3PagerGetExtra(pPage->pDbPage) == (void*)pPage ,19,13,32
 pPage->pBt ,17,15,32
 i>=0 && i<p->nMem ,10,22,32
 pDb->pBt!=0 ,18,14,32
 pPager->doNotSync==0 ,16,16,32
ts != NULL,17,15,32
 sqlite3_mutex_held(pcache1.mutex) ,16,16,32
 (rc&db->errMask)==rc ,18,14,32
 pToken->dyn==0 ,14,18,32
 p && p->pFunc ,17,15,32
 pPage->nCell==0 ,14,17,31
 iType-2 >= 0 ,16,15,31
 iLevel==FTS3_SEGCURSOR_ALL || iLevel==FTS3_SEGCURSOR_PENDING || iLevel>=0 ,18,13,31
 j<nMaxCells ,15,16,31
 pExpr->pList==0 ,15,16,31
 pLeft ,17,14,31
 nTerm>0 ,17,14,31
 (f & (MEM_Dyn|MEM_Ephem))==0 ,16,14,30
cs->multis == NULL,12,18,30
 len>0 ,16,14,30
 (f & (MEM_Static|MEM_Ephem))==0 ,16,14,30
 z2==(char*)sqlite3_value_text(argv[0]) ,18,12,30
 target>0 && target<=pParse->nMem ,18,12,30
 i==0 || pArray->aBtree[i-1]->pBt<p->pBt ,16,14,30
 pPage->leaf ,16,14,30
 pPager->journalHdr<=pPager->journalOff ,18,12,30
 pOp->p4.z!=0 ,18,12,30
pg1<=pPg->pgno,16,14,30
 (f & (MEM_Static|MEM_Dyn))==0 ,16,14,30
OP(m->g->strip[esub]) == OOR1,12,18,30
nPage>0,16,14,30
stp >= sp,12,18,30
 target>0 ,18,12,30
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY ,14,16,30
 p->pOrderBy==0 ,16,14,30
 pOp>p->aOp ,14,16,30
 iType-2 < sizeof(staticMutexes)/sizeof(staticMutexes[0]) ,16,14,30
 isWriteLock==0 || isWriteLock==1 ,18,12,30
rest != NULL,12,18,30
(pg1+nPage)>pPg->pgno,16,14,30
 p->readOnly==0 ,30,0,30
 pArray->aBtree[i]!=pBtree ,16,14,30
 onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail || onError==OE_Ignore || onError==OE_Replace ,16,14,30
 isOpen(pPager->fd) ,18,11,29
 pSrc ,16,13,29
 pOrderBy!=0 ,14,15,29
 pRes!=0 ,17,12,29
src1 == TMP_REG1,28,0,28
 p->pBt->inTransaction>=p->inTrans ,15,13,28
 pOp->p1>0 && pOp->p1<=p->nVar ,14,14,28
 p->pRightmost==p ,14,14,28
 i>=0 && i<NBLOCK ,16,12,28
 stmtLruCheck() ,16,12,28
 !pReader->eof ,16,12,28
 n+iDummy<=nData ,16,12,28
 fd!=0 ,16,12,28
nope,14,14,28
isDelete==0 || isCreate,16,12,28
isCreate==0 || isReadWrite,16,12,28
 0!=pFile->locktype ,14,14,28
isExclusive==0 || isCreate,16,12,28
 pTos->flags & MEM_Str ,10,18,28
(isReadonly==0 || isReadWrite==0) && (isReadWrite || isReadonly),16,12,28
 pPager->dbSizeValid ,14,14,28
 pCrsr!=0 ,21,7,28
 tempFile==PAGER_LOCKINGMODE_NORMAL || tempFile==PAGER_LOCKINGMODE_EXCLUSIVE ,15,13,28
 pBt->nTransaction>0 ,15,13,28
 p->inTrans==TRANS_WRITE ,18,10,28
 n<nData ,16,12,28
(flags&0x0F)==SQLITE_SYNC_NORMAL || (flags&0x0F)==SQLITE_SYNC_FULL ,16,11,27
 offset>=0 ,15,12,27
 pH->count==0 ,16,11,27
 (z-zBuf)==n ,15,12,27
 db->init.busy==0 ,16,11,27
 pageSize==0 || (pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE) ,15,12,27
 pBt->pPage1->aData ,14,13,27
 pOrTerm->eOperator==WO_EQ ,12,15,27
 iCol>=0 ,17,10,27
 eType==SQLITE_OPEN_MAIN_DB || eType==SQLITE_OPEN_TEMP_DB || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL || eType==SQLITE_OPEN_SUBJOURNAL || eType==SQLITE_OPEN_MASTER_JOURNAL || eType==SQLITE_OPEN_TRANSIENT_DB || eType==SQLITE_OPEN_WAL ,15,12,27
 pCur->isValid ,9,18,27
 pH->first==0 ,16,11,27
 pIn3->flags & MEM_Blob ,15,12,27
 countWriteCursors(pBt)==0 ,12,15,27
 nByte>0 ,18,9,27
 pOp->p2<SQLITE_N_BTREE_META ,12,15,27
us != NULL,13,13,26
 argc==2 ,14,12,26
 pPager->eState>=PAGER_WRITER_LOCKED ,16,10,26
 pX->op==TK_IN ,15,11,26
 sizeof(u32)==4 ,14,12,26
 pOp->p3>0 && pOp->p3<=(p->nMem-p->nCursor) ,19,7,26
 pTable->aCol==0 ,13,13,26
 pbegin>addr ,12,14,26
 MEM_Str==(MEM_Blob>>3) ,14,12,26
 pPg->pgno!=PAGER_MJ_PGNO(pPager) ,14,12,26
 z!=0 ,16,10,26
 pParse->sLastToken.dyn==0 ,11,14,25
 0==pCur->pKey ,14,11,25
 db->magic==SQLITE_MAGIC_BUSY ,11,14,25
 p->nRef==0 || p->id==SQLITE_MUTEX_RECURSIVE ,16,9,25
 p->pGroupBy==0 ,14,11,25
SQLITE_MAX_DEFAULT_PAGE_SIZE<=65536,14,11,25
 pList ,15,10,25
 CURSOR_VALID==pCur->eState ,13,12,25
 !IsVirtual(pTab) ,16,9,25
 pBt->nRef>0 ,13,12,25
 PAGER_LOCKINGMODE_EXCLUSIVE==1 ,13,11,24
 nSetP2<sizeof(aSetP2)/sizeof(aSetP2[0]) ,12,12,24
 pShmNode->pInode==pDbFd->pInode ,15,9,24
 eMode==PAGER_LOCKINGMODE_QUERY || eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,13,11,24
 zTab==0 && zDb==0 ,12,12,24
 pPg->pNextHash==0 && pPg->pPrevHash==0 ,12,12,24
 pIn1->flags==MEM_Int ,14,10,24
 rc!=SQLITE_OK || isOpen(pPager->jfd) ,14,10,24
p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE || p->op==RTREE_GT || p->op==RTREE_EQ ,14,10,24
 sqlite3PagerIswriteable(pRoot->pDbPage) ,14,10,24
!(flags & SET_FLAGS) && arg1 == TMP_REG1,24,0,24
 PAGER_LOCKINGMODE_QUERY<0 ,13,11,24
 p->eLock!=UNKNOWN_LOCK ,15,9,24
 pOp->p1>=0 && pOp->p1<p->nMem ,9,15,24
 p->bIsReader ,23,1,24
 aData ,13,11,24
 (new_size & (new_size-1))==0 ,12,12,24
" sqlite3SchemaMutexHeld(db, j, 0) ",15,9,24
 pWal->nWiData>0 && pWal->apWiData[0] ,15,9,24
 sqlitepager_iswriteable(pPage) ,8,16,24
 pVtab!=0 ,13,11,24
 pIdx!=0 ,16,8,24
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,15,9,24
buf!= NULL,12,12,24
 pFile->locktype==SHARED_LOCK ,13,11,24
Z_TYPE_P(ret) == IS_INDIRECT,12,12,24
 pFile->locktype==NO_LOCK ,13,11,24
 pFifo->nEntry>0 ,12,12,24
 eLock==READ_LOCK || eLock==WRITE_LOCK ,14,10,24
 pPager->tempFile ,12,12,24
 PAGER_LOCKINGMODE_NORMAL>=0 && PAGER_LOCKINGMODE_EXCLUSIVE>=0 ,13,11,24
 pFile->pUnused==0 || offset>=PENDING_BYTE+512 || offset+amt<=PENDING_BYTE ,14,10,24
 pSrcList->a[i].iCursor>=0 && pSrcList->a[i].iCursor<pParse->nTab,12,12,24
 p->pBt->inTransaction!=TRANS_NONE || p->pBt->nTransaction==0 ,13,11,24
 pFile->locktype>=SHARED_LOCK ,13,11,24
 sqlite3BtreeCursorIsValid(pCur) ,15,9,24
nargv != NULL,12,12,24
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) ,12,11,23
 pPg->inJournal || (int)pPg->pgno>pPager->origDbSize ,9,14,23
 p->magic==VDBE_MAGIC_RUN ,14,9,23
 pPager->state == (tempFile ? PAGER_EXCLUSIVE : PAGER_UNLOCK) ,12,11,23
warning,10,13,23
 p==0 ,13,10,23
 pBt->pPage1!=0 ,12,11,23
 p->locked==0 ,14,9,23
 pOp!=0 ,14,9,23
 idx>0 ,12,11,23
 pBt->pPager!=0 ,9,14,23
pDup,13,10,23
pDb==&db->aDb[0],13,10,23
 pPager->errCode==SQLITE_FULL || pPager->errCode==SQLITE_OK || (pPager->errCode & 0xff)==SQLITE_IOERR ,13,10,23
 pPage->nCell>0 ,12,11,23
 pPager->journalOpen==0 ,8,15,23
 p1>=0 && p1<db->nDb ,13,10,23
 j<pTabList->nSrc ,11,12,23
 op!=0 ,13,10,23
 (p->btreeMask & (1<<i))!=0 ,12,10,22
 pPager->dirtyCache==0 || pPager->journalOpen==0 ,12,10,22
 WO_LT==SQLITE_INDEX_CONSTRAINT_LT ,12,10,22
 pMem->z ,10,12,22
 p->mxSavepoint >= iSavepoint ,14,8,22
 WO_MATCH==SQLITE_INDEX_CONSTRAINT_MATCH ,12,10,22
 pModule->xRowid ,13,9,22
 keyClass==SQLITE_HASH_BINARY ,10,12,22
 pExpr->token.n>=3 ,12,10,22
 sizeof(Pgno)==4 ,11,11,22
 p->inTransaction ,14,8,22
 pIn1->flags & MEM_Str || db->mallocFailed ,12,10,22
 sqlite3_data_count(pCsr->pStmt)==0 ,14,8,22
 !isdigit(z[n]) ,12,10,22
 (pTerm->flags & TERM_CODED)==0 ,10,12,22
 op==TK_UPDATE || op==TK_INSERT || op==TK_DELETE ,11,11,22
 pRec>=p->aStack ,7,15,22
 pRight->op==TK_DOT ,11,11,22
 z || v==0 || sqlite3VdbeDb(v)->mallocFailed ,12,10,22
 sizeof(u16)==2 ,11,11,22
 pExpr->token.z[1]=='\'' ,12,10,22
VALID(buffer),11,11,22
 sqlite3_mutex_held(p) ,12,10,22
 pTerm->pExpr ,12,10,22
 pExpr->token.z[0]=='x' || pExpr->token.z[0]=='X' ,12,10,22
 pExpr->token.z[pExpr->token.n-1]=='\'' ,12,10,22
 WO_GE==SQLITE_INDEX_CONSTRAINT_GE ,12,10,22
 p->inTransaction!=0 ,14,8,22
 p->pEList && pPrior->pEList ,11,11,22
 WO_LE==SQLITE_INDEX_CONSTRAINT_LE ,12,10,22
pLink==&pPg->gfree || pList!=&sqlite3LruPageList,12,10,22
pLink==&pPg->free || pLink==&pPg->gfree,12,10,22
 pPage->pgno>1 ,10,12,22
 WO_GT==SQLITE_INDEX_CONSTRAINT_GT ,12,10,22
 xConstruct ,12,10,22
 pLeft->eType==FTSQUERY_PHRASE ,10,12,22
" !call->func || !(call->func->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(call->func, EX_VAR(opline->result.var))",14,8,22
 iDb<pParse->db->nDb ,10,12,22
 WO_EQ==SQLITE_INDEX_CONSTRAINT_EQ ,12,10,22
 ppStmt ,10,12,22
 pPage->pParent==0 ,10,12,22
 !pBt->pCursor ,13,9,22
 pParent->isInit ,11,11,22
 pOpen->nLock>=0 ,10,12,22
 pTerm->pExpr!=0 ,12,10,22
" EG(exception) || !call->func || !(call->func->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(call->func, EX_VAR(opline->result.var))",11,11,22
 TK_GT<TK_LE ,11,10,21
 pMem->flags==MEM_Int ,7,14,21
 pMem1->enc==SQLITE_UTF8 || pMem1->enc==SQLITE_UTF16LE || pMem1->enc==SQLITE_UTF16BE ,11,10,21
 nVal==1 ,13,8,21
 (pX->exclMask & (p->exclMask|p->sharedMask))==0 ,12,9,21
 n<pReader->nData ,12,9,21
 pTableName->nSrc==1 ,10,11,21
 pLhs->aNode && pRhs->aNode ,13,8,21
 pOp->p3<=(p->nMem-p->nCursor) ,15,6,21
 nData>1 ,12,9,21
 TK_GE==TK_LE+2 ,11,10,21
 pData!=0 ,12,9,21
 pExpr->op>=TK_GT && pExpr->op<=TK_GE ,11,10,21
 n>1 || mask==(1<<ofst) ,12,9,21
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_DB ,12,9,21
pWriter->last,12,9,21
 c==i ,11,10,21
(fd >= 0) && (fd < WIN32_OPEN_MAX),7,14,21
quiet_eval,9,12,21
 i==0 ,11,10,21
active,9,12,21
 (!isDelete && zName) || eType!=SQLITE_OPEN_WAL ,12,9,21
 pStart->leftCursor==iCur ,10,11,21
 iLogsize>=0 && iLogsize<NSIZE ,12,9,21
 pPage->pCache==pCache ,12,9,21
 yyact == YYNSTATE + YYNRULE + 1 ,12,9,21
 pCur->aiIdx[pCur->iPage]<pPage->nCell ,12,9,21
 TK_GT>TK_EQ ,11,10,21
 (p->sharedMask & mask)==0 ,12,9,21
 (!isDelete && zName) || eType!=SQLITE_OPEN_MAIN_JOURNAL ,12,9,21
 flags==(SQLITE_SHM_LOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED) || flags==(SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE) ,12,9,21
 (!isDelete && zName) || eType!=SQLITE_OPEN_MASTER_JOURNAL ,12,9,21
 pData+nData>pData ,12,9,21
 !interiorReaderAtEnd(pReader) ,12,9,21
 pExpr->eType==FTSQUERY_PHRASE ,11,10,21
 n<=nData ,12,9,21
 n==1 || (flags & SQLITE_SHM_EXCLUSIVE)!=0 ,12,9,21
 ofst>=0 && ofst+n<=SQLITE_SHM_NLOCK ,12,9,21
 pReader->term.nData>0 ,12,9,21
 p->nOp>0 || p->aOp==0 ,11,10,21
 (pMem->flags & MEM_Int)!=0 ,11,9,20
 db->u1.isInterrupted ,11,9,20
 sqlite3PagerIswriteable(pChild->pDbPage) ,11,9,20
 WRITE_LOCK>READ_LOCK ,11,9,20
 yy_lookahead[i]==iLookAhead ,12,8,20
 p->aSample!=0 ,12,8,20
 (p->flags & MEM_Agg)==0 ,11,9,20
 p->l_whence==SEEK_SET ,11,9,20
 pOffset==0 || pLimit!=0 ,10,10,20
"EQ(step(m->g, startst, stopst, st, NOTHING, st), st)",8,12,20
 addr>=0 ,8,12,20
 pCache->nPinned==pcachePinnedCount(pCache) ,10,10,20
 enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE ,12,8,20
 !pCur->pPage->intKey || !pCur->pKey ,10,10,20
 sizeof(res.azResult[0])>= sizeof(res.nData) ,11,9,20
 sqlite3_mutex_held(mem3.mutex) ,20,0,20
OP(m->g->strip[esub]) == OOR2,8,12,20
 sizeof(u64)==8 || sizeof(u64)==4 ,10,10,20
 pOp->p3!=0 ,7,13,20
 pWal->readLock>=0 || pWal->lockError ,12,8,20
 i!=YY_REDUCE_USE_DFLT ,12,8,20
 pTrigger->pSchema==pTab->pSchema || pTrigger->pSchema==db->aDb[1].pSchema ,11,9,20
 db->aDb==db->aDbStatic ,10,10,20
 p->zErrMsg==0 ,11,9,20
 opcode==OP_OpenWrite || opcode==OP_OpenRead ,11,9,20
string,10,10,20
OP(g->strip[pc+OPND(s)]) == OOR2,8,12,20
 pzErrMsg!=0 ,12,8,20
 pPager->aInJournal==0 ,6,14,20
 pCur->iPage>=0 && pCur->apPage[pCur->iPage] ,12,8,20
 zFilename ,9,11,20
 pParse->pVdbe || pParse->db->mallocFailed ,11,9,20
c != OUT,8,12,20
 sz<=pBt->maxLocal+23 ,12,8,20
pPager->state==PAGER_SHARED || (pPager->exclusiveMode && pPager->state>PAGER_SHARED) ,10,10,20
 i>=0 && i<p->agg.nMem ,8,12,20
bail,9,11,20
 pTos->flags & MEM_Blob ,6,14,20
 p->explain ,10,10,20
 pEList!=0 && pExpr->iColumn<pEList->nExpr ,10,10,20
 pCrsr ,15,5,20
 sqlite3_mutex_held(pCache->pGroup->mutex) ,14,6,20
 op>=0 && op<ArraySize(wsdStat.nowValue) ,14,6,20
 pTable->pSelect ,10,10,20
 nArg==1 ,9,11,20
 pPage->leaf==0 || pPage->leaf==1 ,11,9,20
 pc>=-1 && pc<p->nOp ,10,10,20
OP(m->g->strip[esub]) == O_CH,8,12,20
 pTab->nCol>cnum ,9,11,20
 !p->isStep ,8,12,20
 p->aCol==0 ,10,10,20
 db->nDb<=2 ,10,10,20
" 0==PTRMAP_ISPAGE(pBt, PENDING_BYTE_PAGE(pBt)) ",11,9,20
OP(s) == OOR2,8,12,20
MORE(),8,12,20
 yyact == YY_ERROR_ACTION ,12,8,20
 pEType!=0 ,11,9,20
 pPager->aInJournal!=0 ,7,13,20
 pCsr->nRowAvg>0 ,11,9,20
p->iSize<=p->nBuf,11,9,20
p->pend[subno] != 0,8,12,20
 p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed ,11,9,20
 mem1.zMalloc==0 ,10,10,20
 db->aDb[i].zName!=0 ,10,10,20
 rc!=SQLITE_OK || zErr==0 ,11,9,20
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_INVALID ,11,9,20
 j==1 ,12,8,20
dp == rest,8,12,20
 sizeof(i64)==8 || sizeof(i64)==4 ,10,10,20
 pIn2->flags & MEM_Blob ,11,8,19
 p->pPrev==0 || p->pPrev->pBt<p->pBt ,11,8,19
 p->pNext==0 || p->pNext->pBt>p->pBt ,11,8,19
 pParse->nTab>iCur+i+1 ,8,11,19
 pOp->p5<db->nDb ,11,8,19
 pLater->pNext==0 || pLater->pNext->pBt>pLater->pBt ,11,8,19
 pBt->autoVacuum || iMeta==0 ,11,8,19
 pExcept==0 || pExcept->pBt==pBt ,11,8,19
 p->pNext==0 || p->pNext->db==p->db ,11,8,19
 pParse->db->mallocFailed ,12,7,19
 pCur->eState>=CURSOR_REQUIRESEEK ,11,8,19
 pExpr->op!=TK_NOTNULL || op==OP_IsNull ,10,9,19
 j==nCell ,8,11,19
 pExpr->op!=TK_GE || op==OP_Lt ,10,9,19
 sqlite3BtreeHoldsMutex(pBtree) ,11,8,19
 (pBt->pageSize & 7)==0 ,10,9,19
 rc ,11,8,19
 pExpr->op!=TK_EQ || op==OP_Ne ,10,9,19
 PAGER_JOURNALMODE_QUERY<0 ,10,9,19
 pPage->pBt->usableSize <= SQLITE_MAX_PAGE_SIZE ,10,9,19
 pTopNC!=0 ,10,9,19
 pCsr->isIncrblobHandle ,10,9,19
 pMem->flags & MEM_Blob ,12,7,19
 p->db->mallocFailed ,13,6,19
 pList->nExpr>0 ,13,6,19
 n==4-4*pPage->leaf ,9,10,19
 (p->btreeMask & (1<<p1))!=0 ,10,9,19
 zSql!=0 ,12,7,19
 pPage->intKey || nKey>=0 ,10,9,19
 pList->a!=0 || (pList->nExpr==0 && pList->nAlloc==0) ,8,11,19
 (pnErr->flags & MEM_Int)!=0 ,11,8,19
 pExpr->op!=TK_NE || op==OP_Eq ,10,9,19
 !pPrior->pLimit ,10,9,19
 (pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,11,8,19
 tr_tm==TRIGGER_BEFORE || tr_tm==TRIGGER_AFTER ,10,9,19
 (offset-c)<JOURNAL_HDR_SZ(pPager) ,10,9,19
 nCell==get2byte(&data[hdr+3]) ,10,9,19
 eType==PTRMAP_OVERFLOW2 || eType==PTRMAP_OVERFLOW1 || eType==PTRMAP_BTREE || eType==PTRMAP_ROOTPAGE ,10,9,19
 p->sharable || (p->pNext==0 && p->pPrev==0) ,11,8,19
 pC->eCurType==CURTYPE_BTREE ,19,0,19
 pOp->p3==0 ,11,8,19
 pMatch->iCursor==pExpr->iTable ,10,9,19
 iMeta==0 || iMeta==1 ,11,8,19
 pOp->p4type==P4_COLLSEQ || pOp->p4.pColl==0 ,11,8,19
 nArg>1 && apArg[0] && (apArg[0]->flags&MEM_Null) ,11,8,19
 pPager->journalOff > 0 ,9,10,19
 offset%JOURNAL_HDR_SZ(pPager)==0 ,10,9,19
 pExpr->op!=TK_LE || op==OP_Gt ,10,9,19
 pExpr->op!=TK_LT || op==OP_Ge ,10,9,19
 rc!=SQLITE_IOERR_BLOCKED ,11,8,19
 p->sharable || p->wantToLock==0 ,11,8,19
 p2==p1 ,11,8,19
 db == v->db ,11,8,19
 pNC->nRef>=nRef ,10,9,19
zType[i-1]==' ',11,8,19
 offset>=c ,10,9,19
 (pMem->flags & (MEM_Blob|MEM_Str))!=0 ,11,8,19
 (isTemp & 1)==isTemp ,9,10,19
 nNew>0 ,12,7,19
 zColl!=0 ,12,7,19
 memIsValid(pIn1) ,13,6,19
pVtab && pModule,10,9,19
 z==0 ,11,8,19
 p->pPrev==0 || p->pPrev->db==p->db ,11,8,19
 pLater->sharable ,11,8,19
 !pLater->locked || pLater->wantToLock>0 ,11,8,19
 leafCorrection==0 ,10,9,19
 MEMDB==0 ,9,10,19
 pList->nExpr<=pList->nAlloc ,8,11,19
 szNew <= MX_CELL_SIZE(pBt) ,10,9,19
 rc==SQLITE_OK || pPage==0 ,11,8,19
 p->pOffset==0 ,13,6,19
 pPager->eLock==EXCLUSIVE_LOCK ,13,6,19
 pExpr->op!=TK_ISNULL || op==OP_NotNull ,10,9,19
 pExpr->op!=TK_GT || op==OP_Le ,10,9,19
 p->sharable || 0==*ppIter ,11,8,19
 op!=TK_ISNULL || c==WO_ISNULL ,10,8,18
 pC->rowidIsValid==0 ,10,8,18
 pName==0 ,9,9,18
 pTo!=0 ,9,9,18
 TK_LE>TK_EQ && TK_LE<TK_GE ,10,8,18
 pMem1->enc==pMem2->enc ,9,9,18
 pList->a!=0 ,9,9,18
 p2>0 ,11,7,18
 pPk!=0 ,16,2,18
 op!=TK_GT || c==WO_GT ,10,8,18
 cursorOwnsBtShared(pCur) ,18,0,18
 TK_GT>TK_EQ && TK_GT<TK_GE ,10,8,18
 !id->isOpen ,6,12,18
 allowedOp(op) ,10,8,18
 db->nDb>iDb ,9,9,18
 TK_GE==TK_EQ+4 ,10,8,18
 pModule->xNext ,11,7,18
 pCur!=0 && pCur->pPage!=0 ,7,11,18
 pSelect->pEList ,9,9,18
 allowedOp(pExpr->op) && pExpr->op!=TK_IN ,10,8,18
 TK_LT>TK_EQ && TK_LT<TK_GE ,10,8,18
 op!=TK_GE || c==WO_GE ,10,8,18
 pPager->eState>=PAGER_READER ,12,6,18
 p==pIndex ,9,9,18
 iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) ,12,6,18
 pPg->pNextHash->pPrevHash==0 ,8,10,18
jump->flags & JUMP_LABEL,18,0,18
 pPg->dirty==0 ,8,10,18
 pColumnToken && pColumnToken->z ,8,10,18
 p==pOld ,9,9,18
common->first_line_end != 0,12,6,18
 affinity==SQLITE_AFF_INTEGER || affinity==SQLITE_AFF_REAL || affinity==SQLITE_AFF_NUMERIC ,10,8,18
 db->mallocFailed==0 ,12,6,18
 (pQuery->flags&MEM_Int)!=0 && pArgc->flags==MEM_Int ,11,7,18
 op!=TK_LE || c==WO_LE ,10,8,18
Z_TYPE_INFO_P(zv) == IS_LONG,10,8,18
 rc==SQLITE_NOMEM ,10,8,18
 pc>=0 && pc<p->nOp ,8,10,18
 pModule->xColumn ,11,7,18
 pExpr->pLeft ,9,9,18
 pSrc && iFrom>=0 && iFrom<pSrc->nSrc ,9,9,18
 pSubSrc ,9,9,18
 pCur->wrFlag ,8,10,18
 (pTerm->eOperator&(pTerm->eOperator-1))==0 ,8,10,18
 pRight->eType==FTSQUERY_PHRASE ,8,10,18
 nRoot>0 ,10,8,18
 pSub!=0 ,9,9,18
 pVtab->pModule->xRename ,11,7,18
 (enc&3)==(enc&~SQLITE_UTF16_ALIGNED) ,11,7,18
options != NULL,9,9,18
 op!=TK_IN || c==WO_IN ,10,8,18
 p->explain==0 ,9,9,18
" !ExprHasProperty(pNew, EP_xIsSelect) ",11,7,18
 idx>=0 && idx<pPage->nCell ,9,9,18
 eDest==SRT_Discard ,9,9,18
 op!=TK_LT || c==WO_LT ,10,8,18
 pPg->nRef==0 ,8,10,18
 pList->nExpr==2 ,10,8,18
 pOld==pOpen ,8,10,18
 pMaskSet->n < ArraySize(pMaskSet->ix) ,10,8,18
 memIsValid(&aMem[pOp->p3]) ,11,7,18
 op!=TK_EQ || c==WO_EQ ,10,8,18
 k<nExpr ,6,12,18
 pTab->iPKey<pTab->nCol ,9,9,18
 (pnErr->flags & (MEM_Str|MEM_Blob))==0 ,11,7,18
 offset <= (int)pBt->usableSize-5 ,12,6,18
 !pC->isTable ,10,8,18
 pExpr->iTable==pStack->newIdx || pExpr->iTable==pStack->oldIdx ,8,10,18
 pTab->iPKey<0 ,9,8,17
 pNew==0 ,10,7,17
 sqlite3_mutex_held(pGroup->mutex) ,10,7,17
 maxRootPgno!=PENDING_BYTE_PAGE(pBt) ,9,8,17
 pNew->token.z==0 ,7,10,17
 iDb<SQLITE_MAX_ATTACHED+2 ,10,7,17
 u.bg.pC->isTable ,8,9,17
" EG(exception) || !call->func || !(call->func->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(call->func, ret)",11,6,17
 pName2!=0 ,10,7,17
 iStartLeaf<=iEndLeaf ,10,7,17
 pPager->eState==PAGER_WRITER_DBMOD ,10,7,17
 TK_CONCAT==OP_Concat ,9,8,17
 pOp->p4type==P4_COLLSEQ ,11,6,17
 keyClass>=FTS3_HASH_STRING && keyClass<=FTS3_HASH_BINARY ,10,7,17
 TK_OR==OP_Or ,9,8,17
 enc>=SQLITE_UTF8 && enc<=SQLITE_UTF16BE ,9,8,17
 pSrc!=0 ,11,6,17
 ovflPgno==0 || nOvfl>0 ,9,8,17
 p1==p2 ,10,7,17
 pVal->db==0 || sqlite3_mutex_held(pVal->db->mutex) ,11,6,17
 pEnd->leftCursor==iCur ,8,9,17
 pBt && pBt->pPager ,9,8,17
 d<nMaxCells ,9,8,17
 pOp[-1].opcode==OP_Integer ,10,7,17
 p->isTable ,9,8,17
 db->aDb[iDb].pBt!=0 || iDb==1 ,9,8,17
 TK_BITNOT==OP_BitNot ,9,8,17
 pTabItem->pTab ,8,9,17
 nPrefix<nTerm ,10,7,17
 sqlite3PagerGetData(pPage->pDbPage)==pPage->aData ,10,7,17
 count>=0 ,9,8,17
 pTerm->eOperator & (WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) ,8,9,17
 !pPager->stmtInUse ,8,9,17
 pParse->nVar==0 ,9,8,17
 TK_SLASH==OP_Divide ,9,8,17
p || db->mallocFailed,10,7,17
 pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,8,9,17
 pPage->aData ,9,8,17
" sizeof(r1)==sizeof(t2) && memcmp(&r1, &t2, sizeof(r1))==0 ",10,7,17
 info.nKey==nKey ,9,8,17
 TK_BITAND==OP_BitAnd ,9,8,17
" 0==strcmp(sqlite3_errmsg(db), ""unknown tokenizer: nosuchtokenizer"") ",10,7,17
 pNew->nCell>0 || (nNew==1 && cntNew[0]==0) ,8,9,17
 TK_PLUS==OP_Add ,9,8,17
 TK_RSHIFT==OP_ShiftRight ,9,8,17
 pOp->p4type==P4_KEYINFO ,11,6,17
 TK_REM==OP_Remainder ,9,8,17
 iFirst>=0 ,10,7,17
 SQLITE_UTF8==1 && SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,9,8,17
 pTerm->leftCursor==iCur ,8,9,17
 PAGER_EXCLUSIVE==EXCLUSIVE_LOCK ,8,9,17
 db->lookaside.bEnabled==0 ,11,6,17
 TK_BITOR==OP_BitOr ,9,8,17
 PAGER_SHARED==SHARED_LOCK ,8,9,17
 PAGER_RESERVED==RESERVED_LOCK ,8,9,17
 !pColl || pColl->xCmp ,9,8,17
 !yyendofinput ,9,8,17
 TK_MINUS==OP_Subtract ,9,8,17
 aHash[iKey]==i ,10,7,17
 TK_LSHIFT==OP_ShiftLeft ,9,8,17
 op>0 && op<0xff ,10,7,17
 TK_AND==OP_And ,9,8,17
pX->pLeft,10,7,17
 p2==0 ,10,7,17
 p->nOp - i >= 3 ,9,8,17
 cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) ,8,9,17
 TK_NOT==OP_Not ,9,8,17
 eType!=PTRMAP_ROOTPAGE ,9,8,17
 r<nMaxCells ,9,8,17
 !db->xCollNeeded || !db->xCollNeeded16 ,9,8,17
 bRev==0 ,8,8,16
 p->eLock>=RESERVED_LOCK ,10,6,16
rc==SQLITE_NOMEM || pMem->enc==desiredEnc,9,7,16
 (MEM_Blob>>3) == MEM_Str ,8,8,16
 pPrior->pRightmost!=pPrior ,8,8,16
 1==sqlite3BtreeIsInTrans(pTemp) ,9,7,16
 p->inTrans>TRANS_NONE ,10,6,16
" SQLITE_OK==queryTableLock(p, iTable, eLock) ",8,8,16
 szRegion==pShmNode->szRegion || pShmNode->nRegion==0 ,10,6,16
 -1-pOp->p2<p->nLabel ,7,9,16
 sizeof(x)==8 && sizeof(pMem->r)==8 ,8,8,16
 aiCol || pFKey->nCol==1 ,10,6,16
 rc2==SQLITE_OK ,10,6,16
" ExprHasProperty(pExpr, EP_xIsSelect) ",10,6,16
 dump.nData>0 ,8,8,16
 (rc & p->db->errMask)==rc ,9,7,16
 (PAGER_JOURNALMODE_PERSIST & 5)==1 ,10,6,16
 n==pPage->pgno && e==PTRMAP_BTREE ,10,6,16
rc==SQLITE_OK || pMem->enc!=desiredEnc,9,7,16
 p->db->pVdbe==p ,7,9,16
cc,7,9,16
 rc==SQLITE_LOCKED_SHAREDCACHE ,8,8,16
 (pFrom->flags & MEM_RowSet)==0 ,10,6,16
 to_op==OP_ToInt || aff!=SQLITE_AFF_INTEGER ,8,8,16
 iTrigDb==iDb || iTrigDb==1 ,9,7,16
 !pBt->pPage1 && !pBt->pCursor ,8,8,16
 zDb!=0 || sqlite3BtreeHoldsAllMutexes(db) ,10,6,16
 WAL_FRAME_HDRSIZE==24 ,10,6,16
 pTab->pVtab ,8,8,16
 pDest && pSrc ,9,7,16
 pPrev && pPrev->pLeft && pPrev->pRight==0 ,9,7,16
 pIdx->nColumn==1 ,7,9,16
 cursorHoldsMutex(pCsr) ,9,7,16
 to_op==OP_ToText || aff!=SQLITE_AFF_TEXT ,8,8,16
" szNew==cellSizePtr(pPage, newCell) ",8,8,16
 pFrom->nFree>=iToHdr ,9,7,16
 onError==OE_Replace ,10,6,16
 pShmNode->nRef>0 ,10,6,16
 &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet ,9,7,16
 pPrior->pRightmost==p->pRightmost ,8,8,16
 pParse->disableColCache ,8,8,16
 pEList->a[0].pExpr ,9,7,16
" sqlite3MemdebugHasType(p, MEMTYPE_PCACHE) ",10,6,16
 pPager->eState==PAGER_OPEN || pPager->eState==PAGER_READER ,10,6,16
 pPager->origDbSize==0 ,8,8,16
 pName1!=0 ,9,7,16
 pPager->eState>=PAGER_WRITER_CACHEMOD ,10,6,16
pArg->z < p->z,8,8,16
 pWal->readLock>=0 ,10,6,16
 lockType==F_WRLCK ,10,6,16
" sz==cellSize(pPage, idx) ",8,8,16
!pCur->aOverflow[iIdx] || pCur->aOverflow[iIdx]==nextPage,9,7,16
" sqlite3_vfs_find(""__one"")==&one ",8,8,16
 pBt->pageSize>=512 && pBt->pageSize<=65536 ,10,6,16
 (PAGER_JOURNALMODE_TRUNCATE & 5)==1 ,10,6,16
 pFrom->isInit ,9,7,16
 a ,9,7,16
 (pVal->flags & (MEM_Ephem|MEM_Static))!=0 ,9,7,16
 sqlite3_mutex_notheld(pcache1.grp.mutex) ,10,6,16
 pShmNode==pDbFd->pInode->pShmNode ,10,6,16
 iDb>=2 ,9,7,16
 nDoclist>0 ,11,5,16
 pLoop->addrOpenEphm[1]<0 ,9,7,16
 (pVal->flags&MEM_Blob)==0 ,8,8,16
 iVar>0 ,10,6,16
 *pbEof==0 ,11,5,16
 pTable->pSchema==pTrigger->pSchema || iDb==1 ,9,7,16
 pExpr->pLeft==0 && pExpr->pRight==0 && pExpr->pList==0 ,7,9,16
 sqlite3_mutex_held(p->pSrc->pBt->mutex) ,10,6,16
!const_,16,0,16
 pgnoRoot>=3 ,8,8,16
 pWal->writeLock==0 ,10,6,16
 pShmNode->h>=0 || pDbFd->pInode->bProcessLock==1 ,10,6,16
 pDest->pTable!=pSrc->pTable ,9,7,16
 pIndex->pSchema==pTable->pSchema ,9,7,16
 (pIn1->flags & MEM_Dyn)==0 ,8,8,16
 pPager->eState==PAGER_WRITER_LOCKED ,10,6,16
 pRet && pPrev ,9,7,16
 sz==info.nPayload ,8,8,16
 idx<p->nResColumn ,9,7,16
 (rc & (v->db->errMask))==rc ,9,7,16
 pPage->nOverflow==0 || rc!=SQLITE_OK ,8,8,16
 pPager->setMaster==0 ,10,6,16
 (pMem->flags & MEM_Null)!=0 || pFunc==pMem->u.pDef ,9,7,16
 j<=nOut ,9,7,16
 pExpr->u.zToken[1]=='\'' ,10,6,16
" !ExprHasProperty(pF->pExpr, EP_xIsSelect) ",10,6,16
" hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) ",10,6,16
" sqlite3_vfs_find(""__two"")==&two ",8,8,16
 pFile->locktype==0 ,8,8,16
 pPager->dbOrigSize==pPager->dbFileSize ,10,6,16
 pPager->state>=PAGER_SHARED || MEMDB ,8,8,16
 pMem->flags & MEM_Real ,9,7,16
 eMode==PAGER_LOCKINGMODE_NORMAL || eMode==PAGER_LOCKINGMODE_EXCLUSIVE ,9,7,16
!(*ppStmt),9,7,16
 pShmNode->h<0 || pDbFd->pInode->bProcessLock==0 ,10,6,16
 &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne ,9,7,16
 pTable->nCol>=0 ,9,7,16
 pPager->state>=PAGER_SHARED || pPager->dbSize<0 || MEMDB ,8,8,16
 pPager->state==PAGER_SYNCED || !pPager->dirtyCache ,8,8,16
 pSrcIdx ,9,7,16
 sizeof(v)==sizeof(pMem->r) ,8,8,16
 zName!=0 ,7,9,16
" sqlite3SchemaMutexHeld(db, pOp->p1, 0) ",9,7,16
 (pIn2->flags & MEM_Int)!=0 ,10,6,16
 pTrigger->zName==0 || pTab==tableOfTrigger(pTrigger) ,10,6,16
 to_op==OP_ToBlob || aff!=SQLITE_AFF_NONE ,8,8,16
 a!=0 ,8,8,16
 pToRelease==0 || sqlite3PagerIswriteable(pToRelease->pDbPage) ,10,6,16
 pDbFd->pShm==0 ,10,6,16
 !pS ,9,7,16
 !pCsr->pBt->readOnly && pCsr->pBt->inTransaction==TRANS_WRITE ,8,8,16
 ppDb ,7,9,16
 0==pTable->pIndex ,9,7,16
 to_op==OP_ToReal || aff!=SQLITE_AFF_REAL ,8,8,16
 pDef!=0 ,8,8,16
 pLock->locktype==pFile->locktype ,8,8,16
 flags!=0 ,7,9,16
 iCur<p->nCursor ,8,8,16
 fg & MEM_Real ,9,7,16
 nOld>0 ,9,7,16
 n<=pTab->nCol ,9,7,16
 to_op==OP_ToNumeric || aff!=SQLITE_AFF_NUMERIC ,8,8,16
!label,16,0,16
 sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno ,9,7,16
 i<nMaxCells ,8,8,16
target,8,8,16
 p->addrOpenEphm[1] == -1 ,9,7,16
 pPager->nRec==0 ,8,8,16
 TRANS_WRITE==pBt->inTransaction ,9,7,16
 pDb!=0 ,9,7,16
 pNew->nOverflow==0 ,7,9,16
" sqlite3SchemaMutexHeld(db, 0, pDb->pSchema) ",10,6,16
inp_flags & LOAD_DATA,16,0,16
 var<COLNAME_N ,9,7,16
 isPrefix==0 || isScan==0 ,9,7,16
 pCur->skipNext!=SQLITE_OK ,10,6,16
!jump,16,0,16
 pPager->dbOrigSize==pPager->dbHintSize ,10,6,16
 aff1==0 || aff2==0 ,9,7,16
 i<nTemp ,8,8,16
 p==pColl ,9,7,16
 pA->pRight==0 || pA->v<=pA->pRight->v ,10,6,16
!(flags & INV_IMM),16,0,16
 pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' ,10,6,16
 p || *piDocid==0 ,11,5,16
 db->aDb[iDb].pSchema ,9,7,16
 pInode->nLock>=0 ,10,6,16
 pC->pseudoTableReg==0 ,12,4,16
 zData!=0 ,9,7,16
 pC->pVtabCursor==0 ,9,7,16
 pName1->z ,9,7,16
 pPg->pPager==pPager ,10,6,16
 pPager->exclusiveMode || pPager->state<=PAGER_SHARED ,8,8,16
 (char*)&likeInfoAlt == (char*)&likeInfoAlt.matchAll ,9,7,16
 pDb->pSchema!=0 ,10,6,16
 1==sqlite3BtreeIsInTrans(pMain) ,9,7,16
internal_encoding && zend_multibyte_check_lexer_compatibility(internal_encoding),8,8,16
 pcacheCheckSynced(p) ,8,8,16
 pIx->pSchema==pTab->pSchema ,9,7,16
 op==SAVEPOINT_RELEASE || op==SAVEPOINT_ROLLBACK ,10,6,16
 pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) ,9,7,16
 p->zSql==0 ,9,7,16
 pToken ,9,7,16
 p->eLock==EXCLUSIVE_LOCK ,10,6,16
 pExpr->pLeft==0 ,7,9,16
 pSelect->pOffset==0 ,9,7,16
 pParse ,10,6,16
 pVtab->pModule!=0 ,9,7,16
 sqlite3PcacheRefCount(pPager->pPCache)==0 ,9,7,16
 db->aDb[1].pSchema ,9,7,16
 !pPager->journalOpen || pPager->journalOff>0 || rc!=SQLITE_OK ,8,8,16
 pPager->doNotSync==1 ,8,8,16
 pList==0 ,9,7,16
 pOrderBy->nExpr>0 ,7,9,16
 (p->btreeMask & (1<<pOp->p2))!=0 ,8,7,15
 iAmt+iOfst<=p->iSize ,8,7,15
 nRef==sqlite3PagerRefcount(pPager) ,7,8,15
 (pExpr->iTable&0x0000FFFF)==pExpr->iTable ,8,7,15
 zP4!=0 ,9,6,15
 !(fg&MEM_Zero) ,9,6,15
 pOp->p1 <= SQLITE_MAX_LENGTH ,9,6,15
 i<pTab->nCol ,9,6,15
 !p || p->xCmp ,8,7,15
 info.nHeader==nHeader ,7,8,15
 pOrTerm->eOperator & WO_EQ ,12,3,15
 nOut<SQLITE_MAX_LENGTH ,9,6,15
 zB==sqlite3_value_text(argv[0]) ,9,6,15
 pc<pPage->pBt->usableSize ,7,8,15
 (addr>=0 && addr<p->nOp) || p->db->mallocFailed ,9,6,15
 p->locked || !p->sharable ,8,7,15
 useTempTable==0 ,9,6,15
 pColl ,8,7,15
 pNew->nCol>0 ,8,7,15
 pArray->nMutex<sizeof(pArray->aBtree)/sizeof(pArray->aBtree[0])-1 ,8,7,15
MEMDB||pPager->fd->pMethods||pPager->tempFile,8,7,15
 pgno==MASTER_ROOT+1 ,8,7,15
 fg&(MEM_Int|MEM_Real) ,8,7,15
 pSrc->nSrc==1 ,8,7,15
 sqlite3_mutex_held(pCsr->pBtree->db->mutex) ,9,6,15
 zBlob==sqlite3_value_blob(argv[0]) ,9,6,15
 iCnt==1 ,8,7,15
 pOp->p2>0 && pOp->p2<p->nOp ,9,6,15
 pBt->db ,9,6,15
 pPage ,9,6,15
 pCur->pPage->intKey==0 ,7,8,15
 pBt->incrVacuum==1 || pBt->incrVacuum==0 ,9,6,15
 idx>=0 && idx<=15 ,8,7,15
 p->wantToLock==0 && p->locked==0 ,9,6,15
 pOld==0 || pOld==p ,7,8,15
 pParse->pVdbe!=0 ,9,6,15
 srcType==MEM_Ephem || srcType==MEM_Static ,8,7,15
 addr<p->nOp ,9,6,15
 pList->nAlloc==0 ,6,9,15
 stateno<=YY_REDUCE_MAX ,8,7,15
 pOp->opcode==OP_IdxGE ,8,7,15
 sqlite3_mutex_held(p->s.db->mutex) ,8,7,15
 pArray->nMutex>=0 ,8,7,15
 pLock->cnt>0 ,7,8,15
 sqlite3_mutex_held(pBt->db->mutex) ,9,6,15
 nearby>0 ,8,7,15
 j+nStr-i+1==nOut ,9,6,15
 cellbody==pPage->pBt->usableSize ,7,8,15
 pFrom->db==0 || pTo->db==0 || pFrom->db==pTo->db ,9,6,15
 pTo->db==0 || sqlite3_mutex_held(pTo->db->mutex) ,9,6,15
 pBlob==sqlite3_value_blob(argv[0]) ,9,6,15
 pExpr->pSelect==0 ,8,7,15
 !pSelect && pCons && pEnd ,8,7,15
 cellbody>0 ,7,8,15
 !pReader->pBlob || (pFrom>=pReader->aNode && pFrom<&pReader->aNode[pReader->nNode]) ,9,6,15
 i>=1 ,12,3,15
 !db->init.busy || !pSelect ,8,7,15
 p->contextStackTop>=0 ,7,8,15
 argc==3 || argc==2 ,9,6,15
 pPager->fullSync || !hdrOff ,7,8,15
 iFreePg<iLastPg ,9,6,15
 iLangid>=0 ,12,3,15
 pBt->maxLeaf + 23 <= MX_CELL_SIZE(pBt) ,8,7,15
 matchSet<0x80 ,8,7,15
 pCur->pPage->nCell>0 ,7,8,15
 0==*pId ,6,9,15
 sqlite3VdbeDb(v)==db ,9,6,15
 pCol->iMem>0 ,9,6,15
 pPager->state==PAGER_RESERVED || pPager->state>=PAGER_EXCLUSIVE ,7,8,15
 pPage == sqlite3PagerGetExtra(pPage->pDbPage) ,9,6,15
 pKey==0 ,9,6,15
pPager->fd->pMethods||memDb||tempFile,8,7,15
 pLock->locktype==0 ,7,8,15
 pPage->aData == sqlite3PagerGetData(pPage->pDbPage) ,9,6,15
 id-2 >= 0 ,8,7,15
 pCsr ,8,7,15
 sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt) ,8,7,15
 sqlite3_mutex_notheld(pBt->mutex) ,9,6,15
 pOp->p3<SQLITE_N_BTREE_META ,9,6,15
 EIGHT_BYTE_ALIGNMENT(p) ,9,6,15
 nAlloc>=pNew->nCol && nAlloc%8==0 && nAlloc-pNew->nCol<8 ,8,7,15
 pPage->nFree >= 2*nCell ,7,8,15
 pIdx->autoIndex ,7,8,15
pList || pParse->db->mallocFailed ,9,6,15
 i>=0 && i<=pPage->nCell+pPage->nOverflow ,8,7,15
 pCur->apPage[pCur->iPage]->nCell==0 ,6,9,15
 pNew ,8,7,15
 zPattern==sqlite3_value_text(argv[1]) ,9,6,15
 CURSOR_VALID < CURSOR_REQUIRESEEK ,9,6,15
 p->db==0 || sqlite3_mutex_held(p->db->mutex) ,9,6,15
 pbegin>addr || pbegin==0 ,7,8,15
 pBt->inTransaction==TRANS_WRITE && p->inTrans==TRANS_WRITE ,9,6,15
 pPager->dbSize>=0 ,7,8,15
 !(fg&(MEM_Str|MEM_Blob)) ,8,7,15
 hHeap!=INVALID_HANDLE_VALUE ,15,0,15
 p->wantToLock==1 ,8,7,15
 lwr==upr+1 ,6,9,15
 eType!=PTRMAP_FREEPAGE ,8,7,15
pPager->fd->pMethods||pPager->noSync,8,7,15
 zIn==sqlite3_value_text(argv[0]) ,9,6,15
 v || db->mallocFailed ,9,6,15
 pPager->state==PAGER_UNLOCK ,8,7,15
 TOKEN.z[0] ,9,6,15
 20==sqlite3LogEst(4) ,11,4,15
 p->wantToLock==0 ,9,6,15
 pDel==0 || pDel==pColl ,9,6,15
 CURSOR_INVALID < CURSOR_REQUIRESEEK ,9,6,15
 pOp->p5==0 || pOp->p5==1 ,9,6,15
 !pParse->pNewTrigger ,8,7,15
 sqlite3OsInMutex(1) ,6,9,15
 locktype==SHARED_LOCK ,7,8,15
pEList == 0 || pSelect == 0,6,9,15
 p->aColName!=0 ,8,7,15
 pLock->cnt==0 ,7,8,15
 zStr==sqlite3_value_text(argv[0]) ,9,6,15
pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union || pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard,8,7,15
 pPrevTrunk==0 ,8,7,15
 parentSize<64 ,7,8,15
 sqlite3PagerGetData(pPage->pDbPage) == data ,9,6,15
 p->aCsr[i].deferredMoveto==0 ,5,10,15
 pOp->p3<pOp->p1 || pOp->p3>=pOp->p1+pOp->p2 ,9,6,15
 pParse->nested<10 ,8,7,15
 pBt->autoVacuum==1 || pBt->autoVacuum==0 ,9,6,15
 pPager->stmtInUse && pPager->journalOpen ,7,8,15
 !pPrior->pOrderBy ,8,7,15
 iFreePg==iLastPg ,9,6,15
 pOp->p4.pVtab!=0 ,9,6,15
 p==0 || sqlite3_mutex_held(p->db->mutex) ,9,6,15
 p->nResColumn==pOp->p2 ,9,6,15
 !pPager->setMaster ,7,8,15
 nTemp>=20 ,8,7,15
 hHeap!=0 ,15,0,15
 i>=0 && i<YY_SZ_ACTTAB ,8,7,15
 pPager->pInStmt!=0 ,8,7,15
 pIdx->onError!=OE_None ,7,8,15
 pLock->cnt!=0 ,7,8,15
 pLevel->p5==0 ,10,5,15
 pParse->pNewTrigger==pTrigger ,8,7,15
 CURSOR_FAULT > CURSOR_REQUIRESEEK ,9,6,15
 pChild->nCell==pPage->nCell ,7,8,15
pPager->nRec==1,8,7,15
 db->init.iDb==0 || db->init.busy ,8,7,15
 pChild->isInit==0 ,7,8,15
 pTab->addColOffset>0 ,8,7,15
 pTab->iDb<db->nDb ,5,10,15
 pDbPage->pBt==pBt ,9,6,15
 pBt->pExclusive==0 || pBt->pExclusive==pLock->pBtree ,8,7,15
 id-2 < sizeof(aStatic)/sizeof(aStatic[0]) ,8,7,15
 pOp->p4.pI64!=0 ,9,6,15
 idx>=1 && idx<=15 ,8,7,15
 *pId==0 ,6,9,15
BtCursor *pCur,9,6,15
 rc!=SQLITE_OK || pFile->pMethods ,8,7,15
 pPage->isInit==0 || sqlite3_mutex_held(pPage->pBt->mutex) ,8,7,15
 sizeof(zMagicHeader)==16 ,8,7,15
 pIndex->onError!=OE_None ,7,8,15
nKey==elem->nKey,8,7,15
 len==sqlite3_value_bytes(argv[0]) ,9,6,15
 sqlite3_mutex_held(sqlite3VdbeDb(p)->mutex) ,9,6,15
 mask==-1 || mask==0 ,8,7,15
 pName1 && pName2 ,8,7,15
 pCx->deferredMoveto==0 ,7,8,15
 azResult!=0 ,9,6,15
 PENDING_BYTE+1==RESERVED_BYTE ,8,7,15
 pPage->hdrOffset==(pPage->pgno==1 ? 100 : 0) ,8,7,15
 pgnoChild>0 ,7,8,15
 EIGHT_BYTE_ALIGNMENT(zCsr) ,8,7,15
 (p->btreeMask & (1<<pOp->p5))!=0 ,8,7,15
pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || pVal->db==0 || pVal->db->mallocFailed ,9,6,15
 pFrom->db==0 || sqlite3_mutex_held(pFrom->db->mutex) ,9,6,15
 zRep==sqlite3_value_text(argv[2]) ,9,6,15
 pP1!=0 ,8,7,15
 pParent->pBt==pPage->pBt ,8,7,15
pSelect->pSrc,9,6,15
 zFilename!=0 ,9,5,14
 !pHist->pStmt ,6,8,14
VALID(self->location),7,7,14
 pOp->p2<=(p->nMem-p->nCursor) ,10,4,14
 pData->flags & (MEM_Blob|MEM_Str) ,9,5,14
 pParent->pSrc->a[parentTab].pSelect==p ,6,8,14
 p->eType!=FTSQUERY_PHRASE ,8,6,14
 db->aDb[pOp->p1].pBt!=0 ,5,9,14
 pCur->idx>=0 ,6,8,14
 TK_GE==TK_GT+3 ,8,6,14
 p->pHaving==0 ,6,8,14
pExpr->pList->nExpr > 0,6,8,14
"DL_DEFAULT, pData+n, iDummy, NULL",8,6,14
 nKey==4 ,8,6,14
 p->op!=TK_COLUMN || pTabList==0 ,6,8,14
 aFault[id].benign>0 ,8,6,14
 TK_LE==TK_GT+1 ,8,6,14
cc != NULL,14,0,14
 pSplit->pParent->pRight==pSplit ,8,6,14
 pCur->pPage->isInit ,6,8,14
 pExpr->iColumn == OE_Ignore ,6,8,14
 pReader->nElement<=pReader->nData ,8,6,14
 pOld==pLock ,6,8,14
 winMutex_isInit==1 ,10,4,14
 pC->nullRow==0 ,9,5,14
 nArg==2+v->nColumn+2,8,6,14
 payloadSize==0 || zRec!=0 ,6,8,14
 pCur->idx<pPage->nCell ,6,8,14
 pKey->flags & MEM_Int ,9,5,14
 pPager->nRef>=0 ,6,8,14
 errcode!=SQLITE_OK ,8,6,14
newIdx != -1 || oldIdx != -1,6,8,14
 sqlite3BtreeIsInTrans(pBt) ,8,6,14
 (mem.aCtrl[i] & CTRL_LOGSIZE)==iLogsize ,8,6,14
self != NULL,7,7,14
 pRight!=0 ,6,8,14
 mem.disallow==0 ,10,4,14
 pCur->pPage ,6,8,14
 iDb==0 ,6,8,14
 rc!=SQLITE_OK || (nByte>0 && nByte<=nIn) ,8,6,14
 iDummy>=0 ,8,6,14
 10==sqlite3LogEst(2) ,9,5,14
parser->flags & F_CHUNKED,14,0,14
 n<=pReader->nData ,8,6,14
 pParent->idxShift==0 ,6,8,14
 pExpr->iColumn<pTab->nCol ,6,8,14
 pParent!=0 ,6,8,14
 n+iDummy<nData ,8,6,14
 pTokenizer ,8,6,14
 !pPg->alwaysRollback ,6,8,14
pExpr->pList,6,8,14
 pz!=0 ,7,7,14
 pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_WRITER_LOCKED ,8,6,14
 dlrDocid(pLeft)==dlrDocid(pRight) ,8,6,14
 nKey>=0 ,8,6,14
 nReaders<=MERGE_COUNT ,8,6,14
 pLeft->iType==pRight->iType ,8,6,14
 ppBtree != 0,6,8,14
 pToken->pDeferred==0 ,11,3,14
 nVal>=1 ,8,6,14
 zCsr <= &((char *)p)[nByte] ,8,6,14
 pParent->pSrc->nSrc>parentTab ,6,8,14
 (x & (x-1))==0 ,6,8,14
p->pData != pData,7,7,14
 iBlockid!=0 ,8,6,14
VALID(file),7,7,14
 !pHist->pOrig ,6,8,14
block,8,6,14
 p->eType==FTSQUERY_AND ,8,6,14
 (mem.aPool[i-1].u.hdr.size4x & 1)==0 ,8,6,14
 pOp->p1>0 && pOp->p1<=(p->nMem-p->nCursor) ,10,4,14
 pDest->flags&MEM_Null ,8,6,14
 u.bf.pC->isTable ,6,8,14
(pExpr->pList->nExpr % 2) == 0,6,8,14
source,7,7,14
 x!=0 ,6,8,14
 nVar>=0 ,6,8,14
 size==mem.aPool[i+size-1].u.hdr.prevSize ,8,6,14
"pWriter->data.pData, pWriter->data.nData",8,6,14
 level>=1 && level<=3 ,7,7,14
 pHist->pOrig==0 ,6,7,13
 pFile->inNormalWrite==0 || pFile->dbUpdate==0 || pFile->transCntrChng==1 ,7,6,13
 u.bj.pC!=0 ,6,7,13
 p->pPrior==0 ,9,4,13
 pSel ,6,7,13
" i==pIdx->nSample || sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec)>0 || pParse->db->mallocFailed ",8,5,13
 memIsValid(&r.aMem[i]) ,11,2,13
 pOp->p2==1 || pOp->p5==OE_Fail || pOp->p5==OE_Rollback || pOp->p5==OE_Abort || pOp->p5==OE_Ignore || pOp->p5==OE_Replace ,8,5,13
 pLeft->pColl ,6,7,13
 u.bq.pC->deferredMoveto==0 ,6,7,13
 u.bp.pC->deferredMoveto==0 ,6,7,13
 pzOriginTab && pzOriginCol ,6,7,13
 iOfst==p->endpoint.iOffset ,7,6,13
 pMem->n>=0 ,9,4,13
 *ppDb || rc==SQLITE_NOMEM ,8,5,13
 u.ck.pCur->pVtabCursor ,6,7,13
 inMutex ,4,9,13
 db->pDfltColl!=0 ,8,5,13
 pTab->azModuleArg && pTab->azModuleArg[0] ,6,7,13
 u.be.pC->isTable ,6,7,13
 isDelete && !isOpenJournal ,7,6,13
 pTerm->sortOrder==0 || pTerm->sortOrder==1 ,6,7,13
 iSortOrder==0 || iSortOrder==1 ,6,7,13
 u.bk.pC!=0 ,6,7,13
 p2>=2 ,7,6,13
 pHist->pStmt==0 ,6,7,13
 pPage->intKey ,7,6,13
 rc==SQLITE_ROW || rc==SQLITE_DONE || rc==SQLITE_ERROR || rc==SQLITE_BUSY || rc==SQLITE_MISUSE ,7,6,13
 u.bl.pC!=0 ,6,7,13
 pBt->readOnly==0 ,6,7,13
 db->aDb[iDb].pSchema==pTab->pSchema ,6,7,13
 pCsr->isRequireSeek==0 ,8,5,13
 pRight->pColl ,6,7,13
 pE->op!=TK_DOT || pE->pRight!=0 ,7,6,13
 sizeof(db->aLimit)==sizeof(aHardLimit) ,8,5,13
 u.bi.pC!=0 ,6,7,13
 pEList->nExpr==nColumn ,6,7,13
 p->cnt==0 ,8,5,13
 pIdx->nColumn>=nEq ,6,7,13
 MX_CELL_SIZE(pBt)>=szNext+4 ,6,7,13
 pTo->db==pFrom->db ,9,4,13
 u.bo.pC!=0 ,6,7,13
 &pKey->aSortOrder[nCol]==&(((u8 *)pKey)[nBytes]) ,6,7,13
 zColl ,6,7,13
 bufpt>buf ,6,7,13
" pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, pParse->azVar[pExpr->iColumn-1])==0 ",8,5,13
 !db->pVTab ,6,7,13
 u.ci.pCur->pVtabCursor ,6,7,13
 pCur->apPage[pCur->iPage] ,7,6,13
 pExpr->pLeft && pExpr->pRight ,9,4,13
 testAddr>0 || pParse->db->mallocFailed ,6,6,12
 p->aMem[n].db==db ,6,6,12
 p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(p) ,6,6,12
 0==(1&(int)pVal->z) ,6,6,12
" sqlite3MemdebugHasType(p, MEMTYPE_DB) ",6,6,12
 p->journalMode==PAGER_JOURNALMODE_OFF || p->journalMode==PAGER_JOURNALMODE_MEMORY ,7,5,12
 f2&MEM_Int ,5,7,12
 pBt->pPage1 ,7,5,12
" iDb==sqlite3SchemaToIndex(pParse->db, pIdx->pSchema) ",6,6,12
 dump.pData[dump.nData]==' ',6,6,12
 sqlite3SafetyCheckSickOrOk(db) ,6,6,12
 sqlite3SafetyCheckOk(db) ,6,6,12
 i>=0 &&i>=0 && i<db->nDb ,6,6,12
 MX_CELL_SIZE(pBt) >= nCell ,7,5,12
 pPg->nRef>0 || pPg->pPager->memDb ,7,5,12
 !isOpen(pPager->jfd) ,7,5,12
!label || label->size >= word_count,12,0,12
 db->activeVdbeCnt>0 ,5,7,12
 pPage->iWrite>pPage->iRead ,6,6,12
 p==pBt->pWriter ,7,5,12
dash,5,7,12
 sqlite3Isdigit(zRawSql[1]) ,7,5,12
 pTab==pOld ,7,5,12
 pExpr->affinity==OE_Rollback || pExpr->affinity==OE_Abort || pExpr->affinity==OE_Fail || pExpr->affinity==OE_Ignore ,7,5,12
 pPager->pTmpSpace!=0 ,7,5,12
 (SQLITE_PTR_TO_INT(ptr)&1)==0 ,6,6,12
 PTF_LEAF == 1<<3 ,7,5,12
 pcache.isInit ,6,6,12
!jump || jump->addr >= word_count,12,0,12
 (pMem->flags & MEM_Dyn)==0 ,6,6,12
 pParse->nVarExprAlloc==0 ,5,7,12
" sqlite3SchemaMutexHeld(db, 0, pTable->pSchema) ",7,5,12
 N>0 && (N&(N-1))==0 ,6,6,12
 eDest==SRT_Output || eDest==SRT_Coroutine ,7,5,12
 op>=0 && op<ArraySize(sqlite3Stat.nowValue) ,6,6,12
 p->pSchema==p->pTabSchema || p->pSchema==pParse->db->aDb[1].pSchema ,7,5,12
 argc==2 || argc==3 ,6,6,12
pTab->isVirtual && pTab->nCol==0 && pTab->aCol==0,6,6,12
 pDest->autoInc==0 ,6,6,12
 !MEMDB || pgno>pPager->stmtSize ,6,6,12
 pPager->nRef==0 ,6,6,12
 zFilename==0 || zFilename[0]=='/' || pVfs->pAppData==(void*)&autolockIoFinder ,7,5,12
 isDeferred==0 || isDeferred==1 ,7,5,12
 iLogsize>=0 && iLogsize<=mem6.nLogThreshold ,6,6,12
 pIter->eLock==READ_LOCK || pIter->eLock==WRITE_LOCK ,7,5,12
 pFifo->pLast==pPage ,6,6,12
 pPrg || pParse->nErr || pParse->db->mallocFailed ,7,5,12
 !pPg->pageHash || pPager->errCode || MEMDB || pPg->dirty || pPg->pageHash==pager_pagehash(pPg) ,6,6,12
 pNC ,7,5,12
 sqlite3_mutex_held(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER)) ,8,4,12
 pParse->apVarExpr==0 ,5,7,12
 pcacheCheckSynced(pCache) ,6,6,12
 (pMem->flags & MEM_Null)==0 ,6,6,12
 p->errCode || !p->stmtOpen || p->exclusiveMode ,6,6,12
 pStr2->token.dyn ,6,6,12
 pPager->journalMode==PAGER_JOURNALMODE_DELETE || pPager->journalMode==PAGER_JOURNALMODE_MEMORY || pPager->journalMode==PAGER_JOURNALMODE_WAL ,7,5,12
!xFunc || xFunc==sqlite3BtreeCommitStmt || xFunc==sqlite3BtreeRollbackStmt ,6,6,12
 db->mallocFailed || pParse->nErr>0 || pParse->iCacheLevel==iCacheLevel ,7,5,12
 u.bj.pC->pCursor!=0 ,6,6,12
 y<=pWal->hdr.mxFrame ,7,5,12
(size_t)nBuf>=(sizeof(time_t)+sizeof(int)),7,5,12
" n2==sqlite3ValueBytes((sqlite3_value*)pMem2, pColl->enc) ",6,6,12
 db->nStatement>=0 && db->nSavepoint>=0 ,7,5,12
 zRawSql[0]==':' || zRawSql[0]=='$' || zRawSql[0]=='@' ,6,6,12
 jfd == (useCksum ? pPager->jfd : pPager->stfd) ,6,6,12
 pHist->inStmt ,6,6,12
 nKey==(i64)(int)nKey ,7,5,12
 pOp->p4type==P4_FUNCDEF || pOp->p4type==P4_VDBEFUNC ,6,6,12
" memcmp(&info, &pCur->info, sizeof(info))==0 ",5,7,12
 sqlite3pager_iswriteable(pPage->aData) ,4,8,12
 (m-1)==toTheLeft ,7,5,12
p->aOp || p->nOp==0,6,6,12
 pPage->iRead<pPage->nSlot ,6,6,12
 k>=0 && k<pSrc->nSrc ,6,6,12
 pHist->pPrevStmt==0 && pHist->pNextStmt==0 ,6,6,12
 get2byte(&aFrom[iFromHdr+5])<=pBt->usableSize ,6,6,12
 isAgg || pGroupBy ,6,6,12
 pCur->iPage>0 ,7,5,12
 zTabName ,7,5,12
 zRawSql[0] || nToken==0 ,7,5,12
 eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_TRUNCATE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF || eMode==PAGER_JOURNALMODE_WAL || eMode==PAGER_JOURNALMODE_MEMORY ,7,5,12
 pBt->pageSize>=512 && pBt->pageSize<=32768 ,6,6,12
 pFifo->pFirst!=0 ,6,6,12
 p->rSetup>=pTemplate->rSetup ,9,3,12
 pListItem->pExpr->pColl ,6,6,12
 pcacheMutexHeld() ,6,6,12
 pOrderBy->iECursor==0 ,6,6,12
 *pPgno==iTrunk ,5,7,12
 iSavepoint>=0 ,8,4,12
 pParse->ckBase>0 ,6,6,12
 p->addrOpenEphm[2]>=0 ,6,6,12
 currentend!=0 ,3,9,12
 cnt==db->activeVdbeCnt ,5,7,12
 p->flags&PGHDR_DIRTY ,7,5,12
 pgnoChild<=sqlite3PagerPagecount(pPage->pBt->pPager) ,6,6,12
 pPager->state==PAGER_UNLOCK || pPager->nRef>0 || pgno==1 ,6,6,12
 sz<=pBt->pageSize/4 ,6,6,12
 (pMem->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) || pMem->r==pMem->u.i ,6,6,12
 isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF || pPager->journalMode==PAGER_JOURNALMODE_WAL ,7,5,12
 (pTerm->flags & TERM_DYNAMIC)==0 ,6,6,12
 pIdx->aSortOrder!=0 ,6,6,12
" !ExprHasProperty(p, EP_FromJoin) ",7,5,12
 p->apCsr[pOp->p1]!=0 ,6,6,12
 MEMDB ,6,6,12
 sOr.nTerm>=2 ,6,6,12
 pExpr->pColl!=0 ,6,6,12
 pSchema || (j==1 && !db->aDb[1].pBt) ,6,6,12
!(inst & (INT_ALIGNED | UPDATE_REQ)),12,0,12
 pRoot->isInit ,6,6,12
 pPager->dbFileSize>0 ,7,5,12
" walFramePgno(pWal, iFrame)==iDbpage ",7,5,12
 rc==0 ,6,6,12
 p->pMod && p->pMod->pModule ,6,6,12
 (p->flags&MEM_RowSet)==0 ,7,5,12
 pParse->nVarExpr==0 ,5,7,12
!isDistinct,6,6,12
 f1&MEM_Int ,5,7,12
pEList != 0 || pSelect != 0 || db->mallocFailed,6,6,12
 pCell!=0 ,7,5,12
 pcache1.nFreeSlot>=0 ,7,5,12
 pPage->iRead>=0 ,6,6,12
 p->sharable ,7,5,12
 pPager->eState==PAGER_READER || pPager->eState==PAGER_OPEN || pPager->eState==PAGER_ERROR ,7,5,12
" n1==sqlite3ValueBytes((sqlite3_value*)pMem1, pColl->enc) ",6,6,12
VALID(self->InStream),6,6,12
" !pParse->isMultiWrite || sqlite3VdbeAssertMayAbort(v, pParse->mayAbort)",7,5,12
 eLock==READ_LOCK || pIter->pBtree==p || pIter->eLock==READ_LOCK,7,5,12
" sqlite3MemdebugHasType(p, MEMTYPE_LOOKASIDE|MEMTYPE_HEAP) ",6,6,12
 !pPgOld || pPgOld->nRef==1 ,7,5,12
pOv,4,8,12
 db->mutex!=0 || isThreadsafe==0 || sqlite3GlobalConfig.bFullMutex==0 ,7,5,12
 iReg>0 ,6,6,12
 idx>0 && idx<=p->nVar ,7,5,12
 pOp->p4.i>0 && pOp->p4.i<=p->nMem ,6,6,12
 iOvflSpace <= (int)pBt->pageSize ,7,5,12
 p->id==SQLITE_MUTEX_RECURSIVE || noopMutexNotheld(p) ,6,6,12
 pInfo->aReadMark[0]==0 ,7,5,12
" sqlite3HashFind(&pTable->pSchema->aFKey, pFKey->zTo, strlen(pFKey->zTo)+1)!=pFKey ",6,6,12
 zFilename==0 || zFilename[0]=='/' ,7,5,12
 pNewParent!=0 ,6,6,12
 !pPager->pAll || pPager->exclusiveMode ,6,6,12
 p->addrOpenEphm[2] == -1 ,6,6,12
!const_ || const_->addr >= word_count,12,0,12
 !triggers_exist ,6,6,12
 pgno==sqlite3PagerPagenumber(pPage->pDbPage) ,6,6,12
" (x = va_arg(ap,int))!=0 ",7,5,12
 pVar->flags & MEM_Blob ,7,5,12
" pCur->apPage[pCur->iPage-1], pCur->aiIdx[pCur->iPage-1], pCur->apPage[pCur->iPage]->pgno ",7,5,12
" sqlite3ExprIsInteger(pE, &i)==0 ",7,5,12
pkey != NULL,6,6,12
 j<sOr.nTerm ,6,6,12
 pPg->pgno==0 ,6,6,12
 p->errCode || !p->journalOpen || (p->exclusiveMode&&!p->journalOff) ,6,6,12
 i>=0 && i<pChunk->nBlock ,6,6,12
pTab && pTab->isVirtual && !pTab->pVtab,6,6,12
VALID(stream),6,6,12
 fd>=0 ,7,5,12
 rc!=SQLITE_BUSY ,7,5,12
 pcache_g.isInit ,6,6,12
 pIter ,7,5,12
 j>=0 && j<p->nLabel ,5,7,12
 leafCorrection==0 || leafCorrection==4 ,7,5,12
 pPage->iWrite<=pPage->nSlot ,6,6,12
 !inMutex ,4,8,12
 pMem->n<=nBuf ,6,6,12
 pPager->aHash[pPg->pgno & (pPager->nHash-1)]!=pPg ,6,6,12
pPager->nRef>0 || pgno==1,6,6,12
 j<pIdx->nColumn ,6,6,12
 pParse->apVarExpr!=0 ,5,7,12
pPager->lru.pFirstSynced==0,6,5,11
 pC->pCursor!=0 || pC->pseudoTable ,6,5,11
 pParse->azVar==0 ,7,4,11
 j<sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0]) ,5,6,11
 pCsr->isEof==0 ,7,4,11
 i<sizeof(p->btreeMask)*8 ,6,5,11
 pOp->p3==0 || pOp->p1>0 ,6,5,11
 pPg->pDirty->pPrevDirty==pPg ,6,5,11
 (pMsr->aBuffer[nList] & 0xFE)==0x00 ,7,4,11
 p->pRight==0 || p->pRight->token.z==0 || p->pRight->token.z[0]!=0 ,5,6,11
 pTriggerStep!=0 ,5,6,11
 !pPg->inJournal && (int)pPg->pgno <= pPager->origDbSize ,6,5,11
 ((aSpace - (u8*)apCell) & 7)==0 ,5,6,11
!pPg->needSync || pPg==pPager->lru.pFirst,6,5,11
 *pzErrMsg==0 ,7,4,11
 pPg->pPager->pDirty==pPg ,6,5,11
 nToken==ii ,7,4,11
 (sqlite3BtreeFlags(pC->pCursor) & BTREE_INTKEY)!=0 ,5,6,11
 oc==OP_MoveLt || oc==OP_MoveLe ,5,6,11
 p2<nField ,5,6,11
 v!=0 || pParse->db->mallocFailed ,6,5,11
 !p || (p>aDoclist && p<&aDoclist[nDoclist]) ,7,4,11
 end <= get2byte(&data[hdr+5]) ,5,6,11
 i<=p->iSize ,7,4,11
 p->returnDepth>0 ,5,6,11
 pExpr->aMI ,7,4,11
 FTS3_SEGCURSOR_ALL<0 && FTS3_SEGCURSOR_PENDING<0 ,7,4,11
 rc==SQLITE_BUSY || rc==SQLITE_OK ,5,6,11
 eType!=SQLITE_OPEN_MASTER_JOURNAL || !isDelete ,6,5,11
nFin==0 || pBt->nTrunc==0 || nFin<=pBt->nTrunc,6,5,11
 !pOuterNC ,5,6,11
 PAGER_JOURNALMODE_DELETE>=0 && PAGER_JOURNALMODE_PERSIST>=0 ,6,5,11
 pExpr->bEof==0 ,7,4,11
 sqlite3BtreeCursorIsValid(pCrsr) ,10,1,11
 nNew<=pPhrase->doclist.nList && nNew>0 ,7,4,11
 pOp->p1+pOp->p2<=p->nMem ,6,5,11
 *p ,7,4,11
" !((PgHistory *)PGHDR_TO_HIST(p, pPager))->pOrig ",5,6,11
 pRight->bStart || pLeft->iDocid==pRight->iDocid ,7,4,11
 pCx!=0 ,5,6,11
i==1 || (pDb->pBt && sqlite3BtreeHoldsMutex(pDb->pBt)),6,5,11
 pOp->opcode==OP_MoveGe ,6,5,11
 pList!=0 || pParse->db->mallocFailed ,6,5,11
 eMode==PAGER_JOURNALMODE_QUERY || eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF ,6,5,11
 sqlite3PagerIswriteable(pPage->pDbPage) || pPage->nOverflow==1 ,6,5,11
 *p==0 ,7,4,11
 pRoot->pgno==1 ,5,6,11
 p->eType==FTSQUERY_PHRASE || p->pPhrase==0 ,7,4,11
 sqlite3PagerList->pPrev==0 ,6,5,11
 pParent ,5,6,11
 p->owner==GetCurrentThreadId() ,6,5,11
 pC->rowidIsValid ,6,5,11
 (pMem->flags & (MEM_Static|MEM_Dyn|MEM_Ephem|MEM_Short))==0 ,5,6,11
 (db->flags & SQLITE_InTrans)==0 || db->autoCommit ,6,5,11
 zPrefix ,7,4,11
 i==nOld ,5,6,11
 pReader->pBlob==0 ,7,4,11
 enc!=0 ,7,4,11
pPg->needSync || pPg==pPager->lru.pFirstSynced,6,5,11
 pLeft->bStart || pLeft->iDocid==pRight->iDocid ,7,4,11
 pPager->journalOpen || pPager->journalMode==PAGER_JOURNALMODE_OFF ,6,5,11
 pMem->xDel==0 ,5,6,11
 !p->isAgg ,5,6,11
p==pPager->lru.pFirstSynced || p==sqlite3LruPageList.pFirstSynced,6,5,11
 eType!=SQLITE_OPEN_MAIN_DB || !isDelete ,6,5,11
 strlen(z)+k+1<=n ,6,5,11
 p->nRef==1 ,8,3,11
 pRoot->bStart ,7,4,11
 pExpr->iColumn==OE_Rollback || pExpr->iColumn == OE_Abort || pExpr->iColumn == OE_Fail ,5,6,11
 rc==SQLITE_OK || pList==0 ,7,4,11
 pCsr->pFilter==0 ,7,4,11
 start>=pPage->hdrOffset+6+(pPage->leaf?0:4) ,5,6,11
 pPg->inJournal || (int)pgno>pPager->origDbSize ,6,5,11
 pRoot->bEof==0 ,7,4,11
 iCell<get2byte(&pPage->aData[pPage->hdrOffset+3]) ,6,5,11
 *pbFirst || *piPrev==0 ,7,4,11
 p->iInUseMM==0 ,6,5,11
 n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem) ,6,5,11
 pCsr->aDoclist==0 ,7,4,11
 pChild->nOverflow==0 ,5,6,11
pRecycled==pPg || rc!=SQLITE_OK,6,5,11
pPager->lru.pFirst==0,6,5,11
 p->inTransaction!=1 ,7,4,11
 (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 ,6,5,11
 p->returnDepth<sizeof(p->returnStack)/sizeof(p->returnStack[0]) ,5,6,11
iDb<=0,6,5,11
 p1+n<=p2 || p2+n<=p1 ,7,4,11
 db->mallocFailed || pAuthArg ,6,5,11
 pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT || pExpr->op==TK_GT || pExpr->op==TK_GE || pExpr->op==TK_LE || pExpr->op==TK_NE ,5,6,11
 !sqlite3BtreeIsRootPage(pPage) ,6,5,11
 len<=nBuf ,6,5,11
 strlen(pMem->z)<=pMem->n ,5,6,11
 pToken->z!=0 ,5,6,11
 pToken->pSegcsr==0 ,7,4,11
 info.nData==nData+nZero ,6,5,11
 pThis->aData==sqlite3PagerGetData(pDbPage) ,6,5,11
 pKey!=0 ,8,3,11
 pPager->state>=PAGER_EXCLUSIVE ,5,6,11
 iCol>=0 && iCol<pTab->nColumn ,7,4,11
 i>=0 && i<p->db->nDb ,6,5,11
 cellOffset + 2*nCell <= top ,5,6,11
 j>=0 && j<p->nVar ,5,6,11
 pPage->leaf || !pPage->leafData ,5,6,11
 !pBt->pExclusive ,6,5,11
 pTC ,7,4,11
 pParse->nzVar==0 ,7,4,11
 pCsr->zTerm==0 ,7,4,11
 *pRc!=SQLITE_OK || pRight->bStart ,7,4,11
 ((aCopy[0] - (u8*)apCell) & 7)==0 ,5,6,11
 pC->isIndex || pOp->opcode==OP_RowData ,5,6,11
 pPhrase->doclist.pList ,7,4,11
 (start + size)<=pPage->pBt->usableSize ,5,6,11
 pFrom->pSelect!=0 ,5,6,11
 opcode>0 && opcode<sizeof(opcodeProperty) ,6,5,11
 pExpr->pPhrase->iDoclistToken==0 ,7,4,11
 iDelta>0 || (nDoclist==0 && iDelta==iDocid) ,7,4,11
 pagerUseWal(pPager) ,8,3,11
 eType!=SQLITE_OPEN_MAIN_JOURNAL || !isDelete ,6,5,11
 pColl!=0 || pLeft->iColumn==-1 ,6,5,11
 pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+n ,8,3,11
pPager->lru.pFirst,6,5,11
 !pParent->leaf ,5,6,11
 pIter>=&pDL->aAll[pDL->nAll] || *pIter ,7,4,11
 p->apCsr[i]->isTable ,5,6,11
 (x & MEM_Short)==0 || pMem->z==pMem->zShort ,6,5,11
 !fts3SegReaderIsPending(pReader) ,7,4,11
 pPg->dirty ,5,6,11
 p1<p->nCursor ,5,6,11
 pNewExpr==0 || pNewExpr->span.z!=0 || pOldExpr->span.z==0 || db->mallocFailed ,6,5,11
 pNew->pgno==pgnoNew[i] ,5,6,11
 nDist>0 ,7,4,11
 keyClass>=SQLITE_HASH_STRING && keyClass<=SQLITE_HASH_BINARY ,5,6,11
 ((Fts3Table *)pVtab)->inTransaction ,7,4,11
 !pPage->leafData ,5,6,11
pExpr->x.pList->nExpr > 0,8,3,11
 1 >= ((pMem->zMalloc && pMem->zMalloc==pMem->z) ? 1 : 0) + (((pMem->flags&MEM_Dyn)&&pMem->xDel) ? 1 : 0) + ((pMem->flags&MEM_Ephem) ? 1 : 0) + ((pMem->flags&MEM_Static) ? 1 : 0) ,6,5,11
 pTable->nRef==0 ,5,6,11
nBuf>=(sizeof(time_t)+sizeof(int)),6,5,11
 p->iInUseDB>=0 ,6,5,11
 pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.i:0) == sqlite3VdbeSerialTypeLen(serial_type) ,6,5,11
 (rc&0xff)==SQLITE_IOERR || rc==SQLITE_FULL || rc==SQLITE_BUSY ,6,5,11
 pC->pseudoTable==0 ,6,5,11
 octet>=0 && octet<256 ,7,4,11
 N<2 || p[0].db==p[1].db ,6,5,11
 pPage->pBt==pCur->pBt ,6,5,11
 pCol->zType==0 ,5,6,11
 pExpr->bDeferred || pPhrase->doclist.bFreeList==0 ,7,4,11
 db->aDb[i].pBt!=0 ,6,5,11
 zTabName && zTabName[0] ,5,6,11
 p2<=p->nMem ,6,5,11
 apNew[0]->nFree == (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2) ,5,6,11
!pCur->isIncrblobHandle,6,5,11
 iToken!=p->iDoclistToken ,7,4,11
 pMem->enc==SQLITE_UTF8 || pMem->enc==SQLITE_UTF16BE || pMem->enc==SQLITE_UTF16LE ,5,6,11
 pDel==pTrig ,6,5,11
 (x & MEM_Short)!=0 || pMem->z!=pMem->zShort ,6,5,11
 i==1 || i==0 ,5,6,11
 get4byte(pTemp)==pgnoOld[i] ,5,6,11
 *pbFirst==0 || iWrite>0 ,7,4,11
 0==(pMem->flags&MEM_Dyn) && !pMem->xDel ,6,5,11
 pK->flags & MEM_Blob ,6,5,11
 sizeof(*p)==BITVEC_SZ ,7,4,11
 i==1 ,5,6,11
 p->rSetup==0 || pTemplate->rSetup==0 || p->rSetup==pTemplate->rSetup ,7,4,11
 nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem ,6,5,11
 pMem->xDel==0 || (pMem->flags & MEM_Dyn)!=0 ,5,6,11
 pToken->n>=1 ,5,6,11
 iCell>=0 ,5,6,11
" !((PgHistory *)PGHDR_TO_HIST(p, pPager))->pStmt ",5,6,11
 pMem->z[pMem->n]==0 ,5,6,11
ppPage || pPgnoNext,6,5,11
" 0==fts3HashFind(pHash, zToken, nToken) ",7,4,11
 iLevel==FTS3_SEGCURSOR_ALL || iLevel>=0 ,7,4,11
 idx<pParent->nCell || get4byte(&pParent->aData[pParent->hdrOffset+8])==pgno ,5,6,11
 N>0 ,7,4,11
 pPhrase->doclist.bFreeList==0 ,7,4,11
 pLeft->dyn==0 || pLeft->z[pLeft->n]==0 ,5,6,11
 (pMem->flags&(MEM_Str|MEM_Int|MEM_Real|MEM_Blob))==0 || (pMem->flags&MEM_Null)==0 ,5,6,11
 pCsr->nDoclist==0 ,7,4,11
 pPager->stmtSize >= pPager->origDbSize ,6,5,11
 brk>=cellOffset+2*nCell ,5,6,11
 end + sz <= top ,5,6,11
 flags&(MEM_Str|MEM_Blob) ,6,5,11
 pInfo->needToFreeIdxStr==0 ,6,5,11
 pgsz>0 ,7,4,11
 pPager->pInStmt==0 ,6,5,11
 rc==SQLITE_BUSY || (pWal->readOnly & WAL_SHM_RDONLY)!=0 ,7,4,11
pPager->lru.pLast==0,6,5,11
" sz==cellSizePtr(pPage, pCell) ",5,6,11
 k<nMaxCells ,5,6,11
 !pLeft->bDeferred || !pRight->bDeferred ,7,4,11
 pToken->pDeferred==0 || pToken->pSegcsr==0 ,7,4,11
 iLevel>=0 || iLevel==FTS3_SEGCURSOR_ALL ,7,4,11
 pgno>0 ,6,5,11
 pPage->nOverflow>0 ,5,6,11
 iCol<0 || iCol<p->nColumn ,7,4,11
 pOp->opflags==sqlite3OpcodeProperty[pOp->opcode] ,6,5,11
 zTerm && nTerm>0 ,7,4,11
 READ_LOCK+1==WRITE_LOCK ,7,4,11
 pPgOld->nRef==0 ,5,6,11
 p->dirty ,6,5,11
 pPg->pPrevDirty->pDirty==pPg ,6,5,11
 subpage>0 ,5,6,11
 pInfo->nBackfill==pWal->hdr.mxFrame ,8,3,11
 i==1 || rollback==0 ,5,6,11
 !pOffset || pLimit ,5,6,11
 pCsr->nDoc>0 ,7,4,11
 pExpr->op==TK_COLUMN ,4,7,11
 pPager->lru.pFirstSynced==pPager->lru.pFirst ,6,5,11
 ((Fts3Table *)pVtab)->mxSavepoint < iSavepoint ,7,4,11
 pIn1->flags & MEM_Real ,6,5,11
!pList->pFirst,6,5,11
 sqlite3BtreeHoldsMutex(pRef) ,6,5,11
 sqlite3_mutex_held(sqlite3_mutex_alloc(SQLITE_MUTEX_STATIC_MASTER)) ,6,5,11
" strcmp(db->aDb[db->nDb-1].zName,""vacuum_db"")==0 ",5,6,11
 iSize<=iNow ,6,5,11
 pE->aMI==0 ,7,4,11
 p->pLimit==0 ,8,3,11
 pCsr->nTerm==0 ,7,4,11
 pKeyInfo->aSortOrder==0 ,6,5,11
 eType==SQLITE_OPEN_MAIN_DB || eType==SQLITE_OPEN_TEMP_DB || eType==SQLITE_OPEN_MAIN_JOURNAL || eType==SQLITE_OPEN_TEMP_JOURNAL || eType==SQLITE_OPEN_SUBJOURNAL || eType==SQLITE_OPEN_MASTER_JOURNAL || eType==SQLITE_OPEN_TRANSIENT_DB ,6,5,11
 pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK ,8,3,11
 totalSize+2*nCell<=pPage->nFree ,5,6,11
 ((aCopy[i] - (u8*)apCell) & 7)==0 ,5,6,11
 pParent==0 || pParent->pBt==pBt ,5,6,11
 pToken->z[0]!=0 ,5,6,11
 pC->isTable || pOp->opcode==OP_RowKey ,5,6,11
 pPager->eState==PAGER_READER ,7,4,11
 pPager->aHash[h]->pPrevHash==0 ,5,6,11
 pC->pseudoTable ,6,5,11
 (sqlite3BtreeFlags(pC->pCursor) & BTREE_ZERODATA)==0 ,5,6,11
 pPhrase->doclist.pList[nNew]=='\0' ,7,4,11
 frag<=data[pPage->hdrOffset+7] ,5,6,11
 pc>10 && pc+sz<=pPage->pBt->usableSize ,5,6,11
 nDoclist>0 || iDelta==iDocid ,7,4,11
!useIndexOnly || j<pIdx->nColumn,6,5,11
!pCur->aOverflow,6,5,11
 pIn1!=pOut ,7,4,11
 pOp->opcode==OP_ShiftRight ,6,5,11
 nCol>1 ,7,4,11
 !p->alwaysRollback ,5,6,11
 !sqlite3IsNaN(*pOp->p4.pReal) ,7,4,11
 i==nByte ,6,5,11
 iPrev>=0 ,7,4,11
 rc!=SQLITE_OK || p->nToken<1 || p->aToken[0].pSegcsr==0 || p->bIncr ,7,4,11
Z_REFCOUNTED_P(pz),7,4,11
"slow(m, ssp, sep, ssub, esub) == rest",4,6,10
 isIgnoreEmpty || (isRequirePos && !isColFilter) ,6,4,10
p->next == bracket+3,4,6,10
 pVfs ,7,3,10
 SQLITE_OPEN_READWRITE == 0x02 ,6,4,10
 SQLITE_OPEN_CREATE == 0x04 ,6,4,10
coldp != NULL,4,6,10
 db==0 || p->pBlockingConnection!=db ,6,4,10
 aHardLimit[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]== SQLITE_MAX_LIKE_PATTERN_LENGTH ,6,4,10
sizeof(x)==8,6,4,10
 SQLITE_OPEN_READONLY == 0x01 ,6,4,10
 iCol==4 ,8,2,10
 isSaveLeft==0 || isExact==0 ,6,4,10
 c==t ,6,4,10
inst != NULL,5,5,10
 p2->xUnlockNotify==p->xUnlockNotify || !seen ,6,4,10
" (sqlite3_strnicmp(argv[0], ""fts4"", 4)==0 && isFts4) || (sqlite3_strnicmp(argv[0], ""fts3"", 4)==0 && !isFts4) ",6,4,10
 isSorter(pC) ,10,0,10
 u.am.pDest->flags&MEM_Null ,4,6,10
exit,5,5,10
copy == finish+4,4,6,10
 !(pDest->flags & (MEM_Blob|MEM_Str)) || pDest->z==sMem.z ,6,4,10
 db==0 || sqlite3_mutex_held(db->mutex) ,6,4,10
m->lastpos != NULL,4,6,10
 sqlite3GlobalConfig.nRefInitMutex==0 ,6,4,10
 pOrTerm->leftCursor==iCursor ,6,4,10
fp != NULL,4,6,10
 pVdbe!=0 ,7,3,10
isalpha(ch),4,6,10
second,5,5,10
 memIsValid(&aMem[pOp->p2]) ,6,4,10
 0!=pFile->eFileLock ,7,3,10
 aHardLimit[SQLITE_LIMIT_LENGTH]==SQLITE_MAX_LENGTH ,6,4,10
UTx != UT,4,6,10
 pReader->iCurrentBlock<=pReader->iLeafEndBlock ,6,4,10
p->slen < p->ssize,4,6,10
 pTsd->nAlloc>=0 ,4,6,10
 p->bFts4==0 ,8,2,10
sizeof(x)==sizeof(y),6,4,10
 p->pFirst ,6,4,10
m->pmatch[i].rm_so != -1,4,6,10
start <= stop,4,6,10
 pKeyInfo!=0 ,8,2,10
 sqlite3IsNaN(y) ,6,4,10
 (pOrTerm->wtFlags & (TERM_ANDINFO|TERM_ORINFO))==0 ,6,4,10
 pExpr->isLoaded ,4,6,10
 nField>0 ,7,3,10
m->coldp != NULL,4,6,10
 mxReadMark<=pWal->hdr.mxFrame ,6,4,10
dp == sep,4,6,10
 aHardLimit[SQLITE_LIMIT_FUNCTION_ARG]==SQLITE_MAX_FUNCTION_ARG ,6,4,10
 (*ppPage)->pgno==pgno ,6,4,10
 aHardLimit[SQLITE_LIMIT_EXPR_DEPTH]==SQLITE_MAX_EXPR_DEPTH ,6,4,10
 pOrTerm->u.leftColumn==iColumn ,6,4,10
 pInode->nShared!=0 ,7,3,10
RAx != RA,4,6,10
nData>=1,6,4,10
 pReader->aNode ,6,4,10
cp == g->must + g->mlen,4,6,10
"(SLJIT_UDIVMOD & 0x2) == 0 && SLJIT_UDIVI - 0x2 == SLJIT_UDIVMOD, bad_div_opcode_assignments",5,5,10
p->next == bracket+2,4,6,10
 p->bIgnore==0 ,8,2,10
strlen(efbuf) < sizeof(efbuf),4,6,10
 IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) ,8,2,10
 !p || p->iLastDocid<=iDocid ,6,4,10
 aHardLimit[SQLITE_LIMIT_SQL_LENGTH]==SQLITE_MAX_SQL_LENGTH ,6,4,10
 p->aData[p->nData]==0 ,6,4,10
 strlen(argv[0])==4 ,6,4,10
 nData+nReq<=pWriter->nSize ,6,4,10
 db==0 || p->pUnlockConnection!=db ,6,4,10
p->pbegin[i] != 0,4,6,10
 pPage->pDirtyNext->pDirtyPrev==0 ,6,4,10
 (combined_flags & MEM_RowSet)==0 ,6,4,10
 (pVal->flags & MEM_RowSet)==0 ,7,3,10
 pPager->eLock>=SHARED_LOCK || pPager->noReadlock ,4,6,10
 pIn->nMem==1 ,4,6,10
 pNew->nOut==saved_nOut ,8,2,10
!MORE() || SEE(stop),4,6,10
 p->isEof==0 ,6,4,10
Lx != L,4,6,10
 pPager->memDb==0 ,6,4,10
 pPage->pDirtyNext || pPage==p->pDirtyTail ,6,4,10
 pRight==0 || p->zMalloc==0 ,6,4,10
 pGroup->mxPinned == pGroup->nMaxPage + 10 - pGroup->nMinPage ,6,4,10
 *p2!=POS_END && *p2!=POS_COLUMN ,6,4,10
 pEnd!=0 ,4,6,10
 n<=9 ,6,4,10
i <= p->g->nsub,4,6,10
 pWriter->zTerm==pWriter->zMalloc ,6,4,10
opnd < 1<<OPSHIFT,4,6,10
sep == rest,4,6,10
 SizeofArray(azSql)==SizeofArray(p->aStmt) ,6,4,10
 pWC->op==TK_AND ,6,4,10
 iScore>=0 ,6,4,10
 aHardLimit[SQLITE_LIMIT_VDBE_OP]==SQLITE_MAX_VDBE_OP ,6,4,10
cs->multis != NULL,4,6,10
 nString==0 ,6,4,10
 pCache->n90pct == pCache->nMax*9/10 ,6,4,10
 rc!=0 ,6,4,10
 pCache->nMin==0 || pCache->bPurgeable ,6,4,10
 pInode->eFileLock==pFile->eFileLock ,7,3,10
 pOrTerm->wtFlags & (TERM_COPIED|TERM_VIRTUAL) ,6,4,10
 pCache->bPurgeable || pCache->nMin==0 ,6,4,10
 pCache->bPurgeable==0 || pCache->nMin==10 ,6,4,10
 pInode->eFileLock==0 ,7,3,10
 u.az.oc==OP_SeekGe || u.az.oc==OP_SeekGt ,4,6,10
 pp && p ,6,4,10
" ExprHasProperty(p, EP_Reduced)==0 ",6,4,10
 pMaskSet->n<=(int)sizeof(Bitmask)*8 ,6,4,10
j<=nBuf,6,4,10
dp == NULL || dp == endp,4,6,10
 sMem.z==sMem.zMalloc ,6,4,10
 eState==3 ,6,4,10
 memIsValid(&aMem[pOp->p1]) ,6,4,10
 aArg==aDyn || (aDyn==0 && aArg==aStatic) ,6,4,10
 pExpr->op==TK_OR ,6,4,10
 pInode->nShared>0 ,7,3,10
 pPage==p->pDirtyTail ,6,4,10
 pFile->eFileLock!=NO_LOCK || eFileLock==SHARED_LOCK ,7,3,10
 pSorter ,8,2,10
 p->id==SQLITE_MUTEX_RECURSIVE || os2MutexNotheld(p) ,4,6,10
code_ptr - code <= (sljit_sw)compiler->size,10,0,10
HERE() == sn+1,4,6,10
pg_link != NULL,5,5,10
OP(p->strip[p->pend[i]]) == ORPAREN,4,6,10
 eFileLock==SHARED_LOCK ,7,3,10
p->g->sets != NULL,4,6,10
OP(p->strip[p->pbegin[i]]) == OLPAREN,4,6,10
 aHardLimit[SQLITE_LIMIT_TRIGGER_DEPTH]==SQLITE_MAX_TRIGGER_DEPTH ,6,4,10
 pCur->iPage<BTCURSOR_MAX_DEPTH ,7,3,10
sp == rest,4,6,10
 rc==SQLITE_OK || pCsr==0 ,8,2,10
 iOut>0 ,6,4,10
g->nplus == 0 || m->lastpos != NULL,4,6,10
m->coldp < m->endp,4,6,10
 idxStr==0 ,6,4,10
 pCache->pCache!=0 ,10,0,10
 pOrWc->nTerm>=2 ,6,4,10
 aHardLimit[SQLITE_LIMIT_VARIABLE_NUMBER]==SQLITE_MAX_VARIABLE_NUMBER,6,4,10
" xCmp(apSegment[i], apSegment[i+1])<0 ",6,4,10
 iPos>p->iLastPos || (iPos==0 && p->iLastPos==0) ,6,4,10
 pPage==p->pDirty ,6,4,10
othercase(ch) != ch,4,6,10
 (WO_EQ<<(op-TK_EQ)) < 0x7fff ,6,4,10
 !pnCkpt || *pnCkpt==-1 ,6,4,10
 db->lookaside.nOut==0 ,6,4,10
 bRev==0 || bRev==1 ,6,4,10
 iHeight>=1 && iHeight<128 ,6,4,10
 !(pDest->flags & MEM_Dyn) ,6,4,10
"(SLJIT_SINGLE_OP == 0x100), float_transfer_bit_error",6,4,10
m->pmatch[i].rm_so == -1,4,6,10
 pPager->aInStmt!=0 ,3,7,10
 pAndTerm->pExpr ,6,4,10
 eStmt<SizeofArray(azSql) && eStmt>=0 ,6,4,10
 pOp->p2>=0 && pOp->p2<p->nMem ,4,6,10
 sz > (int)sizeof(LookasideSlot*) ,6,4,10
 (*p1&0xFE)==0 && (*p2&0xFE)==0 ,6,4,10
" !ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) ",4,6,10
 pPage->pDirtyNext==0 && pPage->pDirtyPrev==0 && p->pDirty!=pPage ,6,4,10
 pInode->nShared==0 ,7,3,10
nc % CHAR_BIT == 0,4,6,10
 iTarget>0 ,6,4,10
 (sqlite3FtsUnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 ,8,2,10
lev+1 <= m->g->nplus,4,6,10
 aHardLimit[SQLITE_LIMIT_COMPOUND_SELECT]==SQLITE_MAX_COMPOUND_SELECT,6,4,10
 u.bd.pC->rowidIsValid==0 ,4,6,10
 eFileLock!=PENDING_LOCK ,7,3,10
!NONCHAR(ch) || ch != (unsigned char)OPND(s),4,6,10
 !pnLog || *pnLog==-1 ,6,4,10
 pCache->bPurgeable || createFlag!=1 ,6,4,10
 aHardLimit[SQLITE_LIMIT_COLUMN]==SQLITE_MAX_COLUMN ,6,4,10
 nVal==1 || nVal==2 ,6,4,10
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x2), float_transfer_bit_error",6,4,10
 eFileLock!=RESERVED_LOCK || pFile->eFileLock==SHARED_LOCK ,7,3,10
 nArg<=(int)ArraySize(aStatic) || aArg==aDyn ,6,4,10
m->pmatch != NULL,4,6,10
 piLeaf || piLeaf2 ,6,4,10
 !piLeaf2 || !piLeaf || rc!=SQLITE_OK || (*piLeaf<=*piLeaf2) ,6,4,10
dst == src2,10,0,10
 pLevel->iIdxCur>=0 ,6,4,10
len <= sizeof(epbuf),4,6,10
 pTokenizer && pModule ,6,4,10
m->pmatch[i].rm_eo == -1,4,6,10
 p->pUnlockConnection || p->pBlockingConnection ,6,4,10
 (pTerm->wtFlags & TERM_ORINFO)!=0 ,6,4,10
 pWInfo->untestedTerms ,6,4,10
 iCol==0 ,6,4,10
!(g->iflags&BAD),4,6,10
 p->xUnlockNotify ,6,4,10
 pagerUseWal(pPager)==0 ,6,4,10
 pLeft->iColumn!=(-1) ,6,4,10
 size>=2 ,8,2,10
 csr.nSegment>0 ,6,4,10
pc == stop-1,4,6,10
 q - (unsigned char *)p <= FTS3_VARINT_MAX ,6,4,10
 !sqlite3_mallocDisallowed ,4,6,10
 p->nResColumn==pOp->p1 ,3,7,10
 iVal-*piPrev > 0 || (*piPrev==0 && iVal==0) ,6,4,10
 pPager->nSavepoint==nSavepoint ,6,4,10
 ((Fts3Table *)pVtab)->nPendingData==0 ,4,6,10
 sqlite3BtreeCursorIsValid(u.am.pCrsr) ,4,6,10
never,4,6,10
" sqlite3MemdebugHasType(p, MEMTYPE_HEAP) ",9,1,10
 pParse->nErr==0 || rc ,5,5,10
 nExtra<1000 ,6,4,10
 idxNum==FTS4AUX_EQ_CONSTRAINT || idxNum==0 || idxNum==FTS4AUX_LE_CONSTRAINT || idxNum==FTS4AUX_GE_CONSTRAINT || idxNum==(FTS4AUX_LE_CONSTRAINT|FTS4AUX_GE_CONSTRAINT) ,6,4,10
sp == stop,4,6,10
from <= to,4,6,10
 !pReader->pOffsetList ,6,4,10
arg1 == TMP_REG1,10,0,10
 u.az.oc==OP_SeekLt || u.az.oc==OP_SeekLe ,4,6,10
 p->nData<p->nSpace ,6,4,10
 !db || sqlite3_mutex_held(db->mutex) ,6,4,10
 pC->uc.pCursor!=0,10,0,10
SQLITE_DEFAULT_PAGE_SIZE<=SQLITE_MAX_DEFAULT_PAGE_SIZE,6,4,10
first,5,5,10
value < 1<<OPSHIFT,4,6,10
i < NPAREN,4,6,10
cp < g->must + g->mlen,4,6,10
 rc!=SQLITE_OK || *ppTok ,6,4,10
 pTsd==sqlite3ThreadData() ,4,6,10
 iNextLeaf==iFree ,6,4,10
 xDel!=SQLITE_DYNAMIC ,10,0,10
 pCur->skipNext==0 || pCur->eState!=CURSOR_VALID ,10,0,10
" !ExprHasAnyProperty(p, EP_TokenOnly|EP_Reduced) ",4,6,10
 pPage->pDirtyPrev || pPage==p->pDirty ,6,4,10
p->ssize >= p->slen + len,4,6,10
pos > 0,4,6,10
 pCsr->eEvalmode==FTS3_EVAL_NEXT ,4,6,10
 *p1!=POS_END && *p1!=POS_COLUMN ,6,4,10
 p->nPgsz>0 || rc!=SQLITE_OK ,6,4,10
finish >= start,4,6,10
 pExpr->eType==FTSQUERY_PHRASE && pExpr->pPhrase ,4,6,10
 pRight->op==TK_VARIABLE || pRight->op==TK_REGISTER ,6,4,10
 pFile->eFileLock==0 ,7,3,10
g->backrefs,4,6,10
 pnBlob ,6,4,10
stop - m->beginp >= len,4,6,10
 nSuspect<=nSegment ,6,4,10
 !p->pFirst ,6,4,10
 pReader->aDoclist ,6,4,10
strlen(convbuf) < sizeof(convbuf),4,6,10
 pTree->aData==(char *)&pTree[1] ,6,4,10
 contentOffset<=usableSize ,6,4,10
 pLower || pUpper ,6,4,10
 (pTerm->wtFlags & (TERM_DYNAMIC|TERM_ORINFO|TERM_ANDINFO))==0 ,6,4,10
 aHardLimit[SQLITE_LIMIT_ATTACHED]==SQLITE_MAX_ATTACHED ,6,4,10
 idx >= end+2 ,5,4,9
 ppStmt!=0 ,4,5,9
 idx1==szHdr1 && rc ,4,5,9
 rc!=SQLITE_OK || sqlite3PagerIswriteable((*ppPage)->pDbPage) ,5,4,9
 iOfst+iAmt<=p->endpoint.iOffset ,5,4,9
 p->aOp[p->nOp-1].p3!=0 ,3,6,9
 p->aMem[i].db==p->db ,6,3,9
size==0,5,4,9
 pItem->notIndexed==0 && pItem->zIndex==0 ,5,4,9
 pzBuffer==0 || isReduced ,5,4,9
 pKeyInfo->aSortOrder!=0 ,9,0,9
 ((VTable *)zP4)->db==p->db ,5,4,9
 pPg!=0 ,7,2,9
 pParse==sqlite3ParseToplevel(pParse) ,5,4,9
 pMem->flags&MEM_Str ,5,4,9
 SQLITE_CHECKPOINT_FULL<SQLITE_CHECKPOINT_RESTART ,4,5,9
 db->vtabOnConflict>=1 && db->vtabOnConflict<=5 ,6,3,9
 u.cl.pName->flags & MEM_Str ,4,5,9
 scratchAllocOut<=1 ,4,5,9
 pOther!=pDef && pOther->pNext!=pDef ,5,4,9
 (u.ci.pQuery->flags&MEM_Int)!=0 && u.ci.pArgc->flags==MEM_Int ,4,5,9
 pCur->apPage[0]->intKey || pIdxKey ,5,4,9
 nBlock>=2 ,6,3,9
 u.bo.pC->deferredMoveto==0 ,4,5,9
 (pBlock[-1].u.hdr.size4x&1)!=0 ,6,3,9
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->nCell==0 ,9,0,9
 OE_Ignore==4 && OE_Replace==5 ,6,3,9
 u.bh.pC->pCursor!=0 ,4,5,9
" !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) ",9,0,9
 u.be.pC!=0 ,4,5,9
 mem1.flags & MEM_Int ,4,5,9
 u.ba.pC!=0 ,4,5,9
 i>=0 && i<YY_ACTTAB_COUNT ,6,3,9
 u.bd.pC->isTable ,4,5,9
 pCache->nRef==0 && pCache->pDirty==0 ,5,4,9
 sqlite3PcacheRefCount(pPager->pPCache)>0 ,5,4,9
 aExpr[k].p!=0 ,3,6,9
&p->val != pData,6,3,9
 val>=0 ,3,6,9
u.ch.pVtab && u.ch.pModule,4,5,9
 u.bp.pC!=0 ,4,5,9
 pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,5,4,9
 OE_Rollback==1 && OE_Abort==2 && OE_Fail==3 ,6,3,9
 rc!=SQLITE_OK || (db->flags & SQLITE_Initialized) || db->init.busy ,4,5,9
 (pBt->btsFlags & BTS_READ_ONLY)==0 ,9,0,9
 nAddr<sizeof(aAddr)/sizeof(aAddr[0]) ,3,6,9
 offset==ii*(4+pPager->pageSize) ,4,5,9
 pPager->eState!=PAGER_OPEN || pPg==0 ,5,4,9
 mxSafeFrame==pWal->hdr.mxFrame ,4,5,9
 rc!=SQLITE_OK || ( pPhrase->pList==0 && pPhrase->pHead==0 && pPhrase->pTail==0 ),6,3,9
 z<=zTerm ,5,4,9
 (pMem->n+(desiredEnc==SQLITE_UTF8?1:2))<=len ,5,4,9
 i+size<=usableSize ,5,4,9
" 0==sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec) || pParse->db->mallocFailed ",6,3,9
 !pTable || pTable->nRef>0 ,5,4,9
 pTerm->idxLeft==iCur ,3,6,9
 aExpr[k].idxLeft==iCur || aExpr[k].idxRight==iCur ,3,6,9
 get2byteNotZero(&data[hdr+5])==nUsable ,4,5,9
 sqlite3pager_iswriteable(data) ,3,6,9
 pGroup->pLruHead!=pPage && pGroup->pLruTail!=pPage ,5,4,9
 pVfs!=0 ,6,3,9
 u.cm.nArg>1 && u.cm.apArg[0] && (u.cm.apArg[0]->flags&MEM_Null) ,4,5,9
fdTable[fd].type != FD_UNUSED,3,6,9
 i<=usableSize-4 ,5,4,9
 desiredEnc==SQLITE_UTF16BE ,5,4,9
 u.bh.pC->deferredMoveto==0 ,4,5,9
 u.ck.pModule->xNext ,4,5,9
nOverflow>0 || iOverflow<i ,4,5,9
 op==SAVEPOINT_RELEASE||op==SAVEPOINT_ROLLBACK||op==SAVEPOINT_BEGIN ,6,3,9
 pOp->p4.z==0 || pOp->p4.z==p->azVar[pOp->p1-1] ,6,3,9
 EIGHT_BYTE_ALIGNMENT(*ppFrom) ,5,4,9
 j<nOld ,4,5,9
 pCache!=0 ,6,3,9
 (balance_deeper_called++)==0 ,5,4,9
 SQLITE_CHECKPOINT_PASSIVE+2==SQLITE_CHECKPOINT_RESTART ,4,5,9
 p->pEntry==0 ,4,5,9
" sz==cellSizePtr(pPage, pCell) || (sz==8 && iChild>0) ",5,4,9
 stateno<=YY_REDUCE_COUNT ,6,3,9
 i>=0 && i<p->pAgg->nMem ,3,6,9
 u.aj.p2>0 && u.aj.p2+u.aj.n<=p->nMem+1 ,4,5,9
vfsList,6,3,9
 desiredEnc==SQLITE_UTF8 ,5,4,9
 i<nNew-1 || j==nCell ,4,5,9
 (p->btreeMask & (((yDbMask)1)<<iDb))!=0 ,6,3,9
 u.bf.pKey->flags & MEM_Int ,4,5,9
 pLevel->iLikeRepCntr>0 ,6,3,9
 p->pTab==0 || (p->pTab->tabFlags & TF_Virtual)!=0 ,6,3,9
 N>=0 ,7,2,9
 (pDup->flags & (EP_Reduced|EP_TokenOnly))==0 ,4,5,9
 p->isPinned==0 ,9,0,9
 pPager->journalOpen || !pPager->useJournal ,3,6,9
 iPage>1 ,5,4,9
 u.bi.pC->pCursor!=0 ,4,5,9
GC_TYPE((zend_object*)fbc->common.prototype) == IS_OBJECT,5,4,9
 pStmt==0 ,3,6,9
 (m.flags & MEM_Str)!=0 || db->mallocFailed ,6,3,9
 u.bh.pC!=0 ,4,5,9
 SQLITE_CHECKPOINT_FULL>SQLITE_CHECKPOINT_PASSIVE ,4,5,9
 !pCur->apPage[0]->intKey || !pCur->pKey ,5,4,9
 u.bg.pC!=0 ,4,5,9
 nByte < usableSize-8 ,4,5,9
 iLevel>=0 ,4,5,9
 db->autoCommit==0 || db->nVTrans==0 ,6,3,9
 u.bn.pC->deferredMoveto==0 ,4,5,9
 pNC->pSrcList!=0 ,6,3,9
 j<=usableSize-4 ,5,4,9
 nArg==1 || nArg==(2 + p->nColumn + 3) ,6,3,9
 u.bb.pC!=0 ,4,5,9
 (balance_quick_called++)==0 ,5,4,9
" hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, wrFlag+1) ",5,4,9
 nCell>=0 && nCell<=(int)MX_CELL(pPage->pBt) && (int)MX_CELL(pPage->pBt)<=10921,4,5,9
 eType!=FTSQUERY_PHRASE || !p->pPhrase->isNot ,4,5,9
 (pIn3->flags & MEM_Zero)==0 ,4,5,9
 p->aOp[p->nOp-1].opcode==OP_Noop ,3,6,9
 k<nNew ,4,5,9
 p->aOp[p->nOp-1].p3type==P3_DYNAMIC ,3,6,9
 u.cj.pModule->xColumn ,4,5,9
 pPgOld ,5,4,9
 p->owner==tid ,6,3,9
 u.bg.pC->iDb>=0 ,4,5,9
 pMem->enc!=0 ,5,4,9
 u.bf.pC!=0 ,4,5,9
 addr>=0 && addr<p->nOp ,4,5,9
 (*ppPage)->pPager==pPager || (*ppPage)->pPager==0 ,5,4,9
asyncIoTable[index].inUse == 0,3,6,9
 nNew==1 ,5,4,9
 pNos->flags & MEM_Int ,3,6,9
 aiCol[i]!=pTab->iPKey ,6,3,9
 p && p->pMem && p->pFunc && p->pFunc->xStep ,5,4,9
 u.bq.pC!=0 ,4,5,9
 u.aj.p1>0 && u.aj.p1+u.aj.n<=p->nMem+1 ,4,5,9
 pMem->enc!=desiredEnc ,5,4,9
 sizeof(t)+sizeof(pid)<=(size_t)nBuf ,4,5,9
 u.bd.pC!=0 ,4,5,9
 pIn1 <= &p->aMem[p->nMem] ,4,5,9
 u.cl.pVtab->pModule->xRename ,4,5,9
 n>=1 && n<SQLITE_SHM_NLOCK ,5,4,9
 &db->pVtabCtx ,6,3,9
 u.bn.pC!=0 ,4,5,9
 wrFlag==0 || wrFlag==1 ,5,4,9
 iLogsize>=0 && iLogsize<=LOGMAX ,6,3,9
 (m.flags & MEM_Term)!=0 || db->mallocFailed ,6,3,9
 (p->flags & PGHDR_DIRTY)==0 ,4,4,8
 pCur->apPage[pCur->iPage]->nOverflow==0 ,5,3,8
 (pBt->openFlags & BTREE_SINGLE)==0 || pgnoRoot==2 ,5,3,8
 p->pOrderBy!=0 ,5,3,8
 p->db==0 || p->db==db ,5,3,8
 pPager->pPCache!=0 ,5,3,8
 pParent->pOrderBy==0 ,5,3,8
 (HASHTABLE_NSLOT & (HASHTABLE_NSLOT-1))==0 ,5,3,8
" sqlite3MemdebugNoType(p, (u8)~MEMTYPE_HEAP) ",7,1,8
 (rc&0xFF)==(rcp&0xFF) ,5,3,8
 pExpr->flags&EP_xIsSelect ,5,3,8
 i<(int)sizeof(p->btreeMask)*8 ,5,3,8
 pcache1.isInit==0 ,5,3,8
 n==(db->nSavepoint + db->isTransactionSavepoint) ,5,3,8
 n==pPage->pgno && e==PTRMAP_OVERFLOW1 ,5,3,8
 sqlite3_value_type(argv[0])==SQLITE_NULL ,5,3,8
 !SAVEPOINT_BEGIN && SAVEPOINT_RELEASE==1 && SAVEPOINT_ROLLBACK==2 ,5,3,8
 nReserve>=0 && nReserve<1000 ,5,3,8
 eLock==READ_LOCK || pBt->inTransaction==TRANS_WRITE ,5,3,8
 isPrepareV2==1 || isPrepareV2==0 ,5,3,8
" !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList ",5,3,8
 sqlite3PcacheRefCount(pPager->pPCache)==0 || pPager->tempFile ,5,3,8
 (p->flags&trueMask)==trueMask ,4,4,8
 (pTab->tabFlags & TF_Virtual)!=0 ,5,3,8
 pParse->checkSchema ,5,3,8
 zDatabase!=0 || sqlite3BtreeHoldsAllMutexes(db) ,5,3,8
 p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE ,4,4,8
 pAgg->apFunc!=0 ,3,5,8
 pOp>aOp ,4,4,8
 SQLITE_LIMIT_TRIGGER_DEPTH==(SQLITE_N_LIMIT-1) ,4,4,8
 p->inTrans>0 ,5,3,8
" sqlite3SchemaMutexHeld(pParse->db, 0, pTmpSchema) ",5,3,8
" !ExprHasProperty(p, EP_IntValue) || p->u.iValue>=0 ",5,3,8
 aContent[aList[i]] > aContent[aList[i-1]] ,5,3,8
 op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT ,5,3,8
 n==1 || lockType!=F_RDLCK ,5,3,8
 pFrom->pSelect==0 ,5,3,8
" SQLITE_OK==querySharedCacheTableLock(p, iTable, eLock) ",5,3,8
 isOpen(pPager->fd) || tempFile ,5,3,8
 nPathname>0 ,5,3,8
 p->sharable==0 || p->locked==0 || p->wantToLock>0 ,5,3,8
 eAuto>=0 && eAuto<=2 ,5,3,8
 pInode->pShmNode==0 ,5,3,8
 pPrior->pOrderBy==0 ,5,3,8
 pRoot->pgno==pCur->pgnoRoot ,5,3,8
 isSavepnt ,5,3,8
 pPager->eState!=PAGER_WRITER_FINISHED ,5,3,8
 pCur->apPage[1]->nOverflow ,5,3,8
 (PAGER_JOURNALMODE_WAL & 5)==5 ,5,3,8
ms->data!= NULL,4,4,8
" wrFlag==0 || !hasReadConflicts(p, iTable) ",5,3,8
 iSpace1<=pBt->pageSize ,4,4,8
 pBt->pPage1==0 ,5,3,8
" DbMaskTest(p->btreeMask, pOp->p1) ",8,0,8
 pTest!=0 ,5,3,8
 p->btreeMask==0 ,4,4,8
 pRes ,5,3,8
 get2byte(&aFrom[iFromHdr+5]) <= (int)pBt->usableSize ,5,3,8
table != NULL,4,4,8
 PAGER_JOURNALMODE_WAL==5 ,5,3,8
 p->nRef || (p->flags&PGHDR_NEED_SYNC) ,4,4,8
 pgno<=PAGER_MAX_PGNO && pgno!=PAGER_MJ_PGNO(pPager) ,5,3,8
 pMem->flags & (MEM_Str|MEM_Blob) ,2,6,8
 db->pSavepoint==0 || db->autoCommit==0 ,5,3,8
 pPage->nFree>=nByte ,5,3,8
 pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) ,5,3,8
u.cg.pVtab && u.cg.pModule,4,4,8
 0==(p->db->flags&SQLITE_ReadUncommitted) || eLock==WRITE_LOCK ,5,3,8
 aWalData[3]!=pWal->nCkpt || aWalData[0]<=pWal->hdr.mxFrame ,5,3,8
 pPage->cellOffset == hdr + 12 - 4*pPage->leaf ,5,3,8
 eLock==NO_LOCK || eLock==SHARED_LOCK ,5,3,8
 pWal->ckptLock==1 || pWal->ckptLock==0 ,5,3,8
 pBt->usableSize<=pBt->pageSize && pBt->usableSize+255>=pBt->pageSize,5,3,8
 p->pTabSchema!=0 ,5,3,8
 pOp[-1].p3type==P3_COLLSEQ ,2,6,8
 (nCellKey & SQLITE_MAX_U32)==(u64)nCellKey ,5,3,8
 op==TK_UNION || op==TK_EXCEPT || op==TK_INTERSECT || op==TK_ALL ,5,3,8
 start>=pPage->hdrOffset+6+pPage->childPtrSize ,4,4,8
 pOrig->flags & EP_Resolved ,4,4,8
 iSpace1 <= (int)pBt->pageSize ,5,3,8
 p->aList==&aList[nList&~((2<<iSub)-1)] ,5,3,8
 pFrom->nSrc==1 ,5,3,8
 iBuddy>=0 ,5,3,8
 n>0 && tokenType!=TK_ILLEGAL ,5,3,8
 nFarg>=2 ,5,3,8
 pDbFd ,5,3,8
 p->eState==PAGER_OPEN || p->eState==PAGER_READER || p->eState==PAGER_WRITER_LOCKED || p->eState==PAGER_WRITER_CACHEMOD || p->eState==PAGER_WRITER_DBMOD || p->eState==PAGER_WRITER_FINISHED || p->eState==PAGER_ERROR ,5,3,8
 p->db==pBt->db ,5,3,8
 ((unixFile*)id)->isLockable==0 || offset>=PENDING_BYTE+512 || offset+amt<=PENDING_BYTE ,4,4,8
" db==0 || sqlite3SchemaMutexHeld(db, 0, pTab->pSchema) ",5,3,8
 pPager->pWal ,5,3,8
 pNew->pOpen==NULL ,4,4,8
 db2 ,5,3,8
 pExpr->op==TK_EQ || pExpr->op==TK_IN || pExpr->op==TK_LT || pExpr->op==TK_GT || pExpr->op==TK_GE || pExpr->op==TK_LE || pExpr->op==TK_NE || pExpr->op==TK_IS || pExpr->op==TK_ISNOT ,5,3,8
 pPage->intKey==(pIdxKey==0) ,5,3,8
 pMem->z || pMem->n==0 ,5,3,8
 pNew->pLock==NULL ,4,4,8
 p->iStatement==0 || db->flags&SQLITE_CountRows ,5,3,8
 pPrior!=0 ,8,0,8
 idx <= HASHTABLE_NSLOT/2 + 1 ,5,3,8
 eType==SQLITE_OPEN_WAL || eType==SQLITE_OPEN_MAIN_JOURNAL ,5,3,8
 pId->nRef>0 ,5,3,8
 pExpr->x.pSelect==0 ,5,3,8
 pCell<pPage->aData || pCell>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,5,3,8
 !sqlite3IsNaN(value) ,5,3,8
 pTabList ,5,3,8
 pPager->tempFile && rc==SQLITE_OK ,5,3,8
 p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld(p) ,4,4,8
 pStepList ,5,3,8
 pChild->nCell==pRoot->nCell ,5,3,8
 sqlite3_mutex_held(mutexOpen) ,5,3,8
" walFramePgno(pWal, iFrame)!=1 ",5,3,8
 pOrderBy ,5,3,8
 u.ck.pVtab->pModule->xRename ,4,4,8
buflen >= sizeof(struct hostent_data),4,4,8
 encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE ,5,3,8
 (PAGER_JOURNALMODE_WAL & 5)!=1 ,5,3,8
 pId2 ,5,3,8
 isOpen(pPager->jfd) || pagerUseWal(pPager) ,5,3,8
 ppIdx && *ppIdx==0 ,5,3,8
 z[0]=='?' ,5,3,8
 p->journalMode!=PAGER_JOURNALMODE_OFF || !isOpen(p->jfd) ,5,3,8
 pSel!=0 ,5,3,8
 thisMark!=READMARK_NOT_USED ,5,3,8
!isView || pTrigger,5,3,8
 state==pPager->eState ,5,3,8
 !isOpen(pPager->jfd) && !isOpen(pPager->sjfd) ,5,3,8
 (int)pWal->szPage==szPage ,5,3,8
 pPager->eState==PAGER_OPEN || pbOpen ,5,3,8
pCsr->pNode,4,4,8
 compatible[RTREE_GE & 7]==2 ,4,4,8
 rc==SQLITE_OK || iHash>0 ,5,3,8
ht->nInternalPointer != &pos || GC_REFCOUNT(ht) == 1,4,4,8
 pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVTable ,5,3,8
 iCol<pTab->nCol ,5,3,8
 rcauth==SQLITE_OK || rcauth==SQLITE_DENY || rcauth==SQLITE_IGNORE ,5,3,8
 (PAGER_JOURNALMODE_OFF & 5)!=1 ,5,3,8
 pInode->pNext->pPrev==pInode ,5,3,8
 !isRowid ,5,3,8
 (nByte&0x00000007)==0 ,5,3,8
" hasSharedCacheTableLock(pCsr->pBtree, pCsr->pgnoRoot, 0, 2) ",5,3,8
 nLeft>0 && nRight>0 ,5,3,8
 eMode==PAGER_JOURNALMODE_QUERY || eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_TRUNCATE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF || eMode==PAGER_JOURNALMODE_MEMORY ,4,4,8
" db==0 || sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",5,3,8
 nEntry==idx ,5,3,8
 winSysInfo.dwAllocationGranularity>0 ,5,3,8
 EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(journalFileSize)) ,5,3,8
 pPager->journalOff==JOURNAL_HDR_SZ(pPager) || !pPager->journalOff ,5,3,8
 pName2!=0 || pName1==0 ,5,3,8
 pCsr->pNode==pRoot ,4,4,8
 pTab->pVTable==p && p->pNext==0 ,5,3,8
 pSrcList && pSrcList->nSrc==1 ,5,3,8
 pPager->eState!=PAGER_OPEN ,5,3,8
 pTab->iPKey<0 || pExpr->iColumn!=pTab->iPKey ,5,3,8
 idx+sz <= (int)pPage->pBt->usableSize ,5,3,8
 wrFlag==0 || p->inTrans==TRANS_WRITE ,5,3,8
 pAlias!=0 ,5,3,8
 pTerm->op==TK_INTEGER ,4,4,8
 pPage->childPtrSize==4 ,6,2,8
 isOpen(pPager->sjfd) || pPager->nSubRec==0 ,5,3,8
 pPager->changeCountDone==0 || pPager->eLock>=RESERVED_LOCK ,5,3,8
 eFileLock==NO_LOCK ,5,3,8
 regOld==0 && regNew!=0 ,5,3,8
 pPager->noSync==0 && !MEMDB ,4,4,8
 (pLoop->wsFlags & WHERE_VIRTUALTABLE)==0 ,6,2,8
 pWal->nWiData>walFramePage(pWal->hdr.mxFrame) ,5,3,8
 sqlite3_mutex_notheld(pcache1.mutex) ,5,3,8
 db->nStatement>0 ,5,3,8
" iDb==sqlite3SchemaToIndex(db, pIdx->pSchema) ",5,3,8
 p->aList==&aList[iList&~((2<<iSub)-1)] ,5,3,8
 pExpr->pTab && j<pExpr->pTab->nCol ,5,3,8
 op>=0 && op<ArraySize(statMutex) ,8,0,8
 p->journalMode==PAGER_JOURNALMODE_OFF || p->useJournal ,5,3,8
 u.cj.pCur->pVtabCursor ,4,4,8
 pPager->tempFile==0 || eMode!=PAGER_JOURNALMODE_WAL ,5,3,8
 start<=iLast ,4,4,8
 p->op==RTREE_MATCH ,4,4,8
 pLock->eLock==READ_LOCK || pLock->pBtree==p ,5,3,8
 !pPager->dbModified ,4,4,8
 !pPager->aSavepoint && !pPager->pInJournal ,5,3,8
 pParent->pHaving==0 ,5,3,8
 pFrom->a[0].pOn==0 ,5,3,8
 pbOpen!=0 || (!pPager->tempFile && !pPager->pWal) ,5,3,8
 !db || pRet ,5,3,8
 iVersion==1 || iVersion==2 ,5,3,8
 pPager->state <= PAGER_SHARED ,4,4,8
 iSrcPg!=PENDING_BYTE_PAGE(p->pSrc->pBt) ,5,3,8
 HASHTABLE_NPAGE==(1<<(ArraySize(aSub)-1)) ,5,3,8
 pWal->exclusiveMode!=WAL_HEAPMEMORY_MODE || op==-1 ,5,3,8
 pSchema ,5,3,8
 pPager->dbSize>=nPage ,5,3,8
 pMem->zMalloc ,5,3,8
 u.ci.pModule->xColumn ,4,4,8
 pFile->pShm==0 ,5,3,8
 (u.ch.pQuery->flags&MEM_Int)!=0 && u.ch.pArgc->flags==MEM_Int ,4,4,8
 OP_ShiftRight==OP_ShiftLeft+1 ,5,3,8
 pList==0 || IsVirtual(pTab)==0 ,5,3,8
 isDirectMode==0 ,5,3,8
 pToken->n<=nToken ,4,4,8
GC_TYPE(func->common.prototype) == IS_OBJECT,4,4,8
 p1>=0 && p2>=0 ,5,3,8
 pParse->pTriggerTab && pParse->pToplevel ,5,3,8
 pPager->mxPgno>=pPager->dbSize ,5,3,8
 sqlite3PagerIswriteable(pPage1->pDbPage) ,5,3,8
 pPage->pLruPrev==0 && pPage->pLruNext==0 ,5,3,8
 pSelect!=0 ,5,3,8
 pPager->pWal==0 || rc==SQLITE_OK ,5,3,8
 PAGER_JOURNALMODE_MEMORY==4 ,5,3,8
 p->op==TK_INTERSECT ,5,3,8
 p->pSchema!=0 ,5,3,8
 pPager->aHash[h]==pPg ,3,5,8
 PAGER_JOURNALMODE_TRUNCATE==3 ,5,3,8
 handleNFSUnlock==0 ,5,3,8
 pBt->usableSize>32 ,5,3,8
 cbrk+size<=usableSize && cbrk>=iCellFirst ,5,3,8
 nSize==debuginfo.nSize ,4,4,8
 pcache1.nFreeSlot<=pcache1.nSlot ,5,3,8
 pSrc->nSrc>0 ,5,3,8
 iStart>=0 ,5,3,8
 pPager->state==PAGER_UNLOCK || sqlite3PcacheRefCount(pPager->pPCache)>0 || pgno==1 ,4,4,8
 (pIdxKey==0)==(pCur->pKeyInfo==0) ,5,3,8
 pCur->iPage==0 ,4,4,8
 (piTab==0)==(piCol==0) ,5,3,8
 iValue>=0 ,5,3,8
 p && p->pPrior ,5,3,8
 p->usesStmtJournal ,5,3,8
 pChanged ,5,3,8
 MAX_SECTOR_SIZE>=512 ,5,3,8
 pTab==tableOfTrigger(pTrigger) ,4,4,8
 pA->pNext==0 || pA->v<=pA->pNext->v ,4,4,8
 sqlite3PagerIswriteable(pBt->pPage1->pDbPage) ,5,3,8
pParse->nTab==1,5,3,8
 p->iTable>=0 ,5,3,8
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE || nNumberOfBytesToUnlockLow == 1,5,3,8
 sqlite3BtreeHoldsMutex(p->pSrc) ,5,3,8
 u.bm.pC!=0 ,4,4,8
 iPage==0 || *ppPage || rc!=SQLITE_OK ,5,3,8
 op==TK_CASE ,5,3,8
 PAGER_JOURNALMODE_DELETE==0 ,5,3,8
 pE->pLeft!=0 ,5,3,8
 page0 || pWal->writeLock==0 ,5,3,8
 pageInJournal(pPg) || pPg->pgno>pPager->origDbSize ,4,4,8
 nExtra>=1 ,5,3,8
 pCol->affinity-SQLITE_AFF_TEXT < ArraySize(azType) ,4,4,8
 u.bc.pC!=0 ,4,4,8
 (pPg->flags&PGHDR_NEED_SYNC)==0 ,5,3,8
 (iHash==0 || iFrame>HASHTABLE_NPAGE_ONE) && (iHash>=1 || iFrame<=HASHTABLE_NPAGE_ONE) && (iHash<=1 || iFrame>(HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE)) && (iHash>=2 || iFrame<=HASHTABLE_NPAGE_ONE+HASHTABLE_NPAGE) && (iHash<=2 || iFrame>(HASHTABLE_NPAGE_ONE+2*HASHTABLE_NPAGE)) ,5,3,8
 sqlite3_value_type(argv[1])==SQLITE_NULL || sqlite3_context_db_handle(context)->mallocFailed ,5,3,8
p && p->eType==FTSQUERY_PHRASE ,4,4,8
 checkSavepointCount(db) ,5,3,8
 createFlag==1 || createFlag==0 ,4,4,8
 p->op==TK_UNION ,5,3,8
 pRoot->nOverflow>0 ,5,3,8
 k<=n ,5,3,8
 pCur->apPage[pCur->iPage]->leaf ,5,3,8
 pNode->pNext==0 ,5,3,8
 pInode->pPrev->pNext==pInode ,5,3,8
 sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex() : sqlite3MallocMutex()) ,8,0,8
 pParent->nOverflow==0 || pParent->nOverflow==1 ,5,3,8
 p->iReg==0 || p->iTable!=iTab || p->iColumn!=iCol ,5,3,8
 pc>=iCellFirst && pc<=iCellLast ,5,3,8
 pParse->pTriggerTab==0 ,5,3,8
 cbrk>=iCellFirst ,5,3,8
 (pPager->eLock>=locktype) || (pPager->eLock==NO_LOCK && locktype==SHARED_LOCK) || (pPager->eLock==RESERVED_LOCK && locktype==EXCLUSIVE_LOCK) ,5,3,8
 pSrc->a!=0 ,4,4,8
 (p->btreeMask & (((yDbMask)1)<<pOp->p5))!=0 ,4,4,8
 !pTrigger ,5,3,8
 pbegin <= (int)pPage->pBt->usableSize-4 ,4,4,8
 next==0 || rc==SQLITE_DONE ,5,3,8
 zSrcData ,5,3,8
 z && zName ,5,3,8
pPgnoNext,5,3,8
 sqlite3PagerPageRefcount(pData)>0 ,5,3,8
 pFrom->zErrMsg==0 || pFrom->nErr ,5,3,8
 !p->pGroupBy ,5,3,8
 pList!=0 || db->mallocFailed!=0 ,5,3,8
 pCsr->apPage[pCsr->iPage]->intKey ,5,3,8
 pLock->iTable!=1 || pLock==&p->lock ,5,3,8
 p->nMem>9 ,5,3,8
 yymsp[-1].minor.yy473!=0 ,5,3,8
 ((p->pBt->nPage)&0x8000000)==0 ,5,3,8
 iStatement>p->db->nSavepoint ,5,3,8
 pPager->nSavepoint>0 ,5,3,8
 p->eLock!=PENDING_LOCK ,5,3,8
 WAL_ALL_BUT_WRITE==WAL_WRITE_LOCK+1 ,5,3,8
 sqlite3_mutex_held(pFile->mutex) || pFile->nRef==0 ,5,3,8
 pDest->flags==MEM_Null ,4,4,8
 pB!=0 ,5,3,8
 u.bg.pC->rowidIsValid==0 ,4,4,8
 ppStmt && *ppStmt==0 ,5,3,8
" !hasReadConflicts(pCsr->pBtree, pCsr->pgnoRoot) ",5,3,8
 i>=0 && i<mem5.nBlock ,7,1,8
 isNew==1 || isNew==0 ,5,3,8
 u.ch.pCur->pVtabCursor ,4,4,8
 OP_SeekGt == OP_SeekLt+3 ,4,4,8
convert == 1 || convert == 0,4,4,8
 (isSavepnt&~1)==0 ,5,3,8
 nCell<200 ,6,2,8
 p->pInode==pFd->pInode ,5,3,8
 compatible[RTREE_LT & 7]==1 ,4,4,8
 pStep->op==TK_SELECT ,5,3,8
 pExpr->iTable==0 || pExpr->iTable==1 ,5,3,8
 p->rc==SQLITE_OK || p->rc==SQLITE_BUSY || p->rc==SQLITE_NOMEM ,5,3,8
 pWriter ,4,4,8
 (flags&0xff)==flags ,5,3,8
 pWal->readLock<0 ,5,3,8
 ppHead==&pPage->pCache->pClean || ppHead==&pPage->pCache->pDirty ,4,4,8
 eLock==SHARED_LOCK || eLock==RESERVED_LOCK || eLock==EXCLUSIVE_LOCK ,5,3,8
 pBt->nPage!=PENDING_BYTE_PAGE(pBt) ,5,3,8
 pSem ,5,3,8
" get4byte(findCell(pParent, iIdx))==iChild ",5,3,8
 isOpen(pPager->fd) || pPager->exclusiveMode ,5,3,8
 pOp->opcode==OP_Eq || pOp->opcode==OP_Ne ,5,3,8
 p->pParent->pRight==p ,4,4,8
 encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE ,5,3,8
 pPager->state>=PAGER_SHARED && !MEMDB ,4,4,8
 !p->pUnused ,5,3,8
 (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) ,5,3,8
 !aPgno[idx] ,5,3,8
 u.be.pC->rowidIsValid==0 ,4,4,8
 !pPager->tempFile && isOpen(pPager->fd) ,5,3,8
 pPrior<pPage->aData || pPrior>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,5,3,8
 p->locked==1 ,5,3,8
 pCur->apPage[pCur->iPage]->nCell>0 ,5,3,8
 iLeft<iRight ,5,3,8
 rc==SQLITE_CORRUPT ,5,3,8
 pFKey->isDeferred==0 || pFKey->isDeferred==1 ,5,3,8
 pgszSrc==sqlite3BtreeGetPageSize(p->pSrc) ,5,3,8
 rc==SQLITE_OK || p->pStmt==0 ,5,3,8
 (PAGER_JOURNALMODE_MEMORY & 5)==4 ,5,3,8
 sqlite3_vfs_find(0)==pMain ,4,4,8
 top+nByte <= (int)pPage->pBt->usableSize ,5,3,8
 pPage->leaf || !pPage->intKey ,5,3,8
 pPage->isPinned==0 ,7,1,8
 (p->selFlags & SF_Resolved)==0 ,5,3,8
 iLeft>=nLeft || aContent[aLeft[iLeft]]>dbpage ,5,3,8
 eLock!=NO_LOCK || pagerUseWal(pPager)==0 ,5,3,8
 rc==SQLITE_BUSY || rc==SQLITE_OK || rc==SQLITE_ERROR ,5,3,8
" !ExprHasProperty(sAggInfo.aFunc[i].pExpr, EP_xIsSelect) ",5,3,8
 iPage>0 ,5,3,8
 pDest->eDest==SRT_Output ,5,3,8
 !pSubParse->pAinc && !pSubParse->pZombieTab ,5,3,8
 p->pCache->pGroup==pGroup ,5,3,8
 pBt->pPage1 && pBt->pPage1->aData ,5,3,8
 u.bi.pC->isTable ,4,4,8
 iSavepoint>=0 || op==SAVEPOINT_ROLLBACK ,5,3,8
 zVal ,2,6,8
 iStatement>0 ,5,3,8
 sqlite3_value_type(argv[1])!=SQLITE_NULL ,5,3,8
" sqlite3SchemaMutexHeld(db, 0, pIndex->pSchema) ",5,3,8
 pPager->state > PAGER_UNLOCK ,4,4,8
 gap+nByte<=top ,5,3,8
 z[n]=='\'' ,5,3,8
 (flags & BTREE_UNORDERED)==0 || (flags & BTREE_SINGLE)!=0 ,5,3,8
 !pSubParse->pTriggerPrg && !pSubParse->nMaxArg ,5,3,8
 sqlite3BtreeHoldsMutex(pBt) ,5,3,8
 pCur->aiIdx[pCur->iPage]==pCur->apPage[pCur->iPage]->nCell-1 ,5,3,8
 pIn1->flags & MEM_Str ,4,4,8
 p->aList && p->nList<=(1<<iSub) ,5,3,8
 compatible[RTREE_EQ & 7]==0 ,4,4,8
 !isFatalError(p->rc) ,5,3,8
 pFunc->nArg==-1 || (pFunc->nArg&0xff)==pFunc->nArg ,5,3,8
 (pKey==0)==(pCur->pKeyInfo==0) ,5,3,8
 nByte>=8 ,5,3,8
common->control_head_ptr != 0,8,0,8
 !withoutRowid ,7,1,8
 pgszDest==sqlite3BtreeGetPageSize(p->pDest) ,5,3,8
 pFile->pInode->nLock>0 || pFile->pInode->bProcessLock==0 ,5,3,8
 (p->btreeMask & (((yDbMask)1)<<pOp->p2))!=0 ,4,4,8
 db->pVdbe==p ,5,3,8
 OP_SeekLe == OP_SeekLt+1 ,4,4,8
 (flags & BTREE_SINGLE)==0 || isTempDb ,5,3,8
 zAbsoluteName[0]=='/' ,5,3,8
 isOpen(pPager->fd) || pPager->noSync ,5,3,8
p->op==RTREE_LE || p->op==RTREE_LT || p->op==RTREE_GE || p->op==RTREE_GT || p->op==RTREE_EQ || p->op==RTREE_MATCH ,4,4,8
 pTab && pExpr->pTab==pTab ,5,3,8
 pCur->cachedRowid==iRowid ,4,4,8
 rc!=SQLITE_OK || pPager->eState==PAGER_WRITER_LOCKED ,5,3,8
" sqlite3SchemaMutexHeld(db, idx, 0) ",5,3,8
 compatible[RTREE_LE & 7]==1 ,4,4,8
 pTo->nVar==pFrom->nVar ,5,3,8
 pSrc->a[iLeft].pTab ,5,3,8
 p->pgno < p->pDirty->pgno ,5,3,8
 pgno<=pBt->nPage ,5,3,8
 leafCur.aiIdx[leafCur.iPage]==0 ,4,4,8
 p->iAddr<nOp ,5,3,8
 pWal->ckptLock && pWal->hdr.mxFrame>0 ,5,3,8
 db->nStatement==0 ,5,3,8
" pCol->affinity==SQLITE_AFF_NONE || pCol->affinity==sqlite3AffinityType(zType, 0) ",5,3,8
 sqlite3PagerIswriteable(pNew->pDbPage) ,5,3,8
 rc!=SQLITE_OK || pPage->nCell>0 || pPage->nOverflow>0 ,5,3,8
 sizeof(p)==sizeof(v2) ,3,5,8
 (pChunk->aCtrl[i] & CTRL_LOGSIZE)==iLogsize ,4,4,8
 idx<pPage->nCell ,5,3,8
 (p->btreeMask & (((yDbMask)1)<<p1))!=0 ,4,4,8
 u.cl.nArg>1 && u.cl.apArg[0] && (u.cl.apArg[0]->flags&MEM_Null) ,4,4,8
 winShmMutexHeld() ,5,3,8
 (PAGER_JOURNALMODE_MEMORY & 5)!=1 ,5,3,8
 OP_SeekGe == OP_SeekLt+2 ,4,4,8
 pPage->iKey==iOld ,5,3,8
 rc!=SQLITE_OK || pPager->journalOff>=szJ ,5,3,8
 p->inTrans!=TRANS_NONE ,5,3,8
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD || pPager->eState==PAGER_ERROR ,5,3,8
 pTo->zErrMsg==0 || pTo->nErr ,5,3,8
 pSrc->nSrc>iRight ,5,3,8
 0==(1&SQLITE_PTR_TO_INT(pVal->z)) ,5,3,8
 pTrigger || tmask==0 ,5,3,8
 pPager->dbSize==pPager->dbOrigSize ,5,3,8
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_FINISHED || (pagerUseWal(pPager) && pPager->eState==PAGER_WRITER_CACHEMOD) ,5,3,8
 isDirect==0 ,4,4,8
 pCur!=0 && pCur->iPage>=0 && pCur->apPage[pCur->iPage],5,3,8
 p->sharable==0 || p->locked==0 || p->db==p->pBt->db ,5,3,8
 !pPager->pTmpSpace ,4,4,8
 (pPage->flags&PGHDR_DIRTY)==0 ,4,4,8
(arg & SLJIT_MEM) && (next_arg & SLJIT_MEM),8,0,8
 rc==SQLITE_OK || !MEMDB ,5,3,8
 iRight>=nRight || aContent[aRight[iRight]]>dbpage ,5,3,8
" sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",5,3,8
 pPager->eState>=PAGER_WRITER_CACHEMOD || (pPager->eState==PAGER_OPEN && pPager->eLock==EXCLUSIVE_LOCK) ,5,3,8
 newPgno>0 ,5,3,8
 pOp->p4type==P4_INTARRAY ,5,3,8
 rc!=0 || !zName || (pColName->flags&MEM_Term)!=0 ,5,3,8
 zCsr==&((u8 *)pBuf)[amt] ,2,6,8
 pPager->eState!=PAGER_READER ,5,3,8
zval_ptr != &EG(uninitialized_zval),4,4,8
 rc!=SQLITE_OK || isOpen(pFile) ,5,3,8
 autoInc==0 || autoInc==1 ,5,3,8
 pWal->apWiData[walFramePage(pWal->hdr.mxFrame)] ,5,3,8
 rc!=SQLITE_ROW && rc!=SQLITE_DONE ,5,3,8
 pPager->eState>=PAGER_WRITER_CACHEMOD || isMainJrnl ,5,3,8
 memIsValid(pIn2) ,5,3,8
 *pRes==0 || *pRes==1 ,6,2,8
EX(opline) == opline,4,4,8
 pOp->opcode==OP_Noop || pOp->opcode==OP_Explain ,5,3,8
 (PAGER_JOURNALMODE_DELETE & 5)!=1 ,5,3,8
 (*ppLast)->pRight==0 ,5,3,8
 badHdr==0 || pWal->writeLock==0 ,5,3,8
 p->eState!=PAGER_ERROR && p->eState!=PAGER_OPEN ,5,3,8
 regRow!=pDest->iMem+i ,4,4,8
 iRead==iRead2 ,5,3,8
 pcache1.isInit!=0 ,5,3,8
nKeyLength != 0,4,4,8
 !memDb ,5,3,8
 p->apSave[0]==0 && p->apSave[1]==0 ,4,4,8
 pOffset == 0 ,5,3,8
 nSrcPage>=0 ,5,3,8
 pOp->p2!=0 ,5,3,8
 pParse==pWalker->pParse ,5,3,8
 EIGHT_BYTE_ALIGNMENT(pPager->jfd) ,5,3,8
 mem1.szMalloc==0 ,8,0,8
((zend_uintptr_t)ZCG(mem) & 0x7) == 0,7,1,8
 pTab && !pTab->pSelect && pExpr ,5,3,8
 argc>1 ,5,3,8
 pB->pRight==0 || pB->v<=pB->pRight->v ,5,3,8
 pPayload<pPage->aData || pPayload>=&pPage->aData[pBt->pageSize] || sqlite3PagerIswriteable(pPage->pDbPage) ,5,3,8
 iLastPg>nFin ,5,3,8
 eOp==SAVEPOINT_ROLLBACK || eOp==SAVEPOINT_RELEASE,5,3,8
 pCur->aiIdx[ii]==pCur->apPage[ii]->nCell ,5,3,8
 pB==0 || pB->pRight==0 || pB->v<=pB->pRight->v ,5,3,8
 u.cj.pModule->xNext ,4,4,8
" sqlite3MemdebugNoType(p, MEMTYPE_DB) ",4,4,8
 (start + size) <= (int)pPage->pBt->usableSize ,4,4,8
 h>='A' && h<='F' ,3,5,8
 (pTerm->flags & EP_IntValue)!=0 ,4,4,8
 rc!=SQLITE_OK || isOpen(pPager->fd) ,5,3,8
 pExpr->u.zToken[0]!=0 ,5,3,8
" !hasReadConflicts(p, pCur->pgnoRoot) ",5,3,8
 nReserve>=0 && nReserve<=255 ,5,3,8
 pBlob->pStmt || db->mallocFailed ,5,3,8
 eLock==READ_LOCK || (p==pBt->pWriter && p->inTrans==TRANS_WRITE) ,5,3,8
 p->bDestLocked ,5,3,8
 state==PAGER_OPEN || state==PAGER_READER ,5,3,8
 (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 ,5,3,8
 pExpr->u.zToken!=0 ,5,3,8
 pBt->usableSize > 4 ,5,3,8
 zCol ,5,3,8
 iMin<0xffffffff ,5,3,8
" !usedAsColumnCache(pParse, i, i+n-1) ",5,3,8
 iDb==1 ,5,3,8
 p->addrOpenVirt[0] == -1 ,4,4,8
 !pMemPage || pMemPage->pgno==iPage ,5,3,8
 aMerge==aList ,5,3,8
 apVfs[i]==sqlite3_vfs_find(apVfs[i]->zName) ,4,4,8
 pItem->zName==0 ,5,3,8
 op==TK_INSERT || op==TK_UPDATE || op==TK_DELETE ,5,3,8
 pMem->db->mallocFailed || flags&(MEM_Str|MEM_Blob) ,5,3,8
 nCell<=nMaxCell ,5,3,8
 pagerUseWal(pPager)==0 || (!isMainJrnl && isSavepnt) ,5,3,8
 db->mallocFailed || !pOffset || pLimit ,4,4,8
 eFileLock==RESERVED_LOCK || eFileLock==EXCLUSIVE_LOCK ,5,3,8
 pPager->eLock==NO_LOCK || pPager->eLock==UNKNOWN_LOCK ,5,3,8
 pPager->eState>=PAGER_READER && pPager->eState<PAGER_ERROR ,5,3,8
 azCols[i]!=0 ,5,3,8
 encnames[SQLITE_UTF8].enc==SQLITE_UTF8 ,5,3,8
" p->op!=TK_INTEGER || (p->flags & EP_IntValue)!=0 || sqlite3GetInt32(p->u.zToken, &rc)==0 ",5,3,8
 (pPager->eLock==SHARED_LOCK) || (pPager->exclusiveMode && pPager->eLock>SHARED_LOCK) ,5,3,8
" SQLITE_OK==querySharedCacheTableLock(p, MASTER_ROOT, READ_LOCK) ",5,3,8
 p1>=0 && p1<(pTab->nCol*2+2) ,5,3,8
 (regOld==0)!=(regNew==0) ,5,3,8
 !paiCol || *paiCol==0 ,5,3,8
 (pSelect->selFlags & SF_Resolved)!=0 ,5,3,8
 aOp && !p->db->mallocFailed ,5,3,8
 (p->locked==0 && p->sharable) || p->pBt->db==p->db ,5,3,8
 pOld==pIndex || pOld==0 ,5,3,8
 jrnlOpen==0 || ( sqlite3OsDeviceCharacteristics(pPager->jfd) & SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN ),5,3,8
 iCol>=-1 && iCol<32768 ,5,3,8
 p->pRightmost!=p ,4,4,8
 rc!=SQLITE_BUSY && rc!=SQLITE_LOCKED ,5,3,8
 pTab!=0 && pTab->zName!=0 ,5,3,8
 pInode->nLock==0 ,5,3,8
 pParent!=p ,5,3,8
 pFrom->a[0].pUsing==0 ,5,3,8
 p->inTrans>TRANS_NONE && pBt->inTransaction>TRANS_NONE ,5,3,8
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->db->mutex) ,5,3,8
 nReserve>=-1 && nReserve<=255 ,5,3,8
 pExpr->op==TK_COLUMN || pExpr->op==TK_TRIGGER ,5,3,8
 nIncr==1 ,5,3,8
 pgno!=0 || rc==SQLITE_CORRUPT ,5,3,8
GC_TYPE(fbc->common.prototype) == IS_OBJECT,4,4,8
 pTos->flags & (MEM_Str|MEM_Blob) ,2,6,8
 pParent==p ,5,3,8
 (db->flags & SQLITE_Initialized)==0 ,3,5,8
 pParent->pGroupBy==0 ,5,3,8
 p->selFlags & SF_Resolved ,5,3,8
 i>=0 && i<p->db->nDb && i<(int)sizeof(yDbMask)*8 ,5,3,8
 pExpr->op==TK_EXISTS || pExpr->op==TK_SELECT ,5,3,8
 pOrig!=0 ,5,3,8
 pagerUseWal(pPager)==0 || szJ==0 ,5,3,8
 p->sharable==0 || p->locked==0 || sqlite3_mutex_held(p->pBt->mutex) ,5,3,8
 200==sqlite3LogEst(1048576) ,8,0,8
 v->aVar[0].flags&MEM_Int ,5,3,8
 p->nList<=(1<<iSub) ,5,3,8
 iIdx<=pParent->nCell ,5,3,8
 nBytes>=0 ,8,0,8
 !pBt->pWriter ,5,3,8
 iStart<=pSrc->nSrc ,5,3,8
nNumberOfBytesToUnlockLow == (DWORD)SHARED_SIZE,5,3,8
 pPager->eState>=PAGER_READER && pPager->eState!=PAGER_ERROR ,4,4,8
 !isOpen(pJournal) ,5,3,8
 b.rc!=SQLITE_OK ,5,3,8
 (PAGER_JOURNALMODE_DELETE & 5)==0 ,5,3,8
 sqlite3PagerRefcount(pBt->pPager)==1 ,5,3,8
 pParse->iCacheLevel>=N ,4,4,8
 pIndexedBy!=0 ,5,3,8
 pWal->ckptLock==0 ,5,3,8
 p->pDestDb ,5,3,8
 isOpen(pPager->jfd) || pPager->pInJournal==0 ,5,3,8
 inodeList==pInode ,5,3,8
 pPager->errCode || pPager->eState!=PAGER_ERROR ,5,3,8
 rc!=SQLITE_SCHEMA ,5,3,8
 (pList->flags&PGHDR_NEED_SYNC)==0 ,5,3,8
 pPager->journalMode==PAGER_JOURNALMODE_WAL ,5,3,8
 yymsp[-2].minor.yy473!=0 ,5,3,8
 pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) ,5,3,8
 pCache->nPage==nPage ,5,3,8
 pNew->pInode==NULL ,5,3,8
 pLock->pBtree->inTrans>=pLock->eLock ,5,3,8
 !zName || xDel!=SQLITE_DYNAMIC ,5,3,8
 (PAGER_JOURNALMODE_OFF & 5)==0 ,5,3,8
 (p->flags&falseMask)==0 ,4,4,8
 pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921 ,4,4,8
 pPager->dbOrigSize<=pPager->dbHintSize ,5,3,8
 get4byte(&pParent->aData[pParent->hdrOffset+8])==iChild ,5,3,8
 action==OE_None ,5,3,8
 pagerUseWal(p)==0 ,5,3,8
 z[0]!=0 ,5,3,8
 nExtra>=nColl ,5,3,8
 pVTab->nRef>0 ,5,3,8
 pParse->iCacheLevel==0 ,5,3,8
 pBt->nPage>0 ,5,3,8
 size>=0 ,4,4,8
 pCsr->eState!=CURSOR_REQUIRESEEK ,5,3,8
 useJournal || pPager->tempFile ,5,3,8
 !isSavepnt ,5,3,8
has_alternatives,8,0,8
 pPage->nOverflow==1 ,5,3,8
 pPager->eLock>=eLock ,5,3,8
 (p->selFlags & SF_Expanded)!=0 ,5,3,8
 u.bq.pC->isTable==0 ,4,4,8
 pOut->flags & MEM_Dyn ,4,4,8
 isSavepnt || pDone==0 ,5,3,8
 pOp->p4.ai ,5,3,8
 pPager->pWal==0 && pPager->tempFile==0 ,5,3,8
 pNextTo->pPrevTo==0 ,5,3,8
 flags==EXPRDUP_REDUCE || flags==0 ,5,3,8
 EIGHT_BYTE_ALIGNMENT(aSpace1) ,5,3,8
 pMain==0 || pMain==sqlite3_vfs_find(0) ,4,4,8
 p->eLock>=EXCLUSIVE_LOCK ,5,3,8
 iCol>=0 && iCol<pEList->nExpr ,5,3,8
 u.br.pC->deferredMoveto==0 ,4,4,8
 db->flags&SQLITE_CountRows ,5,3,8
 u<=pKeyInfo->nField + 1 ,5,3,8
 pOp->opcode==OP_InsertInt ,5,3,8
 rc==SQLITE_OK || rc==SQLITE_LOCKED_SHAREDCACHE ,5,3,8
 pWal->exclusiveMode==0 ,5,3,8
 pOp->p2==0 ,3,5,8
 desiredEnc==SQLITE_UTF8 || desiredEnc==SQLITE_UTF16LE || desiredEnc==SQLITE_UTF16BE ,5,3,8
VALID(self->OutStream),4,4,8
 pItem && pSrc->nSrc==1 ,5,3,8
 sqlite3_mutex_held(p->pGroup->mutex) ,5,3,8
 u.ck.pName->flags & MEM_Str ,4,4,8
 eOld==PAGER_JOURNALMODE_MEMORY || eOld==PAGER_JOURNALMODE_OFF ,5,3,8
 WAL_CKPT_LOCK==WAL_ALL_BUT_WRITE ,5,3,8
 zFile[0]!=0 ,5,3,8
 nByte>=0 ,5,3,8
 p->pgno>0 ,5,3,8
 pCol->affinity-SQLITE_AFF_TEXT >= 0 ,4,4,8
 pC->intKey==0 ,4,4,8
 pPager->eState==PAGER_WRITER_LOCKED || pPager->eState==PAGER_WRITER_CACHEMOD || pPager->eState==PAGER_WRITER_DBMOD ,5,3,8
 isMainJrnl || pDone ,5,3,8
 iSavepoint>=0 || (iSavepoint==-1 && op==SAVEPOINT_ROLLBACK) ,5,3,8
 p->iStatement==(db->nStatement+db->nSavepoint) ,5,3,8
 nList<=HASHTABLE_NPAGE && nList>0 ,5,3,8
 pIn!=0 ,5,3,8
 p->tempFile==0 || p->eLock==EXCLUSIVE_LOCK ,5,3,8
 compatible[RTREE_GT & 7]==2 ,4,4,8
 pOut->zMalloc==pOut->z ,4,4,8
 sqlite3_mutex_held(pShmNode->mutex) || pShmNode->nRef==0 ,5,3,8
" !ExprHasProperty(pE, EP_xIsSelect) ",5,3,8
 iLimit>0 ,5,3,8
 p->pRight!=0 ,4,4,8
" !ExprHasProperty(pColExpr, EP_IntValue) ",5,3,8
 !subjRequiresPage(pPg) || pPg->pgno<=pPg->pPager->dbSize ,5,3,8
 eMode>=0 && eMode<=ArraySize(azModeName) ,5,3,8
 j==0 || j>i+size ,5,3,8
 db->mallocFailed || pItem->pExpr==pSpan->pExpr ,5,3,8
" strcmp(pDb->zName,""vacuum_db"")==0 ",5,3,8
 pList!=0 || pParse->db->mallocFailed!=0 ,5,3,8
 p->lock.pBtree==p && p->lock.iTable==1 ,5,3,8
" sqlite3MemdebugHasType(p, MEMTYPE_DB|MEMTYPE_HEAP) ",4,4,8
 (rc&0xff)!=SQLITE_BUSY ,5,3,8
 zVal[nVal]=='\'' ,5,3,8
 !pPager->exclusiveMode || pPager->eLock==eLock ,5,3,8
 iFromCol>=0 ,5,3,8
 pPg || !MEMDB ,5,3,8
 pOld->hdrOffset==0 ,5,3,8
 p->rc!=SQLITE_IOERR_BLOCKED ,4,4,8
 rc==SQLITE_OK || pPager->eState==PAGER_READER ,5,3,8
 (&p[1])==pEnd || p[0].db==p[1].db ,5,3,8
 pbOpen==0 || *pbOpen==0 ,5,3,8
" !ExprHasProperty(pE->pLeft, EP_IntValue) ",5,3,8
 pCur->apPage[0]==pPage ,4,4,8
 u.an.pDest->flags&MEM_Null ,4,4,8
 pMem->u.pRowSet!=0 ,5,3,8
 pExpr->iColumn>=-1 && pExpr->iColumn<pTab->nCol ,5,3,8
 pInode!=0 ,5,3,8
 pPager->eState>=PAGER_READER && !MEMDB ,5,3,8
 p->tempFile==0 || pPager->changeCountDone ,5,3,8
" db==0 || sqlite3SchemaMutexHeld(db, 0, p->pSchema) ",5,3,8
 (pTrigger && tmask) || (pTrigger==0 && tmask==0) ,5,3,8
 pPager->eState==PAGER_READER || rc!=SQLITE_OK ,5,3,8
 info.nData==(u32)(nData+nZero) ,4,4,8
 nOrderBy>=nExpr || db->mallocFailed ,5,3,8
 pDatabase==0 || pTable!=0 ,5,3,8
 (wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 ,5,3,8
 !isView ,5,3,8
 p->pOffset==0 || p->pLimit!=0 ,5,3,8
 (p->selFlags & SF_Aggregate)==0 ,5,3,8
 PAGER_JOURNALMODE_OFF==2 ,5,3,8
 iCol==nField-1 ,6,2,8
 db->pSavepoint || db->isTransactionSavepoint==0 ,5,3,8
 p->noSync ,5,3,8
 pPager->exclusiveMode || 0==sqlite3WalHeapMemory(pPager->pWal) ,5,3,8
 !(p->db->flags&SQLITE_ReadUncommitted)||eLock==WRITE_LOCK||iTab==1 ,5,3,8
 UNIX_SHM_BASE==WALINDEX_LOCK_OFFSET ,5,3,8
 pKeyDup==0 ,5,3,8
 pSrc->a[iRight].pTab ,5,3,8
 pFKey->nCol==1 || (aiFree && pIdx) ,5,3,8
 *pp==pId ,5,3,8
 pTop->pVdbe ,5,3,8
 (op==TK_UPDATE)==(pChanges!=0) ,5,3,8
 pC->movetoTarget==iKey ,5,3,8
 N >= ROUND8(sizeof(*p)) ,5,3,8
 pPager->errCode!=SQLITE_OK ,5,3,8
 (pDest->tabFlags & TF_Autoincrement)==0 ,5,3,8
 pCache->bPurgeable || (pCache->nMax==0 && pCache->nMin==0) ,5,3,8
 pExpr->x.pList==0 ,5,3,8
 (isMainJrnl&~1)==0 ,5,3,8
 zWalName && zWalName[0] ,5,3,8
 pCur->eState==CURSOR_VALID || (pCur->eState==CURSOR_INVALID && loc) ,5,3,8
 PAGER_JOURNALMODE_PERSIST==1 ,5,3,8
 WIN_SHM_BASE==WALINDEX_LOCK_OFFSET ,5,3,8
 pPgHdr==0 || rc==SQLITE_OK ,5,3,8
 sqlite3_mutex_notheld(p->pBt->mutex) ,5,3,8
 pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0) == (int)sqlite3VdbeSerialTypeLen(serial_type) ,5,3,8
 argc==1 || p==0 || p->n>0x7fffffff || p->n==sqlite3_aggregate_count(context) ,5,3,8
 pWal->readLock>=0 || (op<=0 && pWal->exclusiveMode==0) ,5,3,8
 pPager->eState==PAGER_READER || !pbOpen ,5,3,8
 mem.aPool[i+nBlock-1].u.hdr.prevSize==nBlock ,4,3,7
 n<sizeof(zBuf) ,2,5,7
 pWriter->nTermDistinct>0 ,4,3,7
 pOp->p5==0 ,6,1,7
 pParse->disableColCache==0 ,4,3,7
p->pLruNext || p==sqlite3LruStatements.pLast,4,3,7
 pOp->p2==SQLITE_CHECKPOINT_PASSIVE || pOp->p2==SQLITE_CHECKPOINT_FULL || pOp->p2==SQLITE_CHECKPOINT_RESTART ,4,3,7
 i<pIdx->nSample ,5,2,7
 i<MERGE_COUNT ,4,3,7
 iData+nData<=pWriter->data.nData ,4,3,7
EX(object) == Z_OBJ(EG(This)),4,3,7
 i > mem.aPool[i-1].u.hdr.prevSize ,4,3,7
 db->nVdbeWrite>0 || db->autoCommit==0 || (db->nDeferredCons==0 && db->nDeferredImmCons==0) ,5,2,7
!plrAtEnd(pLeft) || !plrAtEnd(pRight),4,3,7
 mem.szMaster>=nBlock ,4,3,7
"codestart, &temp_options, FALSE",3,4,7
 iBuddy>=0 && iBuddy<NBLOCK ,4,3,7
 nActual<=n ,4,3,7
 !leafReaderAtEnd(pReader) ,4,3,7
 nDestTruncate==0 || (i64)nDestTruncate*(i64)pgszDest >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+pgszDest ),5,2,7
 pWriter->iLastChildBlock==iChildBlock ,4,3,7
 !pMem->xDel ,4,3,7
"DL_DEFAULT, pWriter->data.pData+iDoclistData+n, pWriter->data.nData-iDoclistData-n, NULL",4,3,7
 n==0 ,5,2,7
 zStartAff==0 || sqlite3Strlen30(zStartAff)>=nEq ,5,2,7
 i+size<=SQLITE_MEMORY_SIZE/8+1 ,4,3,7
 aTerm[i].nTerm<=nToken ,4,3,7
 iBlockid==pWriter->iEndBlockid ,4,3,7
 pSavepoint==db->pSavepoint ,5,2,7
 piEndChild!=NULL ,4,3,7
 i==MERGE_COUNT ,4,3,7
 pUnKey==0 ,4,3,7
 mem.currentOut>0 || mem.currentCount==0 ,4,3,7
 pTerm!=NULL ,4,3,7
 sizeof(Mem5Block)==POW2_MIN ,4,3,7
pBuffers!=NULL,4,3,7
 nAddCapacity>0 ,4,3,7
 nSource>0 && pSource!=NULL ,4,3,7
pEList != 0 || pSelect != 0,2,5,7
 (nReserve-1)<=p->iSize || pU8[nReserve-2]==0x65 ,4,3,7
 pOp || pParse->db->mallocFailed ,4,3,7
 pWriter->has_parent ,4,3,7
p->pLruPrev || p==sqlite3LruStatements.pFirst,4,3,7
 !pWriter->has_iPrevDocid || iDocid>pWriter->iPrevDocid ,4,3,7
 sqlite3KeyInfoIsWriteable(pKey) ,5,2,7
 pTos<=&p->aStack[pc] ,2,5,7
 nKeyCol>0 ,6,1,7
 pTos->z==pTos[-pOp->p1].zShort ,2,5,7
 iPos>=pWriter->iPos ,4,3,7
 (pFrom->flags & MEM_Ephem)==0 ,2,5,7
 db->mutex!=0 ,4,3,7
 idxNum<=QUERY_FULLTEXT+v->nColumn,4,3,7
 pPager->pFirstSynced==pPager->pFirst ,2,5,7
 eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF ,4,3,7
 pIdx->nColumn>=1 ,2,5,7
 n+nData<=pReader->nData ,4,3,7
 n1==n2 ,4,3,7
 x<NBLOCK ,4,3,7
 i+size-1<NBLOCK ,4,3,7
 pTo>=p->aStack ,2,5,7
 1+n+nTerm<nData ,4,3,7
 rc==SQLITE_OK || rc==SQLITE_FULL || rc==SQLITE_CORRUPT || rc==SQLITE_NOMEM || (rc&0xFF)==SQLITE_IOERR || rc==SQLITE_CANTOPEN ,5,2,7
 (mem.aPool[i-1].u.hdr.size4x&1)==1 ,4,3,7
 (mem.aCtrl[i] & CTRL_FREE)==0 ,4,3,7
 (SQLITE_POW2_MEMORY_SIZE % POW2_MAX)==0 ,4,3,7
iBuffer<nBuffers && pBuffers[iBuffer].nData==0,4,3,7
 j==nByte ,4,3,7
 z[i] ,5,2,7
"pWriter->data.pData+iData, nData",4,3,7
 pPager->pLast==pPg ,2,5,7
(argv[ap_php_optind][0] == '-') && argv[ap_php_optind][1],3,4,7
 pReader->nData>=0 ,4,3,7
 mallocHasFailed==0 ,3,4,7
 pData!=NULL && nData!=0 ,4,3,7
 pExpr->token.z ,3,4,7
 i==n ,4,3,7
 piStartChild!=NULL ,4,3,7
 r == result + len ,4,3,7
 pLeft->iType==pOut->iType ,4,3,7
 nSource2>0 && pSource2!=NULL ,4,3,7
 i<pKeyInfo->nField ,5,2,7
 memIsValid(pRec) ,6,1,7
 *pData!='\0' ,4,3,7
 iDir==1 || iDir==-1 ,4,3,7
 &pTos[1-cnt] >= p->aStack ,2,5,7
 iStartOffset>=pWriter->iOffset ,4,3,7
 iType!=DL_POSITIONS_OFFSETS ,4,3,7
 isPrefix || *piStartChild==*piEndChild ,4,3,7
 n+nSuffix<=pReader->nData ,4,3,7
 !pWriter->dlw->has_iPrevDocid || iDocid>pWriter->dlw->iPrevDocid ,4,3,7
"pWriter->iType, pData, nData, &iLastDocidDelta",4,3,7
 !leavesReaderAtEnd(pReader) ,4,3,7
 i!=POS_COLUMN ,4,3,7
 pData[0]!='\0' ,4,3,7
 nReaders>0 ,4,3,7
 n+nTerm<=pReader->nData ,4,3,7
 p->nSample==0 || pNew->anLt[p->nCol-1] > p->a[p->nSample-1].anLt[p->nCol-1] ,5,2,7
 pPager->errCode || (pPager->journalOpen==0 && pPager->stmtOpen==0) ,3,4,7
 (wflags & WHERE_ONEPASS_DESIRED)==0 || pWInfo->nLevel==1 ,4,3,7
 pOrderBy==0 ,4,3,7
 pReaders[i].iType==pReaders[0].iType ,4,3,7
 newi > mem.iMaster+1 ,4,3,7
" pagerUseWal(pPager) || pageInJournal(pPager, pPg) || pPg->pgno>pPager->dbOrigSize ",5,2,7
 *pi==i ,4,3,7
 p->iForeGuard==FOREGUARD ,4,3,7
 iNextStart<=iNextEnd ,4,3,7
 2*STANDALONE_MIN<=LEAF_MAX ,4,3,7
 !sqlite3LruStatements.pLast->pLruNext ,4,3,7
 pIndex!=0 ,5,2,7
 p->aOp==0 || p->aOp[p->nOp-1].p3==0 || sqlite3MallocFailed() ,3,4,7
 iDoclistData>=n+nTerm ,4,3,7
 mem.aPool[i-1].u.hdr.size4x/4==nBlock ,4,3,7
 mem.currentCount>0 || mem.currentOut==0 ,4,3,7
 desiredAutoCommit==1 ,5,2,7
 sizeof(Mem)>sizeof(*p) ,4,3,7
 scratchAllocOut==0 ,5,2,7
 (nReserve-2)<=p->iSize || pU8[nReserve-3]==0x65 ,4,3,7
 desiredAutoCommit==1 || desiredAutoCommit==0 ,5,2,7
 pCsr->eCurType==CURTYPE_SORTER ,7,0,7
 pFrom->z==pFrom[1].zShort ,2,5,7
 mem.currentOut>=0 ,4,3,7
 pData[0]=='\0' ,4,3,7
 p1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK ,5,2,7
 SQLITE_POW2_MEMORY_SIZE>=POW2_MAX ,4,3,7
 pInt[nReserve/sizeof(int)]==REARGUARD ,4,3,7
 sizeof(Mem3Block)==8 ,6,1,7
 iEndOffset>=iStartOffset ,4,3,7
 sb->b.nData>0 ,4,3,7
 pTos>=&p->aStack[-1] ,2,5,7
 z!=0 || N==0 ,4,3,7
 iStmt<MAX_STMT ,4,3,7
 nSource1>0 && pSource1!=NULL ,4,3,7
 pWriter->iPos!=-1 ,4,3,7
 idx>=0 && idx<MERGE_COUNT ,4,3,7
 nData>2 ,4,3,7
 iSet==-1 || iSet>=0 ,5,2,7
 p!=0 && (p->rsFlags & ROWSET_NEXT)==0 ,6,1,7
 pWriter->data.nData>iData+1+n+nStartingTerm ,4,3,7
 nCapacity>=0 ,4,3,7
!p->pLruPrev || p->pLruPrev->pLruNext==p,4,3,7
 !sqlite3LruStatements.pLast ,4,3,7
 pTos->flags & MEM_Int ,2,5,7
 n+nSuffix<pReader->nData ,4,3,7
bufstart == NULL,3,4,7
 iLastDocid==iFirstDocid-iDocid+iLastDocidDelta ,4,3,7
 nFirstOld<nData || (nFirstOld==nData && pWriter->iType==DL_DOCIDS) ,4,3,7
 nErr==0 ,4,3,7
 pCur->iPage>=0 ,7,0,7
tr_tm == TK_BEFORE || tr_tm == TK_AFTER ,3,4,7
aType,4,3,7
 argc>=3 ,4,3,7
 iHeight>0 ,4,3,7
 iDummy==0 ,4,3,7
 *pData=='\0' ,4,3,7
 nCellKey>nKey ,4,3,7
max > 0,4,3,7
 iOutType<=iType ,4,3,7
 1+n<=nData ,4,3,7
 iEndChild<=iLeavesEnd ,4,3,7
 nTerm!=0 ,4,3,7
 eType==SQLITE_TEXT || eType==SQLITE_BLOB ,4,3,7
 pCur->eState==CURSOR_REQUIRESEEK ,3,4,7
 *pRc==SQLITE_OK ,6,1,7
 eCall==STAT_GET_STAT1 || eCall==STAT_GET_NEQ || eCall==STAT_GET_ROWID || eCall==STAT_GET_NLT || eCall==STAT_GET_NDLT ,5,2,7
 (nReserve-0)<=p->iSize || pU8[nReserve-1]==0x65 ,4,3,7
 pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem ,4,3,7
 eNew==PAGER_JOURNALMODE_DELETE || eNew==PAGER_JOURNALMODE_TRUNCATE || eNew==PAGER_JOURNALMODE_PERSIST || eNew==PAGER_JOURNALMODE_OFF || eNew==PAGER_JOURNALMODE_MEMORY || eNew==PAGER_JOURNALMODE_WAL || eNew==PAGER_JOURNALMODE_QUERY ,5,2,7
 sqlite3PcachePageSanity(p) ,7,0,7
 p>mem.aPool && p<&mem.aPool[SQLITE_MEMORY_SIZE/8] ,4,3,7
 sqlite3_mutex_held(p->pBt->mutex) ,5,2,7
 pList->dirty ,2,5,7
 iStartChild<=iLeavesEnd ,4,3,7
 n+pWriter->data.nData-iDoclistData<iDoclistData ,4,3,7
 n<iDoclistData ,4,3,7
 p->nOp+nOp<=p->nOpAlloc || p->db->mallocFailed ,4,3,7
 !(sMem.flags&MEM_Dyn) ,4,3,7
 pPager->pFirst==pPg ,2,5,7
 nActualData<=nData ,4,3,7
 pWriter->iType==DL_DOCIDS ,4,3,7
 pQTerm->nPhrase==0 || DL_DEFAULT!=DL_DOCIDS ,4,3,7
 nChunk>=0 ,5,2,7
 pFrom<=pTos && pFrom>=p->aStack ,2,5,7
!sqlite3SafetyCheck(db),2,5,7
 i<n ,4,3,7
 oc==OP_SeekLt || oc==OP_SeekLe ,4,3,7
 *piEndChild>=*piStartChild ,4,3,7
 pOut->iType!=DL_POSITIONS_OFFSETS ,4,3,7
 mem.currentCount>0 ,4,3,7
!p->pLruNext || p->pLruNext->pLruPrev==p,4,3,7
 q - (unsigned char *)p <= VARINT_MAX ,4,3,7
 iData>=0 ,4,3,7
 pWriter->nTermDistinct<=nStartingTerm ,4,3,7
 argv[0]!=0 ,2,4,6
code <= 0xFFU,4,2,6
 pAgg->pFunc->xStep!=0 ,2,4,6
pkey->pkey.rsa != NULL,3,3,6
 !pPager->noSync ,3,3,6
 pCur->eSkip!=SKIP_INVALID ,2,4,6
 iNewLevel>=(iIndex*FTS3_SEGDIR_MAXLEVEL) ,3,3,6
 pStruct->nSegment==fts5StructureCountSegments(pStruct) ,4,2,6
 pKeyInfo->enc==ENC(db) ,6,0,6
 pList!=0 || rc!=SQLITE_OK ,3,3,6
async == 1 || async == 0,3,3,6
thisfilter->abstract != NULL,2,4,6
 nResultCol==1 ,6,0,6
" sqliteStrICmp(pTab->zName, argv[0])==0 ",2,4,6
" sqlite3MemdebugNoType(p, ~MEMTYPE_HEAP) ",3,3,6
substring,3,3,6
 sqlite3_memory_used()==0 ,6,0,6
lockPath!=NULL,4,2,6
 pFd->nFetchOut==0 ,6,0,6
 pTos->flags & MEM_Dyn ,2,4,6
 SQLITE_UTF16LE==2 && SQLITE_UTF16BE==3 ,6,0,6
!(blocks[block_map[op_array->live_range[j].end]].flags & ZEND_BB_REACHABLE),3,3,6
 p->id==SQLITE_MUTEX_RECURSIVE || debugMutexNotheld(pX) ,6,0,6
 pCache->szExtra<512 ,4,2,6
newstream != NULL,2,4,6
 cntNew[0]>0 ,2,4,6
 idx==pCur->aiIdx[pCur->iPage] ,3,3,6
cur.pTree,2,4,6
 iSpace<=pBt->psAligned*5 ,3,3,6
" CORRUPT_DB || vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, pPKey2->default_rc) || pKeyInfo->db->mallocFailed ",4,2,6
 pParse->db!=0 ,6,0,6
pkey->pkey.dh != NULL,3,3,6
 pTos->flags==MEM_Int ,2,4,6
 (p==0)==(pFd->nFetchOut==0) ,6,0,6
 (pMatch->jointype & JT_RIGHT)==0 ,4,2,6
 p==&pCsr->aPage[pCsr->iPage-1] ,4,2,6
 eDest==SRT_Callback ,2,4,6
 sqlite3KeyInfoIsWriteable(pKeyInfo) ,6,0,6
 pPage->u.hdr.rightChild==0 ,2,4,6
 amt>=0 ,2,4,6
 pOp->p4type==P4_FUNCDEF ,5,1,6
 pPhrase->aToken[0].pSegcsr ,3,3,6
 locktype!=RESERVED_LOCK || id->locktype==SHARED_LOCK ,2,4,6
 i>=2 ,2,4,6
private_data_ptr != 0,6,0,6
 pIter->pIndex->rc==SQLITE_OK ,4,2,6
 aEntry[0]<key ,5,1,6
 nTries==3 ,4,2,6
 pKeylist->nRead<pKeylist->nKey ,2,4,6
 pOp->p2>=0 ,6,0,6
fdTable[fd].type != FD_SOCKET_SYNC,2,4,6
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",6,0,6
 nKey >= 4 ,2,4,6
 iCol>=0 && iCol<pTab->nCol ,3,3,6
 key>=aEntry[iRes] ,5,1,6
 &data[pBt->pageSize] == (unsigned char*)pPage ,2,4,6
 46==sqlite3LogEst(25) ,5,1,6
 pPager->state==SQLITE_WRITELOCK ,2,4,6
 sqlite3OpcodeProperty[pOut->opcode] & OPFLG_JUMP ,4,2,6
 pKeyInfo->db==db ,6,0,6
 pHdr->iForeGuard==FOREGUARD ,6,0,6
 rc!=SQLITE_IOERR_SHORT_READ ,5,1,6
 iNewLevel<((iIndex+1)*FTS3_SEGDIR_MAXLEVEL) ,3,3,6
 p->base.zErrMsg==0 ,5,1,6
 sizeof(unsigned short)==2 && sizeof(unsigned char)==1 ,5,1,6
name,3,3,6
PROXY_HOSTIDLEN == sizeof(uuid_t),4,2,6
src1 == TMP_REG1 && !(flags & ARGS_SWAPPED),6,0,6
dst & SLJIT_MEM,6,0,6
 pWinMemData->magic2==WINMEM_MAGIC2 ,6,0,6
len >= 0,4,2,6
(call->func->common.fn_flags & ZEND_ACC_RETURN_REFERENCE) ? Z_ISREF_P(ret) : !Z_ISREF_P(ret),6,0,6
 used[i]==0 ,2,4,6
 pc+size<=usableSize ,2,4,6
 sqlite3VdbeCheckMemInvariants(p) ,5,1,6
 nLocal>=0 ,4,2,6
 n>0 && p1>0 && p2>0 ,4,2,6
 pDL->pNextDocid==0 ,3,3,6
 pCur->pRbtree->eTransState != TRANS_NONE ,2,4,6
 nInMul==0 || (pNew->wsFlags & WHERE_COLUMN_NULL)!=0 || (pNew->wsFlags & WHERE_COLUMN_IN)!=0 || (pNew->wsFlags & WHERE_SKIPSCAN)!=0 ,4,2,6
" sqlite3MemdebugNoType(p, ~(MEMTYPE_LOOKASIDE|MEMTYPE_HEAP)) ",3,3,6
 nMap>=0 || pFd->nFetchOut==0 ,6,0,6
 (pCache->szPage & (pCache->szPage-1))==0 && pCache->szPage>=512 ,4,2,6
stream->isClosed,2,4,6
 pKeylist->nRead<pKeylist->nUsed ,2,4,6
 pWinMemData->hHeap!=INVALID_HANDLE_VALUE ,6,0,6
" db!=0 || sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) ",4,2,6
 pTerm->flags & MEM_Str ,2,4,6
 z[0]=='\0' && z>zRet ,6,0,6
p->keylistStackDepth > 0,2,4,6
" !ExprHasProperty(p, EP_TokenOnly|EP_Reduced) ",6,0,6
 ppOut!=0 ,6,0,6
" sqlite3MemdebugNoType(pOld, ~MEMTYPE_HEAP) ",3,3,6
long_options != NULL,3,3,6
 sqlite3BtreeCursorIsValid(pC->pCursor) ,4,2,6
 v->magic==VDBE_MAGIC_INIT ,6,0,6
 pNew->nCell>0 ,2,4,6
 (db->flags & SQLITE_Initialized) || db->init.busy ,2,4,6
 key>=aDia[iRes] ,5,1,6
group_len == sizeof(struct sockaddr_in),4,2,6
common->mark_ptr != 0,6,0,6
pkey->pkey.dsa != NULL,3,3,6
fdTable[fd].type != FD_PIPE_SYNC,2,4,6
 pTask->pUnpacked->errCode==SQLITE_OK || pTask->pUnpacked->errCode==SQLITE_NOMEM ,4,2,6
pDest->eDest==SRT_Exists || pDest->eDest==SRT_Union || pDest->eDest==SRT_Except || pDest->eDest==SRT_Discard || pDest->eDest==SRT_Queue || pDest->eDest==SRT_DistFifo || pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo,4,2,6
0 < n,2,4,6
 pIdxKey->default_rc==1 || pIdxKey->default_rc==0 || pIdxKey->default_rc==-1 ,4,2,6
 N>=0 && N<n ,2,4,6
 p->nToken==1 ,3,3,6
 pTerm>=p->aStack ,2,4,6
 id->locktype!=NO_LOCK || locktype==SHARED_LOCK ,2,4,6
 pGrandparent == pX->pParent->pParent ,2,4,6
 n>0 && n<=4 ,6,0,6
 pPhrase->nToken==1 ,3,3,6
 pCur->info.nSize==0 ,6,0,6
length != 0,3,3,6
 lwr+upr>=0 ,6,0,6
 pPager->state!=SQLITE_UNLOCK ,2,4,6
 iPg<=pCheck->nPage && sizeof(pCheck->aPgRef[0])==1 ,6,0,6
 p==0 || p==&((u8 *)pFd->pMapRegion)[iOff] ,6,0,6
" sqlite3MemdebugNoType(p, (u8)~(MEMTYPE_LOOKASIDE|MEMTYPE_HEAP)) ",6,0,6
 pIn->nSdst==1 ,4,2,6
 pPhrase->doclist.nList>0 ,3,3,6
 pWinMemData->magic1==WINMEM_MAGIC1 ,6,0,6
 pNode->eType==FTS5_NOT ,5,1,6
 tree->eTransState != TRANS_NONE ,2,4,6
 pc>0 && pc<usableSize-4 ,2,4,6
 id->dirfd<0 ,2,4,6
" osHeapValidate(pWinMemData->hHeap, SQLITE_WIN32_HEAP_FLAGS, NULL) ",6,0,6
 (int)strlen(conchPath) == len+7 ,4,2,6
 db!=0 && p->zName!=0 ,2,4,6
fdTable[fd].type != FD_FILE_SYNC,2,4,6
"!(call->func->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(call->func, ret)",6,0,6
 rc!=SQLITE_OK || pPager->jfd ,2,4,6
 (int)strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,4,2,6
 42==sqlite3LogEst(18) ,4,2,6
 pPage->aData == &((unsigned char*)pPage)[-pBt->pageSize] ,2,4,6
 strlen((char*)pFile->lockingContext)<=MAXPATHLEN ,4,2,6
 eMode!=SQLITE_CHECKPOINT_PASSIVE || xBusy==0 ,6,0,6
 pPager->nMaxPage==(pPager->nPage-1) ,2,4,6
 pC->pCursor ,4,2,6
 sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0 || mem.mutex!=0 ,4,2,6
 pTable->iDb<db->nDb ,2,4,6
!errno,4,2,6
 pCur->eState==CURSOR_VALID || pCur->eState==CURSOR_SKIPNEXT ,6,0,6
 CURSOR_VALID==pCur->eState || CURSOR_INVALID==pCur->eState ,3,3,6
ce != NULL,5,1,6
 nTries>1 ,4,2,6
 scratchAllocOut>=1 && scratchAllocOut<=2 ,4,2,6
" sqlite3MemdebugHasType(pOld, MEMTYPE_HEAP) ",4,2,6
 pPage->pgno==sqlite3pager_pagenumber(pPage->aData) ,2,4,6
 ret>0 ,5,1,6
 &pPage->aData[pPage->pBt->pageSize]==(unsigned char*)pPage ,2,4,6
 pi[i]==0xdead1122 ,2,4,6
 pPage->noPayload==0 ,3,3,6
ss->pSrc,2,4,6
 EIGHT_BYTE_ALIGNMENT(pNew) ,4,2,6
pTree,2,4,6
 pExpr->op==TK_AGG_FUNCTION ,6,0,6
!(op & SLJIT_INT_OP),4,2,6
 pIndex->iDb==pTable->iDb || (pTable->iDb==0 && pIndex->iDb==1) ,2,4,6
 pPKey2->pKeyInfo->nField+pPKey2->pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB ,4,2,6
 pPager->aInCkpt!=0 ,2,4,6
 isScan==0 || p->aIndex==0 ,3,3,6
 aExpr[k].idxLeft==idx || aExpr[k].idxRight==idx ,3,3,6
 pPg==0 ,4,2,6
 bArgList==0 ,6,0,6
 db->flags & SQLITE_Interrupt ,2,4,6
 pPager->origDbSize==0 || pPager->origDbSize==mxPg ,2,4,6
 xTask!=0 ,6,0,6
 ppThread!=0 ,6,0,6
" !call->func || !(call->func->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(call->func, EX_VAR(opline->result.var), EX_USES_STRICT_TYPES())",0,6,6
 pAgg->pFunc!=0 ,2,4,6
 pFree>aData && (pFree - aData)<65536 ,6,0,6
 pX->pSelect ,2,4,6
 pE->op==TK_AGG_FUNCTION ,2,4,6
 (nBytes&(nBytes-1))==0 ,4,2,6
 pFd->nFetchOut>=0 ,6,0,6
 p->bHasStat ,3,3,6
 op==SQLITE_INSERT || op==SQLITE_UPDATE || op==SQLITE_DELETE ,3,3,6
 pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) ,6,0,6
 (pOther->szPage & (pOther->szPage-1))==0 && pOther->szPage>=512 ,4,2,6
Z_TYPE_P(ids_array) == IS_ARRAY,3,3,6
fast_str_ptr == 0,6,0,6
" DbMaskTest(p->btreeMask, iDb) ",6,0,6
 nPayload>=(u32)nLocal ,4,2,6
 pParse->nAgg==0 ,2,4,6
 rc==SQLITE_OK || pTab==0 ,4,2,6
 pKeylist->nRead>=0 ,2,4,6
op_type == IS_VAR,6,0,6
ss,2,4,6
 pOther->szExtra<512 ,4,2,6
stack->len,4,2,6
 i>=0 && i<=p->nCursor ,2,4,6
 (pIdxKey->errCode!=SQLITE_CORRUPT || c==0) && (pIdxKey->errCode!=SQLITE_NOMEM || pCur->pBtree->db->mallocFailed) ,4,2,6
 pExpr->iDb<db->nDb ,2,4,6
 nLocal<=(nUsable-35) ,4,2,6
t == SUCCESS,3,3,6
" sqlite3MemdebugHasType(p, (MEMTYPE_LOOKASIDE|MEMTYPE_HEAP)) ",6,0,6
 pi[k+N_GUARD+1+i]==0xdead3344 ,2,4,6
 n==0 || (pOp->p2>0 && pOp->p2+n<=(p->nMem-p->nCursor)+1) ,4,2,6
src2_r == TMP_REG2,6,0,6
 pPager->needSync==0 ,2,4,6
p->contextStackDepth > 0,2,4,6
 ((p->szMalloc>0 && p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1 ,4,2,6
 pData0<=pLast ,6,0,6
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, pPrior) ",6,0,6
 pPager->eLock>=SHARED_LOCK ,6,0,6
 pC->isOrdered ,6,0,6
 rc==SQLITE_OK || mxLevel==0 ,4,1,5
 z && pColl && pColl->xCmp ,2,3,5
 inMutex>0 ,2,3,5
 pOrderBy || (pCost->plan.wsFlags&WHERE_ORDERBY)==0 ,2,3,5
 u.ag.apVal || u.ag.n==0 ,2,3,5
 p->pForest==0 ,4,1,5
 pOp->opcode==OP_PutIntKey ,2,3,5
 u.at.iDb>=0 && u.at.iDb<db->nDb ,2,3,5
 iLevel==FTS3_SEGCURSOR_ALL || (zTerm==0 && isPrefix==1) ,2,3,5
fbc->type == ZEND_INTERNAL_FUNCTION,5,0,5
 (*pNum)==SMALLEST_INT64 ,2,3,5
 db->aLimit[SQLITE_LIMIT_LENGTH]>=0 ,2,3,5
 (u.be.pMem->flags & MEM_Int)!=0 ,2,3,5
 pItem->u.x.iOrderByCol>0 ,5,0,5
 p->nIndex>=1 ,4,1,5
 eType!=SQLITE_OPEN_MAIN_DB ,2,3,5
 nEq>=1 ,4,1,5
 pBuilder->nRecValid<nEq ,4,1,5
"(SLJIT_DIVMOD_UW & 0x2) == 0 && SLJIT_DIV_UW - 0x2 == SLJIT_DIVMOD_UW, bad_div_opcode_assignments",5,0,5
pprev[1]==p,2,3,5
 pOrTerm->eOperator==0 ,2,3,5
 iLevel<=RTREE_MAX_DEPTH ,4,1,5
 u.cb.n>=0 ,2,3,5
 pParse->ckOffset>0 ,2,3,5
 rc==SQLITE_OK || *paOut==0 ,2,3,5
 memIsValid(u.cl.pName) ,2,3,5
 OPFLAG_BULKCSR==BTREE_BULKLOAD ,4,1,5
pList || sqlite3MallocFailed() ,2,3,5
 pExpr->eType==FTSQUERY_PHRASE || isReqPos==0 ,2,3,5
 iDb<MAX_ATTACHED+2 ,2,3,5
 pParent->nOverflow==0 || pParent->aOvfl[0].idx==iParentIdx ,2,3,5
 u.ar.desiredAutoCommit==1 ,2,3,5
 pWC->vmask==0 && pMaskSet->n==0 ,2,3,5
 iDb>=0 || pTab->isEphem ,2,3,5
pnext[0]==p,2,3,5
 p->flags & UNPACKED_NEED_DESTROY ,2,3,5
 db->activeVdbeCnt>0 || db->autoCommit==0 || db->nStatement==0 ,2,3,5
 memIsValid(&u.ad.pMem[u.ad.i]) ,2,3,5
 nOut==0 || pOut!=0 ,2,3,5
 rc!=SQLITE_OK || nDocSize>0 ,4,1,5
 nBuf>=0 ,2,3,5
 memIsValid(&u.bc.r.aMem[i]) ,2,3,5
 memIsValid(u.ci.pQuery) ,2,3,5
 rc!=SQLITE_OK || bMaxSet ,4,1,5
 pLeft->eType==FTSQUERY_NEAR ,2,3,5
 pDest->nMem==nResultCol ,2,3,5
 (u.cc.pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,2,3,5
 pIdx->zName || (pIdx->nColumn==1 && pIdx->aiColumn[0]==-1) ,2,3,5
 pCol->affinity==SQLITE_AFF_NONE || pCol->affinity==sqlite3AffinityType(zType) ,2,3,5
 pNode->n<=pNode->nAlloc ,4,1,5
 u.aw.p2<=p->nMem ,2,3,5
!pp[0],2,3,5
 pPage->pData==(void *)&pPage[1] ,2,3,5
 pCur->apPage[0]->intKey==1 || pCur->apPage[0]->intKey==0 ,2,3,5
 u.az.oc==OP_SeekLe || u.az.oc==OP_SeekGt ,2,3,5
 pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_AND || pExpr->eType==FTSQUERY_NEAR ,4,1,5
 pColl->enc==SQLITE_UTF8 ,2,3,5
 db->activeVdbeCnt>=db->writeVdbeCnt ,2,3,5
 u.bn.pC->isTable==0 ,2,3,5
 bestPlan.plan.u.pIdx==pIdx ,2,3,5
 p->aNode ,4,1,5
 !(u.am.pDest->flags & MEM_Dyn) ,2,3,5
 u.bg.pC->deferredMoveto==0 ,2,3,5
 pSubWInfo->a[0].iIdxCur==iCovCur ,4,1,5
 pItem->iCol>0 && pItem->iCol<=p->pEList->nExpr ,2,3,5
size == 4,5,0,5
 p->state>=PAGER_RESERVED || p->journalOpen==0 ,2,3,5
" pPager->fd->pMethods==0 || sqlite3OsFileControl(pPager->fd,SQLITE_FCNTL_DB_UNCHANGED,0)>=SQLITE_OK ",2,3,5
 pLower->eOperator==WO_GT || pLower->eOperator==WO_GE ,2,3,5
 pOp->p1+pOp->p2<=p->nMem+1 ,2,3,5
 db->enc==SQLITE_UTF8 ,2,3,5
" !ExprHasProperty(pE, EP_FromJoin) ",4,1,5
 p->nIndex>0 ,4,1,5
 (u.bc.aMx[u.bc.nField].flags & MEM_Null)==0 ,2,3,5
 rc==SQLITE_BUSY ,2,3,5
 u.an.zAffinity[pOp->p2]==0 ,2,3,5
 SQLITE_FUNC_CONSTANT==SQLITE_DETERMINISTIC ,4,1,5
 u.bv.nRoot>0 ,2,3,5
 rc==SQLITE_OK || rc==SQLITE_FULL || (rc&0xFF)==SQLITE_IOERR ,2,3,5
 op<32*5 ,2,3,5
 u.ao.nField>0 && pOp->p2>0 && pOp->p2+u.ao.nField<=p->nMem+1 ,2,3,5
 sqlite3BtreeIsInTrans(u.ce.pBt)==0 ,2,3,5
 (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0 || (pLevel->plan.wsFlags & WHERE_INDEXED)!=0 ,2,3,5
 mutexOwnerValid ,2,3,5
"(SLJIT_SINGLE_OP == 0x100) && !(DOUBLE_DATA & 0x4), float_transfer_bit_error",3,2,5
 sqlite3_mutex_held(p->pCache->pGroup->mutex) ,4,1,5
 pIn1<=&aMem[p->nMem] ,2,3,5
 SQLITE_CHECKPOINT_TRUNCATE==3 ,4,1,5
 pPage->nOverflow<=ArraySize(pPage->aOvfl) ,2,3,5
 finSize!=PENDING_BYTE_PAGE(pBt) ,2,3,5
 pCur->apPage[pCur->iPage]->isInit ,2,3,5
 nPinned>=0 ,2,3,5
 !pIdx || pIdx->pTable==pTab ,2,3,5
" pthread_equal(mutexOwner, pthread_self()) ",2,3,5
 pPager->journalOpen || !pPager->dirtyCache ,2,3,5
 j<pCsr->nSegment && pSeg->iIdx==i ,4,1,5
 u.am.pReg->flags & MEM_Blob ,2,3,5
 SQLITE_CHECKPOINT_FULL==1 ,4,1,5
 pStart!=0 || pEnd!=0 ,4,1,5
 pUnpacked->flags & UNPACKED_IGNORE_ROWID ,2,3,5
 c>=0 ,4,1,5
 u.aw.p2>0 ,2,3,5
 yymsp[-2].minor.yy327!=0 ,3,2,5
 p->zText ,4,1,5
 p->iDoclistToken<MAX_INCR_PHRASE_TOKENS ,4,1,5
 mergetype==MERGE_POS_NEAR || MERGE_NEAR ,2,3,5
 (pIn3->flags & MEM_Real)!=0 ,2,3,5
 pPager->doNotSyncSpill==0 ,2,3,5
 pHdr->pNext->pPrev==pHdr ,4,1,5
 p->x.pList==0 || p->pRight==0 ,5,0,5
 sqlite3MallocFailed() ,2,3,5
 u.br.iCnt==1 ,2,3,5
 pFree==0 ,4,1,5
 pCost->plan.u.pIdx==0 || (pCost->plan.wsFlags&WHERE_ROWID_EQ)==0 ,2,3,5
 pPg->nRef==0 || pPg->pgno==1 ,2,3,5
 pIdx->nSample>0 ,4,1,5
guard==0xdead3344,2,3,5
 zToken!=0 ,2,3,5
 sizeof(uptr)==sizeof(ptr) ,2,3,5
 pFree ,4,1,5
 db!=0 || rc==SQLITE_NOMEM ,4,1,5
 pPager->errCode==SQLITE_FULL || pPager->errCode==SQLITE_OK ,2,3,5
 pPage->pExtra==(void *)&((char *)&pPage[1])[pCache->szPage] ,2,3,5
 u.aw.pX!=0 ,2,3,5
 mem.pLast==pHdr ,4,1,5
 sizeof(u64)==8 ,3,2,5
 pNewExpr==0 || pNewExpr->span.z!=0 || pOldExpr->span.z==0 || sqlite3MallocFailed() ,2,3,5
last >= EX(func)->op_array.opcodes,3,2,5
 u.bt.pDb->pBt!=0 ,2,3,5
 u.be.v>0 ,2,3,5
 (u.bv.pnErr->flags & MEM_Int)!=0 ,2,3,5
 iRes<0 || c>=aEntry[iRes].iCode ,4,1,5
 p->zContentTbl==0 || bContent==0 ,4,1,5
 pIdx->aiColumn[j]>=0 ,4,1,5
 u.by.pProgram->nOp>0 ,2,3,5
isDelete && !isOpenDirectory,2,3,5
 pOp->p3type==P3_VTAB ,2,3,5
 zBuffer ,4,1,5
 iPrevTok!=iTok ,2,3,5
 pTerm->flags & (MEM_Str|MEM_Blob) ,2,3,5
 db->writeVdbeCnt>0 || db->autoCommit==0 || db->nDeferredCons==0 ,2,3,5
 u.bh.pC->pseudoTableReg==0 ,2,3,5
 pNode->block.nAlloc>=p->nNodeSize ,4,1,5
 u.bg.pC->pCursor!=0 ,2,3,5
 nEq>=pLoop->nSkip ,4,1,5
 p->nSample>0 ,4,1,5
 u.bb.pC->isTable==0 ,2,3,5
 memIsValid(&u.bb.r.aMem[i]) ,2,3,5
 u.aw.iDb>=0 && u.aw.iDb<db->nDb ,2,3,5
 pTabItem->pIndex==0 || (sCost.plan.wsFlags & WHERE_NOT_FULLSCAN)==0 || sCost.plan.u.pIdx==pTabItem->pIndex ,2,3,5
 p->pNext==0 ,4,1,5
 pPager->eLock==SHARED_LOCK || pPager->eLock==EXCLUSIVE_LOCK || pPager->noReadlock,2,3,5
pColl || pParse->nErr,2,3,5
 szRegion==pNode->szRegion ,2,3,5
 rc==SQLITE_EMPTY || rc==SQLITE_OK ,2,3,5
 pPg->pPager==pPager || pPg->pPager==0 ,3,2,5
Z_REFCOUNTED_P(pz) || Z_IMMUTABLE_P(pz),3,2,5
 pLeft->isLoaded && pRight->isLoaded ,2,3,5
 pCache->nHash>0 && pCache->apHash ,4,1,5
 u.aq.p1==SAVEPOINT_BEGIN||u.aq.p1==SAVEPOINT_RELEASE||u.aq.p1==SAVEPOINT_ROLLBACK ,2,3,5
 mergetype==MERGE_OR || mergetype==MERGE_POS_OR || mergetype==MERGE_AND || mergetype==MERGE_NOT || mergetype==MERGE_PHRASE || mergetype==MERGE_POS_PHRASE || mergetype==MERGE_NEAR || mergetype==MERGE_POS_NEAR ,2,3,5
 pCsr->nSegment==0 ,4,1,5
 pCsr->pKeyInfo && pCsr->pBt==0 ,4,1,5
 pDb->pUpdateHook ,2,3,5
nOverflow<3 || pOld->aOvfl[1].idx==pOld->aOvfl[2].idx-1,2,3,5
 resetSchemaOnFault==0 || resetSchemaOnFault==u.br.iDb+1 ,2,3,5
 (pSubLoop->wsFlags & WHERE_AUTO_INDEX)==0 ,4,1,5
 p->aMem==0 || p->aMem[i].flags==MEM_Null ,2,3,5
 sqlite3_mallocDisallowed>=0 ,2,3,5
 unionTab==dest.iParm || dest.eDest!=priorOp ,2,3,5
 zP3!=0 ,2,3,5
 u.bp.pC->isTable==0 ,2,3,5
 sqlite3_value_type(apVal[0])==SQLITE_INTEGER ,4,1,5
 memIsValid(pMem) ,4,1,5
 p->bHasStat==p->bFts4 ,4,1,5
 u.bu.iDb>=0 && u.bu.iDb<db->nDb ,2,3,5
 x.nNode ,5,0,5
 pExpr->eType==FTSQUERY_NEAR || pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_NOT || (pExpr->eType==FTSQUERY_AND && p->eEvalmode==FTS3_EVAL_NEXT) ,2,3,5
Z_STRVAL_P(uf_result) != NULL,1,4,5
 p->pBt->nTransaction<=p->pBt->nRef ,2,3,5
 *pRc || pNode->block.nAlloc==0 ,4,1,5
strval != NULL,2,3,5
 os2MutexHeld(p) ,2,3,5
 pParent->pParent==0 || pParent->pParent->pLeft==pParent ,4,1,5
 yymsp[-1].minor.yy327!=0 ,3,2,5
 pc==u.by.pFrame->pc ,2,3,5
 pNew->nLSlot>=nConstraint ,4,1,5
 n>5 && n<=9 ,4,1,5
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)==0 ,4,1,5
 (idxStr==0 && argc==0) || (idxStr && (int)strlen(idxStr)==argc*2) ,4,1,5
sizeof(int)<=8,2,3,5
" i==0 || sqlite3VdbeRecordCompare(aSample[i-1].n, aSample[i-1].p, pRec)<0 || pParse->db->mallocFailed ",3,2,5
 argc==4 ,2,3,5
 inMutex==0 ,2,3,5
 pIdx->azColl[i]!=0 ,2,3,5
 u.bq.pC->isOrdered ,2,3,5
 pInfo->estimatedCost>1000000.0 ,4,1,5
 (i64)nDestTruncate*(i64)pgszDest >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+pgszDest ),2,3,5
 rc==SQLITE_OK || pExpr==0 ,4,1,5
 (pLevel->plan.wsFlags & WHERE_IDX_ONLY)==0 || j<pIdx->nColumn ,2,3,5
 nTemp==0 ,4,1,5
 pTerm->eOperator & WO_OR ,4,1,5
 pParse->ckOffset==0 ,2,3,5
 memIsValid(&u.bo.r.aMem[i]) ,2,3,5
 pKey!=0 || db->mallocFailed || pParse->nErr ,4,1,5
" offsetof(PgHdr1,page)==0 ",4,1,5
 u.ba.pC->isTable ,2,3,5
 nArg<=ArraySize(azArg) ,2,3,5
 !p || (p>=aDoclist && p<=&aDoclist[nDoclist]) ,4,1,5
 pBtree->inTrans==TRANS_NONE ,2,3,5
 u.am.pC->pVtabCursor==0 ,2,3,5
 rc==SQLITE_OK || *ppExpr==0 ,4,1,5
 p->pParent==0 || p->pParent->pLeft==p ,4,1,5
 u.ac.p1+u.ac.n<=u.ac.p2 || u.ac.p2+u.ac.n<=u.ac.p1 ,2,3,5
 u.bf.pC->iDb>=0 ,2,3,5
 pCur->apPage[pCur->iPage]->nCell>0 || pCur->eState==CURSOR_INVALID ,2,3,5
 *paOut==0 ,2,3,5
 p->apCsr==0 || p->apCsr[i]==0 ,2,3,5
 sqlite3_mutex_held(pNode->mutex) || pNode->nRef==0 ,2,3,5
 ulCount==0 ,2,3,5
 iCur>=0 ,2,3,5
 u.ac.n>0 && u.ac.p1>0 && u.ac.p2>0 ,2,3,5
 a & 0x80 ,4,1,5
 (m.flags & MEM_Term)!=0 || sqlite3MallocFailed() ,2,3,5
 (pPg->flags & PGHDR_MMAP)==0 ,4,1,5
 (p->btreeMask & (((yDbMask)1)<<u.at.iDb))!=0 ,2,3,5
 j<(int)(sizeof(pPage->aOvfl)/sizeof(pPage->aOvfl[0])) ,2,3,5
" iNewLevel<getAbsoluteLevel(p, iLangid, iIndex,FTS3_SEGDIR_MAXLEVEL) ",4,1,5
" p->pRight==0 || ExprHasProperty(p->pRight, EP_IntValue) || p->pRight->u.zToken==0 || p->pRight->u.zToken[0]!=0 ",2,3,5
 n==nKeyCol ,4,1,5
 yymsp[-1].minor.yy203!=0 ,2,3,5
 zTab==0 || pEList==0 ,2,3,5
 bestJ>=0 ,2,3,5
 nKey==nPk ,4,1,5
var != NULL,2,3,5
class_name,3,2,5
"scode, options, op == OP_ASSERT",2,3,5
 p!=0 && *p1!=0 && *p2!=0 ,4,1,5
 pNode->nAlloc>=1 ,4,1,5
 pPhrase->pList==0 && pPhrase->pHead==0 && pPhrase->pTail==0 ,2,3,5
 p->bFts4 ,4,1,5
 !(*ppHook) ,2,3,5
 u.ar.desiredAutoCommit==1 || u.ar.iRollback==0 ,2,3,5
 u.bx.iSet==-1 || u.bx.iSet>=0 ,2,3,5
 yymsp[-2].minor.yy203!=0 ,2,3,5
 SQLITE_CHECKPOINT_PASSIVE==0 ,4,1,5
 u.bf.pData->flags & (MEM_Blob|MEM_Str) ,2,3,5
 sqlite3BtreeIsInTrans(u.as.pBt) ,2,3,5
 pOut<=&aMem[p->nMem] ,2,3,5
" chngToIN==getMask(pMaskSet, iCursor) ",2,3,5
 testAddr>0 || sqlite3MallocFailed() ,2,3,5
 sqlite3ThreadDataReadOnly()->useSharedData || pParse->nTableLock==0 ,2,3,5
 u.am.payloadSize==0 || u.am.zRec!=0 ,2,3,5
 eSearch>=0 && eSearch<=(FTS3_FULLTEXT_SEARCH+p->nColumn) ,4,1,5
 u.aj.p2>0 && u.aj.p2+mx<=p->nMem+1 ,2,3,5
 p->pGroupBy==0 || (p->selFlags & SF_Aggregate)!=0 ,2,3,5
 eStatementOp==SAVEPOINT_ROLLBACK ,2,3,5
 memIsValid(u.ao.pRec) ,2,3,5
" !ExprHasAnyProperty(pA, EP_TokenOnly|EP_Reduced) ",2,3,5
 iCol>=0 && iCol<=p->nColumn+2 ,4,1,5
 pParent==0 || pParent->pLeft==p ,4,1,5
 pNode->n>0 ,4,1,5
 IsPowerOfTwo(chngToIN) ,4,1,5
 (u.am.payloadSize64 & SQLITE_MAX_U32)==(u64)u.am.payloadSize64 ,2,3,5
 pWInfo->nLevel==1 || pWInfo->nLevel==pTabList->nSrc ,2,3,5
 ArraySize(aSyscall)==16 ,2,3,5
 isCommit ,2,3,5
 rc==SQLITE_OK || p->rc==SQLITE_CONSTRAINT ,2,3,5
pDb->pRollbackHook,2,3,5
 p->pTos<&p->aStack[p->pc<0?0:p->pc] || !p->aStack ,2,3,5
" sqlite3GetVTable(pParse->db, pTab) ",2,3,5
 (rc==SQLITE_OK)==(pMod!=0) ,4,1,5
 u.ao.i==u.ao.nByte ,2,3,5
 *pRc || pNode->key.nAlloc==0 ,4,1,5
 (pTos[0].flags&MEM_Int)!=0 && pTos[-1].flags==MEM_Int ,2,3,5
 (idxStr==0 && argc==0) || (int)strlen(idxStr)==argc*2 ,2,3,5
 sqlite3BtreeCursorIsValid(u.bh.pCrsr) ,2,3,5
 pSrc->pIndex==0 || pCost->plan.u.pIdx==0 || pCost->plan.u.pIdx==pSrc->pIndex ,2,3,5
 ppVm ,2,3,5
 p->iPrevDocid==*pRowid ,4,1,5
 db->init.busy==0 || saveSqlFlag==0 ,2,3,5
 p->rc!=SQLITE_OK ,2,3,5
 reader.aNode ,4,1,5
 (pLoop->wsFlags & WHERE_MULTI_OR)==0 ,4,1,5
 pLeft->pRight->eType==FTSQUERY_PHRASE ,2,3,5
 pCsr->eEvalmode==FTS3_EVAL_FILTER ,2,3,5
 pNode->nAlloc>=1+sqlite3Fts3VarintLen(iChild) ,4,1,5
 memIsValid(u.bf.pData) ,2,3,5
 pParent==pRoot ,4,1,5
 cp!=0 ,2,3,5
 idx<=pPage->nCell ,2,3,5
 mutexOwner==GetCurrentThreadId() ,2,3,5
 (p->btreeMask & (((yDbMask)1)<<u.br.iDb))!=0 ,2,3,5
 !pDel || (sqlite3MallocFailed() && pDel==pColl) ,2,3,5
 pPager->doNotSpill==0 ,2,3,5
 p->eLock>=SHARED_LOCK || p->noReadlock ,2,3,5
 pExpr->eType==FTSQUERY_NEAR || pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_AND || pExpr->eType==FTSQUERY_NOT || pExpr->eType==FTSQUERY_PHRASE ,2,3,5
(pExpr->x.pList->nExpr % 2) == 0,2,3,5
 iOpt==6 ,4,1,5
 p->iOff<=p->nNode ,4,1,5
 iNewLevel>=0 ,2,3,5
 u.am.pC!=0 ,2,3,5
 (size&1)==0 ,4,1,5
 memIsValid(u.cm.pX) ,2,3,5
 v || sqlite3MallocFailed() ,2,3,5
 nCellKey>intKey ,2,3,5
 (m.flags & MEM_Str)!=0 || sqlite3MallocFailed() ,2,3,5
 nVal==0 || nVal==1 ,2,3,5
 pOp->p2>0 && pOp->p2+pOp->p3<=p->nMem+1 ,2,3,5
 pCache->nPage >= pCache->nRecyclable ,4,1,5
 aIter[i].iCol>=iCol ,2,3,5
 u.am.avail>=0 ,2,3,5
 pPage->pgno==pgno ,2,3,5
 u.ar.desiredAutoCommit==1 || u.ar.desiredAutoCommit==0 ,2,3,5
nArg==2,4,1,5
0==(1&(int)pMem->z),2,3,5
 idxNum>=0 && idxNum<=(FTS3_FULLTEXT_SEARCH+p->nColumn) ,2,3,5
 pTrig->iDb==iDb || pTrig->iDb==1 ,2,3,5
 pTd->useSharedData ,2,3,5
 pCur->wrFlag && pBt->inTransaction==TRANS_WRITE && !pBt->readOnly ,2,3,5
 u.aj.n>0 ,2,3,5
 pExpr->op==TK_COLLATE ,4,1,5
!pp[1] || ((void **)(pp[1]))[0]==p,2,3,5
 u.bu.iDb==1 || sqlite3BtreeHoldsMutex(db->aDb[u.bu.iDb].pBt) ,2,3,5
 p->id==GetCurrentThreadId() ,4,1,5
 (p->flags2 & EP2_MallocedToken)==0 ,2,3,5
 pExpr->op!=TK_AS && pExpr->op!=TK_COLLATE ,4,1,5
u.am.aType,2,3,5
 iFrame>iRead ,2,3,5
 pLoop->nSkip==0 ,4,1,5
 (u32)n==pLevel->plan.nEq ,2,3,5
 pLevel->plan.wsFlags & WHERE_INDEXED ,2,3,5
 (iEq==0 && iGe==-1) || (iEq==-1 && iGe==0) ,4,1,5
 pNode->nChild==2 ,3,2,5
" !ExprHasAnyProperty(pB, EP_TokenOnly|EP_Reduced) ",2,3,5
 iType-2 < ArraySize(staticMutexes) ,2,3,5
 pItem->isPopulated==0 ,2,3,5
 memIsValid(u.ag.pArg) ,2,3,5
 pItem->iCol>0 ,2,3,5
 pToken->pSegcsr || pPhrase->iDoclistToken>=0 ,4,1,5
 pOp[-2].opcode==OP_Integer ,2,3,5
 u.az.oc!=OP_SeekLt || u.az.r.flags==0 ,2,3,5
 u.az.oc!=OP_SeekGt || u.az.r.flags==UNPACKED_INCRKEY ,2,3,5
 u.bh.pC->isTable || pOp->opcode==OP_RowKey ,2,3,5
 pPager->noReadlock==0 || pPager->readOnly ,2,3,5
 pagerUseWal(pPager) || pageInJournal(pPg) || pPg->pgno>pPager->dbOrigSize ,2,3,5
 pOp->p3<=pFrame->nMem ,4,1,5
 p==p->pParent->pRight || p==p->pParent->pLeft ,4,1,5
 !isReqPos ,2,3,5
 sqlite3MallocFailed() || pAuthArg ,2,3,5
 (p->selFlags & SF_HasTypeInfo)==0 ,3,2,5
 FTS3_SEGCURSOR_ALL<0 ,2,3,5
 u.aq.pSavepoint==db->pSavepoint ,2,3,5
 pIdx->azColl!=0 ,2,3,5
 pPhrase->aToken[iToken].pSegcsr==0 ,4,1,5
 rc!=SQLITE_OK || pCsr->eEvalmode || pTok->pSegcsr==0 ,2,3,5
 pIdx->aSortOrder!=0 || iColumn==-1 ,2,3,5
 u.bh.pC->nullRow==0 ,2,3,5
 rc==SQLITE_OK || db->nDeferredCons>0 ,2,3,5
" !ExprHasAnyProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) ",2,3,5
 bAlnum==0 || bAlnum==1 ,4,1,5
 pPg->pgno==pgno ,3,2,5
pLeaf,4,1,5
 pLoop->u.btree.nEq==1 ,4,1,5
common->utf,4,1,5
 u.am.sMem.z==u.am.sMem.zMalloc ,2,3,5
 u.bm.pC->deferredMoveto==0 ,2,3,5
" ~ExprHasAnyProperty(pExpr, EP_TokenOnly|EP_Reduced) ",2,3,5
 (pStart->wtFlags & TERM_VNULL)==0 ,4,1,5
 chngRowid || pTrigger || hasFK || regOldRowid==regNewRowid ,2,3,5
 sqlite3_mallocDisallowed>0 ,2,3,5
 u.bf.pC->pseudoTableReg==0 ,2,3,5
 (u.bv.pnErr->flags & (MEM_Str|MEM_Blob))==0 ,2,3,5
 SQLITE_CHECKPOINT_RESTART==2 ,4,1,5
 p->eCreate==1 ,3,2,5
" !ExprHasAnyProperty(pEq, EP_TokenOnly|EP_Reduced) ",2,3,5
 iIdxCur>=0 ,2,3,5
 pOp->p5<=ArraySize(p->aCounter) ,2,3,5
 u.am.p2<u.am.nField ,2,3,5
 pNew->nLTerm<=pNew->nLSlot ,4,1,5
 pPage->pDbPage!=0 ,4,1,5
 u.bd.pC->pseudoTableReg==0 ,2,3,5
 *pbFound==0 ,4,1,5
 nCol==pSelect->pEList->nExpr || db->mallocFailed ,2,3,5
 iCol>=0 && iCol<=p->nColumn+1 ,2,3,5
 sqlite3MallocFailed() && pDel==pTrig ,2,3,5
 iIdx>=0 ,2,3,5
 pParse->ckOffset ,2,3,5
 pTerm->eOperator & (WO_IN|WO_EQ|WO_LT|WO_LE|WO_GT|WO_GE|WO_MATCH) ,4,1,5
 u.az.oc!=OP_SeekLe || u.az.r.flags==UNPACKED_INCRKEY ,2,3,5
 u.au.pDb->pBt!=0 ,2,3,5
 (pEnd->wtFlags & TERM_VNULL)==0 ,4,1,5
 u.bi.pModule->xRowid ,2,3,5
 pDel==0 || pDel->pParent==0 ,4,1,5
 eStmt==SQL_SELECT_DOCSIZE || eStmt==SQL_SELECT_DOCTOTAL ,2,3,5
 nHit>0 ,2,3,5
 pRoot->isInit && (pCur->pKeyInfo==0)==pRoot->intKey ,2,3,5
pIter->pLeaf,5,0,5
 (u.ad.pMem[u.ad.i].flags & MEM_Ephem)==0 || (u.ad.pMem[u.ad.i].flags & (MEM_Str|MEM_Blob))==0 ,2,3,5
 (pNode->a[0]=='\0')==(aDoclist!=0) ,4,1,5
 FTSQUERY_NOT==MERGE_NOT && FTSQUERY_AND==MERGE_AND ,2,3,5
" DbHasProperty(db, u.bu.iDb, DB_SchemaLoaded) ",2,3,5
 pTsd ,2,3,5
 pBt->isPending==0 || pBt->pWriter ,2,3,5
 pOp->p3<=u.be.pFrame->nMem ,2,3,5
 p->bIgnoreSavepoint==0 ,4,1,5
 pNew->n<=pNew->nAlloc ,4,1,5
 p->popStack==0 ,2,3,5
 pFree!=0 ,4,1,5
 pFile->dirfd<0 ,2,3,5
 *p1!=0 && *p2!=0 ,2,3,5
 pUpper->eOperator==WO_LT || pUpper->eOperator==WO_LE ,2,3,5
 u.aj.i<u.aj.pKeyInfo->nField ,2,3,5
 u.by.pProgram->nCsr==u.by.pFrame->nChildCsr ,2,3,5
 pBt->pCursor==0 || pBt->inTransaction>TRANS_NONE ,2,3,5
 iSegment>0 ,2,3,5
 pParse->ckOffset==nCol ,2,3,5
 iIdx==nVal ,4,1,5
 p->isSorted==0 ,2,3,5
 (&pTos[-1])>=p->aStack ,2,3,5
 (chngToIN&(chngToIN-1))==0 ,2,3,5
 u.ah.op==OP_ShiftRight || u.ah.op==OP_ShiftLeft ,2,3,5
 isReqPos ,2,3,5
 memIsValid(&aMem[u.aj.p2+u.aj.idx]) ,2,3,5
 pPager->doNotSpill==1 ,2,3,5
 u.az.nField>0 ,2,3,5
 nLocal<=nKey ,2,3,5
 sizeof(i64)==8 ,3,2,5
 pSubWInfo || pParse->nErr || db->mallocFailed ,4,1,5
 iDb<0 ,2,3,5
 pRec!=0 ,4,1,5
 db->aDb[u.at.iDb].pBt!=0 ,2,3,5
nOverflow<2 || pOld->aOvfl[0].idx==pOld->aOvfl[1].idx-1,2,3,5
pVal->enc==(enc & ~SQLITE_UTF16_ALIGNED) || sqlite3MallocFailed() ,2,3,5
 1==(int)pParse->nQueryLoop ,2,3,5
 !mutexOwnerValid ,2,3,5
 mergetype==MERGE_POS_NEAR || mergetype==MERGE_NEAR ,2,3,5
 (pTerm->prereqRight & pLevel->notReady)!=0 ,4,1,5
 memIsValid(&u.az.r.aMem[i]) ,2,3,5
 iEst<=SQLITE_INDEX_SAMPLES ,2,3,5
 (h>='0' && h<='9') || (h>='a' && h<='f') || (h>='A' && h<='F') ,4,1,5
 memIsValid(&u.bq.r.aMem[i]) ,2,3,5
 i>=0 && i<=SQLITE_INDEX_SAMPLES ,2,3,5
 serial_type>=12 ,2,3,5
 (nVal==0)==(idxNum==FTS3_FULLSCAN_SEARCH) ,2,3,5
 pMem->flags==MEM_Null ,2,3,5
 regTabname+1==regIdxname && regTabname+2==regSampleno && regTabname+3==regCol ,2,3,5
 pTerm->eOperator==WO_OR ,2,3,5
 pOp->p3<=(p->nMem+1 - p->nCursor) ,5,0,5
pprev,2,3,5
 pLevel->plan.wsFlags & WHERE_IN_ABLE ,2,3,5
 pCsr->eEvalmode==FTS3_EVAL_FILTER && isReqPos==0 ,2,3,5
 u.bh.pC->isIndex || pOp->opcode==OP_RowData ,2,3,5
 u.bf.pC->pCursor!=0 ,2,3,5
 u.az.oc!=OP_SeekGe || u.az.r.flags==0 ,2,3,5
 (p->flags2 & EP2_Irreducible)==0 ,2,3,5
 (p->btreeMask & (((yDbMask)1)<<u.aw.iDb))!=0 ,2,3,5
 zAff==0 || (int)strlen(zAff)>=nEq ,4,1,5
 rc!=SQLITE_ROW ,2,3,5
 nWrite==db->writeVdbeCnt ,2,3,5
 pStart==0 || pEnd!=0 ,2,3,5
 pVal==0 || pVal->db==db ,4,1,5
 *pnOut<=n1+n2+FTS3_VARINT_MAX-1 ,4,1,5
zBuf[0]=='\0',2,3,5
 u.az.pC->isOrdered ,2,3,5
 !(u.am.pDest->flags & (MEM_Blob|MEM_Str)) || u.am.pDest->z==u.am.sMem.z ,2,3,5
 m.z==m.zMalloc ,2,3,5
 u.bv.z==0 ,2,3,5
 p->pParent && p->pParent->pLeft==p ,4,1,5
" notReady & getMask(pMaskSet, pTabList->a[bestJ].iCursor) ",2,3,5
sljit_is_fpu_available(),4,1,5
 (u32)n==pLoop->u.btree.nEq ,4,1,5
Z_TYPE(result) == IS_LONG,3,2,5
 pTos->flags==MEM_Null ,2,3,5
 p->bIncr==1 ,4,1,5
 u.am.p1<p->nCursor ,2,3,5
((u32 *)z)[i]==0xdead1122,2,3,5
 u.an.zAffinity!=0 ,2,3,5
 u.bg.pC->rowidIsValid ,2,3,5
 memIsValid(u.am.pReg) ,2,3,5
 sqlite3ThreadDataReadOnly()->useSharedData || 0==*ppIter ,2,3,5
" sqlite3SchemaMutexHeld(db, u.aw.iDb, 0) ",2,3,5
 pRet==0 ,2,3,5
 p->nToken<=MAX_INCR_PHRASE_TOKENS ,4,1,5
 pBuilder->nRecValid==nRecValid ,4,1,5
 iLower>=0 && iUpper<=SQLITE_INDEX_SAMPLES ,2,3,5
 p->inTrans!=TRANS_NONE || p->pBt->nTransaction<p->pBt->nRef ,2,3,5
 u.aj.pKeyInfo!=0 ,2,3,5
 sqlite3BtreeCursorIsValid(u.be.pC->pCursor) ,2,3,5
 nColumn>0 ,2,3,5
 mem.pFirst==pHdr ,4,1,5
 len<=(u32)nBuf ,2,3,5
 u.ce.eNew==PAGER_JOURNALMODE_DELETE || u.ce.eNew==PAGER_JOURNALMODE_TRUNCATE || u.ce.eNew==PAGER_JOURNALMODE_PERSIST || u.ce.eNew==PAGER_JOURNALMODE_OFF || u.ce.eNew==PAGER_JOURNALMODE_MEMORY || u.ce.eNew==PAGER_JOURNALMODE_WAL || u.ce.eNew==PAGER_JOURNALMODE_QUERY ,2,3,5
 rc!=SQLITE_OK || pPhrase->bIncr==0 ,4,1,5
 u.az.pC->pseudoTableReg==0 ,2,3,5
 pTsd && pTsd->nAlloc ,2,3,5
 memIsValid(u.be.pMem) ,2,3,5
 idx1<=szHdr1 || CORRUPT_DB ,5,0,5
 u.bi.pC->pseudoTableReg==0 ,2,3,5
 FTS3_SEGCURSOR_PENDING<0 ,2,3,5
 memIsValid(&aMem[u.aj.p1+u.aj.idx]) ,2,3,5
 (pPager->doNotSpill & SPILLFLAG_NOSYNC)!=0 ,4,1,5
 u.by.pProgram->nMem+u.by.pProgram->nCsr==u.by.pFrame->nChildMem ,2,3,5
 pOp[1].opcode==OP_IdxLT || pOp[1].opcode==OP_IdxGT ,4,1,5
 p->pParent==0 || p==p->pParent->pRight || p==p->pParent->pLeft ,4,1,5
 pBt->isExclusive==0 || pBt->pWriter==pLock->pBtree ,2,3,5
 roundUp==0 || roundUp==1 ,2,3,5
 !u.bh.pC->isTable ,2,3,5
 pOp->p3<pOp->p2 || pOp->p3>=pOp->p2+u.ag.n ,2,3,5
 p->pLeft && p->pRight ,4,1,5
 memIsValid(u.cb.pRec) ,2,3,5
*ppLink,2,3,5
 u.ag.n==0 || (pOp->p2>0 && pOp->p2+u.ag.n<=p->nMem+1) ,2,3,5
 pHdr->pPrev->pNext==pHdr ,4,1,5
 pPager->doNotSyncSpill==1 ,2,3,5
 PAGER_UNLOCK==0 ,2,3,5
 p->aLabel[-1-x]<0 ,2,3,5
 u.aj.p1>0 && u.aj.p1+mx<=p->nMem+1 ,2,3,5
 pushKey==0 || pTabList->nSrc==1 ,2,3,5
 isOptimal || (sCost.used&notReady)==0 ,2,3,5
" 0==fts3HashFind(&p->pendingTerms, zToken, nToken) ",2,3,5
 pParse->nQueryLoop >= (double)1 ,2,3,5
 pIdx->aSample ,2,3,5
 pStr->z!=0 && (pStr->nAlloc >= pStr->n+nAppend+1) ,4,1,5
 u.cb.apVal || u.cb.n==0 ,2,3,5
 sizeof(ptr)==sizeof(char*) ,2,3,5
 u.az.pC!=0 ,2,3,5
 nExpr>1 ,2,3,5
 u.bc.pCx->deferredMoveto==0 ,2,3,5
" iNewLevel>=getAbsoluteLevel(p, iLangid, iIndex, 0) ",4,1,5
 pPage->aData==&((unsigned char*)pPage)[-pPage->pBt->pageSize] ,2,3,5
 isScan==0 || fts3HashCount(&p->pendingTerms)==0 ,2,3,5
 n==nColumn ,2,3,5
 memIsValid(u.bf.pKey) ,2,3,5
 iTerm<pNew->nLSlot ,4,1,5
 memIsValid(u.by.pRt) ,2,3,5
 memIsValid(u.ca.pIn1) ,2,3,5
Z_TYPE_P(zv) == IS_STRING,4,1,5
" !ExprHasProperty(p->pEList->a[0].pExpr, EP_xIsSelect) ",2,3,5
 dest.nMem==nColumn ,2,3,5
 pData!=NULL && nData>0 ,2,2,4
" sqlite3_column_bytes(pRtree->pReadNode, 0)==pRtree->iNodeSize ",2,2,4
 sqlite3GlobalConfig.bMemstat || mem.mutex!=0 ,2,2,4
!(src2 & SRC2_IMM),4,0,4
 u.an.p2<u.an.nField ,2,2,4
 pTab->nPendingData<0 ,2,2,4
 (u.bf.aMem[u.bf.nField].flags & MEM_Null)==0 ,2,2,4
sqlite3PcacheRefCount(pPager->pPCache)>0 || pgno==1,2,2,4
 p->iLimit==0 ,2,2,4
 r1==r2 ,2,2,4
 (p->btreeMask & (1<<u.cf.p1))!=0 ,2,2,4
 pCsr==0 || p->inTrans>TRANS_NONE ,2,2,4
 zCsr==(zNewRecord+nByte) ,1,3,4
 testAddr>0 ,2,2,4
 !(nJRec==0 && pPager->journalHdr+JOURNAL_HDR_SZ(pPager)!=pPager->journalOff && ((szJ - pPager->journalOff) / JOURNAL_PG_SZ(pPager))>0 && pagerNextJournalPageIsValid(pPager)) ,2,2,4
 (i64)nDestTruncate*(i64)nDestPagesize >= iSize || ( nDestTruncate==(int)(PENDING_BYTE_PAGE(p->pDest->pBt)-1) && iSize>=PENDING_BYTE && iSize<=PENDING_BYTE+nDestPagesize ),2,2,4
 interp==0 ,1,3,4
 (mem5.aCtrl[i] & CTRL_LOGSIZE)==iLogsize ,4,0,4
 iCell<NCELL(pNode) ,3,1,4
 TK_FLOAT==OP_Real ,1,3,4
 pPager->errCode || pPager->journalOpen==0 ,2,2,4
 (orMask&PGHDR_NEED_SYNC)==0 ,2,2,4
 eMode==INCRINIT_ROOT || eMode==INCRINIT_TASK ,3,1,4
 pPager->fd->pMethods ,2,2,4
 u.bh.i>=0 && u.bh.i<p->nCursor ,2,2,4
 type==NC_IsCheck || type==NC_PartIdx ,3,1,4
 pLeafPage->pgno==leafPgno ,2,2,4
 j>=0 && j+n<=p->nVar ,2,2,4
DR(PIC_ADDR_REG) == 25 && PIC_ADDR_REG == TMP_REG2,4,0,4
type >= SLJIT_JUMP && type <= SLJIT_CALL3,4,0,4
z != &EG(uninitialized_zval),2,2,4
 (u.bw.pnErr->flags & MEM_Int)!=0 ,2,2,4
 (u.bw.pnErr->flags & (MEM_Str|MEM_Blob))==0 ,2,2,4
 pTempCur->pKey==0 ,2,2,4
 i<nReaders ,2,2,4
 opcode>0 && opcode<(int)sizeof(opcodeProperty) ,2,2,4
 iByte==nResultBytes ,2,2,4
 yymsp[-2].minor.yy75!=0 ,2,2,4
 u.ab.p1>=0 && u.ab.p1+u.ab.n<=p->nVar ,2,2,4
 nChunk>sizeof(Mem6Chunk) ,2,2,4
 p->bHasStat==0 || p->bHasStat==1 ,3,1,4
 pPg->inJournal ,1,3,4
 u.bk.pC->pCursor!=0 ,2,2,4
 u.bt.i>=0 && u.bt.i<p->nCursor ,2,2,4
 (u.by.pnErr->flags & (MEM_Str|MEM_Blob))==0 ,2,2,4
 pPager->pInJournal ,2,2,4
 u.an.pC->pseudoTable ,2,2,4
 zData!=pMem->zShort ,1,3,4
 (pMem->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) || pMem->r==pMem->i ,2,2,4
"common, cc, BACKTRACK_AS(assert_backtrack), FALSE",4,0,4
 !u.bi.pC->isTable ,2,2,4
 ap1->type==REDUCE || ap1->type==RD_RESOLVED || ap1->type==CONFLICT,1,3,4
 (pMem->flags & MEM_Short)==0 || pMem->z==pMem->zShort ,1,3,4
 testAddr>0 || sqlite3_malloc_failed ,2,2,4
 memIsValid(u.cl.pX) ,2,2,4
 (u.bx.pVal->flags & MEM_Int)!=0 ,2,2,4
 pOp->p4.z==0 || pOp->p3==1 ,2,2,4
 (p->btreeMask & (1<<u.ax.iDb))!=0 ,2,2,4
 u.bu.pDb->pBt!=0 ,2,2,4
 rc==SQLITE_IOERR || rc==SQLITE_FULL ,2,2,4
 u.bg.i>=0 && u.bg.i<p->nCursor ,2,2,4
 pOne->pExpr->pLeft!=0 && pOne->pExpr->pRight!=0 ,3,1,4
 u.by.nRoot>0 ,2,2,4
 db->mutex!=0 || isThreadsafe==0 || sqlite3Config.bFullMutex==0 ,2,2,4
 !pcache_g.pStart ,2,2,4
 zArg[i]==FTS3_MATCHINFO_HITS ,3,1,4
 i==nReaders ,2,2,4
 pParent || pNode->iNode==1 ,3,1,4
local_size > 0,4,0,4
 yymsp[-2].minor.yy145!=0 ,2,2,4
 u.bf.pCx->deferredMoveto==0 ,2,2,4
private_data_ptr == 0,4,0,4
stream == filter->stream,2,2,4
 regDest>0 ,2,2,4
 u.ap.nField>0 && pOp->p2>0 && pOp->p2+u.ap.nField<=p->nMem+1 ,2,2,4
 1.0==*(double*)&t1 ,2,2,4
 pRangeStart!=0 ,3,1,4
 mask==0 || mask==-1 ,2,2,4
 seenVar && seenIn ,3,1,4
 -1-pOp->p2<pParse->nLabel ,3,1,4
opline->extended_value & ZEND_QUICK_SET,3,1,4
 (iWrite/nBlk)==((buf.st_size+nBlk-1)/nBlk) ,3,1,4
!pArray||pScript,2,2,4
 pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0) == sqlite3VdbeSerialTypeLen(serial_type) ,2,2,4
 apx->type==SH_RESOLVED || apx->type==RD_RESOLVED || apx->type==CONFLICT || apy->type==SH_RESOLVED || apy->type==RD_RESOLVED || apy->type==CONFLICT ,1,3,4
 pPager->nSavepoint==0 || pPager->sjfd->pMethods || pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
 regSrc>0 ,2,2,4
 !z || !sqlite3Isdigit(z[n]) ,2,2,4
 (n&0x7fffffff)==n ,4,0,4
 u.bi.pC->isTable || pOp->opcode==OP_RowKey ,2,2,4
 idx>=-1 && idx<MERGE_COUNT ,2,2,4
 !u.be.pC->pseudoTable ,2,2,4
 (pVal->flags & MEM_Int)!=0 ,2,2,4
 i>=0 && i<p->db->nDb && i<sizeof(u32)*8 ,2,2,4
pCache->pDirtyTail,2,2,4
 pPager->tempFile==0 || pPager->changeCountDone ,2,2,4
 EIGHT_BYTE_ALIGNMENT(aCopy[0]) ,2,2,4
 !sqlite3Isdigit(z[n]) ,2,2,4
 nCoord==2 || nCoord==4 || nCoord==6 || nCoord==8 || nCoord==10 ,3,1,4
 pcache_g.pLruHead!=pPage ,2,2,4
 pOrderBy->a[0].pExpr->iColumn==pIdx->aiColumn[nEq] ,2,2,4
 nByte>0 || (rc!=SQLITE_OK && p==0) ,3,1,4
 u.ay.iDb>=0 && u.ay.iDb<db->nDb ,2,2,4
 pgnoChild<=pagerPagecount(pPage->pBt) ,2,2,4
 (u.bh.pMem->flags & MEM_Int)!=0 ,2,2,4
 (pMem->flags & MEM_Blob)!=0 ,2,2,4
 b ,3,1,4
 pSrc->a[iSrc].pTab ,2,2,4
 nByte<pPage->pBt->usableSize-8 ,2,2,4
 nEq>=pLoop->u.btree.nSkip ,2,2,4
 pcacheCheckHashCount(pPage->pCache) ,2,2,4
 nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 ,2,2,4
 pOp->p5>=1 && pOp->p5<=4 ,3,1,4
 mem5.currentOut>=0 ,2,2,4
 p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) ,4,0,4
 u.bl.pModule->xRowid ,2,2,4
 u.bj.i>=0 && u.bj.i<p->nCursor ,2,2,4
 pLower==0 || (pLower->eOperator & (WO_GT|WO_GE))!=0 ,3,1,4
 sz > sizeof(LookasideSlot*) ,2,2,4
" sqlite3HashFind(&pTable->pSchema->aFKey, pFKey->zTo, sqlite3Strlen30(pFKey->zTo)+1)!=pFKey ",2,2,4
 nData<=(pRtree->nDim*2 + 3) ,3,1,4
 *pbDone==0 ,3,1,4
 pOp->p4.z==0 || pOp->p3==1 || pOp->p3==0 ,2,2,4
 u.bc.pC->isTable==0 ,2,2,4
 pExpr->affinity==OE_Rollback || pExpr->affinity == OE_Abort || pExpr->affinity == OE_Fail ,2,2,4
 pPg->dirty==0 || pPager->errCode ,2,2,4
 u.bo.pC->isTable==0 ,2,2,4
 pLoop->addrOpenVirt[1]<0 ,2,2,4
 !pBt->inStmt ,2,2,4
 pcache_g.pLruHead==pPage ,2,2,4
 u.ba.oc==OP_SeekLt || u.ba.oc==OP_SeekLe ,2,2,4
 pParse->db->mallocFailed==0 ,2,2,4
 pConstraint->op==RTREE_MATCH ,2,2,4
 pCur->pPage->intKey || pIdxKey ,2,2,4
 pFrom->isRecursive==0 || pFrom->pTab ,3,1,4
 pPager->journalMode==PAGER_JOURNALMODE_DELETE || rc ,2,2,4
 u.an.sMem.z==u.an.sMem.zMalloc ,2,2,4
!(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) || (flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) == 0,4,0,4
 pIn3->flags==MEM_Int ,2,2,4
 i>=0 && i<sqlite3GlobalConfig.nPage ,2,2,4
 u.bp.pCrsr ,2,2,4
 p->addrOpenVirt[2]>=0 ,2,2,4
 iExclude==-1 ,2,2,4
idx < ht->nTableSize,2,2,4
 sqlite3BtreeIsInTrans(u.cd.pBt)==0 ,2,2,4
" sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec)<=0 || pParse->db->mallocFailed ",3,1,4
LOCKING_STYLE_POSIX==1,2,2,4
stream,2,2,4
 u.bd.i>=0 && u.bd.i<p->nCursor ,2,2,4
 u.bu.iCnt==1 ,2,2,4
 aPermute[i]>=0 && aPermute[i]<p->pEList->nExpr ,2,2,4
 pCrsr!=0 || pC->nullRow ,3,1,4
 u.at.desiredAutoCommit==1 || u.at.iRollback==0 ,2,2,4
 pPage->pDbPage->nRef>0 ,2,2,4
 pArray->nMutex<ArraySize(pArray->aBtree)-1 ,2,2,4
(pTab->tabFlags & TF_Virtual)!=0 && pTab->nCol==0 && pTab->aCol==0,2,2,4
 pcacheCheckHashCount(pCache) ,2,2,4
 *ppVtab==0 ,3,1,4
 (p->btreeMask & (1<<u.au.i))!=0 ,2,2,4
 *ppHead==pPage ,2,2,4
 ap2->type==REDUCE || ap2->type==RD_RESOLVED || ap2->type==CONFLICT,1,3,4
" szCell[i]==cellSizePtr(pPg, pCell) ",3,1,4
 u.bw.pDb->pBt!=0 ,2,2,4
 !u.bk.pC->isTable ,2,2,4
 (u.bf.pMem->flags & MEM_Int)!=0 ,2,2,4
private_data_ptr == OVECTOR(offset + 0),4,0,4
 eType==DL_POSITIONS || eType==DL_DOCIDS ,2,2,4
 pCache->nPage>=0 ,2,2,4
 u.au.i>=0 && u.au.i<db->nDb ,2,2,4
 (m.flags & MEM_Dyn)!=0 || db->mallocFailed ,2,2,4
 pTos<=pStackLimit ,1,3,4
 ArraySize(pLoop->aLTermSpace)==4 ,2,2,4
 p1>0 && p1+n-1<p->nMem ,2,2,4
 stp->ap ,1,3,4
 pCache->nHash>0 ,3,1,4
 u.bz.pProgram->nCsr==u.bz.pFrame->nChildCsr ,2,2,4
 cArg==FTS3_MATCHINFO_HITS ,3,1,4
 pPager->state>=PAGER_SHARED || pPager->dbSizeValid==0 ,2,2,4
 pPager->journalMode!=PAGER_JOURNALMODE_OFF ,2,2,4
 (p->btreeMask & (1<<u.aw.iDb))!=0 ,2,2,4
 rc!=SQLITE_OK || pCsr->eEvalmode || pTok->pArray==0 ,2,2,4
 dbMem==db || dbMem==0 ,2,2,4
 pC->pseudoTableReg==0 || pC->nullRow ,3,1,4
 pPage->pNext || pCache->pDirtyTail==pPage ,2,2,4
 (mem3.aPool[i-1].u.hdr.size4x & 1)==0 ,4,0,4
 !(u.an.pDest->flags & MEM_Dyn) ,2,2,4
 (int)(sqlite3Strlen30(z)+k+1)<=n ,2,2,4
" sqlite3_vfs_find(""__two"")==0 ",2,2,4
 TK_BLOB==OP_HexBlob ,1,3,4
ast->attr == T_CLASS_C && CG(active_class_entry) && ZEND_CE_IS_TRAIT(CG(active_class_entry)),2,2,4
 yymsp[-1].minor.yy243!=0 ,2,2,4
 u.cf.isWriteLock==0 || u.cf.isWriteLock==1 ,2,2,4
 iBlock>=0 && iBlock<pChunk->nBlock ,2,2,4
 p->addrOpenVirt[1] == -1 ,2,2,4
 sqlite3BtreeHoldsMutex(db->aDb[u.bu.iDb].pBt) ,2,2,4
 v!=0 || db->mallocFailed ,2,2,4
 iCell<get2byte(&data[pPage->hdrOffset+3]) ,1,3,4
" sqlite3_vfs_find(""__one"")==0 ",2,2,4
 u.bj.pModule->xRowid ,2,2,4
 nEq<=p->nColumn ,3,1,4
 p2+n<p->nMem ,2,2,4
 CURSOR_VALID==pCur->eState || CURSOR_SKIPNEXT==pCur->eState ,3,1,4
 p2<=(p->nMem-p->nCursor) ,3,1,4
 p==pStart || c==0 ,3,1,4
 i<=pIdx->nSample && i>=0 ,3,1,4
 p || (pTokenizer && rc!=SQLITE_OK) ,2,2,4
 pLock->pNext->pPrev==pLock ,2,2,4
 pcache_g.pLruTail==pPage ,2,2,4
 spx->prec==spy->prec && spx->assoc==NONE ,1,3,4
 p->aMutex.nMutex==0 ,2,2,4
!(flags & SET_FLAGS) && (flags & ARG2_IMM) && arg1 == TMP_REG1,4,0,4
 eDest!=SRT_Sorter ,2,2,4
 sMem.flags & MEM_Term ,1,3,4
pMaster,2,2,4
*cc == XCL_PROP || *cc == XCL_NOTPROP,4,0,4
 (u.cg.pQuery->flags&MEM_Int)!=0 && u.cg.pArgc->flags==MEM_Int ,2,2,4
guards != NULL,3,1,4
 *pRes==0 ,4,0,4
 p->id==SQLITE_MUTEX_RECURSIVE || pthreadMutexNotheld(p) ,4,0,4
 (pOp->p1)<p->nCursor ,1,3,4
 rc!=SQLITE_OK || iPageSize16==(u16)iPageSize ,2,2,4
 pIndex->aiColumn[nColumn-1]==(-1) || !HasRowid(pIndex->pTable),3,1,4
 iSpace2<=pBt->pageSize ,2,2,4
 nStack<p->nOp ,1,3,4
 db->aDb[u.ar.i].pBt!=0 ,2,2,4
 p->apSave[idJournal]==0 ,2,2,4
 u.bh.pC->iDb>=0 ,2,2,4
 sp->index==j ,1,3,4
 (u.ax.flags & 0x07)==5 || (u.ax.flags & 0x07)==2 ,2,2,4
 !pParent || !pNode->pParent || pNode->pParent==pParent ,3,1,4
 u.bi.pKey->flags & MEM_Int ,2,2,4
 (pPg->flags&PGHDR_IN_JOURNAL) || (int)pPg->pgno>pPager->origDbSize ,2,2,4
info & ZEND_MM_IS_SRUN,4,0,4
 u.ax.p2<=p->nMem ,2,2,4
 pDest->flags & MEM_Ephem ,2,2,4
 pWal->szPage==szPage ,2,2,4
!NONCHAR(ch) || ch != (char)OPND(s),2,2,4
 p->nSrc>k && k>=0 ,2,2,4
 pOp->p2>0 && pOp->p2<=p->nMem ,2,2,4
 u.bd.pCx->deferredMoveto==0 ,2,2,4
 n>=512 && n<=32768 ,2,2,4
 rc!=SQLITE_OK || pPager->state==PAGER_RESERVED ,2,2,4
LOCKING_STYLE_DOTFILE==3,2,2,4
 pNode->nRef>0 ,3,1,4
 bSkip==0 ,2,2,4
 pExpr->op!=TK_AS ,1,3,4
 eOp & (WO_GT|WO_GE) ,3,1,4
 iType-2 < sizeof(winMutex_staticMutexes)/sizeof(winMutex_staticMutexes[0]) ,2,2,4
 szCell[nCell]==3 ,3,1,4
 p->addrOpenVirt[2] == -1 ,2,2,4
 pcache.pLruTail==pPage ,2,2,4
*pp,3,1,4
 zName!=0 || pNew==0 ,3,1,4
 VdbeMemDynamic(pIn1)==0 ,4,0,4
 SQL_SELECT_LEVEL+1==SQL_SELECT_ALL_LEVEL,2,2,4
 p && p->pCache ,2,2,4
 u.bc.i>=0 && u.bc.i<p->nCursor ,2,2,4
 sizeof(t)+sizeof(pid)<=nBuf ,2,2,4
 u.br.i>=0 && u.br.i<p->nCursor ,2,2,4
 u.ba.pC->pseudoTable==0 ,2,2,4
 u.cd.eNew==PAGER_JOURNALMODE_DELETE || u.cd.eNew==PAGER_JOURNALMODE_TRUNCATE || u.cd.eNew==PAGER_JOURNALMODE_PERSIST || u.cd.eNew==PAGER_JOURNALMODE_OFF || u.cd.eNew==PAGER_JOURNALMODE_MEMORY || u.cd.eNew==PAGER_JOURNALMODE_WAL || u.cd.eNew==PAGER_JOURNALMODE_QUERY ,2,2,4
" p->id==SQLITE_MUTEX_RECURSIVE || winMutexNotheld2(p, tid) ",4,0,4
 pcache_g.pLruHead ,2,2,4
 pCur->aNode[ii]==0 ,3,1,4
 u.cc.apVal || u.cc.n==0 ,2,2,4
 sqlite3Config.bMemstat || mem.mutex!=0 ,2,2,4
 u.bj.pC->rowidIsValid ,2,2,4
 iTerm<nTerms ,2,2,4
 jfd == (isMainJrnl ? pPager->jfd : pPager->stfd) ,2,2,4
 i>=0 && i<6 ,2,2,4
 u.cj.pName->flags & MEM_Str ,2,2,4
 u.bq.i>=0 && u.bq.i<p->nCursor ,2,2,4
 cbrk>=cellOffset+2*nCell ,2,2,4
 j==nEq ,2,2,4
 pParse->pVdbe ,2,2,4
 u.cm.pModule->xNext ,2,2,4
 0==sqlite3_vfs_find(0) ,2,2,4
 pDest->flags & (MEM_Str|MEM_Blob) ,2,2,4
 sqlite3BtreeIsInTrans(u.ar.pBt) ,2,2,4
 pLock->pPrev->pNext==pLock ,2,2,4
 pOp->p3==0 || pOp->opcode!=OP_IdxGT ,1,3,4
 (sqlite3BtreeFlags(u.bh.pC->pCursor) & BTREE_ZERODATA)==0 ,2,2,4
 u.bi.pC->iDb>=0 ,2,2,4
 pIn1<=&aMem[(p->nMem-p->nCursor)] ,3,1,4
 pc==u.bz.pFrame->pc ,2,2,4
 (pNew==0)==(rc!=SQLITE_OK) ,2,2,4
 p->aMem[n].flags==MEM_Null ,2,2,4
 u.ce.n>=0 ,2,2,4
 pPager->errCode || pPager->dbSizeValid==0 ,2,2,4
 pVtab ,2,2,4
 pPage->childPtrSize==0 ,3,1,4
 u.bx.iDb>=0 && u.bx.iDb<db->nDb ,2,2,4
 pTos->z==sMem.z ,1,3,4
 u.ax.p2>0 ,2,2,4
 pVtab->nRef>0 ,2,2,4
 SQLITE_PTRSIZE==sizeof(char*) ,3,1,4
" db==0 || sqlite3BtreeHoldsMutex(db->aDb[sqlite3SchemaToIndex(db, p->pSchema)].pBt) ",2,2,4
 pOp[1].p3==pOp[0].p3 ,3,1,4
 pPage->pLruPrev || pPage==pGroup->pLruHead ,3,1,4
 (mCovered&mSeen)==mCovered ,3,1,4
 u.ay.p2>0 ,2,2,4
 p1>0 ,2,2,4
 pCrsr!=0 || pC->pseudoTableReg>0 ,3,1,4
 pLoop->u.btree.nSkip==0 ,2,2,4
 pRec->db ,2,2,4
 u.ba.nField>0 ,2,2,4
 pWriter || rc!=SQLITE_OK ,2,2,4
nOverflow<2 || pOld->aiOvfl[0]==pOld->aiOvfl[1]-1,2,2,4
 size==mem3.aPool[i+size-1].u.hdr.prevSize ,4,0,4
u.an.aType,2,2,4
 p->apCsr[u.bg.i]!=0 ,2,2,4
 n==0 || (pOp->p2>0 && pOp->p2+n<=p->nMem+1) ,2,2,4
" !ExprHasAnyProperty(pE, EP_TokenOnly|EP_Reduced) ",2,2,4
 (p->btreeMask & (1<<pOp->p1))!=0 || p->aMutex.nMutex==0 ,2,2,4
nOverflow<3 || pOld->aiOvfl[1]==pOld->aiOvfl[2]-1,2,2,4
src2 & SRC2_IMM,4,0,4
 db->aDb[u.av.iDb].pBt!=0 ,2,2,4
 u.br.pC!=0 ,2,2,4
 eMode==PAGER_JOURNALMODE_DELETE || eMode==PAGER_JOURNALMODE_TRUNCATE || eMode==PAGER_JOURNALMODE_PERSIST || eMode==PAGER_JOURNALMODE_OFF || eMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
 (p->btreeMask & (1<<u.bs.iDb))!=0 ,2,2,4
 pProgram->nMem+pProgram->nCsr==pFrame->nChildMem ,3,1,4
(inst[0] & 0xfff00000) == MOVW && (inst[1] & 0xfff00000) == MOVT,4,0,4
 basisend!=0 ,1,3,4
 state==pPager->state ,2,2,4
 u.bt.pC->deferredMoveto==0 ,2,2,4
 j+1 < ArraySize(apCopy) ,2,2,4
 u.bi.pC->pCursor!=0 || u.bi.pC->pseudoTable ,2,2,4
 u.bk.pC->isTable || pOp->opcode==OP_RowKey ,2,2,4
" ExprHasAnyProperty(p, EP_Reduced|EP_TokenOnly) || (p->flags2 & EP2_MallocedToken)==0 ",2,2,4
 iFreePage<=origSize ,1,3,4
 p1>0 && p1+n<=(p->nMem-p->nCursor)+1 ,3,1,4
 (rc==SQLITE_OK && pNode) || (pNode==0 && rc!=SQLITE_OK) ,2,2,4
 u.ci.pModule->xNext ,2,2,4
 sqlite3BtreeIsInTrans(u.aq.pBt) ,2,2,4
 u.az.i>=0 ,2,2,4
 pcache.pLruTail!=pPage ,2,2,4
srcw[0] != 0,4,0,4
 pDb->zProgress ,1,3,4
p->type < FILE_NAMES_SIZE,3,1,4
 p2>0 && p2+n-1<p->nMem ,2,2,4
 (n & (n-1))==0 ,2,2,4
!cfg->live_range_end[i]->access,2,2,4
 mem0.nPageFree<sqlite3Config.nPage ,2,2,4
 p->aMem[i].flags==MEM_Undefined ,3,1,4
!(arg & OFFS_REG_MASK),4,0,4
 sqlite3GlobalConfig.mutex.xMutexAlloc==0 || sqlite3GlobalConfig.mutex.xMutexAlloc==p->xMutexAlloc ,2,2,4
 (p->btreeMask & (1<<u.au.iDb))!=0 ,2,2,4
 u.bs.iCnt==1 ,2,2,4
 db->aDb[u.au.iDb].pBt!=0 ,2,2,4
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p3]) ,3,1,4
 seenVar ,3,1,4
 SQLITE_LIMIT_WORKER_THREADS==(SQLITE_N_LIMIT-1) ,3,1,4
 debugMutexHeld(p) ,2,2,4
 p->tos<p->pc || sqlite_malloc_failed==1 ,2,2,4
 p1+n<p->nMem ,2,2,4
 pFrom->flags & (MEM_Str|MEM_Blob) ,1,3,4
(size_t) buflen >= sizeof(*result),2,2,4
 u.bz.pProgram->nMem+u.bz.pProgram->nCsr==u.bz.pFrame->nChildMem ,2,2,4
 u.bi.pData->flags & (MEM_Blob|MEM_Str) ,2,2,4
 pItem->isCorrelated==0 && nRef<=0 ,3,1,4
 (int)(strlen(z)+k+1)<=n ,2,2,4
 pConstraint->op==RTREE_MATCH || pConstraint->op==RTREE_QUERY ,3,1,4
LOCKING_STYLE_FLOCK==4,2,2,4
 zNewRecord==(unsigned char *)zTemp ,1,3,4
 (u.bd.aMem[u.bd.nField].flags & MEM_Null)==0 ,2,2,4
 addr2==sqlite3VdbeCurrentAddr(v) ,2,2,4
 u.ch.p1>=0 && u.ch.p1<db->nDb ,2,2,4
 x<pChunk->nBlock ,2,2,4
 pNext<&pReader->aNode[pReader->nNode] ,2,2,4
 (db->flags & SQLITE_CommitBusy)==0 ,2,2,4
 pPk->tnum=pTab->tnum ,3,1,4
 (pisOpen==0 && !pPager->tempFile && !pPager->pWal) || *pisOpen==0 ,2,2,4
 u.ch.pModule->xColumn ,2,2,4
 !(pMem->flags&MEM_Short) ,1,3,4
 (pRangeStart->wtFlags & TERM_LIKEOPT)==0 || (pLoop->wsFlags & WHERE_TOP_LIMIT)!=0 ,3,1,4
pPg->pPrevAll->pNextAll==pPg,2,2,4
 pListItem->pExpr->op==TK_COLLATE ,3,1,4
 EIGHT_BYTE_ALIGNMENT(journalFileSize) ,2,2,4
 pPreStmt==0 ,1,3,4
 u.av.iDb>=0 && u.av.iDb<db->nDb ,2,2,4
 cbrk+size<=usableSize && cbrk>=0 ,2,2,4
 iHeight>=0 ,2,2,4
 u.bh.pC->rowidIsValid ,2,2,4
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p1]) ,3,1,4
 nRef==sqlite3pager_refcount(pPager) ,2,2,4
op==TK_UPDATE || op==TK_DELETE,2,2,4
 pcache.pLruHead!=pPage ,2,2,4
 u.at.desiredAutoCommit==1 ,2,2,4
 pPager->state>=PAGER_SHARED || pPager->dbSize<0 ,2,2,4
 (int)pPager->mxPgno>=nPage ,2,2,4
 zNewRecord!=(unsigned char *)zTemp ,1,3,4
 pFrom->inTrans==TRANS_WRITE ,2,2,4
(long long) m - (long long) j - B >= 0,2,2,4
 (pIn3->flags & MEM_Dyn)==0 ,2,2,4
" sqlite3VdbeRecordCompare(aSample[i-1].n, aSample[i-1].p, pRec)<0 || pParse->db->mallocFailed ",3,1,4
 u.bj.pC->iDb>=0 ,2,2,4
 !pPager->exclusiveMode ,2,2,4
 (opProperty & OPFLG_OUT3)!=0 ,2,2,4
 sqlite3_vfs_find(0)==&one ,2,2,4
 pWInfo->pOrderBy==0 || pWInfo->pOrderBy->nExpr==1 || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 ,3,1,4
 pPage->pNext==0 ,2,2,4
 (iPos&(SNIPPET_BUFFER_CHUNK-1))==0 ,2,2,4
 iIdx<sizeof(zIdxStr)-1 ,2,2,4
 (((u8*)p - (u8*)0) & 7)==0 ,2,2,4
" strcmp(zAux,z)==0 ",2,2,4
 sqlite3BtreeCursorIsValid(u.bi.pCrsr) ,2,2,4
p - env.envp <= sizeenv,1,3,4
 pMem->flags & MEM_Str || pMem->db->mallocFailed ,4,0,4
 sqlite3Config.mutex.xMutexAlloc==0 || sqlite3Config.mutex.xMutexAlloc==p->xMutexAlloc ,2,2,4
 pBt->inStmt==0 ,2,2,4
(flags & (EX86_PREF_F2 | EX86_PREF_F3)) != (EX86_PREF_F2 | EX86_PREF_F3) && (flags & (EX86_PREF_F2 | EX86_PREF_66)) != (EX86_PREF_F2 | EX86_PREF_66) && (flags & (EX86_PREF_F3 | EX86_PREF_66)) != (EX86_PREF_F3 | EX86_PREF_66),4,0,4
 pPager->stmtSize <= pPager->origDbSize ,2,2,4
 (u.cf.pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,2,2,4
 u.bk.pC->pseudoTable==0 ,2,2,4
 sqlite3BtreeCursorIsValid(u.bf.pC->pCursor) ,2,2,4
 cfp->bplp==0 ,1,3,4
 nSegment>0 ,2,2,4
 p->ts.eState==1 ,4,0,4
 nOrderBy>=nExpr ,2,2,4
 u.bg.pKey->flags & MEM_Int ,2,2,4
 nFToken>0 ,3,1,4
 (p->selFlags & SF_NestedFrom)==0 || ((flags & SQLITE_FullColNames)==0 && (flags & SQLITE_ShortColNames)!=0) ,3,1,4
 lockList==pLock ,2,2,4
 (pMem->flags & MEM_Null)!=0 || pFunc==*(FuncDef**)&pMem->i ,2,2,4
 u.bb.pC->isTable ,2,2,4
 p->apCsr[u.be.i]!=0 ,2,2,4
 ((aCopy[i] - (u8*)0) & 7)==0 ,2,2,4
 u.ar.p1==SAVEPOINT_BEGIN||u.ar.p1==SAVEPOINT_RELEASE||u.ar.p1==SAVEPOINT_ROLLBACK ,2,2,4
 pPager->state>=RESERVED_LOCK ,2,2,4
 sqlite3BtreeGetPageSize(pTemp)==sqlite3BtreeGetPageSize(pMain) ,1,3,4
u.cj.pVtab && u.cj.pModule,2,2,4
 u.bb.i>=0 && u.bb.i<p->nCursor ,2,2,4
 mem0.nScratchFree<sqlite3GlobalConfig.nScratch ,2,2,4
child,2,2,4
 sOr.nTerm>0 ,2,2,4
" chngToIN==getMask(pMaskSet, iColumn) ",2,2,4
 (zCsr-zIn)==len ,1,3,4
" sqlite3MemdebugHasType(p, db ? (MEMTYPE_DB|MEMTYPE_HEAP) : MEMTYPE_HEAP) ",2,2,4
 bUseHint==1 || bUseHint==0 ,3,1,4
 p->nRef>0 || p->owner==0 ,4,0,4
 pOp->p3type==P3_COLLSEQ ,1,3,4
 yyruleno>=0 && yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) ,3,1,4
 pNew->token.n==(unsigned)sqlite3Strlen30((char*)pNew->token.z) ,2,2,4
 !z || !isdigit(z[n]) ,2,2,4
 p->aSortOrder!=0 ,3,1,4
 !pCache->pSynced || (pCache->pSynced->flags&PGHDR_NEED_SYNC)==0 ,2,2,4
 u.bc.nField>0 ,2,2,4
 pOp->p1>0 && pOp->p1<=(p->nMem+1 - p->nCursor) ,4,0,4
 enc==0 || enc==SQLITE_UTF8 || enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE ,1,3,4
 p->apCsr[u.br.i]!=0 ,2,2,4
 sqlite3PagerIswriteable(pTrunk->pDbPage) ,2,2,4
 !(u.an.pDest->flags & (MEM_Blob|MEM_Str)) || u.an.pDest->z==u.an.sMem.z ,2,2,4
pPg->pPrevAll==0,2,2,4
 mem5.currentOut>=(size*mem5.nAtom) ,2,2,4
 pWInfo->iContinue!=0 ,3,1,4
!(inp_flags & WRITE_BACK),4,0,4
size <= 256,4,0,4
 (p->btreeMask & (1<<u.ch.p1))!=0 ,2,2,4
 pExpr->op==TK_COLLATE || pExpr->op==TK_AS ,3,1,4
 sqlite3BtreeHoldsMutex(db->aDb[u.bx.iDb].pBt) ,2,2,4
 p->z ,2,2,4
pPg->pNextAll==0 || pPg->pNextAll->pPrevAll==pPg,2,2,4
pParse->nTab==0,2,2,4
 0==(p->flags&PGHDR_DIRTY) ,2,2,4
 u.an.pC!=0 ,2,2,4
 pExpr->eType==FTSQUERY_PHRASE || pExpr->eType==FTSQUERY_NEAR || isReqPos==0 ,2,2,4
 zNum[i]>='0' && zNum[i]<='9' ,2,2,4
 (pPager->state>=locktype) || (pPager->state==PAGER_UNLOCK && locktype==PAGER_SHARED) || (pPager->state==PAGER_RESERVED && locktype==PAGER_EXCLUSIVE) ,2,2,4
 u.ca.i>=0 ,2,2,4
 pBlk ,1,3,4
 pParse->sLastToken.quoted ,2,2,4
" (res==0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)==0) || (res<0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)<0) || (res>0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)>0) || CORRUPT_DB ",2,2,4
Z_TYPE_P(ret_array) == IS_ARRAY,2,2,4
 pPager->journalMode!=PAGER_JOURNALMODE_OFF || pPager->dbOrigSize==0 ,2,2,4
 nResultBytes>0 ,2,2,4
 u.ab.p2>=1 && u.ab.p2+u.ab.n-1<=p->nMem ,2,2,4
 u.ba.i>=0 ,2,2,4
n<=(1<<16) && n>0,2,2,4
 ((aSpace1 - (u8*)0) & 7)==0 ,2,2,4
hashIsEmpty(pRtree),2,2,4
 u.cc.i>=0 ,2,2,4
 u.be.i>=0 && u.be.i<p->nCursor ,2,2,4
 pRoot->nCell==0 ,2,2,4
GC_TYPE((zend_object*)func->common.prototype) == IS_OBJECT,4,0,4
 pOp[1].p2==pOp[0].p2 ,3,1,4
u.cf.pVtab && u.cf.pModule,2,2,4
 p2>0 && p2+n<=(p->nMem-p->nCursor)+1 ,3,1,4
!isView || triggers_exist,2,2,4
 apVfs[i]==sqlite3_vfs_find(0) ,2,2,4
 bFree==0 || pParse->pWith==0 ,3,1,4
EX(func) == (zend_function*)op_array,4,0,4
 iReg>0 && iReg<=pParse->nMem ,2,2,4
 k>=1 && k+n-1<=p->nMem ,2,2,4
 (p->vvaFlags & EVVA_ReadOnlyToken)==0 ,2,2,4
 result[nResultBytes-1]==' ' ,2,2,4
 bDescDoclist==0 || bDescDoclist==1 ,2,2,4
!(flags & LOAD_DATA) && DR(TMP_REG1) != reg_ar,4,0,4
 pRowid>=p->aStack ,1,3,4
 pcache.pLruHead==pPage ,2,2,4
"pParent, idx, pPage->pgno",2,2,4
 yymsp[-1].minor.yy75!=0 ,2,2,4
 nPage==pCache->nPage ,2,2,4
 pPager->state==PAGER_SYNCED || MEMDB || !pPager->dbModified ,2,2,4
 pDflt->z ,2,2,4
 aResult[0]==pPage->pgno ,1,3,4
 (p->btreeMask & (1<<u.ay.iDb))!=0 ,2,2,4
 u.bl.pC->pCursor!=0 ,2,2,4
 (pTerm->wtFlags & TERM_CODED)==0 ,2,2,4
 action==OE_Restrict ,2,2,4
 pPage->pExtra==(void *)&pPage[1] ,2,2,4
 u.bw.nRoot>0 ,2,2,4
 pOp->p3type==P3_KEYINFO ,1,3,4
 apx->sp==apy->sp ,1,3,4
 pUpper==0 || (pUpper->eOperator & (WO_LT|WO_LE))!=0 ,3,1,4
 strlen(pPreStmt->zSql)==len ,2,2,4
pattern,2,2,4
pPager->fd->pMethods||tempFile,2,2,4
 u.ax.pX!=0 ,2,2,4
 u.bw.z==0 ,2,2,4
 pOut<=&aMem[(p->nMem-p->nCursor)] ,3,1,4
file_nformats == file_nnames,3,1,4
 sParse.zErrMsg==0 ,2,2,4
 u.bh.pC->isTable ,2,2,4
nArg==1 || nArg==2,3,1,4
 p->nLookahead>0 ,1,3,4
 !MEMDB && !pPager->tempFile ,2,2,4
 isOpen(pPager->jfd) || pPager->journalMode==PAGER_JOURNALMODE_OFF ,2,2,4
" sqlite3MemdebugNoType(p, ~MEMTYPE_SCRATCH) ",2,2,4
!(flags & SRC2_IMM),4,0,4
 iBlock+size-1<mem5.nBlock ,2,2,4
 desiredAutoCommit==1 || rollback==0 ,2,2,4
 scratchAllocOut==1 ,2,2,4
reg_map[PIC_ADDR_REG] == 16 && PIC_ADDR_REG == TMP_REG2,4,0,4
compiler->local_size > 0,4,0,4
 pOp->p3type==P3_FUNCDEF || pOp->p3type==P3_VDBEFUNC ,1,3,4
 i==nElem ,2,2,4
(flags & (EX86_BIN_INS | EX86_SHIFT_INS)) != (EX86_BIN_INS | EX86_SHIFT_INS),4,0,4
 yymsp[-2].minor.yy360!=0 ,2,2,4
 mem0.nScratchFree<=sqlite3GlobalConfig.nScratch ,2,2,4
overflow == 0,2,2,4
src_r == TMP_REG2 && (src & SLJIT_MEM),4,0,4
 u<=LARGEST_INT64 ,4,0,4
 iCsr>=iStart ,3,1,4
 u.an.pC->pVtabCursor==0 ,2,2,4
 pWriter || bIgnoreEmpty ,3,1,4
 p->apCsr[u.bq.i]!=0 ,2,2,4
 u.bi.pC->pseudoTable==0 ,2,2,4
" ""BBB""[0]==SQLITE_AFF_TEXT ",4,0,4
 op<TK_GE ,3,1,4
*cc >= OP_KET && *cc <= OP_KETRPOS,4,0,4
 aHardLimit[SQLITE_LIMIT_WORKER_THREADS]==SQLITE_MAX_WORKER_THREADS ,3,1,4
 pCsr->bPoint==1 ,3,1,4
 k<pIdx->nColumn ,2,2,4
 p->eCreate==2 ,3,1,4
 pageSize>=512 && pageSize<=SQLITE_MAX_PAGE_SIZE ,1,3,4
 u.cl.pModule->xColumn ,2,2,4
 pMem->flags & MEM_Dyn ,1,3,4
 u.bc.oc==OP_SeekLt || u.bc.oc==OP_SeekLe ,2,2,4
 pMaskSet->n<=sizeof(Bitmask)*8 ,2,2,4
 u.co.nArg>1 && u.co.apArg[0] && (u.co.apArg[0]->flags&MEM_Null) ,2,2,4
 seenIn ,3,1,4
 nErr==0 || pParse->rc!=SQLITE_OK ,3,1,4
!(a & SLJIT_IMM) || !(flags & EX86_SSE2),4,0,4
 pOp[1].p4.i==pOp[0].p4.i ,3,1,4
 pExpr->op!=TK_VARIABLE ,2,2,4
 memIsValid(u.ch.pQuery) ,2,2,4
 p1>0 && p1+n<=p->nMem+1 ,2,2,4
 pConstraint->pGeom ,2,2,4
 (u.bc.aMem[u.bc.nField].flags & MEM_Null)==0 ,2,2,4
 rp->index==i ,1,3,4
 pCost->plan.wsFlags & WHERE_INDEXED ,2,2,4
 openList==pOpen ,2,2,4
 zNum[0]>='0' && zNum[0]<='9' ,2,2,4
LOCKING_STYLE_AFP==5,2,2,4
 (u.cd.pMem->flags & ~(MEM_Null|MEM_Agg))==0 ,2,2,4
 pData0>=p->aStack ,1,3,4
 pOp->opcode==OP_SeekGE || pOp->opcode==OP_SeekLE ,3,1,4
 res!=0 ,4,0,4
 rc==SQLITE_OK || nPage==-1 ,2,2,4
 *pIter==0x00 || *pIter==0x01 ,3,1,4
 u.bn.pCrsr!=0 ,2,2,4
 !pIdx || !pBest || pIdx==pBest ,2,2,4
 mem0.nPageFree<sqlite3GlobalConfig.nPage ,2,2,4
 p->state>=PAGER_RESERVED ,2,2,4
 p2>0 && p2+mx<=(p->nMem-p->nCursor)+1 ,3,1,4
 p->apSave[0]==0 ,2,2,4
 pPage->nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=5460 ,2,2,4
 pIn1 <= &p->aMem[(p->nMem-p->nCursor)] ,3,1,4
 pPager->readOnly ,2,2,4
 ALWAYS_was_false_or_NEVER_was_true ,2,2,4
" 0==memcmp(pPreStmt->zSql, zSql, len) ",2,2,4
 !pRtree->aHash[ii] ,2,2,4
 pPager->state==PAGER_SYNCED || MEMDB || !pPager->dirtyCache ,2,2,4
 pIdx->aSortOrder[i]==0 || pIdx->aSortOrder[i]==1 ,2,2,4
 nMinAlloc>sizeof(Mem6Link) ,2,2,4
 pIter->pNextLeaf==0 ,3,1,4
 zPath[nDb]!='\n' ,3,1,4
 locktype==NO_LOCK ,2,2,4
 pcache_g.isInit==0 ,2,2,4
 pCur->bPoint || pCur->nPoint ,3,1,4
 apCell[nCell]==&aSpace1[iSpace1-3] ,3,1,4
 0==argc ,1,3,4
 u.bv.iDb>=0 && u.bv.iDb<db->nDb ,2,2,4
 0==sqlite3_vfs_find(apVfs[i]->zName) ,2,2,4
 p->apCsr[u.bh.i]!=0 ,2,2,4
p->tos>=0,2,2,4
 p1>0 && p1+mx<=(p->nMem-p->nCursor)+1 ,3,1,4
 strlen(zFile)<256 ,1,3,4
 pcache1.pLruHead!=pPage && pcache1.pLruTail!=pPage ,2,2,4
 u.au.iDb>=0 && u.au.iDb<db->nDb ,2,2,4
 !(pMem->flags&MEM_Dyn) || pMem->xDel ,1,3,4
 pNode->nRef==1 ,3,1,4
 iIdxCur!=0 || (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 ,3,1,4
 pExpr->affinity == OE_Ignore ,2,2,4
 nData==(pRtree->nDim*2 + 3) ,2,2,4
 pOp->p2>0 && pOp->p2<p->nMem ,1,3,4
 (pTerm->wtFlags & TERM_DYNAMIC)==0 ,2,2,4
 (u.ax.flags & 0xf0)==0 ,2,2,4
 ((aSpace1 - (u8*)apCell) & 7)==0 ,2,2,4
 yymsp[-1].minor.yy145!=0 ,2,2,4
 u.av.pDb->pBt!=0 ,2,2,4
 u.ce.apVal || u.ce.n==0 ,2,2,4
 pcache.isInit==0 ,2,2,4
 pPage->nOverflow==0 || sqlite3PagerPageRefcount(pPage->pDbPage)>1 ,2,2,4
 e>=0 && e<size ,2,2,4
 iOvflSpace<=pBt->pageSize ,2,2,4
 sqlite3_data_count(pStmt)==1 ,3,1,4
 pTo->inTrans==TRANS_WRITE ,2,2,4
 u.ax.iDb>=0 && u.ax.iDb<db->nDb ,2,2,4
 ((aCopy[0] - (u8*)0) & 7)==0 ,2,2,4
 p->nLeavesStmt<p->nLeavesTotal ,2,2,4
 (p->btreeMask & (1<<u.av.iDb))!=0 ,2,2,4
 pcache.pLruHead ,2,2,4
 pCsr->bDesc==0 || pCsr->bDesc==1 ,2,2,4
 !isRootPage(pPage) ,1,3,4
 oc==OP_SeekLe || oc==OP_SeekGt ,2,2,4
" chngToIN==getMask(&pWInfo->sMaskSet, iCursor) ",3,1,4
 i<j ,3,1,4
 pDb->nStmt>0 ,1,3,4
 N >= sizeof(*p) ,2,2,4
 iAlias>0 && iAlias<=pParse->nAlias ,2,2,4
 pB==0 || pB->pNext==0 || pB->v<=pB->pNext->v ,2,2,4
 pSrc->a[iSrc+1].pTab ,2,2,4
 rc!=SQLITE_OK || (p->nToken>=1 && a[p->nToken-1].bIgnore==0) ,3,1,4
 mem0.aPageFree[i]!=mem0.aPageFree[mem0.nPageFree-1] ,2,2,4
!(flags & EX86_SHIFT_INS) || a == SLJIT_PREF_SHIFT_REG,4,0,4
 ((u8 *)pOld-mem5.zPool)%mem5.nAtom==0 ,2,2,4
 db->mallocFailed==0 || pNew==0 ,3,1,4
 u.ar.pSavepoint==db->pSavepoint ,2,2,4
 u.bi.pC->isIndex || pOp->opcode==OP_RowData ,2,2,4
 pCache->apHash[h]==pPage ,2,2,4
n >= 0 && n <= 9,2,2,4
var_name != NULL,3,1,4
 u.cn.pVtab->pModule->xRename ,2,2,4
 pCur->pTree ,2,2,4
 (aMem[nField].flags & MEM_Null)==0 ,2,2,4
 u.as.desiredAutoCommit==1 ,2,2,4
__type == IS_TRUE || __type == IS_FALSE,2,2,4
 (p->btreeMask & (1<<u.at.iDb))!=0 ,2,2,4
saveds >= 0 && saveds <= SLJIT_NO_GEN_REGISTERS,2,2,4
 (p->btreeMask & (1<<u.br.iDb))!=0 ,2,2,4
 pRC!=0 ,3,1,4
 pOut<=&p->aMem[p->nMem] ,2,2,4
 iReader<i ,2,2,4
 u.bg.pC->pCursor!=0 || u.bg.pC->pseudoTable ,2,2,4
 u.by.z==0 ,2,2,4
 !pOpen->pUnused || threadsOverrideEachOthersLocks==0 ,2,2,4
 i>=0 && i<sqlite3Config.nScratch ,2,2,4
 u.ay.i>=0 ,2,2,4
 szJ==os_szJ ,1,3,4
 u.cb.iSet==-1 || u.cb.iSet>=0 ,2,2,4
!first_patch,4,0,4
 pPager->stmtJSize == pPager->journalOff ,1,3,4
 pLoop->u.btree.pIndex!=0 ,3,1,4
 sizeof(RtreeCoord)==4 ,3,1,4
((base >= MIN_BASE) && (base <= MAX_BASE)) || (base == NO_BASE),2,2,4
 chngRowid || pTrigger || regOldRowid==regNewRowid ,2,2,4
 nPrefix>=0 ,3,1,4
 pcacheMutexHeld() || ppHead!=&pPage->pCache->pClean ,2,2,4
 p->aStack || sqlite_malloc_failed ,2,2,4
 pPager->state>=PAGER_EXCLUSIVE || pPg!=0 ,1,3,4
 pNew!=0 || rc!=SQLITE_OK ,2,2,4
 u.as.desiredAutoCommit==1 || u.as.desiredAutoCommit==0 ,2,2,4
 pExpr->x.pList==0 && pExpr->x.pSelect==0 ,2,2,4
 u.bn.i>=0 && u.bn.i<p->nCursor ,2,2,4
 bReadonly==PAGER_GET_READONLY || bReadonly==0 ,3,1,4
 pOp[1].p1==pOp[0].p1 ,3,1,4
 memIsValid(pArg) ,3,1,4
pPg->pPrevAll,2,2,4
LOCKING_STYLE_NONE==2,2,2,4
" sqlite3SchemaMutexHeld(db, 0, pSchema) ",3,1,4
 (u.ck.pQuery->flags&MEM_Int)!=0 && u.ck.pArgc->flags==MEM_Int ,2,2,4
 pParse->nErr>0 ,2,2,4
 p2>0 && p2+n<=p->nMem+1 ,2,2,4
 (idxStr==0 && argc==0) || strlen(idxStr)==argc*2 ,2,2,4
 pTask->file2.iEof>0 ,3,1,4
 rc!=SQLITE_OK || !pCsr->pNode || pCsr->iCell<NCELL(pCsr->pNode) ,2,2,4
 zShellStatic ,1,3,4
 pSrc->nSrc>(iSrc+1) ,2,2,4
 u.bs.pC->deferredMoveto==0 ,2,2,4
 pEList ,1,3,4
 (u.bw.pVal->flags & MEM_Int)!=0 ,2,2,4
 p->magic==VDBE_MAGIC_HALT ,1,3,4
b->start <= b->end,2,2,4
 u.cg.pCur->pVtabCursor ,2,2,4
 ii==0 || ii==1 ,3,1,4
 u.bj.pC->isTable ,2,2,4
 pgnoChild<=pagerPagecount(pRoot->pBt) ,2,2,4
 memIsValid(u.ck.pName) ,2,2,4
 p->apCsr[u.bs.i]!=0 ,2,2,4
cc == ccend,4,0,4
 pUpper==0 || (pUpper->wtFlags & TERM_VNULL)==0 ,3,1,4
(*cc >= OP_ASSERT && *cc <= OP_ASSERTBACK_NOT) || (*cc >= OP_ONCE && *cc <= OP_SCOND),4,0,4
 rc==SQLITE_OK || pPager->state==PAGER_SHARED ,2,2,4
 pPage || !createFlag || rc!=SQLITE_OK ,2,2,4
addr <= 0x7fffffff,4,0,4
 sqlite3ThreadDataReadOnly()->useSharedData ,2,2,4
 pcache_g.pLruTail!=pPage ,2,2,4
 pPage==0 || pPager->hasBeenUsed ,3,1,4
 top+nByte <= pPage->pBt->usableSize ,2,2,4
 pPager->nSavepoint==0 || isOpen(pPager->sjfd) || pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,2,2,4
ast->attr == T_CLASS_C && ce && ZEND_CE_IS_TRAIT(ce),2,2,4
 once ,2,2,4
 u.cc.n>=0 ,2,2,4
default_callback,2,2,4
*val != NULL,2,2,4
 u.ar.i>=0 && u.ar.i<db->nDb ,2,2,4
 !isOpen(pPager->jfd) || pPager->journalOff>0 || rc!=SQLITE_OK ,2,2,4
!has_alternatives,4,0,4
"!""Unexpected return value from ucol_strcoll()""",3,1,4
 pTwo->pExpr->pLeft!=0 && pTwo->pExpr->pRight!=0 ,3,1,4
 u.ay.p2<=p->nMem ,2,2,4
 nShift<=nDesired ,3,1,4
 u.as.pSavepoint==db->pSavepoint ,2,2,4
 pRangeEnd==0 || (pRangeEnd->wtFlags & TERM_VNULL)==0 ,3,1,4
(flags & (EX86_BYTE_ARG | EX86_HALF_ARG)) != (EX86_BYTE_ARG | EX86_HALF_ARG),4,0,4
 hdr == (pgno==1 ? 100 : 0) ,1,3,4
 pPager->dbOrigSize==0 ,2,2,4
 u.aw.pDb->pBt!=0 ,2,2,4
 yymsp[-1].minor.yy360!=0 ,2,2,4
 pOp->p2>0 && pOp->p2+pOp->p3<=(p->nMem-p->nCursor)+1 ,3,1,4
 pCursor->pNode==pChild ,2,2,4
 u.bc.oc==OP_SeekLe || u.bc.oc==OP_SeekGt ,2,2,4
 leafCursorInvalid || !leafCur.pagesShuffled || !pCur->pagesShuffled ,2,2,4
 nCell>=0 && nCell<=MX_CELL(pPage->pBt) && MX_CELL(pPage->pBt)<=10921,2,2,4
!(flags & SQLITE_OPEN_EXCLUSIVE) || (flags & SQLITE_OPEN_CREATE),2,2,4
 pPgOld->inJournal ,1,3,4
 u.bi.i>=0 && u.bi.i<p->nCursor ,2,2,4
 pIdxInfo->idxStr==0 ,3,1,4
 u.cf.p1>=0 && u.cf.p1<db->nDb ,2,2,4
pCache->nRef==0,2,2,4
 nTerms>0 ,2,2,4
 p->pSchema==p->pTabSchema || p->pSchema==db->aDb[1].pSchema ,2,2,4
 pRtree->eCoordType==RTREE_COORD_INT32 ,3,1,4
 pC->pseudoTableReg>0 ,3,1,4
 rc!=SQLITE_OK || leafCur.aiIdx[leafCur.iPage]==0 ,2,2,4
 pPager->state>=PAGER_SHARED || pPager->dbModified==0 ,2,2,4
 iNode!=0 ,2,2,4
!pExpr,3,1,4
 idx+sz <= pPage->pBt->usableSize ,2,2,4
 pMaskSet->n < ARRAYSIZE(pMaskSet->ix) ,2,2,4
 iPos>=0 ,3,1,4
 iA1*iB0==0 || iA0*iB1==0 ,2,2,4
 (u.bz.pVal->flags & MEM_Int)!=0 ,2,2,4
 u.bk.i>=0 && u.bk.i<p->nCursor ,2,2,4
 pDest->z==sMem.z ,2,2,4
 pX->op==TK_COLUMN ,3,1,4
 ((u8 *)pOld-pChunk->zPool)%pChunk->nAtom==0 ,2,2,4
 u.bk.pC->nullRow==0 ,2,2,4
" !ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable!=pSrc->iCursor || pLoop->prereq!=0 ",3,1,4
array_offset != -1,2,2,4
 pFirst->aiRowEst!=0 ,2,2,4
 hdr==0 || pRoot->pgno==1 ,2,2,4
 pPager->exclusiveMode || pPager->state==PAGER_SHARED ,2,2,4
 p->pCache->bPurgeable==0 ,2,2,4
 pOpen->pNext->pPrev==pOpen ,2,2,4
"common, current",4,0,4
 pOp->p1+pOp->p2<=(p->nMem-p->nCursor)+1 ,3,1,4
 (pgno>0 && pgno<=iLastPg) || rc!=SQLITE_OK ,2,2,4
 u.bk.pC->isIndex || pOp->opcode==OP_RowData ,2,2,4
 pPage->pLruNext || pPage==pGroup->pLruTail ,3,1,4
 pOp->p1<=(p->nMem-p->nCursor) ,3,1,4
 !pPage->intKey ,2,2,4
 nField>0 && pOp->p2>0 && pOp->p2+nField<=p->nMem+1 ,2,2,4
dbOther,2,2,4
 u.ck.nArg>1 && u.ck.apArg[0] && (u.ck.apArg[0]->flags&MEM_Null) ,2,2,4
scratches >= 0 && scratches <= SLJIT_NO_TMP_REGISTERS,2,2,4
 iLookAhead!=fts5YYNOCODE ,3,1,4
 u.ba.oc==OP_SeekLe || u.ba.oc==OP_SeekGt ,2,2,4
 used>=0 ,1,3,4
 (pPager->state==PAGER_SHARED) || (pPager->exclusiveMode && pPager->state>PAGER_SHARED) ,2,2,4
 xleft1<=xright1 && (xleft1<xright1 || xleft2<=xright2) ,3,1,4
 u.by.iSet==-1 || u.by.iSet>=0 ,2,2,4
 nData<sizeof(zStatic) ,1,3,4
 left<=right ,3,1,4
 pCol->affinity-SQLITE_AFF_TEXT < sizeof(azType)/sizeof(azType[0]) ,2,2,4
 rc!=SQLITE_OK || pLeafPage->pgno==leafPgno ,2,2,4
 !pPg->pageHash || pPager->errCode || MEMDB || (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) ,2,2,4
 sqlite3VdbeCheckMemInvariants(&aMem[pOp->p2]) ,3,1,4
 pPager->tempFile==0 || pPager->state>=PAGER_EXCLUSIVE ,2,2,4
 c->iCursorType==idxNum ,2,2,4
 p->apCsr[u.bt.i]!=0 ,2,2,4
 (pHdr->eType & (pHdr->eType-1))==0 ,2,2,4
 j<=0x7fff ,3,1,4
 pIn->nSdst==1 || pParse->nErr>0 ,4,0,4
 u.bz.iSet==-1 || u.bz.iSet>=0 ,2,2,4
 ii<(NCELL(pNode)-1) ,2,2,4
 u.cm.pCur->pVtabCursor ,2,2,4
 flags&WHERE_TOP_LIMIT,3,1,4
 i>=0 && i<sqlite3Config.nPage ,2,2,4
 zData==pMem->zShort ,1,3,4
 u.an.p1<p->nCursor ,2,2,4
 (sqlite3BtreeFlags(u.bh.pC->pCursor) & BTREE_INTKEY)!=0 ,2,2,4
 sqlite3_vfs_find(0)==&two ,2,2,4
 yymsp[-2].minor.yy243!=0 ,2,2,4
 zRec!=0 || avail>=payloadSize || avail>=9 ,2,2,4
 pPager->journalOff==jSz ,1,3,4
 pExpr->pRight->eType==FTSQUERY_PHRASE ,2,2,4
!(flags & ARGS_SWAPPED),4,0,4
 !MEMDB && pPager->noSync==0 ,2,2,4
 ap ,1,3,4
 i>=0 && i<sqlite3GlobalConfig.nScratch ,2,2,4
 u.ap.i==u.ap.nByte ,2,2,4
 mem0.nScratchFree<(u32)sqlite3GlobalConfig.nScratch ,2,2,4
 p->apSave[1]==0 ,2,2,4
" NULL==""Unhandled DL_DEFAULT value""",2,2,4
 p->pEList!=0 ,4,0,4
 op!=TK_OR || c==WO_OR ,2,2,4
 pOpen->pPrev->pNext==pOpen ,2,2,4
"!""Bad seekMode""",2,2,4
 u.bs.pC->isTable==0 ,2,2,4
 pMem->flags & MEM_Short ,1,3,4
 TK_STRING==OP_String8 ,1,3,4
 p->ppOpenVirtual == &pOpenVirtual ,2,2,4
 iType-2 < ArraySize(winMutex_staticMutexes) ,2,2,4
 pOp->opcode==OP_String8 || pTerm->pWC->pWInfo->pParse->db->mallocFailed ,3,1,4
 u.bz.pProgram->nOp>0 ,2,2,4
 u.an.avail>=0 ,2,2,4
 (u.by.pnErr->flags & MEM_Int)!=0 ,2,2,4
 pOrderBy->nExpr==1 ,2,2,4
 rc==SQLITE_OK && ii==pNewParent->pgno && eType==PTRMAP_BTREE ,2,2,4
 zErr!=0 || db->mallocFailed ,2,2,4
 pCur->apPage[0]->nOverflow>0 ,2,2,4
&ht->nInternalPointer != pos || GC_REFCOUNT(ht) == 1,4,0,4
 (p->btreeMask & (1<<u.ar.i))!=0 ,2,2,4
 (pChunk->aCtrl[iBlock] & CTRL_FREE)==0 ,2,2,4
 jZeroRows>0 ,2,2,4
 u.bo.i>=0 && u.bo.i<p->nCursor ,2,2,4
 pRangeStart->wtFlags & TERM_LIKEOPT ,3,1,4
 eMode==PAGER_JOURNALMODE_QUERY ,2,2,4
 sqlite3Strlen30(pMem->z)<=pMem->n ,2,2,4
 id-2 < (int)(sizeof(aStatic)/sizeof(aStatic[0])) ,2,2,4
 !pRoot->leaf ,2,2,4
 pOp->p3type==P3_COLLSEQ || pOp->p3==0 ,1,3,4
 (nTabList-iFrom)>1 || isOptimal ,2,2,4
 iTerm==nTerms ,2,2,4
 u.as.desiredAutoCommit==1 || u.as.iRollback==0 ,2,2,4
new_buf != NULL,2,2,4
 pTos->flags & (MEM_Blob|MEM_Str) ,1,3,4
 pInfo->needToFreeIdxStr==0 || db->mallocFailed ,2,2,4
 nKey<sizeof(zStatic) ,1,3,4
common->has_set_som,4,0,4
 sqlite3_mutex_held(pRoot->pBt->mutex) ,2,2,4
 u.bm.i>=0 && u.bm.i<p->nCursor ,2,2,4
 u.at.desiredAutoCommit==1 || u.at.desiredAutoCommit==0 ,2,2,4
 pTask->pThread==0 && pTask->bDone==0 ,4,0,4
 pColl!=0 ,2,2,4
 !pcache.pStart ,2,2,4
 !pPager->memDb ,2,2,4
 (p->btreeMask & (1<<u.bu.iDb))!=0 ,2,2,4
 !pPg->pageHash || pPager->errCode || (pPg->flags&PGHDR_DIRTY) || pPg->pageHash==pager_pagehash(pPg) ,2,2,4
pTab && (pTab->tabFlags & TF_Virtual)!=0 && !pTab->pVtab,2,2,4
 iBlock+size-1<pChunk->nBlock ,2,2,4
 p->op==SQLITE_INDEX_CONSTRAINT_MATCH ,3,1,4
 rc!=SQLITE_OK || pagesize==(u16)iPageSize ,2,2,4
 (pMem->flags & MEM_Short)!=0 || pMem->z!=pMem->zShort ,1,3,4
 pRtree->nBusy==1 ,3,1,4
 u.be.pC->isTable==0 ,2,2,4
 cfp->fplp==0 ,1,3,4
 pDb->nStmt==0 ,1,3,4
 !p || (p->locked==0 && p->sharable) || p->pBt->db==p->db ,2,2,4
 u.bg.pData->flags & (MEM_Blob|MEM_Str) ,2,2,4
 pPager->aInStmt==0 ,2,2,4
 info.nData==nData ,1,3,4
 mem0.nScratchFree<sqlite3Config.nScratch ,2,2,4
 u.cj.pVtab->pModule->xRename ,2,2,4
GC_REFCOUNT(arr) <= 1,2,2,4
(base >= 2) && (base <= 36),2,2,4
Z_TYPE_P(var_array) == IS_ARRAY,2,2,4
 zType!=0 || pOp->p4.z!=0 ,3,1,4
 FTS3_SEGCURSOR_PENDING==-1 ,3,1,4
 pgnoChild<=pagerPagecount(pPage->pBt->pPager) ,2,2,4
 nByte <= ( get2byte(&data[hdr+5])-(hdr+8+(pPage->leaf?0:4)+2*get2byte(&data[hdr+3])) ),2,2,4
 0==(*ppExpr) ,2,2,4
 pRec->nField>0 && pRec->nField<=pIdx->nSampleCol ,3,1,4
 u.ch.isWriteLock==0 || u.ch.isWriteLock==1 ,2,2,4
 (pPg->flags&PGHDR_IN_JOURNAL) || (int)pgno>pPager->origDbSize ,2,2,4
 j+1 < nOld ,2,2,4
 pOp->p2==0 || (pTerm->flags&MEM_Str) ,1,3,4
objc==2,1,3,4
 !(flags&WHERE_AUTO_INDEX) || (flags&WHERE_IDX_ONLY) ,3,1,4
 i!=1 ,2,2,4
 SQLITE_MAX_WORKER_THREADS>0 || eMode==INCRINIT_NORMAL ,4,0,4
 pageInJournal(pPg) || pgno>pPager->origDbSize ,2,2,4
(arg & REG_MASK) || !(inst & UPDATE_REQ),4,0,4
 sqlite3Config.nRefInitMutex==0 ,2,2,4
 p->apCsr[u.bg.i]->isTable ,2,2,4
 pTab->dbMem==0 ,2,2,4
length > 1,4,0,4
 u.as.p1==SAVEPOINT_BEGIN||u.as.p1==SAVEPOINT_RELEASE||u.as.p1==SAVEPOINT_ROLLBACK ,2,2,4
 iSrc<pTabList->nSrc ,2,2,4
argw,4,0,4
 nCol==1 ,2,2,4
op_type == IS_CV,2,2,4
 get2byte(&data[hdr+5])==nUsable ,2,2,4
 pB->pNext==0 || pB->v<=pB->pNext->v ,2,2,4
 i==0 || i==1 ,3,1,4
 u.ay.pX!=0 ,2,2,4
 *p1!=0x00 && *p2!=0x00 && *p1!=0x01 && *p2!=0x01 ,2,2,4
((trio_reference_t *)ref)->parameter->type == FORMAT_USER_DEFINED,2,2,4
 !b ,3,1,4
 pPager->dirtyCache==0 || pPager->useJournal==0 ,1,3,4
 nField>0 && pOp->p2>0 && pOp->p2+nField<=(p->nMem-p->nCursor)+1 ,3,1,4
 u.bi.pC->nullRow==0 ,2,2,4
 (pTabList->nSrc-iFrom)>1 || isOptimal ,2,2,4
 p->db==p->pBt->db ,2,2,4
 noopMutexHeld(p) ,2,2,4
 sqlite3BtreeHoldsMutex(db->aDb[u.bv.iDb].pBt) ,2,2,4
 pcache1.isInit ,2,2,4
 pTriggerStep->op==TK_SELECT ,2,2,4
 u.bi.pC->deferredMoveto==0 ,2,2,4
iStart<=iEnd,3,1,4
 u.an.payloadSize==0 || u.an.zRec!=0 ,2,2,4
 pPg->needSync==0 || (int)pgno>pPager->origDbSize ,2,2,4
 iCurrent<=iMinPos ,3,1,4
 pTos->flags & MEM_Ephem ,1,3,4
 u.bl.i>=0 && u.bl.i<p->nCursor ,2,2,4
 u.bs.i>=0 && u.bs.i<p->nCursor ,2,2,4
" 0==memcmp(pCell, &aData[iOff], szCell[i+iNew]) ",3,1,4
pCache->nPage==0,2,2,4
 rc!=SQLITE_OK || pPager->journalOff==szJ ,2,2,4
 pExpr->eType==FTSQUERY_NEAR || pExpr->eType==FTSQUERY_OR || pExpr->eType==FTSQUERY_AND || pExpr->eType==FTSQUERY_NOT ,2,2,4
time != NULL,4,0,4
LOCKING_STYLE_NAMEDSEM==6,2,2,4
 pSorter->nPMA==0 ,2,1,3
 pPage->isPinned==1 ,3,0,3
 iDb<32 ,1,2,3
 (pLoop->wsFlags & WHERE_AUTO_INDEX)==0 ,3,0,3
 0==sqlite3LogEst(1) ,3,0,3
opline->op2.num < (uint32_t) i,2,1,3
 fx!=0 ,2,1,3
 pPage->nCell>0 || CORRUPT_DB ,3,0,3
 pPage->nCell = get2byte(&pPage->aData[hdr+3]) ,1,2,3
 sqlitepager_iswriteable(pRoot) ,1,2,3
 sizeof(t)+sizeof(randomnessPid)<=(size_t)nBuf ,3,0,3
 pIdx==0 || bStat3 || pIdx->nSample==0 ,3,0,3
OFFS_REG(p),3,0,3
t->details.map == NULL,2,1,3
 p->eLock>=SHARED_LOCK ,3,0,3
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage]->isInit ,3,0,3
 pOp->p3type==P3_DYNAMIC ,1,2,3
 pPager->ckptJSize == pPager->nRec*JOURNAL_PG_SZ(journal_format)+JOURNAL_HDR_SZ(journal_format) ,1,2,3
 nLoop<=pWInfo->pTabList->nSrc ,3,0,3
 dest.nSdst==nColumn ,2,1,3
 p->nCol>1 ,2,1,3
 p->op==TK_ALL || (p->op==TK_SELECT && p->pPrior==0) ,3,0,3
(fd == STDIN_FILENO) || (fd == -1),1,2,3
 pPager->ckptInUse && pPager->journalOpen ,1,2,3
"!""Cannot call sqliteRbtreePageDump""",1,2,3
 !ppDirectory || type==SQLITE_WIN32_DATA_DIRECTORY_TYPE || type==SQLITE_WIN32_TEMP_DIRECTORY_TYPE ,3,0,3
 pX->op==TK_EQ ,1,2,3
 x<pIdx->pTable->nCol ,3,0,3
 pParse->nLabel==0 ,3,0,3
 pKeyInfo->nField>0 ,3,0,3
common->start_ptr == OVECTOR(0),2,1,3
 db->nVdbeActive>0 || db->autoCommit==0 || db->nStatement==0 ,3,0,3
 pRowSet!=0 && (pRowSet->rsFlags & ROWSET_NEXT)==0 ,3,0,3
FUNCTION_CHECK_IS_REG(OFFS_REG(p)),3,0,3
 sCtx.eState==0 || sCtx.eState==1 ,2,1,3
 dirSync==0 || dirSync==1 ,3,0,3
 p->aCsr[i].keyAsData ,1,2,3
 0 < db->nProgressOps ,3,0,3
 (pBuf)->nSpace>=(pBuf)->n ,2,1,3
 (OP_SeekLt & 0x0001)==(OP_SeekGe & 0x0001) ,2,1,3
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || x>=0 ,3,0,3
 pPg->pPager->eState!=PAGER_ERROR ,2,1,3
 db->aDb[i].zName ,3,0,3
 sqlite3BtreeIsInTrans(pTo) ,3,0,3
 hdr==(pPage->pgno==1 ? 100 : 0) ,1,2,3
 i>=0 && i<p->nField ,1,2,3
 iLevel>=0 && iLevel<=RTREE_MAX_DEPTH ,1,2,3
 id->locktype>=SHARED_LOCK ,1,2,3
" DbHasProperty(db, iDb, DB_SchemaLoaded) ",3,0,3
 &pTos[1-nField] >= p->aStack ,1,2,3
 rc!=SQLITE_OK || fd ,1,2,3
stream->isReader,1,2,3
 pCsr->aMatchinfo ,2,1,3
 pAggInfo->aCol[i].iMem>=pAggInfo->mnReg && pAggInfo->aCol[i].iMem<=pAggInfo->mxReg ,3,0,3
 zFilename!=0 || (ctrlFlags & UNIXFILE_NOLOCK)!=0 ,3,0,3
 nAddr==0 ,1,2,3
 p->a || p->nSrc==0 ,2,1,3
 pPg->pPager->eState>=PAGER_WRITER_LOCKED ,2,1,3
 pTos->flags==MEM_Null || (pTos->flags&MEM_Null)==0 ,1,2,3
 p->pAgg>=p->apAgg ,1,2,3
 pPg->pPager->pStmt==pPg ,1,2,3
 iDb>=0 && iDb!=1 && iDb<db->nDb ,1,2,3
 pSO ,3,0,3
 pOp->opcode!=OP_NextIfOpen || pOp->p4.xAdvance==sqlite3BtreeNext ,3,0,3
 oc!=OP_SeekLt || r.flags==0 ,2,1,3
 pCnt->flags & MEM_Int ,1,2,3
 isSorter(pC)==0 ,3,0,3
 pSorter->pMerger!=0 ,3,0,3
 nNew<=pFd->mmapSizeMax ,3,0,3
 iChng<p->nCol ,3,0,3
 nByte < (int)(pPage->pBt->usableSize-8) ,3,0,3
 pPgHdr->pCache==pCache ,2,1,3
 p->zText!=0 || p->nChar==0 || p->accError ,3,0,3
 (PTF_ZERODATA)==2 ,3,0,3
 flags==0 || flags==PAGER_GET_NOCONTENT || flags==PAGER_GET_READONLY ,3,0,3
 iIdxCur+i!=iDataCur || pPk==pIdx ,3,0,3
 pInfo->idxLeft!=pInfo->idxRight ,1,2,3
 db->file_format>=4 ,1,2,3
 db->magic==SQLITE_MAGIC_OPEN || db->magic==SQLITE_MAGIC_ZOMBIE ,3,0,3
 pNewExpr==0 || pNewExpr->span.z!=0 || pOldExpr->span.z==0 || sqlite_malloc_failed ,1,2,3
 id->h>2 ,3,0,3
 ArraySize(pPage->apOvfl)==ArraySize(pPage->aiOvfl) ,3,0,3
(size_t)CDF_SEC_SIZE(h) == len,2,1,3
 pAgg->nTab==0 ,1,2,3
!(opt & ~(PGSQL_CONV_OPTS|PGSQL_DML_NO_CONV|PGSQL_DML_EXEC|PGSQL_DML_STRING)),1,2,3
 pPage->leaf == ((c & PTF_LEAF)!=0) ,1,2,3
 pIdx==0 || pIdx->nKeyCol==pFKey->nCol ,3,0,3
tree,1,2,3
 createFlag==0 ,1,2,3
 pWInfo->nLevel<=pTabList->nSrc ,3,0,3
 argv[1]!=0 ,1,2,3
 sizeof(x)==8 && sizeof(a)==8 ,3,0,3
 pTrigger->iDb<db->nDb ,1,2,3
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)==0 ,3,0,3
 !pDel || (sqlite3_malloc_failed && pDel==pColl) ,1,2,3
 pPage->pParent==pParent ,1,2,3
fdTable[fd].path != NULL,1,2,3
 SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG ,3,0,3
 sizeof(OverflowPage)==SQLITE_USABLE_SIZE ,1,2,3
 v!=(-2147483647-1) ,3,0,3
 CORRUPT_DB || pPg->hdrOffset==0 ,3,0,3
 pExpr->op!=TK_IN ,1,2,3
 IsVirtual(p) ,3,0,3
 pRec->flags & MEM_Blob ,1,2,3
" sqliteHashFind(&db->aDb[pTable->iDb].aFKey, pFKey->zTo, strlen(pFKey->zTo)+1)!=pFKey ",1,2,3
 pPg->pPrevStmt==0 && pPg->pNextStmt==0 ,1,2,3
 id->locktype==SHARED_LOCK ,1,2,3
 pWinMemData->hHeap!=0 ,3,0,3
 pTrigger->iDb==iDb || pTrigger->iDb==1 ,1,2,3
 fg & MEM_Int ,1,2,3
 pTab->nCol<=0x7fff && j<=0x7fff ,2,1,3
 offset>0 ,1,2,3
 oc==OP_SeekGe || oc==OP_SeekGt ,2,1,3
 !pNew->isOverfull ,1,2,3
 pBt->inTransaction==TRANS_WRITE || IfNotOmitAV(pBt->bDoTruncate)==0 ,3,0,3
 (pTos->flags & (MEM_Static|MEM_Dyn|MEM_Ephem|MEM_Short))==0 ,1,2,3
 rc!=SQLITE_OK || winMemGetOwned() ,3,0,3
 pCx->pKeyInfo->enc==ENC(db) ,3,0,3
 pPg->inStmt ,1,2,3
 i>=0 && i<=pPage->nCell ,1,2,3
 (errCode&0xff)==SQLITE_CONSTRAINT ,3,0,3
 goal<depth ,1,2,3
 resetSchemaOnFault==0 || resetSchemaOnFault==iDb+1 ,3,0,3
 pPage->hasData == !(pPage->zeroData || (!pPage->leaf && pPage->leafData)) ,1,2,3
 bBulk==0 ,2,1,3
 pCnt>=p->aStack ,1,2,3
 iOut<pSorter->nTree && iOut>0 ,2,1,3
 zAffinity[pOp->p2]==0 ,3,0,3
arg_info->type_hint < IS_REFERENCE,2,1,3
!extended,1,2,3
" pCur->idx>=pCur->pPage->nCell || pCur->pPage->apCell[pCur->idx]->h.leftChild==SWAB32(pBt,newPgno) ",1,2,3
 p->iBufEnd<p->nBuffer ,3,0,3
 memIsValid(pData) ,3,0,3
 regOldRowid>0 ,3,0,3
msg != NULL,2,1,3
 pIter->aBuffer==0 ,2,1,3
 pTab!=0 || cntTab==0 ,2,1,3
 (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 ,3,0,3
 pE->token.z ,1,2,3
 memIsValid(&aMem[p1+idx]) ,3,0,3
 OP_SeekLt==(OP_SeekLe-1) ,2,1,3
 ArraySize(aSyscall)==25 ,2,1,3
" sizeof(r1)==sizeof(t1) && memcmp(&r1, &t1, sizeof(r1))==0 ",1,2,3
 pTable->iDb==pTrigger->iDb || pTrigger->iDb==1 ,1,2,3
 HasRowid(pDest) || destHasUniqueIdx ,3,0,3
 nDir>0 ,3,0,3
 rc==SQLITE_OK || sCur.n==0 ,3,0,3
 v>0 ,3,0,3
 argc==5 ,1,2,3
 p->xDel!=SQLITE_DYNAMIC ,2,1,3
 !pCur->pNode->pLeft ,1,2,3
buffCount < buffLen,1,2,3
GC_REFCOUNT(target) == 1,3,0,3
 pPager->readOnly==0 ,3,0,3
status < 0,1,2,3
 rc!=SQLITE_OK || sqlite3_memory_used()==0 ,3,0,3
 p->pPager==pPager ,3,0,3
 pPager->zFilename && pPager->zFilename[0] ,3,0,3
 wrFlag==0 || wrFlag==BTCF_WriteFlag ,2,1,3
fdTable[STDIN_FILENO].type != FD_UNUSED,1,2,3
 pIdx->nColumn>=pIdx->nKeyCol+n ,3,0,3
 pgno>2 ,1,2,3
 pIter->aSeg[ pIter->aFirst[1].iFirst ].pLeaf ,2,1,3
 rc!=SQLITE_OK || pSorter->iReadOff<=pSorter->iWriteOff ,2,1,3
 pOp->opcode-6==OP_Ge ,1,2,3
 nFull>=pVfs->mxPathname ,3,0,3
 apNew[iPg]->nCell==nNewCell ,3,0,3
"result, args, lcname, fbc",2,1,3
 keyType==2 ,1,2,3
 pStart==0 ,3,0,3
 pSize!=0 ,3,0,3
nvec <= IOV_MAX,1,2,3
 tree->pTransRollback == 0 ,1,2,3
 (*ppCur)->pTree ,1,2,3
" CORRUPT_DB || memcmp(&info, &pCur->info, sizeof(info))==0 ",3,0,3
 zNewRecord!=zTemp ,1,2,3
 sqlite3KeyInfoIsWriteable(pInfo) ,3,0,3
 p->pAuxData==0 ,3,0,3
 (flags & SQLITE_OPEN_URI) || zName[strlen(zName)+1]==0 ,3,0,3
 (payloadSize64 & SQLITE_MAX_U32)==(u64)payloadSize64 ,3,0,3
(p) & REG_MASK,3,0,3
 enc==SQLITE_UTF16LE || enc==SQLITE_UTF16BE || enc==SQLITE_UTF8,1,2,3
 z!=0 || pIndex->aiColumn[i]<0 ,3,0,3
 pOp->p1!=1 ,2,1,3
 pPager->errMask || (pPager->journalOpen==0 && pPager->stmtOpen==0) ,1,2,3
 pNew->token.dyn==0 ,1,2,3
asyncIoTable != NULL,1,2,3
call == (zend_execute_data*)ZEND_VM_STACK_ELEMENTS(EG(vm_stack)),2,1,3
 (pTos->flags & MEM_Short)==0 || pTos->z==pTos->zShort ,1,2,3
 win_mem_data.magic2==WINMEM_MAGIC2 ,3,0,3
 id->locktype==NO_LOCK ,1,2,3
 pTrunk!=0 ,3,0,3
 pPage->cellOffset==pPage->hdrOffset+12-4*pPage->leaf ,1,2,3
 pCur->pPage==pOldCurPage ,1,2,3
 winMemGetOwned() ,3,0,3
pOv->clientData1 != NULL,1,2,3
 p->pPrior->pNext==p ,3,0,3
 nByte==ROUNDUP(nByte) ,1,2,3
 pPgHdr->pgno==pgno ,2,1,3
 pColExpr!=0 ,3,0,3
 (pLower->eOperator & (WO_GT|WO_GE))!=0 ,2,1,3
 !pPg->pageHash || pPager->errMask || MEMDB || pPg->dirty || pPg->pageHash==pager_pagehash(pPg) ,1,2,3
 j<(int)(sizeof(pPage->apOvfl)/sizeof(pPage->apOvfl[0])) ,3,0,3
 pRec->flags & MEM_Str ,1,2,3
 (pSpace - (u8*)p)==n ,3,0,3
 pE->iColumn>=0 ,1,2,3
 ArraySize(aSyscall)==76 ,2,1,3
"SLJIT_INT_OP == SLJIT_SINGLE_OP, int_op_and_single_op_must_be_the_same",2,1,3
 nCellKey==intKey ,3,0,3
 winMemGetHeap()!=NULL ,3,0,3
 pPager->errMask || pPager->journalOpen==0 ,1,2,3
 pExpr->pPhrase ,2,1,3
" sz==cellSize(pBt, pCell) ",1,2,3
 SQLITE_DBSTATUS_CACHE_HIT+1==SQLITE_DBSTATUS_CACHE_MISS ,3,0,3
 rc!=SQLITE_OK || *pFd ,1,2,3
 SQLITE_DBSTATUS_CACHE_HIT+2==SQLITE_DBSTATUS_CACHE_WRITE ,3,0,3
 pIdx->nColumn>=j ,3,0,3
byte_set[0] > 0 && byte_set[0] < 255,2,1,3
 db->nVdbeActive>=db->nVdbeRead ,3,0,3
 sizeof(FreelistInfo)==OVERFLOW_SIZE ,1,2,3
 pc==pFrame->pc ,2,1,3
 pC->pSorter ,2,1,3
GC_TYPE((zend_object*)func->op_array.prototype) == IS_OBJECT,2,1,3
code_ptr - code <= (sljit_si)size,2,1,3
 (PTF_LEAFDATA|PTF_INTKEY)==5 ,3,0,3
 pOp->opcode-6==OP_Lt ,1,2,3
 (addr>=0 && addr<p->nOp) || sqlite3MallocFailed() ,1,2,3
 new!=0 ,1,2,3
 pExpr->op==TK_FUNCTION ,3,0,3
 pParse->rc!=SQLITE_OK ,3,0,3
 pOp->p3!=0 && pOp->p3type==P3_POINTER ,1,2,3
 nFree==data[hdr+7] ,1,2,3
" sqlite3SchemaMutexHeld(db, i, 0) ",3,0,3
 pPager->fullSync==0 ,3,0,3
 p->flags==PGHDR_MMAP ,3,0,3
 pPage->nFree==SQLITE_USABLE_SIZE-pc ,1,2,3
 aPragmaNames[mid].ePragTyp==PragTyp_BUSY_TIMEOUT ,2,1,3
 bufpt>zOut ,3,0,3
 argv[2]!=0 ,1,2,3
 sqlite3BtreeHoldsMutex(db->aDb[0].pBt) ,3,0,3
 zAffinity!=0 ,3,0,3
 pCtx==0 ,3,0,3
 pRec->pKeyInfo->nField+pRec->pKeyInfo->nXField==nCol ,3,0,3
 pTos->flags!=0 ,1,2,3
" amt+offset <= NDATA(pCur->pBt, pCell->h) ",1,2,3
 pGroup->nMaxPage >= pCache->nMax ,3,0,3
 pFarg->a[0].pExpr!=0 ,3,0,3
 pVtabCursor->pVtab->nRef>0 ,2,1,3
 (pDb->safety_level & PAGER_SYNCHRONOUS_MASK)==pDb->safety_level ,3,0,3
 pItem->u.x.iOrderByCol>0 && pItem->u.x.iOrderByCol<=p->pEList->nExpr ,2,1,3
 j>=0 && j<p->nMem ,1,2,3
 eFileLock==SHARED_LOCK || ((unixFile *)id)->nFetchOut==0 ,3,0,3
 (pTos[i].flags & (MEM_Static|MEM_Dyn))==0 ,1,2,3
 0==sqlite3BtreeIsInTrans(pMain) ,1,2,3
 biasRight==0 || biasRight==1 ,3,0,3
 sqlite3KeyInfoIsWriteable(pRet) ,3,0,3
 p->pAgg<&p->apAgg[p->nAgg] ,1,2,3
 pPg->pPrevStmt->pNextStmt==pPg ,1,2,3
 pPhrase->aTerm[0].pSynonym==0 ,2,1,3
 sqlite3VdbeCurrentAddr(v)==iJump ,2,1,3
 iWrite>=buf.st_size ,3,0,3
 heap[0]>0 ,2,1,3
 pzOrigTab && pzOrigCol ,3,0,3
 iWrite2==0 ,2,1,3
 (pNos->flags & MEM_Dyn)==0 ,1,2,3
 p->pCursor!=0 ,2,1,3
 regRowid==(regStat4+2) ,3,0,3
 pCol>=p->aStack ,1,2,3
fdTable[fd].path == NULL,1,2,3
 apNew[0]->nFree == (get2byte(&apNew[0]->aData[5])-apNew[0]->cellOffset-apNew[0]->nCell*2) || rc!=SQLITE_OK ,3,0,3
 pE->op!=TK_DOT || pRight!=0 ,3,0,3
 OP_SeekGt==(OP_SeekGe+1) ,2,1,3
 43==sqlite3LogEst(20) ,3,0,3
 pMem->r==pMem->i ,1,2,3
 !pWinMemData->bOwned ,3,0,3
 regRow!=pDest->iSdst+i ,2,1,3
 db->aDb[pOp->p2].pBt!=0 ,1,2,3
 memIsValid(&pMem[i]) ,3,0,3
 regChng==(regStat4+1) ,3,0,3
 pPgHdr->pExtra==(void *)&pPgHdr[1] ,2,1,3
 isIgnoreErrors==0 || (regOld!=0 && regNew==0) ,3,0,3
idx != (uint32_t)-1,3,0,3
 nField>=0 ,3,0,3
 (pBt->btsFlags & BTS_EXCLUSIVE)==0 || pBt->pWriter==pLock->pBtree ,3,0,3
 (eType!=SQLITE_OPEN_MAIN_DB) || (flags & SQLITE_OPEN_URI) || zUtf8Name[sqlite3Strlen30(zUtf8Name)+1]==0 ,3,0,3
 iFrom>=iTo+nReg || iFrom+nReg<=iTo ,3,0,3
 pIter->pFile ,2,1,3
 p->bIsReader!=0 || p->btreeMask==0 ,2,1,3
 pSorter->iWriteOff==0 ,2,1,3
size == 0 || result != NULL,1,2,3
 !pPager->ckptInUse ,1,2,3
(i) >= 0 && (i) < compiler->logical_local_size,3,0,3
 pC->isTable==0 || pOp->opcode==OP_RowData ,3,0,3
uPattern!=0,2,1,3
" sz==cellSize(pBt, pPage->apCell[idx]) ",1,2,3
 pIdx!=0 && pIdx->pTable!=0 ,1,2,3
 sqlite3BtreeIsInTrans(pBt)==0 ,3,0,3
 SLOT_2_0 == ((0x7f<<14) | (0x7f)) ,3,0,3
 pFile->h!=NULL && pFile->h!=INVALID_HANDLE_VALUE ,3,0,3
 dummy == 0 ,1,2,3
 rc==SQLITE_OK || db->nDeferredCons>0 || db->nDeferredImmCons>0 ,3,0,3
 pExpr!=0 ,3,0,3
 pTab->nRef==1 || ((pSel->selFlags&SF_Recursive) && pTab->nRef==2 ),3,0,3
 pSorter->pUnpacked==(UnpackedRecord *)d ,2,1,3
 pAggInfo->aFunc[i].iMem>=pAggInfo->mnReg && pAggInfo->aFunc[i].iMem<=pAggInfo->mxReg ,3,0,3
 pRec->nField>0 && iCol<pIdx->nSampleCol ,2,1,3
greq.gr_group.ss_family != 0,2,1,3
 pLoop->aLTermSpace==pLoop->aLTerm ,3,0,3
 pCol->zType==0 || CORRUPT_DB ,2,1,3
 pCol->affinity-SQLITE_AFF_NONE >= 0 ,2,1,3
 0!=id->locktype ,1,2,3
 nReg==pAggInfo->mxReg-pAggInfo->mnReg+1 ,3,0,3
" countValidCursors(pBt,0)==0 || pBt->inTransaction>TRANS_NONE ",3,0,3
 (p->selFlags & SF_Recursive)==0 || p->op==TK_ALL || p->op==TK_UNION ,3,0,3
 pPage->nCell>0 || top==usableSize || CORRUPT_DB ,3,0,3
 wctrlFlags & WHERE_ONEPASS_DESIRED ,3,0,3
 (zRawSql - zStart) > 0 ,3,0,3
 desiredAutoCommit==1 || iRollback==0 ,3,0,3
 pNew->iCol==pOld->iCol ,3,0,3
 db->nVdbeWrite>=0 ,3,0,3
" pCur->idx<pCur->pPage->nCell || pCur->pPage->u.hdr.rightChild==SWAB32(pBt,newPgno) ",1,2,3
EX(called_scope) == EG(called_scope),2,1,3
(len == 32 && imm != 0 && imm != -1) || (len == 16 && (sljit_si)imm != 0 && (sljit_si)imm != -1),2,1,3
remove_oplines >= 0,2,1,3
 ConstFactorOk(pParse) ,3,0,3
 !pOp->p3 || pOp->p3type==P3_KEYINFO ,1,2,3
" iOffset==walFrameOffset(iFrame, szPage) ",3,0,3
 p->pSrc!=0 ,3,0,3
isDelete && !syncDir,3,0,3
 pTerm->p!=0 ,1,2,3
 pRec->pKeyInfo->enc==ENC(db) ,3,0,3
common->start_ptr != OVECTOR(0),2,1,3
 pParse->pNewTable==pTab ,3,0,3
 pKeyInfo->nField+pKeyInfo->nXField>=pPKey2->nField || CORRUPT_DB ,3,0,3
 nDb>0 ,3,0,3
 rc!=SQLITE_OK || a[p->nToken-1].bIgnore==0 ,2,1,3
 r2->nField>0 ,2,1,3
 fd>2 ,3,0,3
 pList->a!=0 || pList->nExpr==0 ,3,0,3
Z_ARRVAL_P(zarr) != NULL,2,1,3
 nTotal>=pLvl->nMerge ,2,1,3
 iDb==pTab->iDb ,1,2,3
 (pStack->flags & MEM_Ephem)!=0 ,1,2,3
 p->pTos<&p->aStack[p->pc<0?0:p->pc] || sqlite3_malloc_failed==1 ,1,2,3
 sqlitepager_pagenumber(pOvfl)==pgno ,1,2,3
res == 0,1,2,3
offsets[1] == -1 || (offsets[0] < offsets[1]),2,1,3
 rc!=SQLITE_OK || (nExpect==pSorter->iWriteOff) ,2,1,3
 p->pSelect ,1,2,3
 cnt==(cnt&0x1ffff) ,3,0,3
 db->activeVdbeCnt==1 ,1,2,3
 (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5 ,2,1,3
 v->expired==0 ,3,0,3
 zMaster[sqlite3Strlen30(zMaster)-3]=='9' ,3,0,3
 chngKey || pTrigger || hasFK || regOldRowid==regNewRowid ,3,0,3
 pIter->aAlloc==0 ,2,1,3
Z_TYPE_P(zarr) == IS_ARRAY,2,1,3
range_right >= 0 || offsets[0] >= 0,2,1,3
 pIdx->isResized==0 ,3,0,3
 (pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR|OPFLAG_SEEKEQ))==pOp->p5 ,2,1,3
 j<nByte ,1,2,3
 !pZ->pLeft || !pZ->pRight ,1,2,3
 szExtra < 300 ,3,0,3
 keyClass>=SQLITE_HASH_INT && keyClass<=SQLITE_HASH_BINARY ,1,2,3
 (pNew->wsFlags & WHERE_TOP_LIMIT)==0 ,3,0,3
 pTree->pCursors==0 ,1,2,3
" p1->bEof || fts5RowidCmp(pExpr, p1->iRowid, iLast)>=0 ",2,1,3
 (iOld-iNew)<nNew || nCell==0 || CORRUPT_DB ,3,0,3
 (pTos[i].flags & (MEM_Dyn|MEM_Ephem))==0 ,1,2,3
 pParse->nErr>0 || pFK==0 ,3,0,3
 pOp->opcode!=OP_PrevIfOpen || pOp->p4.xAdvance==sqlite3BtreePrevious,3,0,3
(sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,2,1,3
 nEq<=(p->nKeyCol+1) ,2,1,3
 db->nVdbeRead>=db->nVdbeWrite ,3,0,3
 !pCur->pNode->pRight ,1,2,3
 (chngRowid & chngPk)==0 ,3,0,3
 pParse->pToplevel==0 ,3,0,3
 pItem->addrFillSub==0 ,3,0,3
 winMemGetHeap()==NULL ,3,0,3
 (pUpper->eOperator & (WO_LT|WO_LE))!=0 ,2,1,3
 iOff<=pIter->iEndofDoclist ,2,1,3
 IsStat4 || nEqZero==0 ,3,0,3
 sleepObj!=NULL ,3,0,3
 pList->pDirty==0 || isCommit ,3,0,3
 rc!=SQLITE_OK || pSorter->aIter[ pSorter->aTree[1] ].pFile ,2,1,3
mode == JIT_PARTIAL_HARD_COMPILE,2,1,3
 pAgg->nTab!=0 ,1,2,3
 pPg->pPrevCkpt->pNextCkpt==pPg ,1,2,3
fdTable[ipcFd].type != FD_UNUSED,1,2,3
 op==OP_ShiftRight || op==OP_ShiftLeft ,3,0,3
 pTrunk->aData!=0 ,3,0,3
 p->current.anEq[i] ,3,0,3
(argv[ap_optind][0] == '-') && argv[ap_optind][1],1,2,3
 pExpr->op==TK_COLUMN && pExpr->iColumn<nCol ,1,2,3
 pPk || iIdxCur==iDataCur+1 ,2,1,3
 sqlite3pager_iswriteable(pChild->aData) ,1,2,3
 p2<pC->nField ,3,0,3
 p2<pC->nHdrParsed ,3,0,3
 *pRc || nData>=0 ,2,1,3
chunk->map[page_num] & ZEND_MM_IS_SRUN,2,1,3
 pParent->nOverflow==0 || pParent->aiOvfl[0]==iParentIdx ,3,0,3
end == yytext + yyleng,3,0,3
 mask==BTREE_BULKLOAD || mask==0 ,2,1,3
 pPage->leafData == ((c & PTF_LEAFDATA)!=0) ,1,2,3
 rc!=SQLITE_OK || pSorter->pTemp1 ,2,1,3
 nHeader=(int)(info.pPayload - pCell) ,2,1,3
 p->ppOpenTemp == &pOpenTemp ,1,2,3
 pParse->aLabel==0 ,3,0,3
 nBuf==(nBuf&0x1ffff) ,3,0,3
 pReg->flags & MEM_Blob ,3,0,3
 SQLITE_FullFSync==PAGER_FULLFSYNC ,3,0,3
group_len == sizeof(struct sockaddr_in6),2,1,3
 pTos[i].flags & MEM_Str ,1,2,3
 !winMemGetOwned() ,3,0,3
 pAgg>=p->apAgg ,1,2,3
 p->aMem[i].flags==MEM_Invalid ,2,1,3
 pCsr->pSorter->pUnpacked!=0 ,2,1,3
 lwr==upr+1 || (pPage->intKey && !pPage->leaf) ,3,0,3
chunk->map[page_num] & ZEND_MM_IS_LRUN,2,1,3
 (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 ,3,0,3
 nUri>=0 ,3,0,3
 digit>=0 && digit<64 ,1,2,3
 (pParse->sNameToken.z==pName2->z && pName2->z!=0) || (pParse->sNameToken.z==pName1->z && pName2->z==0) ,3,0,3
 sqlite3_malloc_failed && pDel==pTrig ,1,2,3
 OP_SeekGe==(OP_SeekGt-1) ,2,1,3
 pOp->opcode-6==OP_Ne ,1,2,3
 isTemp==0 || isTemp==1 ,2,1,3
 pSorter->iWriteOff>iStart ,2,1,3
 rc!=SQLITE_ROW || (db->flags&SQLITE_CountRows) ,3,0,3
 iDelta>0 ,2,1,3
 bBulk==0 || bBulk==1 ,3,0,3
 SQLITE_DBSTATUS_CACHE_MISS==SQLITE_DBSTATUS_CACHE_HIT+1 ,3,0,3
 pTab->iDb==db->init.iDb || isTemp ,1,2,3
 (pMem[i].flags & MEM_Ephem)==0 || (pMem[i].flags & (MEM_Str|MEM_Blob))==0 ,3,0,3
 j<p->nLabel ,3,0,3
 p->eCurType==CURTYPE_BTREE ,3,0,3
 nLookaside==0 || nLookaside==db->lookaside.nOut ,3,0,3
"SLJIT_REWRITABLE_JUMP != SLJIT_SINGLE_OP, rewritable_jump_and_single_op_must_not_be_the_same",2,1,3
 pe != NULL ,2,1,3
 pFrom->pSelect ,3,0,3
 unionTab==dest.iSDParm || dest.eDest!=priorOp ,3,0,3
" sampleIsBetter(p, pNew, pOld) ",3,0,3
code_ptr - code <= (sljit_si)compiler->size,2,1,3
 pPager->syncFlags==0 ,3,0,3
 pToken->z!=0 || pToken->n==0 ,3,0,3
 pPgHdr->pData==pPage->pBuf ,2,1,3
 (p->zText==0 || p->zText==p->zBase)==!isMalloced(p) ,3,0,3
 pgnoChild<=sqlite3pager_pagecount(pPage->pBt->pPager) ,1,2,3
 (pTos->flags & MEM_Short)!=0 || pTos->z!=pTos->zShort ,1,2,3
 szScratch<=6*(int)pBt->pageSize ,3,0,3
 p1<0 || p->apCsr[p1]!=0 ,1,2,3
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) >= -128 && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_sb))) <= 127,2,1,3
 idx<(2*p->nResColumn) ,1,2,3
 pCur->pBtree->db==pBt->db ,3,0,3
 pOp->p2<=(p->nMem+1 - p->nCursor) ,3,0,3
" countValidCursors(pBt, 1)==0 ",3,0,3
 ArraySize(aSyscall)==24 ,2,1,3
 !IsVirtual(pSrc->pTab) ,3,0,3
 pOp->p1>=0 && pOp->p1<p->nOp ,1,2,3
FUNCTION_CHECK_IS_REG((p) & REG_MASK),3,0,3
 rc==SQLITE_OK || *ppStmt==0 ,3,0,3
 (PAGER_FULLFSYNC | PAGER_CKPT_FULLFSYNC | PAGER_CACHESPILL) == PAGER_FLAGS_MASK ,3,0,3
 iEnd <= pPage->pBt->usableSize ,1,2,3
 cntNew[i-1]>0 ,1,2,3
opline->opcode == ZEND_ASSIGN_REF,2,1,3
 (pTos[i].flags & (MEM_Static|MEM_Ephem))==0 ,1,2,3
 TK_GT==TK_LE-1 && TK_LE==TK_LT-1 && TK_LT==TK_GE-1 && TK_EQ==TK_GT-1,1,2,3
 MAP_FAILED!=0 ,3,0,3
 aRegIdx ,3,0,3
 pDbList==db ,1,2,3
 pOp->opcode-6==OP_Le ,1,2,3
 iSet>=0 && iSet<p->nSet ,1,2,3
" !ExprHasProperty(p, EP_NoReduce) ",3,0,3
 pSorter->pRecord==0 ,2,1,3
 p->readOnly==0 || pOp->p2==0 ,3,0,3
GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT,2,1,3
 (flags1 & MEM_Cleared)==0 ,3,0,3
 pOp->p2>=SQLITE_AFF_NONE && pOp->p2<=SQLITE_AFF_REAL ,2,1,3
!(opt & ~(PGSQL_CONV_FORCE_NULL|PGSQL_DML_EXEC|PGSQL_DML_STRING)),1,2,3
 pPrior == &pCell[info.iOverflow] ,2,1,3
 p->accError==0 || p->nAlloc==0 ,3,0,3
 pPager->eState>PAGER_OPEN ,3,0,3
 pPg->pgno!=iNew ,3,0,3
 pStep!=0 ,3,0,3
 pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 ,2,1,3
 strlen(zPragma[i])<100 ,1,2,3
 r>=0.0 ,3,0,3
 sqlite3BtreeCursorHasMoved(p->pCursor) ,2,1,3
 EIGHT_BYTE_ALIGNMENT(pIndex->aiRowEst) ,2,1,3
 (rc & (sqlite3_db_handle(pStmt)->errMask))==rc ,1,2,3
 ap[1]==pBusyHandlerArg ,3,0,3
 pPage->isInit==0 || pPage->nFree==nFree+data[hdr+7]+cellLimit-(cellOffset+2*nCell) ,1,2,3
ZEND_MM_LRUN_PAGES(chunk->map[page_num]) == pages_count,2,1,3
 tree->pCheckRollbackTail == 0 ,1,2,3
 pTable->iDb==iDb || iDb==1 ,1,2,3
 iDb>=0 && iDb<pParse->db->nDb ,3,0,3
 strlen(argv[0])<30 ,1,2,3
 pTabItem->iCursor==pLevel->iTabCur ,3,0,3
 pNos->flags & MEM_Dyn ,1,2,3
 cnt>0 ,1,2,3
"!(SLJIT_CONVW_FROMD & 0x1) && !(SLJIT_CONVD_FROMW & 0x1), invalid_float_opcodes",2,1,3
 apNew[iPg]->nOverflow==0 ,3,0,3
 chngPk==0 || chngPk==1 ,3,0,3
 p->bDel==0 || p->bDel==1 ,2,1,3
offsets[2] == -1 || (offsets[0] < offsets[2] && offsets[1] > offsets[2]),2,1,3
 pGrandparent ,1,2,3
 pPager->walSyncFlags==0 ,3,0,3
 pMinMax==0 || pMinMax->nExpr==1 ,3,0,3
 pPk->nColumn==j ,3,0,3
 pIdx!=0 || HasRowid(pTab) ,3,0,3
 pOld==pElem ,1,2,3
 pIdx->pTable==pTab ,3,0,3
 pTable!=0 && pTable->pSelect!=0 ,1,2,3
 x>=0 ,3,0,3
 pProgram->nOp>0 ,3,0,3
 p->op==TK_ABORT ,1,2,3
 pName!=0 ,1,2,3
 pPg->pNextCkpt->pPrevCkpt==pPg ,1,2,3
 pOld->isPSample==0 && pNew->isPSample==0 ,3,0,3
 nRef>=sqlite3PagerRefcount(pPager) ,3,0,3
 pEList->nExpr>0 ,3,0,3
 pUnpacked->flags & UNPACKED_PREFIX_MATCH ,2,1,3
 idx<pParent->nCell || pParent->u.hdr.rightChild==swabPgno ,1,2,3
 (isCommit!=0)==(nTruncate!=0) ,3,0,3
 iDb==0 || pId2->z ,3,0,3
 pZ == pZ->pParent->pLeft || pZ == pZ->pParent->pRight ,1,2,3
 pCur->eState==CURSOR_INVALID || pCur->apPage[pCur->iPage]->nCell>0 ,3,0,3
 bPreserve==0 || pMem->flags&(MEM_Blob|MEM_Str) ,3,0,3
 SQLITE_CacheSpill==PAGER_CACHESPILL ,3,0,3
 p->aOp==0 || p->aOp[p->nOp-1].p3==0 ,1,2,3
 memIsValid(pName) ,3,0,3
 pTab->nCol==pSelect->pEList->nExpr || db->mallocFailed ,3,0,3
 p->apCsr[i]==0 ,3,0,3
 pThis->aData==aData ,1,2,3
 pTerm->eOperator & (WO_LT|WO_LE) ,2,1,3
source != NULL,2,1,3
 iMin>=0 ,3,0,3
 nWrite==0 || nWrite<=(DWORD)nRem ,3,0,3
 pParse->nested==0 ,3,0,3
 EIGHT_BYTE_ALIGNMENT(pIndex->azColl) ,3,0,3
 pPage->zeroData == ((c & PTF_ZERODATA)!=0) ,1,2,3
 p->selFlags & SF_AllValues ,2,1,3
 pNode->eType==FTS5_TERM ,2,1,3
*control_len >= *offset,2,1,3
fd >= 0 && fd < WIN32_OPEN_MAX,1,2,3
 memIsValid(pX) ,3,0,3
 (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || (pLoop->wsFlags & WHERE_INDEXED)!=0 ,3,0,3
 pAgg->pBtree ,1,2,3
" !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) ",3,0,3
" amt+offset <= NKEY(pCur->pBt, pPage->apCell[pCur->idx]->h) ",1,2,3
 pIter->flags & FTS5_SEGITER_ONETERM ,3,0,3
list->children > 0,2,1,3
 ((int(*)(void *))(ap[0]))==xBusyHandler ,3,0,3
 pTos->flags & (MEM_Dyn|MEM_Short) ,1,2,3
paddingLength >= 0 && paddingLength <= 0xff,1,2,3
!((p) & ~(SLJIT_MEM | SLJIT_IMM | REG_MASK | OFFS_REG_MASK)),3,0,3
 pTable->nSrc==1 ,1,2,3
 zNewKey==zTemp ,1,2,3
 zNewRecord==zTemp ,1,2,3
 zTabName!=0 ,3,0,3
 nRead>0 ,3,0,3
 journal_format==JOURNAL_FORMAT_1 ,1,2,3
 pFrom->flags & MEM_Str ,1,2,3
ast->kind == ZEND_AST_GREATER || ast->kind == ZEND_AST_GREATER_EQUAL,2,1,3
 pWal==0 || pWal->readLock>=0 ,3,0,3
info->type_hint == IS_OBJECT,2,1,3
 pParse==p->pParse ,3,0,3
 pCur->eCurType==CURTYPE_VTAB ,3,0,3
 pTos->z!=0 ,1,2,3
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) >= HALFWORD_MIN && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_si))) <= HALFWORD_MAX,2,1,3
src2 == 0,3,0,3
 iIndexCur>=0 ,3,0,3
 pDistinct->eTnctType==WHERE_DISTINCT_UNORDERED ,3,0,3
 flag==0 || (pMinMax!=0 && pMinMax->nExpr==1) ,3,0,3
 p->pSchema==0 || p->zDatabase==0 ,3,0,3
 p->syncFlags & (SQLITE_SYNC_NORMAL|SQLITE_SYNC_FULL) ,3,0,3
i >= 0 && i < worklist->stack.capacity,2,1,3
 pParse->pWith==p->pWith ,2,1,3
 0==pParse->nQueryLoop ,3,0,3
 pSorter->aTree==0 ,2,1,3
 pPager->fd->pMethods->iVersion>=3 ,3,0,3
 aNext!=p->aAlloc ,3,0,3
 op==OP_OpenRead || op==OP_OpenWrite ,3,0,3
 (OP_SeekLe & 0x0001)==(OP_SeekGt & 0x0001) ,2,1,3
 pDest->nSdst==nResultCol ,2,1,3
 p->pSelect->pEList ,1,2,3
 pOp->p5<ArraySize(p->aCounter) ,3,0,3
 pPager->aHash[pager_hash(pPg->pgno)]!=pPg ,1,2,3
 (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 ,3,0,3
 pCur->pgnoRoot==0 || pCur->apPage[pCur->iPage] ,3,0,3
 db->lookaside.bDisable ,3,0,3
 p->aOp ,3,0,3
 sqlite3MallocFailed() || addr2==sqlite3VdbeCurrentAddr(v) ,1,2,3
 rc==SQLITE_OK || p->pIter==0 ,2,1,3
 iIter==nSeg ,2,1,3
 pRbtree->eTransState == TRANS_INCHECKPOINT || pRbtree->eTransState == TRANS_INTRANSACTION ,1,2,3
 used[j]==0 ,1,2,3
 regOut!=regStat4 && regOut!=regStat4+1 ,3,0,3
"pIter->pSelect, pIter->nCol+1, ""rbu_rowid""",2,1,3
 IN_INDEX_INDEX_DESC == IN_INDEX_INDEX_ASC+1 ,3,0,3
 nRead==db->nVdbeRead ,3,0,3
 (pNew->wsFlags & (WHERE_COLUMN_NULL|WHERE_COLUMN_IN|WHERE_SKIPSCAN))!=0 || nInMul==0 ,2,1,3
 ((iWrite+1)%nBlk)==0 ,3,0,3
"!""Cannot call sqliteRbtreeCursorDump""",1,2,3
 (nByte % pgsz)==0 ,3,0,3
nextctrlp == NULL,2,1,3
 p->rSetup==pTemplate->rSetup ,2,1,3
 pNew->pSrc!=0 || pParse->nErr>0 ,3,0,3
 (0xfff & (EP_Reduced|EP_TokenOnly))==0 ,3,0,3
 winSysInfo.dwPageSize>0 ,3,0,3
 pExpr->bDesc==0 || pExpr->bDesc==1 ,2,1,3
 i==nHdr ,3,0,3
 pIdx!=0 || pFKey->nCol==1 ,3,0,3
 pTabList->a[i].pSelect!=0 ,1,2,3
 pIndex->keyInfo.aColl[i] ,1,2,3
 pOp->p4type==P4_NOTUSED || pOp->p4type==P4_INT32 || pOp->p4type==P4_KEYINFO ,2,1,3
 p->aBuffer ,3,0,3
 pPk || iDataCur==iTabCur ,2,1,3
 *ppVal==0 ,3,0,3
 p->pgnoRoot==pCur->pgnoRoot ,1,2,3
 iKey>=0 && iKey<pTab->nCol ,3,0,3
 zName[strlen(zName)+1]==0 ,3,0,3
 pOp->opcode-6==OP_Eq ,1,2,3
" sqlite3HashFind(&db->aDb[pTable->iDb].aFKey, pFKey->zTo, strlen(pFKey->zTo)+1)!=pFKey ",1,2,3
 pList->a[i].pExpr->pColl ,1,2,3
 pParent->u.hdr.rightChild==oldPgno ,1,2,3
 pPage->intKey == ((c & (PTF_INTKEY|PTF_LEAFDATA))!=0) ,1,2,3
 n>=0 && p1>0 && p2>0 ,2,1,3
 nArg>=(-1) || createFlag==0 ,3,0,3
 offset==(i64)ii*(4+pPager->pageSize) ,3,0,3
*max != 0,2,1,3
 oc!=OP_SeekGe || r.flags==0 ,2,1,3
 contAddr<(1<<24) ,1,2,3
 (rc&0xff)==SQLITE_IOERR || rc==SQLITE_FULL ,1,2,3
 pWInfo->nLevel==nLoop ,3,0,3
"offs == -(sljit_si)GET_SAVED_REGISTERS_SIZE(compiler->scratches, compiler->saveds, 1)",2,1,3
 sqlite3BtreeIsInTrans(pTo)==0 ,3,0,3
 oc!=OP_SeekLe || r.flags==UNPACKED_INCRKEY ,2,1,3
x,3,0,3
 *ppMinMax==0 || (*ppMinMax)->nExpr==1 ,3,0,3
 28==sqlite3LogEst(7) ,2,1,3
 pNewExpr==0 || pNewExpr->span.z!=0 || pOldExpr->span.z==0 || sqlite3_malloc_failed ,1,2,3
 tree->pCheckRollback == 0 ,1,2,3
 p->xDel==0 ,2,1,3
gsreq.gsr_source.ss_family != 0,2,1,3
 sqlite3KeyInfoIsWriteable(pKeyDup) ,3,0,3
 pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious ,3,0,3
 rc!=SQLITE_OK || master ,1,2,3
 id->locktype==0 ,1,2,3
 (fg & MEM_Dyn)==0 ,1,2,3
 pC->isTable || pOp->opcode!=OP_RowData ,3,0,3
 db->init.iDb>=0 && db->init.iDb<db->nDb ,1,2,3
 sDistinct.isTnct ,3,0,3
 rc!=SQLITE_OK || winMemGetHeap()!=NULL ,3,0,3
resultSock >= 0,1,2,3
 pOp->opcode-6==OP_Gt ,1,2,3
 pMem->xDel!=SQLITE_DYNAMIC ,2,1,3
" memcmp(abDone, ""\01\01\01\01\01"", nNew)==0 ",3,0,3
 pWInfo->pTabList->nSrc>=1 ,3,0,3
 a[0]==b[0] ,1,2,3
 c==0 ,3,0,3
ZEND_MM_SRUN_BIN_NUM(chunk->map[page_num]) == _num,2,1,3
fmtBuffPtr - fmtBuff < FMT_BUFFLEN,1,2,3
 Addr(pCell) < Addr(pPage) + SQLITE_USABLE_SIZE ,1,2,3
 nDestTruncate>0 ,3,0,3
 rc!=SQLITE_OK || cmp<=0 ,2,1,3
 iPg==0 || cntOld[iPg-1]>=cntNew[iPg-1] || abDone[iPg-1] ,3,0,3
 v->db->init.busy==0 ,3,0,3
 nMin==-1 || nMin==0 || nMin<SQLITE_WIN32_DBG_BUF_SIZE ,3,0,3
 i>=0 && i<pAgg->nMem ,1,2,3
 cntNew[0]>0 || (pParent->pgno==1 && pParent->nCell==0) || CORRUPT_DB,3,0,3
 pOldCurPage!=0 ,1,2,3
" !ppDirectory || sqlite3MemdebugHasType(*ppDirectory, MEMTYPE_HEAP) ",3,0,3
 pFd->mmapSizeActual>=pFd->mmapSize ,3,0,3
 pPager->dirtyFile==0 || pPager->useJournal==0 ,1,2,3
 p->pAgg->pBtree ,1,2,3
 nRec*JOURNAL_PG_SZ(2)+JOURNAL_HDR_SZ(2)==szJ ,1,2,3
" osHeapValidate(hHeap, SQLITE_WIN32_HEAP_FLAGS, p) ",3,0,3
 (heap[1]>>16)==0 ,2,1,3
 eOp & (WO_ISNULL|WO_EQ|WO_IN) ,2,1,3
 pParse->nOpAlloc==0 ,3,0,3
 pName->flags & MEM_Str ,3,0,3
 j==n+m+1 ,1,2,3
 pNew!=&standin ,3,0,3
 pTab->nCol==j ,3,0,3
 pPg->pPager->pCkpt==pPg ,1,2,3
 id->pLock->cnt!=0 ,1,2,3
 pAgg->nTab>0 ,1,2,3
(op & (SLJIT_SET_E | SLJIT_SET_S)),2,1,3
 pCx->pKeyInfo->db==db ,3,0,3
 rc!=SQLITE_OK || journal ,1,2,3
gsreq.gsr_group.ss_family != 0,2,1,3
 pProgram->nCsr==pFrame->nChildCsr ,3,0,3
 pNew->u.btree.nEq<=pProbe->nKeyCol ,2,1,3
 (pBt->btsFlags & BTS_PENDING)==0 || pBt->pWriter ,3,0,3
 iPg>=0 && iPg<nNew ,3,0,3
 iParam==STAT_GET_STAT1 ,3,0,3
p->key,3,0,3
 p->pPage==0 ,3,0,3
 (pCsr->pBt->btsFlags & BTS_READ_ONLY)==0 && pCsr->pBt->inTransaction==TRANS_WRITE ,3,0,3
 p->iGet<p->nSample ,3,0,3
 pName && pName->z ,3,0,3
 szHdr<=nKey ,2,1,3
 strlen(p->zPragma)<100 ,1,2,3
!Z_ISREF_P(ret),3,0,3
 db->mallocFailed==0 || pTab==0 ,3,0,3
 i<p->nCursor ,1,2,3
 pgno==sqlite3pager_pagenumber(pPage->aData) ,1,2,3
stack->len < stack->capacity,2,1,3
 pOp->p2==SQLITE_CHECKPOINT_PASSIVE || pOp->p2==SQLITE_CHECKPOINT_FULL || pOp->p2==SQLITE_CHECKPOINT_RESTART || pOp->p2==SQLITE_CHECKPOINT_TRUNCATE ,3,0,3
 PAGER_STAT_HIT==0 && PAGER_STAT_MISS==1 && PAGER_STAT_WRITE==2 ,3,0,3
 nField <= pKeyInfo->nField+pKeyInfo->nXField ,3,0,3
"!""Cannot call sqliteRbtreePager""",1,2,3
 oc!=OP_SeekGt || r.flags==UNPACKED_INCRKEY ,2,1,3
 pParent->apCell[idxParent]->h.leftChild==oldPgno ,1,2,3
 nFarg>=1 ,3,0,3
 pTo->z==pTos->zShort ,1,2,3
 zDb==0 ,1,2,3
 &pTos[i]>=p->aStack ,1,2,3
 (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 || b==0 ,3,0,3
 ((u8*)pSpace)-nByte==(u8*)(pIdx->aSample) ,3,0,3
 aToOpen==0 ,2,1,3
 sizeof(FreeBlk)==4 ,1,2,3
 nKey==0 ,3,0,3
 memIsValid(&aMem[p2+idx]) ,3,0,3
 pSpace>=data && (pSpace - data)<65536 ,3,0,3
 (pCsr && pAgg->nTab>0) || (!pCsr && pAgg->nTab==0) || sqlite3_malloc_failed ,1,2,3
 sqlite3pager_pagenumber(data)==pPage->pgno ,1,2,3
 pGroup->nMinPage >= pCache->nMin ,3,0,3
 size == ROUNDUP(size) ,1,2,3
 SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG ,3,0,3
 SQLITE_DBSTATUS_CACHE_WRITE==SQLITE_DBSTATUS_CACHE_HIT+2 ,3,0,3
 CORRUPT_DB ,3,0,3
 cnt==db->nVdbeActive ,3,0,3
 p->bIsReader || p->readOnly!=0 ,3,0,3
 pOvfl!=0 ,1,2,3
 chngRowid==0 || chngRowid==1 ,3,0,3
 pLock->locktype==id->locktype ,1,2,3
" SWAB32(pBt, apCell[nCell]->h.leftChild)==pgnoOld[i] ",1,2,3
(size_t)CDF_SHORT_SEC_SIZE(h) == len,2,1,3
 pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext ,3,0,3
 eType!=RBU_DELETE || pIter->zIdx==0 ,2,1,3
 pOp->p2>=0 && pOp->p2<db->nDb ,1,2,3
 nArg>=(-2) ,3,0,3
 start == ROUNDUP(start) ,1,2,3
 pPg->pNextStmt->pPrevStmt==pPg ,1,2,3
 sizeof(SIZE_T)==sizeof(sqlite3_int64) || nMap<=0xffffffff ,3,0,3
source_len == sizeof(struct sockaddr_in),2,1,3
 i<pSrc->nSrc-1 ,1,2,3
 pParse->cookieGoto==0 || pParse->cookieGoto==-1 ,2,1,3
 pOp->p1<p->nOnceFlag ,3,0,3
 memIsValid(pKey) ,3,0,3
ast->kind == ZEND_AST_UNARY_PLUS || ast->kind == ZEND_AST_UNARY_MINUS,2,1,3
 OP_Eq+6 == OP_StrEq ,1,2,3
 isSorter(pC)==(pOp->opcode==OP_SorterInsert) ,3,0,3
 CORRUPT_DB || iEnd <= pPage->pBt->usableSize ,3,0,3
 db->nProgressOps!=0 ,3,0,3
 pPk->aiColumn[i]>=0 ,3,0,3
 p->selFlags & SF_Values ,3,0,3
 pIdx->nKeyCol==1 ,3,0,3
 Addr(pCell) > Addr(pPage) ,1,2,3
 used[i]<=1 ,1,2,3
 pPage->nOverflow<=ArraySize(pPage->apOvfl) ,3,0,3
 n>3 && n<=9 ,3,0,3
 !p->aCsr[i].pseudoTable ,1,2,3
 (pBuf)->nSpace>=((pBuf)->n+nBlob) ,2,1,3
 pNew->nFree>=szCell[j] ,1,2,3
 pNew->anEq[pNew->iCol]>0 ,3,0,3
 nOut==0 || rc==SQLITE_OK ,2,1,3
 (pPager->doNotSpill & SPILLFLAG_ROLLBACK)!=0 ,3,0,3
 pRoot->intKey==1 || pRoot->intKey==0 ,3,0,3
 sqlite3BtreeGetReserveNoMutex(p->pSrc)>=0 ,3,0,3
!(op & (SLJIT_SET_U | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),2,1,3
 pPager->errCode==0 ,3,0,3
 pPager->tempFile==0 ,3,0,3
 (PTF_ZERODATA|PTF_LEAF)==10 ,3,0,3
 cntNew[iPg]>=cntOld[iPg] || abDone[iPg+1] ,3,0,3
" !ExprHasProperty(p, EP_MemToken) ",3,0,3
 EIGHT_BYTE_ALIGNMENT(sWLB.pNew) ,3,0,3
" pPager->journalMode==PAGER_JOURNALMODE_OFF || pageInJournal(pPager, pPg) || pPg->pgno>pPager->dbOrigSize ",3,0,3
 (PTF_LEAFDATA|PTF_INTKEY|PTF_LEAF)==13 ,3,0,3
 pCol->affinity-SQLITE_AFF_NONE < ArraySize(azType) ,2,1,3
 nRef==*sqlite3pager_stats(pPager) ,1,2,3
pSelect != 0 || db->mallocFailed,3,0,3
 pOp->opcode==OP_OpenRead || p->readOnly==0 ,2,1,3
 pPg->inCkpt ,1,2,3
 pOut->flags==MEM_Null ,2,1,3
 memIsValid(pReg) ,3,0,3
" sizeof(sljit_sb) == 1 && sizeof(sljit_ub) == 1 && sizeof(sljit_sh) == 2 && sizeof(sljit_uh) == 2 && sizeof(sljit_si) == 4 && sizeof(sljit_ui) == 4 && (sizeof(sljit_p) == 4 || sizeof(sljit_p) == 8) && sizeof(sljit_p) <= sizeof(sljit_sw) && (sizeof(sljit_sw) == 4 || sizeof(sljit_sw) == 8) && (sizeof(sljit_uw) == 4 || sizeof(sljit_uw) == 8), invalid_integer_types",2,1,3
 pGrandparent->isBlack ,1,2,3
 pE2->token.z ,1,2,3
 pPager->ckptSyncFlags==0 ,3,0,3
 i==9 ,2,1,3
 sqlitepager_iswriteable(pChild) ,1,2,3
 (nMap % winSysInfo.dwPageSize)==0 ,3,0,3
 pThis->aData==(sqlite3PagerGetData(pDbPage)) ,1,2,3
fdTable[fd].type == FD_SOCKET_ASYNC || fdTable[fd].type == FD_SOCKET_SYNC,1,2,3
 JOURNAL_HDR_SZ(pPager)<(pPager->pageSize+8) ,1,2,3
 p->pExtra==(void *)&p[1] ,3,0,3
 i==pIndex->nColumn ,3,0,3
 cnt++ < SQLITE_USABLE_SIZE/4 ,1,2,3
 iStart>=pPage->hdrOffset+6+pPage->childPtrSize ,2,1,3
 N==p->nOp ,1,2,3
pPg->pPager,2,1,3
 pOp->opcode==OP_OpenWrite || pOp->p5==0 ,2,1,3
 eMode==BTALLOC_ANY || (nearby>0 && IfNotOmitAV(pBt->autoVacuum)) ,3,0,3
 pWinMemData->bOwned ,3,0,3
 db->nVdbeActive>0 ,3,0,3
 jfd == (useCksum ? &pPager->jfd : &pPager->stfd) ,1,2,3
 pTrigger->iDb==pTable->iDb || pTrigger->iDb==1 ,1,2,3
 !pParse->pNewTable ,1,2,3
 p->pEList->a[0].pExpr!=0 ,3,0,3
 nKey==1 ,3,0,3
 pOld->iCol>pNew->iCol ,3,0,3
 0==p->nResColumn ,1,2,3
 pSet->prev ,1,2,3
 sizeof(PageHdr)==8 ,1,2,3
 pOp->p3>=0 ,3,0,3
(ipcFd >= 0) && (ipcFd < WIN32_OPEN_MAX),1,2,3
 j<pPk->nColumn ,3,0,3
 win_mem_data.magic1==WINMEM_MAGIC1 ,3,0,3
 eStat==SQLITE_DBSTATUS_CACHE_HIT || eStat==SQLITE_DBSTATUS_CACHE_MISS || eStat==SQLITE_DBSTATUS_CACHE_WRITE ,3,0,3
 isSorter(pC)==(pOp->opcode==OP_SorterSort) ,3,0,3
" !ExprHasProperty(pExpr, EP_IntValue|EP_Reduced|EP_TokenOnly) ",3,0,3
 pItem->pExpr->op==TK_COLLATE ,2,1,3
 memIsValid(pQuery) ,3,0,3
fd||memDb,1,2,3
 EXPR_FULLSIZE<=0xfff ,3,0,3
 p->pRight==0 ,3,0,3
 pPg->pPrevCkpt==0 && pPg->pNextCkpt==0 ,1,2,3
 pIdx==0 || pIdx->pTable==pTab ,3,0,3
 zC!=0 ,3,0,3
 p->pTos<&p->aStack[p->pc] || sqlite_malloc_failed==1 ,1,2,3
 SLOT_4_2_0 == ((0xfU<<28) | (0x7f<<14) | (0x7f)) ,3,0,3
 eDest!=SRT_Exists || pEList->nExpr==1 ,1,2,3
 pPager->nRec*pgSz+hdrSz==jSz ,1,2,3
 db==0 || db->pnBytesFreed==0 ,2,1,3
 OP_SeekLe==(OP_SeekLt+1) ,2,1,3
Z_ISREF_P(_z),2,1,3
 pSub->pSrc!=0 ,3,0,3
contentLength >= 0 && contentLength <= FCGI_MAX_LENGTH,1,2,3
 !(pMem->flags&MEM_Str) || (pMem->flags&MEM_Term) || (pMem->flags&(MEM_Ephem|MEM_Static)) || (pMem->flags&MEM_Dyn && pMem->xDel) ,1,2,3
 flag==0 ,3,0,3
 nFarg==1 ,3,0,3
 iFrame>iRead || CORRUPT_DB ,3,0,3
 zName ,3,0,3
 pCur->wrFlag && pBt->inTransaction==TRANS_WRITE && (pBt->btsFlags & BTS_READ_ONLY)==0 ,2,1,3
max - min > 0,2,1,3
 assert_pager_state(pPg->pPager) ,2,1,3
 pDel==0 || pDel==pMod ,3,0,3
 nWrite==db->nVdbeWrite ,3,0,3
 nNew>pFd->mmapSize ,3,0,3
 x==0 ,3,0,3
 pVm==0 || sqlite_malloc_failed ,1,2,3
 nIter>0 ,2,1,3
 nColumn==nKeyCol+1 || !HasRowid(pIndex->pTable) ,3,0,3
 pNew->token.n==0 ,1,2,3
function->common.function_name,3,0,3
 wrFlag==0 ,3,0,3
 (db->flags & SQLITE_Initialized)!=0 || db->init.busy ,1,2,3
 i<=p2 && zHdr<zEndHdr ,3,0,3
 noContent==0 || bMmapOk==0 ,3,0,3
 SQLITE_CkptFullFSync==PAGER_CKPT_FULLFSYNC ,3,0,3
 avail<=65536 ,3,0,3
 (pTerm==0 && nTerm==0) || iLevel<0 ,2,1,3
 p->pAgg->pCsr ,1,2,3
 i<ArraySize(aTable) ,3,0,3
 pRight ,1,2,3
 Fts5NodeIsString(pNode) ,2,1,3
 mask==BTREE_BULKLOAD || mask==BTREE_SEEK_EQ || mask==0 ,2,1,3
 IsStat4 || (pNew->iCol==0 && pOld->iCol==0) ,3,0,3
!(opt & ~(PGSQL_CONV_OPTS|PGSQL_DML_NO_CONV|PGSQL_DML_EXEC|PGSQL_DML_ASYNC|PGSQL_DML_STRING)),1,2,3
 pItem->pExpr->pLeft==pE ,2,1,3
 pName->z!=0 ,3,0,3
 iCol>=p->iCol ,2,1,3
 rc==SQLITE_OK || (p->rc&0xff)==SQLITE_CONSTRAINT ,3,0,3
 zLabel!=0 ,1,2,3
 idx>0 && idx<SQLITE_USABLE_SIZE ,1,2,3
 (flags & MEM_Blob)!=0 ,1,2,3
 (pNew->wsFlags & WHERE_COLUMN_IN)==0 || iCol<0 ,2,1,3
 sizeof(CellHdr)==12 ,1,2,3
 pIdx->iDb==pTab->iDb ,1,2,3
 sqlite3pager_iswriteable(pRoot->aData) ,1,2,3
 p->pSelect->pEList->nExpr>0 ,1,2,3
 eError==STRACCUM_NOMEM || eError==STRACCUM_TOOBIG ,2,0,2
 ((u8 *)pOld-mem5.zPool)%mem5.szAtom==0 ,2,0,2
 (pMem->flags & MEM_Dyn)==0 || pMem->szMalloc==0 ,2,0,2
 N>=0 && N<p->nCell ,2,0,2
(zend_ast *) args,1,1,2
"reg_map[SLJIT_SCRATCH_REG1] < 8, temporary_reg1_is_loreg",1,1,2
 pParent->pLeft==pE ,2,0,2
 (aStack[i].flags & (STK_Dyn|STK_Ephem))==0 ,1,1,2
"(SLJIT_F32_OP == 0x100) && !(DOUBLE_DATA & 0x2), float_transfer_bit_error",2,0,2
 (mExtra & mUnusable)==0 ,1,1,2
 pInt[nReserve/sizeof(int)]==(int)REARGUARD ,2,0,2
bufstart.v != NULL || !grow_mode || stream->eof,1,1,2
 pVal==0 || pVal->db==pParse->db ,2,0,2
 i+size<=mem3.nPool+1 ,2,0,2
bufstart != NULL,1,1,2
(base >= MIN_BASE && base <= MAX_BASE) || (base == NO_BASE),1,1,2
cpool_size == 0,2,0,2
!(pushed_size & 0x7),1,1,2
saved_reg_list[2] < 8,2,0,2
 oc!=OP_SeekLT || r.default_rc==+1 ,2,0,2
hash != 0,1,1,2
(delay_slot & DST_INS_MASK) == UNMOVABLE_INS || (delay_slot & DST_INS_MASK) == MOVABLE_INS || (delay_slot & DST_INS_MASK) == ((ins >> 25) & 0x1f),2,0,2
other_cases[0] < other_cases[1] && other_cases[1] < other_cases[2],2,0,2
!(flags & INV_IMM) && !(src2 & SRC2_IMM),2,0,2
 pTask->bDone==1 ,2,0,2
 pPhrase==0 || pPhrase->nTerm>0 ,1,1,2
persist_ptr != NULL,2,0,2
 trc==SQLITE_OK ,2,0,2
 b.nCell<nMaxCells ,2,0,2
 (fg & STK_Dyn)==0 ,1,1,2
zend_string_refcount(s) <= 1,1,1,2
 pTask->pUnpacked==(UnpackedRecord*)pFree ,2,0,2
 (mem5.aCtrl[iBlock] & CTRL_FREE)==0 ,2,0,2
 23==sqlite3LogEst(5) ,2,0,2
 p->tid==0 ,2,0,2
 pTmp!=0 ,2,0,2
dst == SLJIT_MEM1(SLJIT_LOCALS_REG),1,1,2
high_short && !(inst & (INT_ALIGNED | UPDATE_REQ)),2,0,2
(sljit_sw)addr <= 0x01ffffff && (sljit_sw)addr >= -0x02000000,2,0,2
 pSorter->bUseThreads || pSorter->nTask==1 ,2,0,2
j < blocks[succ].predecessors_count,2,0,2
args <= saveds,2,0,2
 OP_SeekGE == OP_SeekLT+2 ,2,0,2
 pList->szPMA>0 ,2,0,2
!ssa_vars[ssa_ops[i].result_def].phi_use_chain,1,1,2
 nByte==ROUND8(nByte) ,2,0,2
 p->apCsr[i]->keyAsData ,1,1,2
(total_size && free_blocks) || (!total_size && !free_blocks),2,0,2
 sqlite3GlobalConfig.bCoreMutex!=0 ,2,0,2
 pCur->info.pPayload<pCur->apPage[pCur->iPage]->aDataEnd ||CORRUPT_DB,2,0,2
flags & ARG2_IMM,2,0,2
 nOp<=(1024/sizeof(Op)) ,2,0,2
(arglist != NULL) ^ (argarray != NULL),1,1,2
 nBytes>0 ,2,0,2
jump->flags & IS_COND,2,0,2
 eType!=RBU_UPDATE ,1,1,2
 pc + info.iOverflow <= usableSize ,1,1,2
 rc!=SQLITE_OK || pTask->file.pFd ,2,0,2
 &data[pBt->psAligned] == (unsigned char*)pPage ,1,1,2
 (pStack->flags & STK_Ephem)!=0 ,1,1,2
 iStart<=iLast ,2,0,2
 p->agg.pBtree ,1,1,2
 (pDest->flags & (MEM_Blob|MEM_Str))==0 || pDest->z==sMem.z ,1,1,2
 aFrom[0].isOrdered==0 ,2,0,2
*opcode == OP_CRRANGE || *opcode == OP_CRMINRANGE || *opcode == OP_CRPOSRANGE,2,0,2
" pMem->szMalloc==0 || pMem->szMalloc==sqlite3DbMallocSize(pMem->db, pMem->zMalloc) ",2,0,2
 pSorter->bUseThreads==0 || pSorter->pReader ,2,0,2
 pPager->state>=PAGER_EXCLUSIVE || pPg ,1,1,2
 flags & MEM_Str ,2,0,2
compiler->args >= 0,2,0,2
delimiters,1,1,2
!append || (key->name && value),1,1,2
 newCell!=0 ,2,0,2
 pSorter->bUseThreads==1 || pSorter->pMerger ,2,0,2
 (z - pParse->zErrMsg) < nByte ,1,1,2
stackpos == STACK(stacktop),2,0,2
compiler->cpool_fill > 0 && compiler->cpool_fill <= CPOOL_SIZE,2,0,2
 NC_MinMaxAgg==SF_MinMaxAgg ,2,0,2
fsaveds >= 0 && fsaveds <= SLJIT_NUMBER_OF_FLOAT_REGISTERS,2,0,2
 (aMem[pOp->p2].flags & MEM_Static)!=0 ,2,0,2
*opcode == OP_CLASS || *opcode == OP_NCLASS || *opcode == OP_XCLASS,2,0,2
 pParse->nameClash==0 || pParse->initFlag==1 ,1,1,2
STR_REFCOUNT(s) <= 1,1,1,2
 pSorter->bUseThreads==0 || pSorter->nTask>1 ,2,0,2
 pFile->iEof>iStart ,2,0,2
framesize != no_stack,2,0,2
 mem5.currentOut>=(size*mem5.szAtom) ,2,0,2
 pWInfo->wctrlFlags & WHERE_GROUPBY ,2,0,2
len >= s->len,1,1,2
size > ZEND_MM_ALIGNED_SIZE(unit_size) && size > count,1,1,2
compiler->cpool_fill < CPOOL_SIZE && (inst & 0xfff) == 0,2,0,2
 !p->apCsr[i]->pseudoTable ,1,1,2
 zAffinity[0]==0 || pRec<=pLast ,2,0,2
!jump || jump->addr >= half_count,2,0,2
 iSavepoint>=-1 ,2,0,2
 aWrite>=pBufStart ,2,0,2
 !HasRowid(pIdx->pTable) || pIdx->nColumn==pIdx->nKeyCol+1 ,2,0,2
 pTask->pUnpacked!=0 ,2,0,2
 (p->rc!=SQLITE_ROW && p->rc!=SQLITE_DONE) || p->rc==p->rcApp ,2,0,2
 ((p->z==p->zMalloc)? 1 : 0) + ((p->flags&MEM_Dyn)!=0 ? 1 : 0) + ((p->flags&MEM_Ephem)!=0 ? 1 : 0) + ((p->flags&MEM_Static)!=0 ? 1 : 0) == 1 ,1,1,2
method_name.len == 0,1,1,2
FAST_IS_REG(src),2,0,2
 pTask->bDone==0 ,2,0,2
bufstart.v == NULL,1,1,2
pbuf != NULL,1,1,2
 eOp!=2 || offset==0 ,2,0,2
 pParse->rc==SQLITE_OK ,2,0,2
diff >= 1,2,0,2
 sqlite3_mutex_held(pOut->db->mutex) ,2,0,2
p > ret->val,1,1,2
(sljit_sw)addr <= 0x7fff && (sljit_sw)addr >= -0x8000,2,0,2
!((bra == OP_BRAZERO && ket == OP_KETRMIN) || (bra == OP_BRAMINZERO && ket == OP_KETRMAX)),2,0,2
"reg_map[SLJIT_SAVED_EREG1] >= 8, saved_ereg1_is_hireg",1,1,2
 fts5yyruleno>=0 && fts5yyruleno<sizeof(fts5yyRuleInfo)/sizeof(fts5yyRuleInfo[0]) ,1,1,2
 p->aStack==0 ,1,1,2
 !VdbeMemDynamic(pOut) ,2,0,2
!(imm & 0xff),2,0,2
 nReader<=SORTER_MAX_MERGE_COUNT ,2,0,2
 (aStack[i].flags & (STK_Static|STK_Ephem))==0 ,1,1,2
" reg_map[SLJIT_R0] == 0 && reg_map[SLJIT_R1] < 7 && reg_map[TMP_REG1] == 2, invalid_register_assignment_for_div_mul",2,0,2
" p->szMalloc==0 || p->szMalloc==sqlite3DbMallocSize(p->db,p->zMalloc) ",2,0,2
 pPk || IsVirtual(pTab) || iIdxCur==iDataCur+1 ,2,0,2
 pOp->opcode!=OP_Prev || pOp->opcode!=OP_PrevIfOpen || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE || pC->seekOp==OP_Last ,2,0,2
internal_encoding,2,0,2
 (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) ,2,0,2
 pOp->opcode!=OP_Next || pOp->opcode!=OP_NextIfOpen || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE || pC->seekOp==OP_Rewind || pC->seekOp==OP_Found,2,0,2
(X)->mutex==0,2,0,2
op_array->opcodes[op_array->try_catch_array[i].finally_end].opcode == ZEND_FAST_RET,1,1,2
 (pTop-(pTerm->pWC->a))<pTerm->pWC->nTerm ,2,0,2
size > 0,2,0,2
 p->agg.pCsr ,1,1,2
EX(scope) == EG(scope),1,1,2
" reg_map[SLJIT_R0] == 0 && reg_map[SLJIT_R1] == 2 && reg_map[TMP_REG1] > 7, invalid_register_assignment_for_div_mul",2,0,2
 pPragma->ePragTyp==PragTyp_BUSY_TIMEOUT ,2,0,2
 pExpr->op!=TK_REGISTER ,2,0,2
options == 0,2,0,2
compiler->scratches != -1 && compiler->saveds != -1,2,0,2
"scode, op == OP_ASSERT",1,1,2
 aStack[tos].n >= 4 ,1,1,2
!(inp_flags & LOAD_DATA),2,0,2
" !(fbc->common.fn_flags & ZEND_ACC_HAS_RETURN_TYPE) || zend_verify_internal_return_type(fbc, EX_VAR(opline->result.var))",0,2,2
 pVal!=0 ,2,0,2
 memIsValid(pCtx->argv[i]) ,2,0,2
 p->pVdbe!=0 ,2,0,2
high_short && high_short <= 0x7fffffffl && high_short >= -0x80000000l,2,0,2
 pConfig->eContent!=FTS5_CONTENT_NORMAL ,1,1,2
(sljit_sw) addr <= SIMM_17BIT_MAX && (sljit_sw) addr >= SIMM_17BIT_MIN,2,0,2
 pRight && pRight->op==TK_ID && pRight->token.z ,1,1,2
src & SLJIT_MEM,2,0,2
(jump->flags & (PATCH_ABS48 | PATCH_ABS64)) || addr <= 0xffffffffl,2,0,2
 pTo->db==pFrom->db || pFrom->db==0 ,1,1,2
 pCsr->curFlags & BTCF_Incrblob ,2,0,2
 Addr(pCell) < Addr(pPage) + SQLITE_PAGE_SIZE ,1,1,2
p > fname->val,1,1,2
 pRes->iFirst==i1 ,2,0,2
 sCtx.pTab==pTab ,2,0,2
"reg_map[SLJIT_SAVED_REG3] >= 8, saved_reg3_is_hireg",1,1,2
 idx>0 && idx<SQLITE_PAGE_SIZE ,1,1,2
" i==0 || sqlite3VdbeRecordCompare(aSample[i-1].n, aSample[i-1].p, pRec, 0)<0 || pParse->db->mallocFailed ",1,1,2
 isInit==0 || isInit==1 ,2,0,2
Z_ISREF_P(pipes),1,1,2
 pTask->file.iEof==0 ,2,0,2
 (nByte & 7)==0 ,2,0,2
 nData==0 ,2,0,2
(iOffset+nAlloc)>mem5.nBlock,2,0,2
 VdbeMemDynamic(pDest)==0 ,1,1,2
 p->rc || (pIter->aSeg[ pIter->aFirst[1].iFirst ].pLeaf==0)==pIter->bEof ,1,1,2
 (eOp & WO_IN) || nIn==0 ,2,0,2
n >= 0 && n <= 15,1,1,2
 pPrior ,2,0,2
 elem!=0 ,2,0,2
buf_ptr == buf_end,2,0,2
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),2,0,2
cc == ccend && stackptr == stacktop && (save || (tmp1empty && tmp2empty)),2,0,2
 pIncr->bEof==0 ,2,0,2
 n==0 || (pOp->p2>0 && pOp->p2+n<=(p->nMem+1 - p->nCursor)+1) ,2,0,2
 p->apCsr[i]->intKey ,1,1,2
 pOp->opcode==OP_CollSeq ,2,0,2
other_cases[0] != NOTACHAR && other_cases[1] != NOTACHAR && other_cases[2] != NOTACHAR,2,0,2
 DbMaskAllZero(p->btreeMask) ,2,0,2
 pOp->opcode==OP_OpenRead || pOp->opcode==OP_ReopenIdx || p->readOnly==0 ,2,0,2
((p) & OFFS_REG_MASK) != TO_OFFS_REG(SLJIT_LOCALS_REG) && !(i & ~0x3),1,1,2
Z_TYPE_P(label) == IS_STRING,1,1,2
EX(func)->op_array.static_variables != NULL,1,1,2
 p->iForeGuard==(int)FOREGUARD ,2,0,2
 (flags & FTS5INDEX_QUERY_SCAN)==0 || (flags & FTS5INDEX_QUERY_SCAN)==FTS5INDEX_QUERY_SCAN ,1,1,2
Tstart[var] == (unsigned) -1,1,1,2
 mem3.aPool[i-1].u.hdr.size4x/4==nBlock ,2,0,2
 sizeof(OverflowPage)==SQLITE_PAGE_SIZE ,1,1,2
!tmp1empty,2,0,2
common->req_char_ptr != 0,2,0,2
"0 && ""unhandled state""",2,0,2
 pRes->iFirst==i2 ,2,0,2
(code_ptr[-3] & 0xfc00ffff) == 0x780007c6,2,0,2
 !pC->intKey ,1,1,2
 VdbeMemDynamic(pOut)==0 ,2,0,2
 &pPage->aData[pPage->pBt->psAligned]==(unsigned char*)pPage ,1,1,2
 createFlag==0 || pCache->eCreate==eCreate ,2,0,2
((uimm & 0xc000000000000000l) == 0x4000000000000000l) && (shift > 0) && (shift <= 32),2,0,2
 bPreserve && pCur->iPage==iCellDepth ,1,1,2
 OP_SeekLE==(OP_SeekLT+1) ,2,0,2
 !pOp->p3 ,1,1,2
Z_REFCOUNTED_P(pz) || Z_IMMUTABLE_P(pz) || Z_SYMBOLTABLE_P(pz),1,1,2
!label || label->size >= half_count,2,0,2
 p->pVtab ,2,0,2
!(fbc->common.fn_flags & ZEND_ACC_GENERATOR),2,0,2
FALSE,1,1,2
 pMerger->pTask==0 ,2,0,2
 pPage->aData == &((unsigned char*)pPage)[-pBt->psAligned] ,1,1,2
 pIdx->iDb==1 || pIdx->iDb==pTab->iDb ,1,1,2
 (pCur->curFlags & BTCF_ValidNKey)==0 ,2,0,2
 p->nRef==0 && p->owner==0 ,2,0,2
 pSorter->bUseThreads || pSorter->pReader==0 ,2,0,2
 newi > mem3.iMaster+1 ,2,0,2
diff <= 8388607 && diff >= -8388608,2,0,2
 pC->eCurType!=CURTYPE_PSEUDO || pC->nullRow ,2,0,2
 pParent->op==TK_COLLATE ,2,0,2
CG(unclean_shutdown) || (GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT),1,1,2
ZEND_MM_SRUN_BIN_NUM(info) == i,2,0,2
 mem5.currentOut>0 || mem5.currentCount==0 ,2,0,2
 pPgHdr->pPage==0 ,2,0,2
op_array->opcodes[op_num - 2].opcode == ZEND_FAST_CALL,1,1,2
 (aStack[tos].flags & STK_Real)!=0 ,1,1,2
 oc!=OP_SeekGT || r.default_rc==-1 ,2,0,2
 CORRUPT_DB || (serial_type>=1 && serial_type<=9 && serial_type!=7) ,2,0,2
 sqlite3_mutex_held(p->pOut->db->mutex) ,2,0,2
 iCol>0 ,2,0,2
 OP_SeekLT==(OP_SeekLE-1) ,2,0,2
dst == SLJIT_MEM1(SLJIT_SP),2,0,2
local_size >= 0 && local_size <= SLJIT_MAX_LOCAL_SIZE,2,0,2
 (p->flags & EP_TokenOnly)==0 ,2,0,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] < 7 && reg_map[TMP_REG1] == 2, invalid_register_assignment_for_div_mul",1,1,2
 nNew>=(p->nOpAlloc+nOp) ,2,0,2
 (pCur->curFlags & (BTCF_AtLast|BTCF_ValidOvfl|BTCF_ValidNKey))==0 ,2,0,2
 (pVal->flags & (MEM_Null))==0 ,2,0,2
"reg_map[SLJIT_R0] < 8, temporary_reg1_is_loreg",2,0,2
 nCol>0 ,2,0,2
 pCtx->pVdbe!=0 ,2,0,2
 oc!=OP_SeekLE || r.default_rc==-1 ,2,0,2
 33==sqlite3LogEst(10) ,2,0,2
 OP_SeekGE==(OP_SeekGT-1) ,2,0,2
flags & HALF_SIZE,2,0,2
"reg_map[SLJIT_SAVED_REG2] < 8, saved_reg2_is_loreg",1,1,2
 p->deferredMoveto ,2,0,2
idx < HT_IDX_TO_HASH(ht->nTableSize),2,0,2
info->class_name,1,1,2
ket == OP_KET || ket == OP_KETRMAX || ket == OP_KETRMIN,2,0,2
 (OP_IdxLE&1)==(OP_IdxLT&1) && (OP_IdxGE&1)==(OP_IdxGT&1) ,2,0,2
 (int)(pOp - aOp)==pFrame->pc ,2,0,2
diff <= 127 && diff >= -128 && (jump->flags & IS_COND),2,0,2
 pPage->nCell<=MX_CELL(pPage->pBt) || CORRUPT_DB ,2,0,2
 destIfFalse!=destIfNull || rRhsHasNull==0 ,2,0,2
Tstart[i] == (uint32_t)-1,1,1,2
 aStack[tos].flags & STK_Int ,1,1,2
p->key->gc.u.v.flags & IS_STR_PERSISTENT,1,1,2
cpool_size > 0,2,0,2
!current->nextbacktracks && !current->topbacktracks,2,0,2
 szNew>0 ,2,0,2
 pParse->pWith==pWith ,2,0,2
*cc == OP_DNREF || *cc == OP_DNREFI,2,0,2
" sqlite3MemdebugNoType(pOld, (u8)~MEMTYPE_HEAP) ",2,0,2
"ctype_word == 0x10, ctype_word_must_be_16",2,0,2
 pTask->list.aMemory==0 || pSorter->list.aMemory!=0 ,2,0,2
 (p->selFlags & SF_Converted)==0 ,2,0,2
GC_TYPE(func->op_array.prototype) == IS_OBJECT,1,1,2
diff <= 0xfff,2,0,2
common->capture_last_ptr != 0,2,0,2
"ICC_IS_SET == SET_FLAGS, icc_is_set_and_set_flags_must_be_the_same",2,0,2
 p->zErrmsg==0 ,2,0,2
 pItem->fg.isTabFunc==0 ,2,0,2
 (aStack[i].flags & STK_Ephem)==0 ,1,1,2
(sljit_sw)addr <= MAX_DISP && (sljit_sw)addr >= MIN_DISP,2,0,2
(sljit_sw)addr <= SIMM_MAX && (sljit_sw)addr >= SIMM_MIN,2,0,2
 tripCode==SQLITE_ABORT_ROLLBACK || tripCode==SQLITE_OK ,2,0,2
repeat_length != 0 && repeat_type != 0 && repeat_count != 0,2,0,2
 pSort==0 ,2,0,2
rootbacktrack.prev == NULL,2,0,2
p->key != NULL,2,0,2
shift > 0,2,0,2
 pOp->opcode==OP_OpenWrite || pOp->p5==0 || pOp->p5==OPFLAG_SEEKEQ ,2,0,2
!(info & ZEND_MM_IS_LRUN),2,0,2
!(flags & LOAD_DATA) && TMP_REG1_mapped != reg_ar,2,0,2
"reg_map[SLJIT_SAVED_EREG2] >= 8, saved_ereg2_is_hireg",1,1,2
 pTrigger->iDb==pTab->iDb || pTrigger->iDb==1 ,1,1,2
"STR_END == SLJIT_S1, str_end_must_be_saved_reg2",2,0,2
fscratches + fsaveds <= SLJIT_NUMBER_OF_FLOAT_REGISTERS,2,0,2
 i<9 ,1,1,2
op_array->opcodes[finally_op_num - 2].opcode == ZEND_FAST_CALL,1,1,2
 pCur->skipNext==0 ,2,0,2
 pParse->aAgg[i].pFunc!=0 ,1,1,2
 pOp->p2>=0 && pOp->p2<p->nOp ,2,0,2
buffer != NULL,1,1,2
 (createFlag*(1+(!pCache->bPurgeable||!pCache->pDirty)))==eCreate ,1,1,2
 iSub<ArraySize(aSub) ,2,0,2
 aSortCost!=0 || &pSpace[nSpace]==(char*)pX ,2,0,2
 p->pReader==0 ,2,0,2
addr <= 0xffff,2,0,2
res->m > 0,1,1,2
 iCol>=0 && iCol<pIdx->nColumn ,2,0,2
(argw & 0x3) && !(max_delta & 0xf00),2,0,2
code_ptr - code <= (sljit_sw)compiler->size - (sizeof(struct sljit_function_context) / sizeof(sljit_ins)),2,0,2
"reg_map[SLJIT_SAVED_REG3] < 8, saved_reg3_is_loreg",1,1,2
 aSortCost==0 || &pSpace[nSpace]==(char*)&aSortCost[nOrderBy] ,2,0,2
 2==ArraySize(azCol) ,2,0,2
!(op & SLJIT_I32_OP),2,0,2
 rc==SQLITE_CANTOPEN ,2,0,2
 pPage->intKeyLeaf || pPage->noPayload ,1,1,2
 p->zText!=0 || p->nChar==0 ,2,0,2
GC_REFCOUNT(ht) <= 1,2,0,2
 pTab->base.zErrMsg==0 ,2,0,2
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)>=0 ,2,0,2
 p->tos+1>=pOp->p1 ,1,1,2
"zend_vm_calc_used_stack(2, fbc->common.prototype) <= (size_t)(((char*)EG(vm_stack_end)) - (char*)call)",2,0,2
" sqliteHashFind(&db->aFKey,pFKey->zTo,strlen(pFKey->zTo)+1)!=pFKey ",1,1,2
 (s1>0 && s1<7) || s1==8 || s1==9 ,2,0,2
 sCtx.pPhrase->nTerm>0 ,1,1,2
 (p->flags & MEM_Dyn)!=0 || p->xDel==0 ,1,1,2
opline->opcode == ZEND_INIT_FCALL,1,1,2
 SQLITE_FUNC_MINMAX==NC_MinMaxAgg ,2,0,2
 pIter->pLeaf==0 ,2,0,2
 (pMem->flags & MEM_Agg)==0 ,2,0,2
 48==sqlite3LogEst(28) ,2,0,2
 sizeof(iVal)==8 && sizeof(rVal)==8 ,2,0,2
 pPage->noPayload ,1,1,2
property_info->flags & ZEND_ACC_PROTECTED,1,1,2
 (M & I)==I ,2,0,2
opcode >= OP_ASSERT && opcode <= OP_ASSERTBACK_NOT,2,0,2
 pSorter->pUnpacked==(UnpackedRecord*)p ,2,0,2
 pPage->nFree==SQLITE_PAGE_SIZE-pc ,1,1,2
 nKeyCol<=nCol ,2,0,2
 oc==OP_SeekLT || oc==OP_SeekLE ,2,0,2
"reg_map[SLJIT_R1] == 6 && reg_map[SLJIT_R0] < 8 && reg_map[SLJIT_R2] < 8, args_registers",2,0,2
block->start <= block->end,1,1,2
 pCur->iDb==pOp->p3 ,2,0,2
 pStack!=0 ,1,1,2
 pSorter->pReader==0 ,2,0,2
 *pnSize == info.nSize ,2,0,2
 gap<=65536 ,2,0,2
 (pRec->flags & (MEM_Str|MEM_Int|MEM_Real))==MEM_Str ,2,0,2
 p->xTask!=0 ,2,0,2
 res==0 || (res==1 && pC->isTable==0) ,2,0,2
 eOp & (WO_LT|WO_LE) ,2,0,2
" fts5MultiIterEof(p, pMulti)==0 ",1,1,2
*ccend != OP_END && common->control_head_ptr != 0,2,0,2
 (db->flags & SQLITE_Vacuum)==0 ,2,0,2
 pFunc ,2,0,2
 pExpr->iTable>=base && pExpr->iTable<base+pTabList->nSrc ,1,1,2
 pIn1->u.i>=0 && pIn1->u.i<p->nOp ,2,0,2
 pOp->p4type==P4_FUNCCTX ,2,0,2
size >= unit_size && size >= count,1,1,2
common->optimized_cbracket[offset] == 0,2,0,2
 iContinue!=0 ,2,0,2
((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.label->addr - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,0,2
 (sizeof(Mem5Link)&(sizeof(Mem5Link)-1))==0 ,2,0,2
ast->kind == ZEND_POST_INC || ast->kind == ZEND_POST_DEC,1,1,2
 pTop->eOperator==WO_LT ,2,0,2
 pSub->pPrior && pSub->pOrderBy==0 ,2,0,2
 oc!=OP_SeekGE || r.default_rc==+1 ,2,0,2
 pOp->opcode==OP_IdxLE || pOp->opcode==OP_IdxGT ,2,0,2
 pTask->nPMA==0 ,2,0,2
othercasebit,2,0,2
"(OP_CRSTAR & 0x1) == 0, crstar_opcode_must_be_even",2,0,2
"reg_map[SLJIT_SAVED_REG1] < 8, saved_reg1_is_loreg",1,1,2
 db->aDb[pParse->useDb].pBt!=0 ,1,1,2
free_blocks == free_block,2,0,2
 iFreeBlk>iPtr || iFreeBlk==0 ,2,0,2
variable_ptr != &EG(uninitialized_zval),1,1,2
 (p->flags & MEM_Dyn)==0 || p->xDel!=0 ,2,0,2
pArg->z <= p->z,2,0,2
 pReadr->pIncr==0 || pReadr->pIncr->bEof==0 ,2,0,2
 precision>0 ,2,0,2
 !VdbeMemDynamic(pMem) ,2,0,2
save && common->recursive_head_ptr != 0,2,0,2
 (pOp->p5 & SQLITE_JUMPIFNULL)==0 ,2,0,2
!cfg->catch[i]->access,1,1,2
 pItem->fg.notIndexed==0 ,2,0,2
p >= script,2,0,2
datetime,1,1,2
 pC->nHdrParsed<=p2 ,2,0,2
 pDb && pDb->op==TK_ID && pDb->token.z ,1,1,2
 szHdr<=(u32)nKey ,2,0,2
 sqlite3GlobalConfig.mutex.xMutexAlloc ,2,0,2
 rc!=WAIT_IO_COMPLETION ,2,0,2
 db->nDb>1 ,2,0,2
compiler->cpool_diff == CONST_POOL_EMPTY || compiler->size - compiler->cpool_diff < MAX_DIFFERENCE(4092),2,0,2
 pOp>=&aOp[-1] && pOp<&aOp[p->nOp-1] ,2,0,2
 abPK[i]==0 ,2,0,2
 pCaller->opcode==OP_Yield ,2,0,2
info_off == op_array->last + 1 + op_live_total,1,1,2
SLOW_IS_REG(dst),2,0,2
execute_data->func->op_array.static_variables != NULL,1,1,2
 iBlock+size-1<(u32)mem5.nBlock ,2,0,2
op1->type == op2->type,1,1,2
 iReg>0 || pParse->nErr || pParse->db->mallocFailed ,2,0,2
c != oc,2,0,2
offs == -(sljit_sw)(sizeof(sljit_sw)),2,0,2
 pCur!=0 ,2,0,2
!(dst & SLJIT_MEM) || (dst & REG_MASK) != SLJIT_LOCALS_REG,1,1,2
 pPage==0 || pCache->iMaxKey>=iKey ,2,0,2
 pMain==0 ,2,0,2
opcode == ZEND_BRK || opcode == ZEND_CONT,1,1,2
addr <= 0x7fffffffffffl,2,0,2
 (db->flags & SQLITE_Vacuum)!=0 ,2,0,2
dst_r == TMP_REG1,2,0,2
 pCtx->pParse->rc==SQLITE_OK ,2,0,2
 aOut==0 ,2,0,2
 p->id!=0 && p->id!=GetCurrentThreadId() ,2,0,2
 pEntry->count>=0 ,2,0,2
!(jump->flags & IS_BL),2,0,2
 (pMem->flags & (MEM_Str|MEM_Blob))!=0 ,2,0,2
 p->pTab!=0 ,2,0,2
 r2->default_rc==0 ,1,1,2
 p>mem3.aPool && p<&mem3.aPool[mem3.nPool] ,2,0,2
VALID(InStream),1,1,2
(uimm & 0x8000000000000000l) && (shift2 > 0) && (shift2 <= 16),2,0,2
 IsUniqueIndex(pIdx) ,2,0,2
(extra->flags & PCRE_EXTRA_STUDY_DATA) != 0,2,0,2
!(common->req_char_ptr != 0 && common->start_used_ptr != 0),2,0,2
 p->nFrame==0 ,2,0,2
 pPk!=0 || pTab->pSelect!=0 ,2,0,2
 (writeOnly==0 || writeOnly==1) && BTCF_WriteFlag==1 ,2,0,2
 pMerger->pTask->pUnpacked!=0 ,1,1,2
 bSeq==0 || bSeq==1 ,2,0,2
 (aStack[to].flags & STK_Ephem)==0 ,1,1,2
 pIncr->bUseThread ,2,0,2
ssa_var_num >= 0,1,1,2
 p->aCol[i].zDflt==0 ,1,1,2
 pReadr->aAlloc==0 && pReadr->nAlloc==0 ,2,0,2
 sqlite3VdbeCheckMemInvariants(pDest) ,2,0,2
((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) <= 0x01ffffff && ((sljit_sw)jump->u.target - (sljit_sw)(buf_ptr + 2)) >= -0x02000000,2,0,2
" vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, res) ",2,0,2
 (flags & ~MEM_TypeMask)==0 ,2,0,2
k1->group && k1->name && k2->group && k2->name,1,1,2
!current->nextbacktracks,2,0,2
 pOp->p5==0 || pOp->p5==OPFLAG_SEEKEQ ,2,0,2
offs == local_size - (sljit_sw)(sizeof(sljit_sw)),2,0,2
"(INT_SIZE ^ 0x100) == WORD_SIZE, must_be_one_bit_difference",2,0,2
 pTop->wtFlags & TERM_LIKEOPT ,2,0,2
 *pbDel==0 ,1,1,2
 pi[0]==0xdead1122 ,1,1,2
" fts5BlobCompare(pOld, nOld, pNew, nNew)<0 ",1,1,2
 regResult==iParm ,2,0,2
 pSorter->list.pList ,2,0,2
 !db->init.busy || CORRUPT_DB ,2,0,2
 eOp!=2 ,2,0,2
 sqlite3_mutex_notheld(mem0.mutex) ,2,0,2
"0 && ""Shouldn't get here.""",2,0,2
 pParse->nTab>base+i+1 ,1,1,2
 tos>=0 ,1,1,2
 pPk ,2,0,2
 pCur->apPage[pCur->iPage]->intKeyLeaf==1 ,2,0,2
 OP_SeekLE == OP_SeekLT+1 ,2,0,2
 eCreate==0 || eCreate==1 || eCreate==2 ,2,0,2
 (sizeof(struct MemBlockHdr)&7) == 0 ,2,0,2
 mem3.szMaster>=nBlock ,2,0,2
" vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, res) || CORRUPT_DB || pPKey2->pKeyInfo->db->mallocFailed ",2,0,2
 winMutex_isNt>=-1 && winMutex_isNt<=1 ,2,0,2
"codestart, FALSE",1,1,2
 pNear->nPhrase==1 && pPhrase->nTerm==1 ,1,1,2
(sljit_sw)addr <= 0x1fffffff && (sljit_sw)addr >= -0x20000000,2,0,2
 VdbeMemDynamic(p) ,2,0,2
 pOp->p5==0 || pOp->p4type==P4_INT32 ,2,0,2
elem_node.op_type != IS_CONST,1,1,2
n < entries + FD_SETSIZE * 2,2,0,2
p >= dest->val,1,1,2
 rc!=SQLITE_OK || pSorter->list.pList==0 ,2,0,2
current->topbacktracks == NULL,2,0,2
!(inp_flags & WRITE_BACK) && !(inst & UPDATE_REQ),2,0,2
 iDb>=0 && iDb<pData->db->nDb ,1,1,2
 (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) ,2,0,2
!(src & SLJIT_MEM) || (src & REG_MASK) != SLJIT_LOCALS_REG,1,1,2
 pNode->eType==JSON_NULL ,2,0,2
 pTerm->pSynonym ,2,0,2
addr <= 0x7fffffffffff,2,0,2
 iCol<4 && iCol>0 ,1,1,2
 (s2>0 && s2<7) || s2==8 || s2==9 ,2,0,2
 mem5.currentCount>0 ,2,0,2
stackpos >= stacktop + 2,2,0,2
IS_HALFWORD(srcw),2,0,2
TMP1 == SLJIT_R0 && STACK_TOP == SLJIT_R1 && TMP2 == SLJIT_R2,2,0,2
 mem.nCurrent[i]>=0 ,2,0,2
 pPKey2->pKeyInfo->nField>0 ,2,0,2
(argv[optind][0] == '-') && argv[optind][1],1,1,2
 pSeg->nPos>0 ,1,1,2
 p->nCol>0 ,2,0,2
 3==ArraySize(azCol) ,2,0,2
 p->pIncr==0 || ( (p->pIncr->pTask==&pSorter->aTask[iTask]) && (iTask!=pSorter->nTask-1 || p->pIncr->bUseThread==0) ),2,0,2
" GLOBAL(int, mutexIsInit) ",2,0,2
 nSize==debuginfo.nSize || CORRUPT_DB ,2,0,2
 zByte!=0 ,2,0,2
 pCaller->p2>=0 && pCaller->p2<p->nOp ,2,0,2
 (aMem[pOp->p2].flags & MEM_Str)!=0 ,2,0,2
EG(active_op_array)->static_variables != NULL,1,1,2
 oc==OP_SeekGE || oc==OP_SeekGT ,2,0,2
 pLvl->nMerge<=pLvl->nSeg ,2,0,2
 debugMutexHeld(pX) ,2,0,2
 (pIn3->flags & MEM_Dyn) == (flags3 & MEM_Dyn) ,2,0,2
 (p->flags & MEM_Dyn)==0 || p->szMalloc==0 ,2,0,2
 iSize>=4 ,2,0,2
 m.z || db->mallocFailed ,2,0,2
jump->u.target & 0x1,2,0,2
 pTab->iDb==pParse->iDb || isTemp ,1,1,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_first",2,0,2
IS_UNSERIALIZED(ptr),2,0,2
saveds >= 0 && saveds <= SLJIT_NUMBER_OF_REGISTERS,2,0,2
_i > _min_num_args || _optional==0,2,0,2
 (aStack[i].flags & (STK_Static|STK_Dyn))==0 ,1,1,2
common->start_used_ptr != 0 && common->start_ptr != 0 && (common->mode == JIT_PARTIAL_SOFT_COMPILE ? common->hit_start != 0 : common->hit_start == 0),2,0,2
(inst & 0xfff) == 0,2,0,2
should_free == 1 || should_free == 0,1,1,2
 pPrior!=0 && nByte>0 ,2,0,2
p > ZSTR_VAL(ret),1,1,2
 iSavepoint<=p->ts.iSavepoint ,2,0,2
 pExpr->eType==FTS5_OR ,2,0,2
 moreToFollow==0 || moreToFollow==1 ,2,0,2
 p->pSrc->nSrc==1 && p->pOrderBy ,2,0,2
 ((pgsz-1)&pgsz)==0 ,2,0,2
 mem5.currentCount>0 || mem5.currentOut==0 ,2,0,2
 pIncr->pMerger->pTask==pTask ,2,0,2
*common->start == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET,2,0,2
"reg_map[SLJIT_SAVED_REG2] >= 8, saved_reg2_is_hireg",1,1,2
(addr & ~0x3FFFFFFFL) == ((jump->addr + sizeof(sljit_ins)) & ~0x3FFFFFFFL),2,0,2
len <= s->len,1,1,2
Z_TYPE_P(zv) == IS_ARRAY,1,1,2
 p->nChar+N >= p->nAlloc ,1,1,2
"STR_END == SLJIT_SAVED_REG2, str_end_must_be_saved_reg2",1,1,2
!((i) & ~0x3),2,0,2
scratches + saveds <= SLJIT_NUMBER_OF_REGISTERS,2,0,2
 (*(u8*)pKey1)<=0x3F || CORRUPT_DB ,2,0,2
pe >= p,2,0,2
 sqlite3_mutex_held(mem5.mutex) ,2,0,2
common->positive_assert_quit == NULL,2,0,2
 nZero==0 ,2,0,2
b->start == op_array->live_range[j].end,1,1,2
private_data_ptr == OVECTOR(offset),2,0,2
" i==pIdx->nSample || sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec, 0)>0 || pParse->db->mallocFailed ",1,1,2
saved_reg_list[1] < 8,2,0,2
 p->xDel!=SQLITE_DYNAMIC && p->xDel!=0 ,2,0,2
opcode == OP_COND || opcode == OP_SCOND,2,0,2
(jump->flags & PATCH_ABS64) || addr <= 0xffffffffffffl,2,0,2
 pPage->aData==&((unsigned char*)pPage)[-pPage->pBt->psAligned] ,1,1,2
 EIGHT_BYTE_ALIGNMENT(pIndex->aiRowLogEst) ,2,0,2
_i <= _min_num_args || _optional==1,2,0,2
*ccend == OP_END || (*ccend >= OP_ALT && *ccend <= OP_KETRPOS),2,0,2
 x<mem5.nBlock ,2,0,2
Z_PTR(thisfilter->abstract) != NULL,2,0,2
 zTab || db->mallocFailed ,2,0,2
level == IPPROTO_IPV6,2,0,2
 nPrefixReg==nExpr+bSeq ,2,0,2
 rc==SQLITE_OK || (writeOnly==0 && rc2==SQLITE_OK) ,2,0,2
TMP1 == SLJIT_SCRATCH_REG1 && STACK_TOP == SLJIT_SCRATCH_REG2 && TMP2 == SLJIT_SCRATCH_REG3,1,1,2
 writeOnly==1 || writeOnly==0 ,2,0,2
 pTab->iDb==pParse->iDb || isTemp==1 ,1,1,2
 u-1==LARGEST_INT64 ,2,0,2
" !ExprHasProperty(pIn, EP_xIsSelect) ",2,0,2
 sqlite3_mutex_held(mem0.mutex) ,2,0,2
"emit_lea_binary(compiler, SLJIT_KEEP_FLAGS, dst, dstw, SLJIT_SP, 0, TMP_REG1, 0) != SLJIT_ERR_UNSUPPORTED",2,0,2
 pCur->curFlags & BTCF_WriteFlag ,2,0,2
 p->bIsReader!=0 || DbMaskAllZero(p->btreeMask) ,2,0,2
"SLJIT_MOV + 8 == SLJIT_MOVU, movu_offset",2,0,2
 pLeft && pLeft->op==TK_ID && pLeft->token.z ,1,1,2
diff <= 1023 && diff >= -1024 && !(jump->flags & IS_COND),2,0,2
 4==ArraySize(azCol) ,2,0,2
addr <= 0x03ffffff,2,0,2
 pSrc->a[iFrom].pSelect==pSub ,1,1,2
function->type == ZEND_INTERNAL_FUNCTION,2,0,2
 pNew->pPrior!=0 ,2,0,2
 pIncr->pTask!=pLast ,2,0,2
 p->pConfig->eDetail!=FTS5_DETAIL_NONE ,2,0,2
 context->pVdbe!=0 ,2,0,2
 p->pOrderBy==0 || pDest->eDest!=SRT_Fifo ,2,0,2
 sqlite3VdbeCheckMemInvariants(pMem) ,2,0,2
 db->pnBytesFreed==0 ,2,0,2
 nOrderBy>0 && 66==sqlite3LogEst(100) ,2,0,2
 pIdx->aiColumn[i]>=0 ,2,0,2
opline->opcode == ZEND_FREE,1,1,2
" vdbeRecordCompareDebug(nKey1, pKey1, pPKey2, rc) ",2,0,2
 aLog!=0 ,2,0,2
 pTask->nPMA>0 || SQLITE_MAX_WORKER_THREADS>0 ,2,0,2
(addr & ~0xfffffff) == ((jump->addr + sizeof(sljit_ins)) & ~0xfffffff),2,0,2
 pOld==pInfo ,1,1,2
srcw[0] != 0 && srcw[1] != 0,2,0,2
"0 && ""Unknown header_state""",2,0,2
ss == len,2,0,2
a && b,1,1,2
op_array->opcodes[op_array->try_catch_array[finally_num].finally_op - 2].opcode == ZEND_FAST_CALL,1,1,2
 (pMem->flags & (MEM_Int|MEM_Real))==0 ,2,0,2
 p->intKey ,1,1,2
ZEND_OPCODE_HANDLER_ARGS,1,1,2
min <= max,2,0,2
imm < 0,2,0,2
 eType>=0 && eType<sizeof(azSchema)/sizeof(azSchema[0]) ,1,1,2
Z_ISREF_P(z),1,1,2
 pStr->bStatic ,2,0,2
info->var.op_type == IS_VAR || info->var.op_type == IS_TMP_VAR,1,1,2
 xtype==etINVALID ,2,0,2
opnum_init != -1,1,1,2
written <= (size_t)(next - p) + 1,1,1,2
"emit_lea_binary(compiler, SLJIT_KEEP_FLAGS, dst, dstw, SLJIT_LOCALS_REG, 0, TMP_REG1, 0) != SLJIT_ERR_UNSUPPORTED",1,1,2
" sqlite3VdbeGetOp(v, 0)->opcode==OP_Init ",2,0,2
(uint)(p - env.envp) <= sizeenv,2,0,2
 rc!=SQLITE_OK || (pOut->flags & MEM_Blob) ,2,0,2
!tmp2empty,2,0,2
!(opt & ~PGSQL_CONV_OPTS),1,1,2
 pParse->okConstFactor==0 ,2,0,2
!conditional,2,0,2
 pPage1->aData ,2,0,2
 pReadr->aMap==0 ,2,0,2
 pOffset==0 || pLimit!=0 || pParse->nErr>0 || db->mallocFailed!=0 ,2,0,2
!(a & SLJIT_IMM) || compiler->mode32 || IS_HALFWORD(imma),2,0,2
ast->children > 0,1,1,2
 pReadr->aBuffer==0 ,2,0,2
prev == -1,2,0,2
 pNew->u.btree.nEq<pProbe->nColumn ,2,0,2
0 < len,2,0,2
reg > 0 && reg <= SLJIT_NO_REGISTERS,1,1,2
"reg_map[SLJIT_SCRATCH_REG2] == 6 && reg_map[SLJIT_SCRATCH_REG1] < 8 && reg_map[SLJIT_SCRATCH_REG3] < 8, args_registers",1,1,2
 pArgs!=0 ,1,1,2
 (p->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) ,2,0,2
 pSub->pPrior==0 ,2,0,2
 pParse->useDb<db->nDb ,1,1,2
" CORRUPT_DB || (rc<0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)<0) || (rc>0 && vdbeRecordCompareDebug(nKey1, pKey1, pPKey2)>0) || pKeyInfo->db->mallocFailed ",1,1,2
zfunc != NULL && Z_FUNC_P(zfunc)->type == ZEND_USER_FUNCTION,2,0,2
 pBuf->n<=pBuf->nSpace ,2,0,2
repeat_type != 0 && repeat_count != 0,2,0,2
ast->kind == ZEND_PRE_INC || ast->kind == ZEND_PRE_DEC,1,1,2
"common, matchingpath, assert, TRUE",2,0,2
 sizeof(x)==8 && sizeof(pMem->u.r)==8 ,2,0,2
 (WHERE_UNQ_WANTED>>16)==1 ,1,1,2
Z_TYPE_P(s) == IS_STRING,2,0,2
ast->attr == T_CLASS_C && CG(active_class_entry) && (CG(active_class_entry)->ce_flags & ZEND_ACC_TRAIT) != 0,2,0,2
const_pool - code_ptr <= CONST_POOL_ALIGNMENT,2,0,2
 pIdx->idxType!=SQLITE_IDXTYPE_APPDEF ,2,0,2
Z_TYPE_P(value) != IS_REFERENCE,1,1,2
 mem3.aPool[i+nBlock-1].u.hdr.prevSize==nBlock ,2,0,2
*cc != OP_BRAMINZERO,2,0,2
 aStack[tos].flags & STK_Str ,1,1,2
 pMem->xDel!=0 && pMem->xDel!=SQLITE_DYNAMIC ,2,0,2
" reg_map[SLJIT_SCRATCH_REG1] == 0 && reg_map[SLJIT_SCRATCH_REG2] == 2 && reg_map[TMP_REG1] > 7, invalid_register_assignment_for_div_mul",1,1,2
p > dest->val,1,1,2
(sljit_sw)addr <= 0x3ffff && (sljit_sw)addr >= -0x40000,2,0,2
 pIdx==0 || pIdx->aiColumn[i]>=0 ,2,0,2
dst != TMP_REG1,2,0,2
format,1,1,2
ind < cpool_size && !(*last_pc_patch & (1 << 25)) && (*last_pc_patch & (1 << 20)),2,0,2
"reg_map[SLJIT_SCRATCH_REG2] == 2 && reg_map[SLJIT_SCRATCH_REG1] < 8 && reg_map[SLJIT_SCRATCH_REG3] < 8, args_registers",1,1,2
 pTerm->u.leftColumn>=(-1) ,2,0,2
 mem0.nScratchFree <= (u32)sqlite3GlobalConfig.nScratch ,2,0,2
code_ptr <= code + compiler->size,2,0,2
 pParse->db->mallocFailed || cacheIsValid(pParse) ,2,0,2
 (pFirst->pLeaf==0)==pIter->bEof ,1,1,2
Z_TYPE_P(result) == IS_ARRAY,1,1,2
 pWInfo->wctrlFlags & WHERE_SORTBYGROUP ,2,0,2
inst,1,1,2
"reg_map[SLJIT_TEMPORARY_EREG2] >= 8, temporary_ereg2_is_hireg",1,1,2
new_name,1,1,2
 (pCur->curFlags & BTCF_ValidOvfl)==0 ,2,0,2
scratches >= 0 && scratches <= SLJIT_NUMBER_OF_REGISTERS,2,0,2
 pSorter->bUsePMA || (pSorter->pReader==0 && pSorter->pMerger==0) ,2,0,2
"A(0) == 0, a0_must_be_0",2,0,2
pBt[0],2,0,2
status_string && content_template,2,0,2
 (prev & 0x80)==0 ,1,1,2
 pPKey2->pKeyInfo->aSortOrder!=0 ,2,0,2
 (p->zText==p->zBase)==!isMalloced(p) ,2,0,2
 aStack[nos].flags & STK_Int ,1,1,2
diff <= 524287 && diff >= -524288 && (jump->flags & IS_COND),2,0,2
 (pExpr->flags & EP_TokenOnly)==0 || pCtx==0 ,2,0,2
 rc==SQLITE_OK || pFile->pMethods==0 ,2,0,2
 pTabList->a[i].iCursor>=0 && pTabList->a[i].iCursor<pParse->nTab ,1,1,2
 pCur->eState!=CURSOR_VALID ,2,0,2
 bFromValid==0 || rc!=SQLITE_OK || pNode->bEof || pNode->iRowid==iFrom || pExpr->bDesc==(pNode->iRowid<iFrom) ,1,1,2
 pOut->szMalloc>0 && pOut->zMalloc==pOut->z ,2,0,2
 p->pHash ,2,0,2
 pIdx!=0 || (pTab->iPKey>=0 && pTab->iPKey<pTab->nCol) ,2,0,2
 pCtx!=0 ,2,0,2
"reg_map[SLJIT_SCRATCH_REG1] == 0, scratch_reg1_must_be_eax",1,1,2
 idx>=0 && idx<pSrc->nSrc ,1,1,2
Z_TYPE_P(values) == IS_ARRAY,1,1,2
 spaceLeft == info.nLocal ,2,0,2
exception,2,0,2
found == &backtrack->common.topbacktracks,2,0,2
" DbMaskTest(p->btreeMask, pOp->p5) ",2,0,2
 sizeof(v)==sizeof(pMem->u.r) ,2,0,2
 pOp->p3>=0 && pOp->p3<p->nOp ,2,0,2
"reg_map[TMP_REG3] == 9, tmp3_is_9_second",2,0,2
 MX_CELL(pPage->pBt)<=10921 ,2,0,2
"reg_map[SLJIT_R1] == 2 && reg_map[SLJIT_R0] < 8 && reg_map[SLJIT_R2] < 8, args_registers",2,0,2
 pOp->opcode==OP_IdxGE || pOp->opcode==OP_IdxLT ,2,0,2
 pItem->fg.isIndexedBy==0 ,2,0,2
" CsrFlagTest(pCsr, FTS5CSR_EOF)==0 ",2,0,2
(inst[0] & 0xffe00000) == MOVZ && (inst[1] & 0xffe00000) == (MOVK | (1 << 21)),2,0,2
!(flags & LOAD_DATA) && reg_map[TMP_REG1] != reg_ar,2,0,2
 pTask->list.aMemory==0 ,2,0,2
" sqlite3MemdebugHasType(p, MEMTYPE_SCRATCH) ",2,0,2
accum->n_len+accum->n_scale >= shift+count,1,1,2
count > offset,1,1,2
argw != 0,2,0,2
GET_OPCODE(op) >= SLJIT_CMPD && GET_OPCODE(op) <= SLJIT_ABSD,1,1,2
 eStmt==FTS5_STMT_SCAN_ASC || eStmt==FTS5_STMT_SCAN_DESC || eStmt==FTS5_STMT_LOOKUP ,2,0,2
PRIVATE_DATA(cc + 1) != 0,2,0,2
 pPage==pCur->apPage[pCur->iPage] ,1,1,2
 pSorter->iMemory==0 ,2,0,2
 pWInfo->sorted==0 ,2,0,2
" sqlite3MemdebugNoType(p, (u8)~MEMTYPE_SCRATCH) ",2,0,2
VALID(OutStream),1,1,2
 iLvl<pIter->nLvl ,2,0,2
 nArg==0 ,2,0,2
IS_SERIALIZED(ptr),2,0,2
&assert_globals TSRMLS_CC,1,1,2
 rc!=SQLITE_OK || pList->pList==0 ,2,0,2
(sljit_sw)addr <= 0x1ffffff && (sljit_sw)addr >= -0x2000000,2,0,2
 !pExpr->pColl ,1,1,2
 winMutex_isNt==0 || winMutex_isNt==1 ,2,0,2
 pSorter->pReader==0 || pSorter->pMerger==0 ,2,0,2
 pPk || IsVirtual(pTab) || iDataCur==iTabCur ,2,0,2
 i > mem3.aPool[i-1].u.hdr.prevSize ,2,0,2
!(saved_register_size & 0x7),2,0,2
new_ptr != NULL,1,1,2
 pTask->list.pList==0 ,2,0,2
 pPager->journalMode==PAGER_JOURNALMODE_DELETE || pPager->journalMode==PAGER_JOURNALMODE_MEMORY ,2,0,2
 sqlite3VdbeCurrentAddr(v)==iJump || pParse->db->mallocFailed ,2,0,2
 pCur->info.pPayload>pCur->apPage[pCur->iPage]->aData || CORRUPT_DB ,2,0,2
 pIter->flags & FTS5_SEGITER_REVERSE ,2,0,2
 pCur->curFlags & BTCF_ValidOvfl ,2,0,2
"common, current->cc, &backtrack, FALSE",2,0,2
 (mem3.aPool[i-1].u.hdr.size4x&1)==1 ,2,0,2
 pOp->opcode==OP_IdxGE || pOp->opcode==OP_IdxGT ,2,0,2
fscratches >= 0 && fscratches <= SLJIT_NUMBER_OF_FLOAT_REGISTERS,2,0,2
 pParse->iCacheLevel>=1 ,2,0,2
"result, args_ast, Z_STR(name_node.u.constant), NULL",1,1,2
 pPager->pAll==0 ,1,1,2
UCD_BLOCK_SIZE == 128 && sizeof(ucd_record) == 8,2,0,2
fci->symbol_table == NULL,1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_Queue ,2,0,2
 p->tos<=pc ,1,1,2
Z_TYPE_P(src) == IS_STRING,1,1,2
"(SLJIT_F32_OP == 0x100), float_transfer_bit_error",2,0,2
"FIXED_LOCALS_OFFSET >= 2 * sizeof(sljit_uw), require_at_least_two_words",1,1,2
 OP_SeekGT == OP_SeekLT+3 ,2,0,2
counter <= 31,2,0,2
!force || common->mode != JIT_COMPILE,2,0,2
 aff==SQLITE_AFF_TEXT ,2,0,2
 p->selFlags & SF_MultiValue ,2,0,2
 iOut<pMerger->nTree && iOut>0 ,2,0,2
 (pCur->curFlags & (BTCF_ValidNKey|BTCF_ValidOvfl))==0 ,2,0,2
ht != NULL,2,0,2
 r2->nField==nKeyCol ,2,0,2
 matchOther<0x80 ,2,0,2
 createFlag==3 || createFlag==0 ,2,0,2
has_alternatives && *matchingpath >= OP_ASSERT && *matchingpath <= OP_ASSERTBACK_NOT,2,0,2
" DbMaskTest(p->btreeMask, pOp->p2) ",2,0,2
 OPFLAG_SEEKEQ==BTREE_SEEK_EQ ,2,0,2
 ArraySize(aSyscall)==80 ,2,0,2
" CORRUPT_DB || pPKey2->default_rc==vdbeRecordCompareDebug(nKey1, pKey1, pPKey2) ",1,1,2
" 0==sqlite3VdbeRecordCompare(aSample[i].n, aSample[i].p, pRec, 0) || pParse->db->mallocFailed ",1,1,2
 (pCur->curFlags & BTCF_WriteFlag)!=0 && pBt->inTransaction==TRANS_WRITE && (pBt->btsFlags & BTS_READ_ONLY)==0 ,2,0,2
 pU8[nReserve]==0x65 ,2,0,2
!(inst & 0xffff0000),2,0,2
*cc == OP_BRA || *cc == OP_CBRA || *cc == OP_CBRAPOS || *cc == OP_SCBRA || *cc == OP_SCBRAPOS,2,0,2
loop_var->var_type == IS_VAR || loop_var->var_type == IS_TMP_VAR,1,1,2
page_offset != 0,2,0,2
 destIfNull==destIfFalse ,2,0,2
nm + sizeof(ar) < m,1,1,2
 p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo ,2,0,2
ASSERTLS_C,1,1,2
 base+pTabList->nSrc<=pParse->nTab ,1,1,2
 p->u.iNext<sqlite3MallocSize(pList->aMemory) ,2,0,2
common->optimized_cbracket[offset >> 1] == 0,2,0,2
ast->kind == ZEND_UNARY_PLUS || ast->kind == ZEND_UNARY_MINUS,1,1,2
 p->pIncr==0 || p->pIncr->pTask==&pSorter->aTask[iTask] ,1,1,2
 (nRef = sqlite3PagerRefcount(pBt->pPager))>=0 ,1,1,2
common->currententry->entry == NULL && common->recursive_head_ptr != 0,2,0,2
 ArraySize(aSyscall)==77 ,1,1,2
 pIter->nPos>=0 ,2,0,2
!GET_FLAGS(op) || !(op & SLJIT_KEEP_FLAGS),2,0,2
args >= 0 && args <= 3,2,0,2
 pi[k+2]==0xdead3344 ,1,1,2
Z_TYPE_P(result) == IS_LONG,1,1,2
!const_ || const_->addr >= half_count,2,0,2
argw >= 0 && (argw & 0xff) <= 0xff,2,0,2
 pLvl->bEof==0 ,2,0,2
 p->nChar+(i64)N >= p->nAlloc ,2,0,2
" DbMaskTest(p->btreeMask, p1) ",2,0,2
nltype == NLTYPE_FIXED && common->newline < 256,2,0,2
 aStack[tos].flags & STK_Dyn ,1,1,2
 pthreadMutexHeld(p) ,2,0,2
reg > 0 && reg <= SLJIT_NO_FLOAT_REGISTERS,1,1,2
 memIsValid(&r.aMem[ii]) ,2,0,2
 pIncr->bUseThread==0 || eMode==INCRINIT_TASK ,2,0,2
 pCur->info.nSize>0 ,2,0,2
delay_slot == MOVABLE_INS || delay_slot >= UNMOVABLE_INS || delay_slot == ((ins >> 11) & 0x1f) || delay_slot == ((ins >> 16) & 0x1f),2,0,2
 bRc ,2,0,2
 createFlag==0 || eCreate==1+(!pCache->bPurgeable||!pCache->pDirty) ,2,0,2
 offset+amt <= pCur->info.nPayload ,2,0,2
"compiler_common *common, pcre_uchar *cc, assert_backtrack *backtrack, BOOL conditional",2,0,2
 OP_SeekGT==(OP_SeekGE+1) ,2,0,2
 (OP_SeekLE & 0x0001)==(OP_SeekGT & 0x0001) ,2,0,2
 p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue ,2,0,2
 pParse->aAgg[i].pFunc->xStep!=0 ,1,1,2
reg_map[TMP_REG2] <= 7 && dst != TMP_REG2,2,0,2
 pOp->opcode==OP_IdxLE || pOp->opcode==OP_IdxLT ,2,0,2
pTab->pSelect,1,1,2
 pSorter->pMerger->pTask==(&pSorter->aTask[0]) ,2,0,2
 MEMDB==0 || pPager->tempFile ,2,0,2
 nMap>0 || (pFd->mmapSize==0 && pFd->pMapRegion==0) ,2,0,2
"reg_map[SLJIT_R0] == 0, scratch_reg1_must_be_eax",2,0,2
 pOp>=aOp && pOp<&aOp[p->nOp],2,0,2
((inst[0] & 0xfbf0) == (MOVW >> 16)) && ((inst[2] & 0xfbf0) == (MOVT >> 16)) && dst == (inst[3] & 0x0f00),2,0,2
 rc!=SQLITE_OK || pTask->file.iEof==iSz ,2,0,2
 IsUniqueIndex(pIndex) ,2,0,2
 (op-SQLITE_DBSTATUS_LOOKASIDE_HIT)<3 ,2,0,2
 iBlock>=0 && iBlock<mem5.nBlock ,2,0,2
 nIn>0 ,2,0,2
 cnt++ < SQLITE_PAGE_SIZE/4 ,1,1,2
!(jump->flags & IS_JAL),2,0,2
 pC->isEphemeral ,2,0,2
!(source->u.flags & HASH_FLAG_PACKED),2,0,2
Function,1,1,2
info->opcode != ZEND_FAST_CALL,1,1,2
 sParse.rc!=SQLITE_OK || sParse.zErr==0 ,1,0,1
 pPage->leaf==0 ,1,0,1
" chngToIN==sqlite3WhereGetMask(&pWInfo->sMaskSet, iCursor) ",1,0,1
 pConfig->eContent!=FTS5_CONTENT_NORMAL || apVal==0 ,1,0,1
 wrFlag==0 || (pBt->btsFlags & BTS_READ_ONLY)==0 ,1,0,1
 iTable>1 ,1,0,1
 nOp>0 ,1,0,1
 pOp->opcode==OP_IdxRowid ,1,0,1
 eType==SQLITE_INTEGER || eType==SQLITE_FLOAT || eType==SQLITE_BLOB || eType==SQLITE_TEXT ,1,0,1
chars[i * MAX_DIFF_CHARS] > 0,1,0,1
 p->nChunkSize>iAmt ,1,0,1
 pVtab->zErrMsg==0 ,1,0,1
 pIdxInfo->needToFreeIdxStr==0 ,1,0,1
 sqlite3IsToplevel(pParse) ,1,0,1
 (bTokenChars==0 || bTokenChars==1) ,1,0,1
 pzBuffer==0 || dupFlags==EXPRDUP_REDUCE ,1,0,1
 pParse->pExpr==0 ,1,0,1
 !isOpen(pPager->fd) || !MEMDB ,1,0,1
 iSavepoint>p->ts.iSavepoint ,1,0,1
 pWal->minFrame>0 ,1,0,1
 p->pStruct->aLevel[i].nSeg==pTest->aLevel[i].nSeg ,1,0,1
 iLvl<pStruct->nLevel ,1,0,1
strlen(opened_path) == opened_path_len,1,0,1
!(blocks[block_map[op_array->try_catch_array[j].finally_end]].flags & ZEND_BB_REACHABLE),1,0,1
 pzErrmsg==0 || pzErrmsg==&pTab->base.zErrMsg ,1,0,1
 pIter->pTmpInsert==0 ,1,0,1
 balance_deeper_called==0 ,1,0,1
 pIdx->aiColumn[pIdx->nColumn-1]==-1 ,1,0,1
 !pbReplace || *pbReplace==0 ,1,0,1
(i) == 0 && (p) != SLJIT_UNUSED,1,0,1
ast->kind == ZEND_AST_BREAK || ast->kind == ZEND_AST_CONTINUE,1,0,1
eval_result,1,0,1
strval.v != NULL,1,0,1
 pWal->readLock>0 ,1,0,1
 pCsr->nField==pTab->nCol || (pCsr->nField==pTab->nCol+1 && op==SQLITE_DELETE && iReg==-1) ,1,0,1
 pCur->iPage==(-1) ,1,0,1
src == dst && srcw == dstw,1,0,1
 pWriter->iBtPage || pWriter->nEmpty==0 ,1,0,1
" hasSharedCacheTableLock(p, iTable, pKeyInfo!=0, (wrFlag?2:1)) ",1,0,1
 (wctrlFlags & WHERE_ONETABLE_ONLY)==0 || (wctrlFlags & WHERE_USE_LIMIT)==0 ,1,0,1
" 0==sqlite3_stricmp(zName, zCol) ",1,0,1
((zend_uintptr_t)((char*)ptr + (alignment-1)) & (alignment-1)) == (zend_uintptr_t)ptr,1,0,1
 pbReplace ,1,0,1
 pParser->yyidx>=0 ,1,0,1
 stateno<=fts5YY_REDUCE_COUNT ,1,0,1
 pConfig->nPrefix<=FTS5_MAX_PREFIX_INDEXES ,1,0,1
 iLeafPgno>=pIter->iLeafPgno || p->rc ,1,0,1
compiler->fscratches != -1 && compiler->fsaveds != -1,1,0,1
 (pNode->jnFlags & JNODE_RAW)==0 ,1,0,1
access_type & ZEND_ACC_PROTECTED,1,0,1
(opline + 1)->opcode == ZEND_RETURN || (opline + 1)->opcode == ZEND_RETURN_BY_REF,1,0,1
 iCol==1 || iCol==2 ,1,0,1
 regNew==regNewRowid+1 ,1,0,1
 pParse->aUp==0 ,1,0,1
reg > 0 && reg <= SLJIT_NUMBER_OF_FLOAT_REGISTERS,1,0,1
SG(request_info).content_length >= SG(read_post_bytes),1,0,1
 p->bStatic ,1,0,1
 pRet->eContent==FTS5_CONTENT_NORMAL || pRet->eContent==FTS5_CONTENT_NONE ,1,0,1
 apOut[i]==0 ,1,0,1
"result, zend_ast_get_list(args_ast), Z_STR(name_node.u.constant), NULL",1,0,1
 op1==SQLITE_UPDATE && op2==SQLITE_DELETE ,1,0,1
common->read_only_data_ptr == common->read_only_data,1,0,1
 pIter->op==SQLITE_INSERT ,1,0,1
 X>=0 ,1,0,1
 pCur->apPage[0]->intKey==pCur->curIntKey ,1,0,1
 yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) ,1,0,1
!(opt & ~(PGSQL_CONV_OPTS|PGSQL_DML_NO_CONV|PGSQL_DML_EXEC|PGSQL_DML_STRING|PGSQL_DML_ESCAPE)),1,0,1
ce->parent != NULL,1,0,1
 a1 ,1,0,1
GET_OPCODE(op) >= SLJIT_ADDD && GET_OPCODE(op) <= SLJIT_DIVD,1,0,1
(chr & 0x7) == 0,1,0,1
 p->pConfig->eDetail==FTS5_DETAIL_NONE ,1,0,1
dataptr != NULL,1,0,1
 WAL_CKPT_LOCK==1 ,1,0,1
 pIn1 <= &p->aMem[(p->nMem+1 - p->nCursor)] ,1,0,1
 iLeafPgno>pIter->iLeafPgno ,1,0,1
 fts5yy_lookahead[i]==iLookAhead ,1,0,1
(charpos_othercasebit >> 9) == 0,1,0,1
 sqlite3BtreeCursorIsValid(pC->uc.pCursor) ,1,0,1
 p->dbMain==0 && p->dbRbu==0 ,1,0,1
 fts5yyact == fts5YY_ACCEPT_ACTION ,1,0,1
 sz>0 ,1,0,1
op == SLJIT_MOV || GET_OPCODE(op) == SLJIT_MOV_UI || GET_OPCODE(op) == SLJIT_MOV_SI || (GET_OPCODE(op) >= SLJIT_AND && GET_OPCODE(op) <= SLJIT_XOR),1,0,1
 zErr!=0 && pCtx!=0 ,1,0,1
 i<10 ,1,0,1
" rc!=SQLITE_OK || nExtraDelete==0 || sqlite3_strlike(""DELETE%"",p->zSql,0)!=0 ",1,0,1
 eType==SQLITE_NULL ,1,0,1
Z_TYPE_P(ret) != IS_REFERENCE,1,0,1
" sqlite3NoTempsInRange(pParse,1,7+j) ",1,0,1
 pCur==0 || pCur->iPage>0 ,1,0,1
 pOp->p4type==P4_TABLE || pOp->p4type>=P4_STATIC ,1,0,1
 pCol->affinity-SQLITE_AFF_BLOB >= 0 ,1,0,1
basenode != NULL,1,0,1
 pOp->p2>0 && pOp->p2+pOp->p3<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
Z_TYPE_P(op1) == Z_TYPE_P(op2),1,0,1
compiler->size > 0,1,0,1
 (pIter->flags & FTS5_SEGITER_ONETERM) || pbNewTerm ,1,0,1
 pIter->pColset ,1,0,1
ast->child[0]->kind == ZEND_AST_CONST_DECL,1,0,1
 sEnd.z[0]!=0 ,1,0,1
!(parent->flags & PHPDBG_WATCH_RECURSIVE),1,0,1
 p->rc==SQLITE_OK || (p->rc&0xff)==SQLITE_BUSY ,1,0,1
 (pIter->flags & FTS5_SEGITER_REVERSE)==0 ,1,0,1
 p->pStruct==0 || p->iStructVersion!=0 ,1,0,1
 aSpecial['\n']=='n' ,1,0,1
 aOldRecord1 && aNewRecord1 ,1,0,1
 pPg==(*ppPage) ,1,0,1
 pgnoRoot>=3 || CORRUPT_DB ,1,0,1
 bGe==0 || (flags & FTS5INDEX_QUERY_DESC)==0 ,1,0,1
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP | SLJIT_INT_OP)),1,0,1
tmp1_ind < 8 && tmp2_ind == 1,1,0,1
 mNext>0 ,1,0,1
 pTabCur->uc.pCursor!=0 ,1,0,1
 get2byte(&data[pPage->hdrOffset+3])==pPage->nCell ,1,0,1
 sizeof(double)==8 && sizeof(u64)==8 ,1,0,1
 p->abPK[i]==0 || p->apValue[i+p->nCol] ,1,0,1
common->fast_forward_bc_ptr == NULL || fast_str_ptr == 0 || cc == common->fast_forward_bc_ptr,1,0,1
common->mode == JIT_COMPILE || offset == 0,1,0,1
 pIter->bRev==0 || pIter->bRev==1 ,1,0,1
 p->nOp + N <= p->pParse->nOpAlloc ,1,0,1
 pCopy!=0 ,1,0,1
 !pC->nullRow || pOp->opcode==OP_IdxRowid ,1,0,1
size == 2 || size == 4,1,0,1
 t==pC->aType[p2] ,1,0,1
"SLJIT_REWRITABLE_JUMP != SLJIT_F32_OP, rewritable_jump_and_single_op_must_not_be_the_same",1,0,1
 !(opflags & OPFLAG_ISUPDATE) || (aMem[pOp->p3].flags & MEM_Int) ,1,0,1
 stateno <= YY_SHIFT_COUNT ,1,0,1
compares > 0,1,0,1
 sqlite3JournalIsInMemory(pPager->jfd)==0 ,1,0,1
 eType==RBU_INSERT || eType==RBU_DELETE || eType==RBU_REPLACE || eType==RBU_IDX_DELETE || eType==RBU_IDX_INSERT || eType==RBU_UPDATE ,1,0,1
in_len ? in[in_len] == L'\0' : 1,1,0,1
 iIn>0 ,1,0,1
 pPage->aData==sqlite3PagerGetData(pDbPage) ,1,0,1
 p->pConfig->bColumnsize ,1,0,1
 m==MASKBIT(ii) ,1,0,1
 zRankArgs==0 ,1,0,1
 pParse->nNode>=pParse->nAlloc ,1,0,1
 flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE ,1,0,1
!(blocks[block_map[op_array->try_catch_array[j].catch_op]].flags & ZEND_BB_REACHABLE),1,0,1
 pCsr->ePlan==FTS5_PLAN_MATCH || pCsr->ePlan==FTS5_PLAN_SORTED_MATCH || pCsr->ePlan==FTS5_PLAN_SOURCE ,1,0,1
opnum_init != (uint32_t)-1,1,0,1
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_CALL3,1,0,1
 pCsr->iCol<pCsr->pConfig->nCol ,1,0,1
 pC->eCurType==CURTYPE_BTREE || pOp->opcode==OP_SorterInsert ,1,0,1
 p->apValue[i]==0 ,1,0,1
 precision>=(-1) ,1,0,1
 pCache->pDirtyTail!=pPg ,1,0,1
 idx>=0 && idx+N<=p->nCell ,1,0,1
ast->kind == ZEND_AST_ISSET || ast->kind == ZEND_AST_EMPTY,1,0,1
parent->flags & PHPDBG_WATCH_IMPLICIT,1,0,1
 oflags & SQLITE_OPEN_MAIN_DB ,1,0,1
zres == NULL,1,0,1
 e>=342 ,1,0,1
src == SLJIT_UNUSED && srcw == 0,1,0,1
!(blocks[cfg->map[op_array->live_range[i].end]].flags & ZEND_BB_REACHABLE),1,0,1
" p1==pFirst || p1->pLeaf==0 || fts5BufferCompare(&pFirst->term, &p1->term) || p1->iRowid==pIter->iSwitchRowid || (p1->iRowid<pIter->iSwitchRowid)==pIter->bRev ",1,0,1
 SQLITE_CHANGESET_DATA+1==SQLITE_CHANGESET_NOTFOUND ,1,0,1
 aRoot[nRoot]==0 ,1,0,1
 (bRev & ~1)==0 ,1,0,1
loop_var->var_type & (IS_VAR|IS_TMP_VAR),1,0,1
 bPreserve && (pCur->iPage==iCellDepth || CORRUPT_DB) ,1,0,1
 top<=(int)pPage->pBt->usableSize ,1,0,1
 pIter->pDlidx==0 ,1,0,1
watch->type == WATCH_ON_HASHTABLE,1,0,1
 pVCur->pVtab->nRef>0 ,1,0,1
 width>=0 ,1,0,1
 5==ArraySize(azCol) ,1,0,1
 EIGHT_BYTE_ALIGNMENT(pBuf) ,1,0,1
 nKeep>=nMatch ,1,0,1
 pLeft && pRight ,1,0,1
len >= ZSTR_LEN(s),1,0,1
 type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr ,1,0,1
 sqlite3GlobalConfig.mutex.xMutexInit ,1,0,1
 pPage->nCell==nCell ,1,0,1
Z_OBJ_HT_P(orig) == &spl_handler_ArrayIterator,1,0,1
" sizeof(sljit_s8) == 1 && sizeof(sljit_u8) == 1 && sizeof(sljit_s16) == 2 && sizeof(sljit_u16) == 2 && sizeof(sljit_s32) == 4 && sizeof(sljit_u32) == 4 && (sizeof(sljit_p) == 4 || sizeof(sljit_p) == 8) && sizeof(sljit_p) <= sizeof(sljit_sw) && (sizeof(sljit_sw) == 4 || sizeof(sljit_sw) == 8) && (sizeof(sljit_uw) == 4 || sizeof(sljit_uw) == 8), invalid_integer_types",1,0,1
 iOff<pLeaf->szLeaf ,1,0,1
common->mode == JIT_COMPILE,1,0,1
 pIter->zIdx==0 ,1,0,1
 pCur->curIntKey || pIdxKey ,1,0,1
 pCache->pGroup==&pcache1.grp ,1,0,1
 pExpr->apExprPhrase[i]->nTerm==1 ,1,0,1
 (p->flags & PGHDR_CLEAN)==0 ,1,0,1
 (sqliteIOErr == SQLITE_IOERR_LOCK) || (sqliteIOErr == SQLITE_IOERR_UNLOCK) || (sqliteIOErr == SQLITE_IOERR_RDLOCK) || (sqliteIOErr == SQLITE_IOERR_CHECKRESERVEDLOCK) ,1,0,1
 pTab->ts.eState==1 ,1,0,1
(i) == 0,1,0,1
 i2!=0 ,1,0,1
 IsVirtual(pSrc->pTab) ,1,0,1
Z_TYPE_P(p) == IS_ARRAY,1,0,1
 pConfig->eDetail==FTS5_DETAIL_COLUMNS ,1,0,1
!errno && end == yytext + yyleng,1,0,1
 p->nUsed<p->nAlloc ,1,0,1
op_num,1,0,1
 pRoot->bEof==0 && pRoot->bNomatch==0 ,1,0,1
 pNode->bEof==0 || pNode->bNomatch==0 ,1,0,1
 pMem1->enc==pMem2->enc || pMem1->db->mallocFailed ,1,0,1
 IsVirtual(pTab) || bComplex || eOnePass!=ONEPASS_OFF ,1,0,1
 cacheIsValid(pParse) ,1,0,1
 (pMatch->fg.jointype & JT_RIGHT)==0 ,1,0,1
op < SLJIT_UMUL || compiler->scratches >= 2,1,0,1
" pCol->affinity==SQLITE_AFF_BLOB || pCol->affinity==sqlite3AffinityType(zType, 0) ",1,0,1
 pStruct->aLevel[i].nMerge<=nThis ,1,0,1
 b.apCell[j]!=0 ,1,0,1
 pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 ,1,0,1
 pDlidx->pgno!=0 ,1,0,1
 pIn1<=&aMem[(p->nMem+1 - p->nCursor)] ,1,0,1
!zend_ast_is_list(ast),1,0,1
Z_TYPE(ZEND_OP2_LITERAL(opline)) == IS_LONG,0,1,1
 pCsr->pRank==0 ,1,0,1
 ArraySize(aSyscall)==28 ,1,0,1
 (paRec==0 && pnRec==0) || (paRec && pnRec) ,1,0,1
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O)),1,0,1
func->type == ZEND_INTERNAL_FUNCTION,1,0,1
 rc!=SQLITE_OK || zIn!=zOut || zIn[0]=='/' ,1,0,1
 p->bPurgeable || p->eCreate==2 ,1,0,1
 ADDR(pOp->p2)<pParse->nLabel ,1,0,1
unqualified_name,1,0,1
GC_ADDRESS(GC_INFO(ref)) < GC_ROOT_BUFFER_MAX_ENTRIES,1,0,1
!((ht)->u.flags & HASH_FLAG_INITIALIZED),1,0,1
 pCache->nRefSum==0 && pCache->pDirty==0 ,1,0,1
 iPhrase>=0 && iPhrase<pExpr->nPhrase ,1,0,1
 pOp->p5>=0 && pOp->p5<=4 ,1,0,1
 p->pCache!=0 ,1,0,1
__fill_ht->u.flags & HASH_FLAG_PACKED,1,0,1
 pLevel->u.in.aInLoop!=0 || db->mallocFailed ,1,0,1
 pExpr->iColumn>=0 || pExpr->iColumn==-1 ,1,0,1
 p1>0 && p1+n<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
 pc>0 ,1,0,1
 pIdx->aColExpr->nExpr>iIdxCol ,1,0,1
 dupFlags==0 || dupFlags==EXPRDUP_REDUCE ,1,0,1
 pParser->fts5yyidx>=0 ,1,0,1
 pDflt==0 || pDflt->op==TK_SPAN ,1,0,1
 pPage->buf.n>4 || pWriter->bFirstTermInPage ,1,0,1
common->match_end_ptr != 0,1,0,1
GET_OPCODE(op) == SLJIT_CMPD,1,0,1
 p && p->pFunc && p->pFunc->xFinalize ,1,0,1
 eStmt>=0 && eStmt<ArraySize(p->aStmt) ,1,0,1
 j>=0 ,1,0,1
 pConfig->pzErrmsg==0 ,1,0,1
 eType!=RBU_UPDATE || pIter->zIdx==0 ,1,0,1
 pTabCur->eCurType==CURTYPE_BTREE ,1,0,1
(dst & REG_MASK) != (src & REG_MASK) && OFFS_REG(dst) != (src & REG_MASK),1,0,1
 idx >= 0 ,1,0,1
!(b->flags & ZEND_BB_UNREACHABLE_FREE),1,0,1
 iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid ,1,0,1
 j==0 || i==pPage->aiOvfl[j-1]+1 ,1,0,1
!Z_ISUNDEF(orig_op1) || !Z_ISUNDEF(orig_op2),1,0,1
 op!=TK_IS || c==WO_IS ,1,0,1
 (pFirst->pLeaf==0)==pIter->base.bEof ,1,0,1
 p->bPurgeable==0 || p->eCreate==1 ,1,0,1
(op >= SLJIT_BREAKPOINT && op <= SLJIT_SMUL) || ((op & ~SLJIT_INT_OP) >= SLJIT_UDIV && (op & ~SLJIT_INT_OP) <= SLJIT_SDIV),1,0,1
 yyFallback[iFallback]==0 ,1,0,1
src == 0 && srcw == 0,1,0,1
 pOp->p4.pTab!=0 ,1,0,1
 *zIn ,1,0,1
 p->rc!=SQLITE_OK || pRet->pColset==0 ,1,0,1
 pCsr->pStmt==0 ,1,0,1
 iIdxCur>0 ,1,0,1
 aPayload > pPage->aData ,1,0,1
 pStruct->nLevel>0 ,1,0,1
ZEND_OP2_TYPE(opline) == IS_CONST,0,1,1
 pCache->eCreate==((pCache->bPurgeable && pCache->pDirty) ? 1 : 2) ,1,0,1
 CORRUPT_DB || iStart>=pPage->hdrOffset+6+pPage->childPtrSize ,1,0,1
!(blocks[block_map[live_range->end]].flags & ZEND_BB_REACHABLE),1,0,1
Z_TYPE_P(p) == IS_STRING,1,0,1
 (rc & (db->errMask))==rc ,1,0,1
range_right >= 0,1,0,1
 p->rc!=SQLITE_OK || pIter->iLeafPgno==iLeafPgno ,1,0,1
 pSession->rc==SQLITE_OK ,1,0,1
ast->kind == ZEND_AST_PRE_INC || ast->kind == ZEND_AST_PRE_DEC,1,0,1
 pLen!=0 ,1,0,1
 pRowidEq==0 && pRowidLe==0 && pRowidGe==0 && pRank==0 ,1,0,1
 nEq!=p->nKeyCol || aff==SQLITE_AFF_INTEGER ,1,0,1
 nOvfl>0 || (CORRUPT_DB && (info.nPayload + ovflPageSize)<ovflPageSize) ,1,0,1
 sqlite3GlobalConfig.mutex.xMutexEnter ,1,0,1
 nBuf>0 ,1,0,1
 (pPager->pInJournal!=0) == isOpen(pPager->jfd) ,1,0,1
 pWal->readLock>=0 && pWal->writeLock==0 ,1,0,1
 nMove>=0 ,1,0,1
 (bDesc==0 && iRowid>=iLast) || (bDesc==1 && iRowid<=iLast) ,1,0,1
 !isOpen(p->fd) ,1,0,1
 rc==SQLITE_OK || rc==SQLITE_TOOBIG ,1,0,1
result != NULL,1,0,1
GC_REFCOUNT(s) <= 1,1,0,1
!(opt & ~(PGSQL_CONV_FORCE_NULL|PGSQL_DML_EXEC|PGSQL_DML_STRING|PGSQL_DML_ESCAPE)),1,0,1
 p->openFlags & SQLITE_OPEN_MAIN_DB ,1,0,1
(type & 0xff) >= SLJIT_C_FLOAT_EQUAL && (type & 0xff) <= SLJIT_C_FLOAT_ORDERED,1,0,1
 p2>0 && p2+n<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
 pTest->eType==FTSQUERY_PHRASE ,1,0,1
((uintptr_t)chunk & (ZEND_MM_CHUNK_SIZE - 1)) == 0,1,0,1
 (p->flags & MEM_Null)==0 || (p->flags & (MEM_Str|MEM_Blob))==0 ,1,0,1
 c=='i' ,1,0,1
 pCsr->pExpr==0 ,1,0,1
 p->aStmt[eStmt]==*pp ,1,0,1
"reg_map[2] == 1 && reg_map[3] == 2 && reg_map[4] == 12, bad_register_mapping",1,0,1
 bDesc==0 || bDesc==1 ,1,0,1
" 0==sqlite3_strnicmp(pRet->zName, zName, nName+1) ",1,0,1
 writer.bFirstRowidInPage==0 ,1,0,1
GET_OPCODE(op) >= SLJIT_CONVW_FROMD && GET_OPCODE(op) <= SLJIT_CONVI_FROMD,1,0,1
 pRes->bTermEq==1 ,1,0,1
 pPage->pgidx.n==0 ,1,0,1
 serial_type<128 ,1,0,1
 fts5yyFallback[iFallback]==0 ,1,0,1
 pTab->pSortCsr==0 ,1,0,1
"reg_map[2] == 1 && reg_map[3] == 2, bad_register_mapping",1,0,1
Z_TYPE_P(array_ptr) == IS_OBJECT,1,0,1
 pPager->tempFile || !MEMDB ,1,0,1
GC_FLAGS(p->key) & IS_STR_PERSISTENT,1,0,1
 pIter->pIndex->pConfig->eDetail==FTS5_DETAIL_NONE ,1,0,1
 pPage->intKey || CORRUPT_DB ,1,0,1
(source->u.flags & HASH_FLAG_PACKED) == 0,1,0,1
 p==0 || sqlite3GlobalConfig.mutex.xMutexHeld ,1,0,1
 fts5DlidxIterPgno(pDlidx)>iLeaf ,1,0,1
!(doctype == ENT_HTML_DOC_XML1 && all),1,0,1
 sqlite3GlobalConfig.mutex.xMutexFree ,1,0,1
(char*)checkpoint > (char*)arena && (char*)checkpoint <= arena->end,1,0,1
 cursorOwnsBtShared(pCsr) ,1,0,1
 fts5yyruleno<sizeof(fts5yyRuleInfo)/sizeof(fts5yyRuleInfo[0]) ,1,0,1
 pIdx->aColExpr ,1,0,1
 pIter->zTbl==0 ,1,0,1
 k>=0 && k<pTab->nCol ,1,0,1
 pazCol && pabPK ,1,0,1
 to->utrans == NULL ,1,0,1
 op==SQLITE_INSERT ,1,0,1
" sqlite3_stricmp(sqlite3StrBINARY, zColl)!=0 || sqlite3StrBINARY==zColl ",1,0,1
 nArg>0 ,1,0,1
 iMatch<pIter->iRowid ,1,0,1
(p) < SLJIT_R3 || (p) > SLJIT_R6,1,0,1
op_array->run_time_cache == NULL,1,0,1
 (sqlite3Fts5UnicodeIsalnum(iCode) & 0xFFFFFFFE)==0 ,1,0,1
 !isPK || (eType!=0 && eType!=SQLITE_NULL) ,1,0,1
 rc!=SQLITE_OK || pTab->base.zErrMsg==0 ,1,0,1
 pPk->tnum==pTab->tnum ,1,0,1
 p->uc.pCursor!=0 ,1,0,1
 xOutput==0 || (ppOut==0 && pnOut==0) ,1,0,1
 (pOp - p->aOp) >= 3 ,1,0,1
 SQLITE_SO_UNDEFINED<0 && SQLITE_SO_ASC>=0 && SQLITE_SO_DESC>0 ,1,0,1
 (pIn1->flags & MEM_Int)!=0 ,1,0,1
 pDlidx->buf.n==0 ,1,0,1
 iPos2>=0 && iPos2!=iPrev ,1,0,1
 pCsr->zRankArgs==0 ,1,0,1
 pParse->nNode<pParse->nAlloc ,1,0,1
Z_TYPE_P(zv) == IS_UNDEF,1,0,1
 (mPrereq & mUnusable)==0 ,1,0,1
 pPager->tempFile || pPager->eState==PAGER_WRITER_DBMOD ,1,0,1
 op==OP_OpenWrite || p5==0 ,1,0,1
orig_literals != NULL,1,0,1
ret ? wcslen(ret) == ret_len - 1 : 1,1,0,1
 nVal==0 && pMatch==0 && bOrderByRank==0 && bDesc==0 ,1,0,1
 p2<=(p->nMem+1 - p->nCursor) ,1,0,1
 i==JEACH_JSON ,1,0,1
 pSeg->pNextLeaf==0 ,1,0,1
 aIter[nIter].bEof==0 ,1,0,1
 !isExclusive || (openFlags & O_CREAT)!=0 ,1,0,1
 pIter->pColset==0 ,1,0,1
(charpos_othercasebit >> 8) == 0,1,0,1
 pIndex->aiColumn[nColumn-1]==XN_ROWID || !HasRowid(pIndex->pTable),1,0,1
type >= SLJIT_C_EQUAL && type < SLJIT_JUMP,1,0,1
 pStruct->aLevel[iLvl].nSeg==0 ,1,0,1
code_ptr - code <= (sljit_s32)size,1,0,1
in && in_len ? in[in_len] == '\0' : 1,1,0,1
stream->eof || !grow_mode || (grow_mode && bufstart.v == NULL),1,0,1
 (flags & ~(BTREE_SAVEPOSITION | BTREE_AUXDELETE))==0 ,1,0,1
 pParse->pWith!=pWith ,1,0,1
 t.flags==MEM_Null ,1,0,1
 pNode->bEof==0 ,1,0,1
ex,1,0,1
 op2==SQLITE_INSERT ,1,0,1
 n>=1 && n<=SQLITE_SHM_NLOCK ,1,0,1
 pNode->jnFlags & JNODE_LABEL ,1,0,1
 pPage->pLruNext ,1,0,1
 nNew==1 || CORRUPT_DB ,1,0,1
 pOp->p4type==P4_EXPR ,1,0,1
 xValue==sqlite3changeset_old || xValue==sqlite3changeset_new ,1,0,1
arg_node.op_type != IS_CV,1,0,1
 pOp->p2>=SQLITE_AFF_BLOB && pOp->p2<=SQLITE_AFF_REAL ,1,0,1
 pOut<=&aMem[(p->nMem+1 - p->nCursor)] ,1,0,1
 pCsr->pAux==0 ,1,0,1
 pDlidx->bPrevValid ,1,0,1
 pHint->pIdx!=0 ,1,0,1
 nArg!=1 || eType0==SQLITE_INTEGER ,1,0,1
 (u32)j<=usableSize-4 ,1,0,1
 nBuf>2 ,1,0,1
ht->u.flags & HASH_FLAG_PACKED,1,0,1
 (pSlot+sz)<=pCArray->apCell[i] || pSlot>=(pCArray->apCell[i]+sz) || CORRUPT_DB ,1,0,1
" CsrFlagTest(pCsr, FTS5CSR_REQUIRE_CONTENT) ",1,0,1
 p && p->pOut ,1,0,1
 !VdbeMemDynamic(pTo) ,1,0,1
 pInfo->aReadMark[pWal->readLock]<=pSnapshot->mxFrame ,1,0,1
b->start == live_range->end,1,0,1
 0==fts5GetU16(&pPage->buf.p[2]) ,1,0,1
 (wctrlFlags & WHERE_ONEPASS_MULTIROW)==0 || ( (wctrlFlags & WHERE_ONEPASS_DESIRED)!=0 && (wctrlFlags & WHERE_OMIT_OPEN_CLOSE)==0 ),1,0,1
 pA->db==pB->db ,1,0,1
 db->lookaside.bDisable >= pParse->disableLookaside ,1,0,1
 pgno>iLeaf ,1,0,1
 p && p->pMem && p->pFunc && p->pFunc->xFinalize ,1,0,1
 (pCsr->ePlan<3)== (pCsr->ePlan==FTS5_PLAN_MATCH || pCsr->ePlan==FTS5_PLAN_SOURCE) ,1,0,1
 pCache->pDirty!=pPg ,1,0,1
 0==fts5_iswhitespace(z[0]) ,1,0,1
nested->std.ce == zend_ce_closure,1,0,1
 eType==SQLITE_BLOB ,1,0,1
 eType>=0 && eType<ArraySize(azSchema) ,1,0,1
"common, OP_EODN, cc, backtracks",1,0,1
 sqlite3GlobalConfig.mutex.xMutexTry ,1,0,1
 pRes->iTable==pSrc->a[0].iCursor ,1,0,1
 c>aEntry[0].iCode ,1,0,1
watch->type == WATCH_ON_ZVAL,1,0,1
ast->child[0]->kind == ZEND_AST_ZVAL,1,0,1
 pTabCur!=0 ,1,0,1
 i<nBuf ,1,0,1
*lim == '\0',1,0,1
 pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 ,1,0,1
 iIdx>=0 && iIdx<p->pCsr->nField ,1,0,1
(type & 0xff) == SLJIT_C_EQUAL || (type & 0xff) == SLJIT_C_NOT_EQUAL,1,0,1
 !pCur->curIntKey || !pCur->pKey ,1,0,1
 rc==SQLITE_ROW || rc==SQLITE_DONE || rc==SQLITE_ERROR || (rc&0xff)==SQLITE_BUSY || rc==SQLITE_MISUSE ,1,0,1
 tokenType==TK_SPACE || tokenType==TK_ILLEGAL ,1,0,1
" memcmp(pToken, pTerm, MIN(nToken, nTerm))<=0 ",1,0,1
 sqlite3BtreeCursorHasMoved(p->uc.pCursor) ,1,0,1
 pCol->affinity-SQLITE_AFF_BLOB < ArraySize(azType) ,1,0,1
 db->xProfile!=0 ,1,0,1
p - type_tbl == FILE_NAMES_SIZE,1,0,1
 p->pConfig->bColumnsize || ( eStmt!=FTS5_STMT_REPLACE_DOCSIZE && eStmt!=FTS5_STMT_DELETE_DOCSIZE && eStmt!=FTS5_STMT_LOOKUP_DOCSIZE ),1,0,1
 db->mallocFailed || pMinMax!=0 ,1,0,1
 fts5yyact == fts5YY_ERROR_ACTION ,1,0,1
 *pzErrmsg==0 ,1,0,1
 pIter->bCleanup==0 ,1,0,1
 p->azCol && p->abPK ,1,0,1
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_s8))) >= -128 && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_s8))) <= 127,1,0,1
 x.aNode[i].eType==JSON_STRING ,1,0,1
 pIter->op==SQLITE_UPDATE || pIter->op==SQLITE_DELETE ,1,0,1
 (u32*)p==&pBuf->aMatchinfo[1] || (u32*)p==&pBuf->aMatchinfo[pBuf->nElem+2] ,1,0,1
 (pNew!=0 && zName!=0) || db->mallocFailed ,1,0,1
 pChunk!=0 ,1,0,1
 p->startTime>0 ,1,0,1
 p->pStruct->nLevel==pTest->nLevel ,1,0,1
alignment == ZEND_MM_CHUNK_SIZE,1,0,1
 pNew->pLeaf ,1,0,1
 iSegid>0 && iSegid<=FTS5_MAX_SEGMENT ,1,0,1
*cc == OP_BRA || *cc == OP_CBRA,1,0,1
((watch->flags & PHPDBG_WATCH_RECURSIVE) == 0) ^ ((watch->flags & (PHPDBG_WATCH_IMPLICIT | PHPDBG_WATCH_SIMPLE)) == 0),1,0,1
 x<=60 ,1,0,1
!(op & (SLJIT_INT_OP | SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C | SLJIT_KEEP_FLAGS)),1,0,1
((zend_uintptr_t)retval & 0x7) == 0,1,0,1
 pItem->u.x.iOrderByCol<=p->pEList->nExpr ,1,0,1
!(opt & ~(PGSQL_CONV_OPTS|PGSQL_DML_NO_CONV|PGSQL_DML_EXEC|PGSQL_DML_ASYNC|PGSQL_DML_STRING|PGSQL_DML_ESCAPE)),1,0,1
 iAuxArg!=0 || (pWInfo->wctrlFlags & WHERE_ONEPASS_DESIRED)==0 ,1,0,1
 pParse->nMem<=ArraySize(azCol) ,1,0,1
 sqlite3PcacheRefCount(pPager->pPCache)>0 || pPager->tempFile ,1,0,1
 eType==SQLITE_INTEGER || eType==SQLITE_FLOAT || eType==SQLITE_TEXT || eType==SQLITE_BLOB || eType==SQLITE_NULL || eType==0 ,1,0,1
 (eType!=FTS5_STRING && !pNear) || (eType==FTS5_STRING && !pLeft && !pRight) ,1,0,1
 p->pNext==0 || p->pEList->nExpr==p->pNext->pEList->nExpr ,1,0,1
 pIdx->aColExpr!=0 ,1,0,1
 (*ppPage)->aData==sqlite3PagerGetData(pDbPage) ,1,0,1
 n<0 ,1,0,1
 pOp->p4type==P4_INTARRAY || pOp->p4.ai==0 ,1,0,1
 pLast==pParse->apPhrase[pParse->nPhrase-2] ,1,0,1
 pUp==0 || pUp->pNext==0 ,1,0,1
 pPage->intKeyLeaf ,1,0,1
 sqlite3_value_int(apVal[0])!=0 || p->objiter.eType==RBU_PK_EXTERNAL || p->objiter.eType==RBU_PK_NONE ,1,0,1
common->fast_forward_bc_ptr != NULL || fast_str_ptr == 0 || (fast_str_ptr >= common->fast_fail_start_ptr && fast_str_ptr <= common->fast_fail_end_ptr),1,0,1
 pCsr->iLastRowid==LARGEST_INT64 ,1,0,1
Z_ACCESS_FLAGS(c->value) & ZEND_ACC_PROTECTED,1,0,1
 (iCol<0)==p->bDelete ,1,0,1
"scode, &dflags, op == OP_ASSERT",1,0,1
ex != NULL && ex->func != NULL,1,0,1
 pPage->aCellIdx==&data[cellStart] ,1,0,1
op_array->opcodes[b->start].opcode == ZEND_FREE || op_array->opcodes[b->start].opcode == ZEND_FE_FREE,1,0,1
 pParse->zErr==0 ,1,0,1
 pBuf->n!=0 || (*piLastRowid)==0 ,1,0,1
 iCol==1 || iCol==2 || iCol==3 ,1,0,1
new_name != NULL,1,0,1
 eType==SQLITE_CHANGESET_CONFLICT || eType==SQLITE_CHANGESET_DATA ,1,0,1
 p->zContentExprlist==0 ,1,0,1
 iOut==0 || iRowid2>iOut ,1,0,1
 pIter->pIndex->pConfig->eDetail==FTS5_DETAIL_FULL ,1,0,1
parent->type == WATCH_ON_ZVAL,1,0,1
fbc,1,0,1
 pCsr->zRank==0 ,1,0,1
 p->pEList->nExpr==pPrior->pEList->nExpr ,1,0,1
 rc!=SQLITE_OK || (*ppPage)->isInit==0 ,1,0,1
 bFlush==0 || (pWriter->nDlidx>0 && pWriter->aDlidx[0].buf.n>0) ,1,0,1
c != 'Z',1,0,1
 strlen(p->zSuffix)==p->nSuffix ,1,0,1
 pDest->eDest!=SRT_Exists ,1,0,1
code_ptr - code <= (sljit_s32)compiler->size,1,0,1
 x==XN_EXPR ,1,0,1
 pProgram->nMem+pProgram->nCsr==pFrame->nChildMem || (pProgram->nCsr==0 && pProgram->nMem+1==pFrame->nChildMem) ,1,0,1
GET_OPCODE(op) >= SLJIT_MOV && GET_OPCODE(op) <= SLJIT_CLZ,1,0,1
 iCur>=0 && iCur<p->nCursor ,1,0,1
 pPg->pgno>0 ,1,0,1
(ranges[0] & (ranges[2] - ranges[0])) == 0 && (ranges[2] & ranges[3] & (ranges[2] - ranges[0])) != 0,1,0,1
 stateno <= fts5YY_SHIFT_COUNT ,1,0,1
 pPage==pCur->apPage[pCur->iPage] || CORRUPT_DB ,1,0,1
 sqlite3Isalnum(zPath[nDb]) ,1,0,1
 p->flag==FTS3_MATCHINFO_LHITS_BM || p->flag==FTS3_MATCHINFO_LHITS ,1,0,1
 pRes->bTermEq==0 ,1,0,1
 p->rc || iRowid>pWriter->iPrevRowid ,1,0,1
 pCur->aOverflow[iIdx]==0 || pCur->aOverflow[iIdx]==nextPage || CORRUPT_DB ,1,0,1
!GC_ADDRESS(GC_INFO(ref)),1,0,1
 pCExpr!=0 ,1,0,1
 rc!=SQLITE_OK || p->rc==SQLITE_OK ,1,0,1
 op1==SQLITE_UPDATE ,1,0,1
 sizeof(buf)>=sizeof(pGlobal) ,1,0,1
EG(current_execute_data),1,0,1
 pPager->hasHeldSharedLock==1 ,1,0,1
 p1->iRowid!=p2->iRowid ,1,0,1
 pNew==0 || pNew->nSegment>0 ,1,0,1
 p->pStruct!=0 ,1,0,1
 saved_nEq==pNew->u.btree.nEq ,1,0,1
 pCur->apPage[pCur->iPage]!=0 ,1,0,1
 nMem>0 ,1,0,1
len <= ZSTR_LEN(s),1,0,1
 pIter->eType==0 ,1,0,1
orig->type == ZEND_INTERNAL_FUNCTION,1,0,1
"common, *cc, cc + 1, parent->top != NULL ? &parent->top->nextbacktracks : &parent->topbacktracks",1,0,1
GC_ADDRESS(GC_INFO(ref)),1,0,1
arg_info != NULL,1,0,1
PRIVATE_DATA(cc) != 0,1,0,1
 pPager->extraSync==0 ,1,0,1
 pPage->intKeyLeaf==0 ,1,0,1
 nField>0 && pOp->p2>0 && pOp->p2+nField<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
 iOfst==p->endpoint.iOffset || iOfst==0 ,1,0,1
" szCell[i]==pPg->xCellSize(pPg, pCell) || CORRUPT_DB ",1,0,1
ret != MAP_FAILED,1,0,1
p >= ZSTR_VAL(dest),1,0,1
 i2>i1 ,1,0,1
ast->kind == ZEND_AST_POST_INC || ast->kind == ZEND_AST_POST_DEC,1,0,1
 p->szCell[N]==0 ,1,0,1
 p->nData==p->iSzPoslist ,1,0,1
 (u32)i<=usableSize-4 ,1,0,1
 bFree==0 || (pParse->pWith==0 && pParse->pWithToFree==0) ,1,0,1
" sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0 ",1,0,1
 HasRowid(pTab) ,1,0,1
 zFormat[2]>='a' && zFormat[2]<='f' ,1,0,1
 bIn==0 ,1,0,1
 pPage->pBt->db!=0 ,1,0,1
ccbegin + 1 + LINK_SIZE,1,0,1
" sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) ",1,0,1
 xOutput==0 || (pnChangeset==0 && ppChangeset==0 ) ,1,0,1
(sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_s32))) >= HALFWORD_MIN && (sljit_sw)(jump->u.label->addr - (jump->addr + sizeof(sljit_s32))) <= HALFWORD_MAX,1,0,1
 pC->eCurType!=CURTYPE_VTAB ,1,0,1
target ? r == target_len : 1,1,0,1
 pTab->nCol==pSession->hook.xCount(pSession->hook.pCtx) ,1,0,1
 aSpecial['\r']=='r' ,1,0,1
 isView==0 || isView==1 ,1,0,1
 strlen(p->zOutput)==p->nOutput ,1,0,1
(type & 0xff) == SLJIT_EQUAL || (type & 0xff) == SLJIT_NOT_EQUAL,1,0,1
 pState || p->rc!=SQLITE_OK ,1,0,1
"codestart, &firstcharflags, FALSE",1,0,1
 db->lookaside.bDisable>0 ,1,0,1
 p->rc!=SQLITE_OK || p->eStage!=0 ,1,0,1
fetch_type == ZEND_FETCH_LOCAL,1,0,1
 rbuIsVacuum(p) ,1,0,1
 p->flags==MEM_Null && p->z==0 ,1,0,1
 p->a[p->nExpr-1].sortOrder==SQLITE_SO_ASC ,1,0,1
 rc==SQLITE_OK || pCsr->pRankArgStmt==0 ,1,0,1
extrasize == 2,1,0,1
 pWriter->writer.buf.n==0 ,1,0,1
 &data[pPage->cellOffset]==pPage->aCellIdx ,1,0,1
chars[offset * MAX_DIFF_CHARS] >= 1 && chars[offset * MAX_DIFF_CHARS] <= 2,1,0,1
 pC->eCurType!=CURTYPE_SORTER ,1,0,1
 pSeg==&pIter->aSeg[pIter->aFirst[1].iFirst] && pSeg->pLeaf ,1,0,1
ret ? wcslen(ret) == in_len : 1,1,0,1
 nArg==1 || nArg==(2+pConfig->nCol+2) ,1,0,1
 iOfst>0 || p->pFirst==0 ,1,0,1
 rc==SQLITE_OK || res==0 ,1,0,1
count >= offset,1,0,1
 eType==RBU_DELETE || eType==RBU_IDX_DELETE || eType==RBU_INSERT || eType==RBU_IDX_INSERT ,1,0,1
instruction,1,0,1
!(op & (SLJIT_SET_U | SLJIT_SET_S)),1,0,1
 p->apShm==0 ,1,0,1
k <= 0xFFFFFFU,1,0,1
 pOp->p1<=(p->nMem+1 - p->nCursor) ,1,0,1
 pCache->pGroup->lru.isAnchor==1 ,1,0,1
!(src & SLJIT_MEM) || (src & REG_MASK) != SLJIT_SP,1,0,1
 rc==SQLITE_OK || iWrite==0 ,1,0,1
 nArg==1 || sqlite3_value_type(apVal[1])==SQLITE_INTEGER || sqlite3_value_type(apVal[1])==SQLITE_NULL ,1,0,1
OFFS_REG(p) == 0,1,0,1
 rc!=SQLITE_OK || sqlite3PagerPageRefcount((*ppPage)->pDbPage)<=1 ,1,0,1
 p1>0 && p1+mx<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
((p) & OFFS_REG_MASK) != TO_OFFS_REG(SLJIT_SP) && !(i & ~0x3),1,0,1
 pRoot->bNomatch==0 || (rc==SQLITE_OK && pRoot->bEof==0) ,1,0,1
 yyact == YY_ACCEPT_ACTION ,1,0,1
 sqlite3PcachePageSanity(pPgHdr) ,1,0,1
 pPKey2->aMem[0].flags & MEM_Str ,1,0,1
 (n & 0x7FFFFFFF)==n ,1,0,1
 iOut<pIter->nSeg && iOut>0 ,1,0,1
 WHERE_USE_LIMIT==SF_FixedLimit ,1,0,1
 op==SQLITE_STATUS_MALLOC_SIZE || op==SQLITE_STATUS_PAGECACHE_SIZE || op==SQLITE_STATUS_SCRATCH_SIZE || op==SQLITE_STATUS_PARSER_STACK ,1,0,1
 fts5LeafFirstTermOff(pIter->pLeaf)==4 ,1,0,1
 xConflict!=0 ,1,0,1
 xDestroy!=0 ,1,0,1
 piErrno!=0 ,1,0,1
 p->pConfig->pgsz>0 ,1,0,1
 (pExpr->pLeft==0)==(pExpr->pRight==0) ,1,0,1
" !CsrFlagTest(pCsr, FTS5CSR_EOF) ",1,0,1
common->fast_fail_start_ptr < common->fast_fail_end_ptr,1,0,1
 !sqlite3Fts5HashScanEof(p) ,1,0,1
 EIGHT_BYTE_ALIGNMENT(p->pSpace) ,1,0,1
 p1->iSegid==p2->iSegid ,1,0,1
 pOp->p3>=0 && pOp->p3<p->nCursor ,1,0,1
 nSavepoint>nCurrent && pPager->useJournal ,1,0,1
 EIGHT_BYTE_ALIGNMENT(x.pSpace) ,1,0,1
 pc + info.nSize - 4 <= usableSize ,1,0,1
prev_call == (zend_execute_data*)stack,1,0,1
 p->aRef[0]==1 ,1,0,1
 i<pIter->nTblCol ,1,0,1
 IsVirtual(pTab)==0 || eOnePass!=ONEPASS_MULTI ,1,0,1
 pC->uc.pseudoTableReg>0 ,1,0,1
 pCsr->csrflags==0 ,1,0,1
 pPage->isAnchor==0 ,1,0,1
"SLJIT_I32_OP == SLJIT_F32_OP, int_op_and_single_op_must_be_the_same",1,0,1
 aSpecial['\t']=='t' ,1,0,1
 pRight->eType==FTS5_STRING || pRight->eType==FTS5_TERM || pRight->eType==FTS5_EOF ,1,0,1
 pList->nExpr==1 ,1,0,1
 pbNewTerm==0 || *pbNewTerm==0 ,1,0,1
ret ? tmp_len == ret_len : 1,1,0,1
ast->kind == ZEND_AST_AND || ast->kind == ZEND_AST_OR,1,0,1
" CORRUPT_DB || p->szCell[idx]==p->pRef->xCellSize(p->pRef, p->apCell[idx]) ",1,0,1
 p->rc || (pIter->aSeg[ pIter->aFirst[1].iFirst ].pLeaf==0)==pIter->base.bEof ,1,0,1
 pPrev->eType==FTS5_STRING || pPrev->eType==FTS5_TERM || pPrev->eType==FTS5_EOF ,1,0,1
 6==ArraySize(azCol) ,1,0,1
 p->rc!=SQLITE_OK || pStruct->nLevel>0 ,1,0,1
 pIter->pDlidx ,1,0,1
"offs == -(sljit_s32)GET_SAVED_REGISTERS_SIZE(compiler->scratches, compiler->saveds, 1)",1,0,1
 (iAmt+iOfst)<=p->endpoint.iOffset ,1,0,1
 pPager->eState!=PAGER_OPEN || pPg==0 || pPager->tempFile ,1,0,1
 op2==SQLITE_UPDATE ,1,0,1
common->read_only_data + (common->read_only_data_size >> SLJIT_WORD_SHIFT) == common->read_only_data_ptr,1,0,1
 !sqlite3JournalIsInMemory(pPager->jfd) ,1,0,1
 sizeof(aSpecial)==32 ,1,0,1
 p->rc!=SQLITE_OK || pStruct->nLevel>(iLvl+1) ,1,0,1
 pItem->fg.isCorrelated==0 && nRef<=0 ,1,0,1
" iHash==fts5HashKey(pHash->nSlot, (u8*)p->zKey, nToken+1) ",1,0,1
 nRef==sqlite3PagerRefcount(pBt->pPager) ,1,0,1
 pCsr->iFirstRowid==SMALLEST_INT64 ,1,0,1
 SQLITE_CHANGESET_CONFLICT+1==SQLITE_CHANGESET_CONSTRAINT ,1,0,1
 MEMJOURNAL_DFLT_FILECHUNKSIZE==fileChunkSize(p->nChunkSize) ,1,0,1
 (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr))==0 ,1,0,1
(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C)) == 0,1,0,1
 pTabList!=0 ,1,0,1
 pResOut!=0 ,1,0,1
 pStruct->nRef==0 ,1,0,1
 flags==0 || flags==EXPRDUP_REDUCE ,1,0,1
zv != NULL,1,0,1
 rbuIsVacuum(p) || p->zTarget!=0 ,1,0,1
end == hex + len,1,0,1
 cursorHoldsMutex(p) ,1,0,1
 (p->flags & (PGHDR_DIRTY|PGHDR_CLEAN))==PGHDR_DIRTY ,1,0,1
 p->apCell[idx]!=0 ,1,0,1
 pWInfo->eOnePass==ONEPASS_OFF ,1,0,1
 p->pStruct->aLevel[i].nMerge==pTest->aLevel[i].nMerge ,1,0,1
 pCur==0 || bReadOnly==pCur->curPagerFlags ,1,0,1
offset == -1 || (chars[offset * MAX_DIFF_CHARS] >= 1 && chars[offset * MAX_DIFF_CHARS] <= 2),1,0,1
 pFrom->fg.isRecursive==0 || pFrom->pTab!=0 ,1,0,1
 iVal==nVal ,1,0,1
 k==0 || pOld->aiOvfl[k-1]+1==pOld->aiOvfl[k] ,1,0,1
 p->readpoint.iOffset==0 || p->readpoint.pChunk!=0 ,1,0,1
 p1->pgnoFirst==p2->pgnoFirst ,1,0,1
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP | SLJIT_SINGLE_OP)),1,0,1
 pInsert==0 || rc==SQLITE_OK ,1,0,1
" fts5DlidxIterEof(p, pDlidx) || iLeafPgno<=pIter->iLeafPgno ",1,0,1
jump->flags & (JUMP_LABEL | JUMP_ADDR),1,0,1
 p1->pgnoLast==p2->pgnoLast ,1,0,1
 rc==SQLITE_OK || (bRetry==0 && bReplace==0) ,1,0,1
k <= 0xFFFFU,1,0,1
 aHash[iKey]==j ,1,0,1
 p->zSql!=0 ,1,0,1
 pUp->eType==JSON_OBJECT ,1,0,1
 b.apCell[b.nCell]==&aSpace1[iSpace1-3] || CORRUPT_DB ,1,0,1
 j==(-2) ,1,0,1
 (pPage->nCell>0 || CORRUPT_DB) && iCellIdx<=pPage->nCell ,1,0,1
 pCx->uc.pCursor!=0 ,1,0,1
 isOpen(pPager->fd) || pList->pDirty==0 ,1,0,1
 pCsr->pConfig->eDetail==FTS5_DETAIL_NONE ,1,0,1
 pNode->eType==JSON_STRING ,1,0,1
*end == '\0',1,0,1
 pTab->pConfig->pzErrmsg==0 ,1,0,1
 iPos>=0 && iPos<nCol ,1,0,1
ast->kind == ZEND_AST_ZVAL,1,0,1
 nStem>0 ,1,0,1
 iOut==0 || iRowid1>iOut ,1,0,1
 pSub->pEList->nExpr==pSub1->pEList->nExpr ,1,0,1
 pNear->nPhrase>1 ,1,0,1
 pCx->pBt==0 || pCx->eCurType==CURTYPE_BTREE ,1,0,1
 pSrcCol->pDflt==0 || pSrcCol->pDflt->op==TK_SPAN ,1,0,1
 OPFLAG_SAVEPOSITION==BTREE_SAVEPOSITION ,1,0,1
 p->rc || (pWriter->nDlidx>0 && pWriter->aDlidx[0].buf.n==0) ,1,0,1
 (bToken==0 || bToken==1) ,1,0,1
!errno && end == hex + len,1,0,1
 pPager->tempFile==0 || pPager->eLock==EXCLUSIVE_LOCK ,1,0,1
 iLvl>=0 ,1,0,1
 pTabCur->isTable ,1,0,1
 pCompare!=0 || db->mallocFailed ,1,0,1
 iCol!=XN_ROWID && iCol<pTab->nCol ,1,0,1
 pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN ,1,0,1
size > 0 && size < 16,1,0,1
!(type & ~(0xff | SLJIT_REWRITABLE_JUMP)),1,0,1
 p->openFlags & SQLITE_OPEN_WAL ,1,0,1
 pIdx->aiColumn[k]>=0 ,1,0,1
 aSpecial['\f']=='f' ,1,0,1
 p->rc || pBuf->nSpace>=(pgsz + FTS5_DATA_PADDING) ,1,0,1
 p->ts.eState==0 ,1,0,1
 zSql || rc==SQLITE_NOMEM ,1,0,1
 pIter->pIndex->pConfig->eDetail!=FTS5_DETAIL_NONE ,1,0,1
"!(SLJIT_CONV_SW_FROM_F64 & 0x1) && !(SLJIT_CONV_F64_FROM_SW & 0x1), invalid_float_opcodes",1,0,1
 i>=0 && i<fts5YY_ACTTAB_COUNT ,1,0,1
" p->rc!=SQLITE_OK || pIter->pLeaf==0 || fts5BufferCompareBlob(&pIter->term, pTerm, nTerm)==0 || (bGe && fts5BufferCompareBlob(&pIter->term, pTerm, nTerm)>0) ",1,0,1
 zIn!=0 ,1,0,1
 pCur==0 || ppPage==&pCur->apPage[pCur->iPage] ,1,0,1
GET_OPCODE(op) >= SLJIT_MOVD && GET_OPCODE(op) <= SLJIT_ABSD,1,0,1
 pFile->eFileLock<=SHARED_LOCK ,1,0,1
GET_OPCODE(op) >= SLJIT_ADD && GET_OPCODE(op) <= SLJIT_ASHR,1,0,1
 bCons==0 || bCons==1 ,1,0,1
 (pRet==0)==(p->rc!=SQLITE_OK) ,1,0,1
 pSeg->pgnoLast>0 ,1,0,1
 idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB ,1,0,1
 pC->uc.pVCur!=0 ,1,0,1
 nSeg>=2 ,1,0,1
 pIter->eType!=RBU_PK_VTAB || pIter->nIndex==0 ,1,0,1
 nCol==(i16)nCol ,1,0,1
 aSpecial['\b']=='b' ,1,0,1
 p->pStruct->nSegment==pTest->nSegment ,1,0,1
 argc>=1 ,1,0,1
 p->iStructVersion!=0 ,1,0,1
 ap[0]==pPrev->pNear->apPhrase[0] ,1,0,1
winver != NULL,1,0,1
 zAff!=0 || pParse->db->mallocFailed ,1,0,1
 pWriter->writer.pgidx.n==0 ,1,0,1
Z_TYPE_P(arg) == IS_RESOURCE,1,0,1
 pParse->szOpAlloc==0 ,1,0,1
 pTst->nMerge==0 ,1,0,1
 pApply->bDeferConstraints || pApply->constraints.nBuf==0 ,1,0,1
 (u32)(i+size)<=usableSize ,1,0,1
 pFrame->pAuxData==0 ,1,0,1
 iCol>=0 && iCol<pParse->pConfig->nCol ,1,0,1
*next == ';',1,0,1
 8==ArraySize(azCol) ,1,0,1
 pWal->writeLock==0 && pWal->iReCksum==0 ,1,0,1
ch && ch->handlers,1,0,1
 OPFLAG_AUXDELETE==BTREE_AUXDELETE ,1,0,1
 (pBuf)->n!=0 || (iLastRowid)==0 ,1,0,1
 eOp & (WO_ISNULL|WO_EQ|WO_IN|WO_IS) ,1,0,1
current > (sljit_sw*)current[-1],1,0,1
 iRes>=0 && c>=aEntry[iRes].iCode ,1,0,1
str != NULL,1,0,1
 pConfig->pTok==0 && pConfig->pTokApi==0 ,1,0,1
 bDelete==1 || bDelete==0 ,1,0,1
 pPage->pLruPrev ,1,0,1
 pIter->pIndex->pConfig->eDetail==FTS5_DETAIL_COLUMNS ,1,0,1
 pIter->eType!=RBU_PK_VTAB || pIter->abIndexed==0 ,1,0,1
 pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
 p->startTime==0 ,1,0,1
 (a - p->aRecord)==p->nRecord ,1,0,1
pos <= str_len,1,0,1
 nSz>=0 ,1,0,1
 iPos1>=0 && iPos2>=0 ,1,0,1
 (pPage->pgidx.n==0)==(pWriter->bFirstTermInPage) ,1,0,1
 pTab->eType==FTS5_VOCAB_COL || pTab->eType==FTS5_VOCAB_ROW ,1,0,1
 pWal->iReCksum>0 ,1,0,1
 pPage==0 || pPager->hasHeldSharedLock ,1,0,1
 x==BTREE_SEEK_EQ || x==BTREE_BULKLOAD || x==0 ,1,0,1
 pSelect->iOffset==0 || pSelect->iLimit!=0 ,1,0,1
 pLeft->eType==FTS5_STRING || pLeft->eType==FTS5_TERM || pLeft->eType==FTS5_EOF || pLeft->eType==FTS5_AND ,1,0,1
 p->eStage==RBU_STAGE_MOVE ,1,0,1
 p2>0 && p2+mx<=(p->nMem+1 - p->nCursor)+1 ,1,0,1
 pCsr->pExpr ,1,0,1
 p->aOp!=0 || db->mallocFailed ,1,0,1
 pOther!=&aDef[i] && pOther->pNext!=&aDef[i] ,1,0,1
entry != NULL,1,0,1
 t.n>=2 ,1,0,1
 66==sqlite3LogEst(100) ,1,0,1
 p->pHash || p->nPendingData==0 ,1,0,1
 wrFlag==0 || wrFlag==BTREE_WRCSR || wrFlag==(BTREE_WRCSR|BTREE_FORDELETE) ,1,0,1
 pParse->nMem>=8+j ,1,0,1
 pTest->eType==FTSQUERY_NEAR || pTest->eType==FTSQUERY_PHRASE ,1,0,1
"pIter->pSelect, pIter->nCol+1, rbuIsVacuum(p) ? ""rowid"" : ""rbu_rowid"" ",1,0,1
 eType==RBU_UPDATE ,1,0,1
 pcache1.separateCache==0 ,1,0,1
" 0==memcmp(pCell, &aData[iOff], pCArray->pRef->xCellSize(pCArray->pRef, pCArray->apCell[i+iNew])) ",1,0,1
 eOnePass==ONEPASS_OFF || eOnePass==ONEPASS_SINGLE ,1,0,1
op_array->doc_comment != NULL,1,0,1
 debuginfo.nSize==(u16)(pIter - pCell) || CORRUPT_DB ,1,0,1
 x>0 ,1,0,1
 j==0 || pPage->aiOvfl[j-1]<(u16)i ,1,0,1
 pNode->pNear->nPhrase==1 && pPhrase->nTerm==1 ,1,0,1
 p->pDelete && p->pUpdate && p->pInsert && p->pSelect ,1,0,1
 pRoot->bEof==0 && rc==SQLITE_OK ,1,0,1
 pPage->buf.n>=4 ,1,0,1
(sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_s32))) >= HALFWORD_MIN && (sljit_sw)(jump->u.target - (jump->addr + sizeof(sljit_s32))) <= HALFWORD_MAX,1,0,1
 pBt->pCursor!=0 ,1,0,1
 db->mallocFailed == 1 ,1,0,1
op >= SLJIT_MOV && op <= SLJIT_MOV_P,1,0,1
idx2 != ht2->nNumUsed,1,0,1
fast_str_ptr == 0 || opcode == OP_STAR,1,0,1
reg > 0 && reg <= SLJIT_NUMBER_OF_REGISTERS,1,0,1
 pRes->bTermEq==0 || pOther->pLeaf ,1,0,1
!(op & (SLJIT_SET_E | SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_C)),1,0,1
 pTerm && nTerm ,1,0,1
 (pNode->jnFlags & JNODE_APPEND)==0 ,1,0,1
 iCur==pWInfo->pTabList->a[pLevel->iFrom].iCursor ,1,0,1
 136==WALINDEX_HDR_SIZE ,1,0,1
 op>=0 && op<0xff ,1,0,1
"(SLJIT_F32_OP == 0x100) && !(DOUBLE_DATA & 0x4), float_transfer_bit_error",1,0,1
common->forced_quit_label == NULL,1,0,1
 p->pParse->nOpAlloc<=p->nOp ,1,0,1
Z_TYPE(dval_result) == IS_DOUBLE,1,0,1
 pCtx->pConfig->eDetail==FTS5_DETAIL_NONE ,1,0,1
 pChild->bEof==0 || pChild->bEof==1 ,1,0,1
 pIter->aPoslist ,1,0,1
 pOp->p1>1 ,1,0,1
 *pbSkip==0 ,1,0,1
!(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_C)),1,0,1
 p->nExpr>0 ,1,0,1
newentry != NULL,1,0,1
 sqlite3GlobalConfig.mutex.xMutexLeave ,1,0,1
success == Z_OK,1,0,1
 aOp->p2>=0 ,1,0,1
 pSrc->aColExpr!=0 && pDest->aColExpr!=0 ,1,0,1
"SLJIT_LOCALS_OFFSET >= (2 + 4) * sizeof(sljit_uw), require_at_least_two_words",1,0,1
 zSql[i]==0 ,1,0,1
 zRet==0 ,1,0,1
 pExpr->iColumn>=0 ,1,0,1
!(ht->u.flags & HASH_FLAG_PACKED),1,0,1
 balance_quick_called==0 ,1,0,1
 iPos2!=iPrev ,1,0,1
 p->op==SQLITE_UPDATE ,1,0,1
Z_TYPE_P(_zv) != IS_REFERENCE,1,0,1
 *pbNullPK==0 ,1,0,1
 pIter->eType!=RBU_PK_VTAB ,1,0,1
EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK),1,0,1
GET_OPCODE(op) >= SLJIT_CONVD_FROMW && GET_OPCODE(op) <= SLJIT_CONVD_FROMI,1,0,1
" szNew==pPage->xCellSize(pPage, newCell) ",1,0,1
GC_FLAGS(zobj) & IS_OBJ_USE_GUARDS,1,0,1
 nData==1 || regData==regOrigData ,1,0,1
!(blocks[block_map[op_array->try_catch_array[j].finally_op]].flags & ZEND_BB_REACHABLE),1,0,1
 CORRUPT_DB || iPage>1 ,1,0,1
target ? strlen(target) == target_len - 1 : 1,1,0,1
opline->opcode == ZEND_JMPZNZ,1,0,1
 (p->nAlloc - p->nData) >= (9 + 4 + 1 + 3 + 5) ,1,0,1
 (rc==SQLITE_OK && *pzErr==0) || pConfig==0 ,1,0,1
 pTab->azCol==0 || pTab->abPK==0 ,1,0,1
 p->pParse->nOpAlloc>p->nOp ,1,0,1
 serial_type<12 || sqlite3SmallTypeSizes[serial_type]==(serial_type - 12)/2 ,1,0,1
 pVfs && p->rc==SQLITE_OK && p->zErrmsg==0 ,1,0,1
 pDest->eDest!=SRT_Table ,1,0,1
 p->rc==SQLITE_OK && p->zErrmsg==0 ,1,0,1
 pCellIdx==&data[cellStart + i*2] ,1,0,1
 nKey<=0x7fffffff && pKey!=0 ,1,0,1
 pWal->readLock>0 || pWal->hdr.mxFrame==0 ,1,0,1
common->fast_fail_start_ptr <= common->fast_fail_end_ptr,1,0,1
 nHeader==(int)(info.pPayload - pCell) ,1,0,1
 i!=fts5YY_REDUCE_USE_DFLT ,1,0,1
start[ret_len] == '\0',1,0,1
 aOp!=0 ,1,0,1
 0==*pConfig->pzErrmsg ,1,0,1
 pParse->pVdbe!=0 || pParse->db->mallocFailed ,1,0,1
 (flags & FTS5INDEX_QUERY_SCAN)==0 || flags==FTS5INDEX_QUERY_SCAN ,1,0,1
 p==0 || sqlite3GlobalConfig.mutex.xMutexNotheld ,1,0,1
 rc==SQLITE_OK || p==0 ,1,0,1
ast->kind == ZEND_AST_IF_ELEM,1,0,1
b->len != 0,1,0,1
 flags & FTS5INDEX_QUERY_PREFIX ,1,0,1
 eType0==SQLITE_INTEGER || eType0==SQLITE_NULL ,1,0,1
 pLvlOut->nSeg>0 ,1,0,1
 pOp->opcode==OP_Column || pOp->opcode==OP_Rowid ,1,0,1
 p->ts.eState==1 || p->ts.eState==2 || p->ts.eState==0 ,1,0,1
 pNear->nPhrase>1 || pNear->apPhrase[0]->nTerm>1 || pNear->apPhrase[0]->aTerm[0].pSynonym ,1,0,1
zend_ast_is_list(ast),1,0,1
(op & (SLJIT_SET_E | SLJIT_KEEP_FLAGS)) != (SLJIT_SET_E | SLJIT_KEEP_FLAGS),1,0,1
 pIdx->aiColumn[i]<pTab->nCol ,1,0,1
 pAnd->bEof==0 ,1,0,1
 p->ts.eState==2 ,1,0,1
 db->pPreUpdate==0 ,1,0,1
Z_TYPE_P(search) == IS_STRING,1,0,1
 (pOp->p5 & ~(OPFLAG_SAVEPOSITION|OPFLAG_AUXDELETE))==0 ,1,0,1
 pDestCol->pDflt==0 || pDestCol->pDflt->op==TK_SPAN ,1,0,1
" pChild->bEof || fts5RowidCmp(pExpr, iLast, pChild->iRowid)<=0 ",1,0,1
 pSrc->a[i+iFrom].fg.isTabFunc==0 ,1,0,1
opline && end,1,0,1
"compiler_common *common, pcre_uchar type, pcre_uchar *cc, jump_list **backtracks",1,0,1
 pPager->errCode==SQLITE_OK || !MEMDB ,1,0,1
 addrBreak<0 ,1,0,1
 pIter->eType==RBU_PK_NONE || pIter->eType==RBU_PK_IPK || pIter->eType==RBU_PK_EXTERNAL || pIter->eType==RBU_PK_WITHOUT_ROWID || pIter->eType==RBU_PK_VTAB ,1,0,1
ast->child[1] == NULL,1,0,1
 nRef>=0 ,1,0,1
 p->eStage>=RBU_STAGE_OAL && p->eStage<=RBU_STAGE_DONE ,1,0,1
 p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) || p->openFlags & (SQLITE_OPEN_TRANSIENT_DB|SQLITE_OPEN_TEMP_JOURNAL) ,1,0,1
(type & 0xff) >= SLJIT_C_EQUAL && (type & 0xff) <= SLJIT_C_SIG_LESS_EQUAL,1,0,1
 sqlite3_step(pIdxSelect)!=SQLITE_ROW ,1,0,1
 p->apCsr[pOp->p1]->eCurType!=CURTYPE_VTAB ,1,0,1
"FIXED_LOCALS_OFFSET >= (2 + 4) * sizeof(sljit_uw), require_at_least_two_words",1,0,1
 pIter->pLeaf->nn>4 ,1,0,1
lcname,1,0,1
 (pPg->flags & PGHDR_DIRTY)==0 ,1,0,1
 pIter->bSkipEmpty ,1,0,1
 OPFLAG_FORDELETE==BTREE_FORDELETE ,1,0,1
pkey->pkey.ec != NULL,1,0,1
 x.nFree>=0 ,1,0,1
 pColset ,1,0,1
(len == 32 && imm != 0 && imm != -1) || (len == 16 && (sljit_s32)imm != 0 && (sljit_s32)imm != -1),1,0,1
"!""Unrecognised value""",1,0,1
 p->rc || pPgidx->nSpace>=(pgsz + FTS5_DATA_PADDING) ,1,0,1
" HasRowid(pTab) || pTab->iPKey<0 || sqlite3ColumnOfIndex(pIndex, pTab->iPKey)>=0 ",1,0,1
!(op & (SLJIT_SET_U | SLJIT_SET_S | SLJIT_SET_O | SLJIT_SET_C)),1,0,1
in_len ? in[in_len] == '\0' : 1,1,0,1
 (mUsable & mPrereq)==mPrereq ,1,0,1
!(dst & SLJIT_MEM) || (dst & REG_MASK) != SLJIT_SP,1,0,1
 pParse->apPhrase[pParse->nPhrase-1]==pRight->pNear->apPhrase[0] ,1,0,1
 pExpr->pConfig->eDetail==FTS5_DETAIL_COLUMNS ,1,0,1
 p->apCsr[pOp->p1]->eCurType==CURTYPE_BTREE ,1,0,1
" CORRUPT_DB || sz==cellSize(pPage, idx) ",1,0,1
 b.szCell[b.nCell]==3 || CORRUPT_DB ,1,0,1
 120==WALINDEX_LOCK_OFFSET ,1,0,1
 pLeaf->pgno>=1 ,1,0,1
 pNew->aiCol[i]>pNew->aiCol[i-1] ,1,0,1
 rc==SQLITE_OK || pRet==0 ,1,0,1
 pNode->bNomatch==0 ,1,0,1
 xInput==0 || (pChangeset==0 && nChangeset==0) ,1,0,1
 EIGHT_BYTE_ALIGNMENT(&x.pSpace[x.nFree]) ,1,0,1
 iVal>=(1 << 7) ,1,0,1
char_set[0] > 0 && char_set[0] < 255,1,0,1
 cnt==0 ,1,0,1
