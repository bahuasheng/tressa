x_val,y_added,y_removed,y_combined
allow_macro_instructions_,287,287,574
!rd.IsZero(),152,152,304
is_valid(),79,79,158
IsValid(),65,65,130
index >= 0 && index < kNumAllocatableRegisters,61,61,122
index >= 0 && index < kMaxNumAllocatableRegisters,46,46,92
IsCodeTarget(rmode_) || rmode_ == EMBEDDED_OBJECT,44,44,88
type_ != kUninitialized,43,43,86
IsStarted(),30,30,60
kind() == FUNCTION,30,30,60
IsCodeTarget(rmode_) || rmode_ == RUNTIME_ENTRY,29,29,58
size == kInt32Size,29,29,58
(cond != al) && (cond != nv),27,27,54
(index >= 0) && (index < this->length()),26,26,52
IsCallInstruction(),25,25,50
kind() == OPTIMIZED_FUNCTION,25,25,50
IsRuntimeEntry(rmode_),24,24,48
index >= 0,24,24,48
(IsJSReturn(rmode()) && IsPatchedReturnSequence()) || (IsDebugBreakSlot(rmode()) && IsPatchedDebugBreakSlotSequence()),22,22,44
rmode_ == RelocInfo::GLOBAL_PROPERTY_CELL,21,21,42
!Done(),21,21,42
index >= 0 && index < this->length(),21,21,42
is_call_instruction(),20,20,40
rmode_ == RelocInfo::CELL,20,20,40
IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_),20,20,40
IsPatchedReturnSequence(),19,19,38
rmode_ == RelocInfo::CODE_AGE_SEQUENCE,19,19,38
type_ != kUninitializedType,17,17,34
next_.literal_chars,17,17,34
code < kNumberOfRegisters,17,17,34
codegen_->info()->is_calling(),17,17,34
map() == GetHeap()->constant_pool_array_map(),17,17,34
kind() == OPTIMIZED_FUNCTION || kind() == COMPILED_STUB,16,16,32
GetMode(stub) == STORE_BUFFER_ONLY,16,16,32
"FUNCTION, kind()",16,16,32
descriptor_number < number_of_descriptors(),16,16,32
current_.literal_chars,15,15,30
frame_pointer_ != kIllegalIndex,15,15,30
!is_used_,15,15,30
lookup_type_ == DESCRIPTOR_TYPE,14,14,28
index >= 0 && index < NumAllocatableRegisters(),14,14,28
index >= 0 && index < length(),14,14,28
initialized_,14,14,28
CpuFeatures::IsSupported(f),14,14,28
R == 0 || R == 1,18,9,27
length > 0,13,13,26
rt.IsFPRegister(),13,13,26
OpBits::is_valid(Token::NUM_TOKENS),13,13,26
!IsEmpty(),12,12,24
!is_union(type),12,12,24
!handle_.is_null(),12,12,24
lsb + width <= rn.SizeInBits(),12,12,24
width >= 1,12,12,24
var != kNoVar,12,12,24
map() != Heap::fixed_cow_array_map(),12,12,24
code < kNumberOfFPRegisters,11,11,22
index < length_,11,11,22
sizeof(T) == kPointerSize,12,10,22
"IsAligned(byte_size, kPointerSize)",11,11,22
reg.is_valid(),11,11,22
lower->Is(upper),11,11,22
IsReserved(),10,10,20
static_cast<int>(NOT_CONTEXTUAL) == 0,10,10,20
0 <= value && value < 256,10,10,20
InstructionType() == kRegisterType || InstructionType() == kImmediateType,10,10,20
!IsStarted(),10,10,20
IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_) || rmode_ == EMBEDDED_OBJECT || rmode_ == EXTERNAL_REFERENCE,10,10,20
map() != HEAP->fixed_cow_array_map(),10,10,20
reg.code() != 0,10,10,20
elapsed.InMicroseconds() >= 0,10,10,20
!done(),10,10,20
num_words > 0,9,9,18
kind() == STUB,9,9,18
type_ == ILLEGAL,9,9,18
*pc_ == kCallOpcode,9,9,18
!is_empty(),9,9,18
location_ != NULL,9,9,18
!GetHeap()->InNewSpace(value),9,9,18
array != NULL,9,9,18
size_in_bytes <= sizeof(T),9,9,18
IsFound(),9,9,18
!dst.is(kScratchRegister),9,9,18
is_register(),9,9,18
kHeapObjectTag == 1,10,8,18
!src1.is(src2),9,9,18
Token::IsCompareOp(token),9,9,18
LANGUAGE_END == 2,9,9,18
size_in_bytes,9,9,18
IsJSReturn(rmode()),9,9,18
!is_lazy(),9,9,18
kSmiTag == 0,14,3,17
LANGUAGE_END == 3,12,5,17
rmode_ == EXTERNAL_REFERENCE,8,8,16
IsValidOrNone(),8,8,16
codegen_->expected_safepoint_kind_ == Safepoint::kSimple,8,8,16
in_spilled_code(),8,8,16
!rt.IsZero(),8,8,16
IsPowerOf2(unit_size),8,8,16
p->is_valid(),8,8,16
has_constant_parameter_count(),8,8,16
base.Is64Bits() && !base.IsZero(),8,8,16
"AreSameSizeAndType(rt, rt2)",8,8,16
CpuFeatures::VerifyCrossCompiling(SSE2),8,8,16
type() != MEMORY,8,8,16
isolate == Isolate::Current(),8,8,16
!code_object_.is_null(),8,8,16
GetMode(stub) == mode,8,8,16
len_ == 1 || len_ == 2,8,8,16
num >= 0 && num < RegisterAllocator::kNumRegisters,8,8,16
JSArrayBuffer::kWeakFirstViewOffset == JSArrayBuffer::kWeakNextOffset + kPointerSize,8,8,16
is_binary_op_stub(),8,8,16
InstructionType() == kRegisterType,8,8,16
is_copy(),8,8,16
size >= static_cast<size_t>(Page::kPageSize),8,8,16
"ILLEGAL, type_",8,8,16
!Heap::InNewSpace(obj),8,8,16
!Heap::InNewSpace(Heap::empty_fixed_array()),8,8,16
IsComplete(),8,8,16
is_type_recording_binary_op_stub(),8,8,16
!target->IsConsString(),8,8,16
GetMode(stub) == INCREMENTAL || GetMode(stub) == INCREMENTAL_COMPACTION,8,8,16
descriptor->environment_length() + 1 == operands.length(),8,8,16
has_next(),8,8,16
instr->IsGap(),8,8,16
increase_by_value >= 0,8,8,16
labels == NULL || labels->length() > 0,7,7,14
"Isolate::Current(), isolate_",7,7,14
!value->IsTheHole(),7,7,14
codegen_->expected_safepoint_kind_ == Safepoint::kWithRegisters,7,7,14
0 <= index && index < length_,7,7,14
target()->is_keyed_load_stub(),7,7,14
descriptor->GetRegisterParameterCount() + 1 == operands.length(),7,7,14
IsCodeTarget(rmode_) || rmode_ == RUNTIME_ENTRY || rmode_ == EMBEDDED_OBJECT || rmode_ == EXTERNAL_REFERENCE,7,7,14
kind() == STUB || kind() == COMPILED_STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == TO_BOOLEAN_IC,8,6,14
index < 0,7,7,14
cpu_features_->IsSupported(f),7,7,14
0 <= index,7,7,14
!IsNone(),7,7,14
"0, kSmiTag",7,7,14
!IsTransition(),7,7,14
!reg.is(no_reg),7,7,14
obj->IsHashTable(),7,7,14
pc_ <= buffer_.length(),7,7,14
!HEAP->InNewSpace(value),7,7,14
IsInitialized(),7,7,14
buffer_pos < kBufferSize,7,7,14
IsLdrPpImmediateOffset(Memory::int32_at(pc)),6,6,12
HEAP->always_allocate_scope_depth_ == 0,6,6,12
!GetHeap()->InNewSpace(empty_array),6,6,12
target()->is_call_stub(),6,6,12
"!AreAliased(scratch0, object, address, no_reg)",6,6,12
result,6,6,12
has_operand_positions(),6,6,12
is_code_target(rmode_) || rmode_ == embedded_object,6,6,12
data_,6,6,12
op->IsUnallocated(),6,6,12
i < length(),6,6,12
is_mutable_,6,6,12
position_ < length_,6,6,12
0 <= id && id < kJSBuiltinsCount,6,6,12
Isolate::Current() == isolate_,6,6,12
RuntimeProfiler::IsEnabled(),6,6,12
heap != NULL,6,6,12
Heap::Contains(object),6,6,12
yield_kind() == DELEGATING,6,6,12
!src1.is(kScratchRegister),6,6,12
!Heap::allow_allocation(false),6,6,12
cross_compile_ == 0,6,6,12
(size == kXRegSizeInBits) || (size == kWRegSizeInBits),6,6,12
!xn.IsZero(),6,6,12
block->control_ == BasicBlock::kNone,6,6,12
lookup_type_ == DESCRIPTOR_TYPE || lookup_type_ == TRANSITION_TYPE,6,6,12
!GetHeap()->InNewSpace(GetHeap()->empty_fixed_array()),6,6,12
Smi::IsValid(value),6,6,12
0 <= tok && tok < NUM_TOKENS,6,6,12
transition_number < number_of_transitions(),6,6,12
instr->IsLdrLiteralX(),6,6,12
index < properties()->length(),6,6,12
index < GetInternalFieldCount() && index >= 0,6,6,12
other.type() == type_,6,6,12
obj->IsDictionary(),6,6,12
!Heap::InNewSpace(value),6,6,12
(kArrayIndexLengthBits > 0),6,6,12
dst.Is64Bits() && src.Is64Bits(),6,6,12
type() == FIELD,6,6,12
"!AreAliased(object_, address_, scratch1_, scratch0_)",6,6,12
number_ < map->NumberOfOwnDescriptors(),6,6,12
other->IsNumber(),6,6,12
AttributesField::is_valid(attributes),6,6,12
(reg_size == kWRegSizeInBits) || (reg_size == kXRegSizeInBits),6,6,12
isASCIIHexDigit(c),6,6,12
-1 <= index,6,6,12
size <= kSizeInBytes,6,6,12
!src2.is(kScratchRegister),6,6,12
is_compare_ic_stub(),6,6,12
!result.is_null(),6,6,12
!label->HasReplacement(),6,6,12
HasBeenSetup(),6,6,12
other.length() == length(),6,6,12
shape.type() == StringShape(this).type(),6,6,12
!current_part_.is_null(),6,6,12
has_property_,6,6,12
0 <= n && n < size_,6,6,12
Assembler::IsLdrPcImmediateOffset(Memory::int32_at(pc_)),6,6,12
op->IsStackSlot(),6,6,12
(page->RSetStart() <= rset_address && rset_address < page->RSetEnd()) || page->IsLargeObjectPage(),5,5,10
!has_pending_message_,5,5,10
IsEmbeddedObject(rmode_) || IsCodeTarget(rmode_) || IsRuntimeEntry(rmode_) || IsExternalReference(rmode_),5,5,10
index < local_count(),5,5,10
"IsRSetSet(address, offset)",5,5,10
object->map()->IsMap(),5,5,10
"Page::IsRSetSet(reinterpret_cast<Address>(current), 0)",5,5,10
static_cast<unsigned>(Smi::kMaxValue) <= std::numeric_limits<size_t>::max(),5,5,10
index < local_count_,5,5,10
HEAP->Contains(object),5,5,10
Heap::InToSpace(object),5,5,10
has_scheduled_exception(),5,5,10
is_empty(),5,5,10
has_pending_exception(),5,5,10
Page::is_rset_in_use(),5,5,10
frame_pointer() < element_count(),5,5,10
result->IsJSFunction(),5,5,10
kDoubleSize == kInt64Size,5,5,10
target()->is_load_stub(),5,5,10
!object_.handle().is_null(),5,5,10
mutex_ != NULL,5,5,10
"!IsRSetSet(address, offset)",5,5,10
"Heap::InNewSpace(object) || !Heap::InNewSpace(READ_FIELD(object, offset)) || Page::FromAddress(object->address())-> IsRegionDirty(object->address() + offset)",5,5,10
to <= length_,5,5,10
object->IsHeapObject() && HeapObject::cast(object)->map()->instance_type() == Traits::kInstanceType,5,5,10
!external_caught_exception_,5,5,10
!Serializer::enabled() || (CpuFeatures::found_by_runtime_probing_ & mask) == 0,5,5,10
IsTransition(),5,5,10
!now.IsNull(),5,5,10
heap->isolate() == Isolate::Current(),5,5,10
t != INTERCEPTOR,5,5,10
"Isolate::UncheckedCurrent(), isolate_",5,5,10
Token::IsCompareOp(op),5,5,10
recorded_ast_id_.IsNone(),5,5,10
(where ? true_target_ : false_target_)->is_bound(),5,5,10
successor_ == NULL && successor != NULL,5,5,10
cgen()->has_valid_frame(),5,5,10
offset < length_,5,5,10
!recorded_ast_id_.IsNone(),5,5,10
started_ || start_ticks_.IsNull(),5,5,10
!started_ || !start_ticks_.IsNull(),5,5,10
is_function_scope(),5,5,10
true_is_fall_through ? !true_target->is_bound() : !false_target->is_bound(),5,5,10
index < element_count(),5,5,10
lithium_position_ == -1,5,5,10
(kind & Safepoint::kWithRegisters) != 0,5,5,10
(index >= 0) && (index < NumAllocatableRegisters()),5,5,10
is_constant(),5,5,10
target()->is_store_stub(),5,5,10
type() == CALLBACKS,5,5,10
rmode_ == RelocInfo::EXTERNAL_REFERENCE,5,5,10
cc != al,5,5,10
!value_.is_null(),5,5,10
!HasBeenRegistered(),5,5,10
from < to,5,5,10
HeapObject::FromAddress(address)->IsFixedArray(),5,5,10
(mod & -4) == 0,5,5,10
!Heap::InNewSpace(Heap::null_value()),5,5,10
length == 0 || (length > 0 && data != NULL),5,5,10
IsLdrPcImmediateOffset(Memory::int32_at(pc)),5,5,10
kSmiTagSize == 1,7,3,10
size_ >= 0,5,5,10
bytes_generated < assembler_->kGap,5,5,10
map() != GetHeap()->fixed_cow_array_map(),5,5,10
HEAP->is_safe_to_read_maps(),5,5,10
kCharacterLookaheadBufferSize == 1,5,4,9
sizeof(T) == 1,5,4,9
(kSmiTagSize == 1) && (kSmiTag == 0),6,3,9
IS_POWER_OF_TWO(kMaxCachedArrayIndexLength + 1),5,4,9
location_ == NULL || reinterpret_cast<Address>(*location_) != kZapValue,4,4,8
tagged_is_union(tagged),4,4,8
"READ_FIELD(this, offset)->IsSmi()",4,4,8
KindBits::kSize == 4,4,4,8
!result || IsAccessCheckNeeded(),4,4,8
HasTransitionArray(),4,4,8
IsGlobalContext(),4,4,8
sizeof(argument) <= sizeof(bits_),4,4,8
value,4,4,8
type_ == kContextVariable || type_ == kProperty || type_ == kInternal || type_ == kShortcut,4,4,8
SPRegAliasesMatch(),4,4,8
type() == CONSTANT_FUNCTION,4,4,8
reg.is_valid() && !IsReserved(reg),4,4,8
kind() == STUB || kind() == BINARY_OP_IC || kind() == TYPE_RECORDING_BINARY_OP_IC || kind() == COMPARE_IC,4,4,8
type < NUMBER_OF_TYPES,4,4,8
type->IsUnion(),4,4,8
kShortStringTag + kLongLengthShift == kShortLengthShift,4,4,8
IsCodeTarget(rmode_),4,4,8
(value & kHeapObjectTag) == 0,4,4,8
!str.is_null(),4,4,8
stack_pointer_ == element_count() - 1,4,4,8
n < ARRAY_SIZE(registers_),4,4,8
on_not_smi_result,4,4,8
variable->IsStackAllocated(),4,4,8
type() == CONSTANT,4,4,8
!Code::IsYoungSequence(pc_),4,4,8
object->IsHeapObject(),4,4,8
e.output != NULL,4,4,8
!Serializer::enabled() || (cpu_features_->found_by_runtime_probing_ & mask) == 0,4,4,8
((reg_size == kXRegSizeInBits) && is_uint6(immr)) || ((reg_size == kWRegSizeInBits) && is_uint5(immr)),4,4,8
kLongStringTag == 0,4,4,8
TypeTag() != NOT_COMPILED,4,4,8
"CountSetBits(bit_pattern, bits) > 0",4,4,8
mode == SKIP_WRITE_BARRIER,4,4,8
"UNLOADED, type_",4,4,8
type == this->type(),4,4,8
"length_, 0",4,4,8
(value & 0xC0000000) == 0xC0000000 || (value & 0xC0000000) == 0x000000000,4,4,8
size % 16 == 0,4,4,8
attributes == this->attributes(),4,4,8
slot < Internals::kNumIsolateDataSlots,4,4,8
new_state >= 0,4,4,8
kind() == STUB || kind() == BINARY_OP_IC,4,4,8
RegAliasesMatch(code),4,4,8
!reg.IsSP(),4,4,8
AllocationWatermarkOffset() == static_cast<uint32_t>(Offset(allocation_watermark)),4,4,8
is_crankshafted(),4,4,8
!is_finalized() && position_ < buffer_.length(),4,4,8
frame->is_exit_debug(),4,4,8
map() != GetHeap()->fixed_cow_array_map() && map() != GetHeap()->fixed_array_map(),4,4,8
"Heap::InNewSpace(object) || !Heap::InNewSpace(READ_FIELD(object, offset)) || Page::IsRSetSet(object->address(), offset)",4,4,8
op->IsDoubleRegister(),4,4,8
value != NULL,4,4,8
!IsHiddenField::decode(bit_field_),4,4,8
"Min(dst, const_cast<T*>(src)) + num_words <= Max(dst, const_cast<T*>(src))",4,4,8
!src2.is(src3),4,4,8
isnan(num),4,4,8
IsWatermarkValid() == !value,4,4,8
kSymbolTag != 0,4,4,8
"IsAccessorAccessorConflict(old_type, type)",4,4,8
!Heap::InNewSpace(Heap::undefined_value()),4,4,8
(kSmiShift == 32) && (kSmiTag == 0),4,4,8
reg.IsAllocatable(),4,4,8
!src1.is(src3),4,4,8
c != '\0',4,4,8
predecessor != NULL,4,4,8
index < static_cast<unsigned>(NumAllocatableRegisters()),4,4,8
object->IsMap() || object->IsUndefined(),4,4,8
Heap::always_allocate_scope_depth_ == 0,4,4,8
is_ascii_,4,4,8
extra_ic_state == kNoExtraICState || (kind == CALL_IC && (ic_state == MONOMORPHIC || ic_state == MONOMORPHIC_PROTOTYPE_FAILURE)) || (kind == STORE_IC) || (kind == KEYED_STORE_IC),4,4,8
addrmode == Offset,4,4,8
reg.code() == 0,4,4,8
IsGrey(markbit),4,4,8
!csp.Is(sp_),4,4,8
address,4,4,8
dest + kStepSize > dest,4,4,8
rt.IsValid(),4,4,8
id < kJSBuiltinsCount,4,4,8
IsExpressionStackIndex(index),4,4,8
type_ == kElement || type_ == kHidden || type_ == kWeak,4,4,8
!is_linked(),4,4,8
shift < rd.SizeInBits(),4,4,8
(previous_ != NULL) && (previous_->state_ != EXTERNAL),4,4,8
0 <= i && i < this->Length(),4,4,8
IsShiftedRegister() || IsExtendedRegister(),4,4,8
0 <= index && index < kMaxNumAllocatableRegisters,4,4,8
map() != HEAP->fixed_cow_array_map() && map() != HEAP->fixed_array_map(),4,4,8
previous_tag_ != EXTERNAL,4,4,8
smi.Is64Bits(),4,4,8
IsShiftedRegister(),4,4,8
(isolate)->has_pending_exception(),4,4,8
(code->extra_ic_state() & kStrictMode) == (target()->extra_ic_state() & kStrictMode),4,4,8
IsPropertyName(),4,4,8
IsValidFPRegister(),4,4,8
!is_union(*type),4,4,8
"Min(dst, const_cast<T*>(src)) + num_bytes <= Max(dst, const_cast<T*>(src))",4,4,8
"0, current->level",4,4,8
isolate_ == Isolate::Current(),4,4,8
t->IsBitset() || t->IsClass() || t->IsConstant() || t->IsUnion(),4,4,8
result->is_constant(),4,4,8
FPRegAliasesMatch(code),4,4,8
result != NULL,4,4,8
current_index_ < part_length_,4,4,8
length == static_cast<size_t>(static_cast<int>(length)),4,4,8
obj_size,4,4,8
IsMovT(Memory::int32_at(pc + kInstrSize)),4,4,8
predecessor_ == NULL && predecessor != NULL,4,4,8
sizeof(sourcechar) <= 2,4,4,8
is_simple_api_call(),4,4,8
IsInitialized() && other.IsInitialized(),4,4,8
(kPageAlignmentMask >> kRegionSizeLog2) < kBitsPerInt,4,4,8
is_call_stub() || is_keyed_call_stub(),4,4,8
IsCompareOp(op),4,4,8
(dst >= (src + byte_size)) || ((OffsetFrom(src) - OffsetFrom(dst)) >= kPointerSize),4,4,8
0 <= offset && offset < Page::kObjectAreaSize,4,4,8
!dest.is_null(),4,4,8
n < ARRAY_SIZE(double_registers_),4,4,8
count >= 0,4,4,8
!is_used(reg),4,4,8
HasNext(),4,4,8
Page::FromAddress(addr)->IsRegionDirty(addr),4,4,8
"0, data->level",4,4,8
get_type(index) == INT64,4,4,8
code_ % 2 == 0,4,4,8
Marking::MarkBitFrom(obj) == mark_bit,4,4,8
IsBootstrappingOrGlobalObject(result),4,4,8
num >= 0 && num < kNumRegisters,4,4,8
"CPURegister::Create(code, size_, type_).IsValid()",4,4,8
sizeof(sinkchar) <= 2,4,4,8
TypeField::is_valid(type),4,4,8
basic_policy() == EXTENDED_POLICY,4,4,8
is_union(type),4,4,8
lookup_type_ == DICTIONARY_TYPE,4,4,8
!HEAP->allow_allocation(false),4,4,8
side_effect == kChangesNewSpacePromotion,4,4,8
kMediumStringTag + kLongLengthShift == kMediumLengthShift,4,4,8
!dst.is(src2),4,4,8
is_tagged(type),4,4,8
this->address(),4,4,8
object->IsHeapNumber() || object->IsMutableHeapNumber(),4,4,8
IsStruct(tag),4,4,8
(instr & 0x0f7f0000) == 0x051f0000,4,4,8
is_uint2(imm2),4,4,8
IsValidRegister(),4,4,8
!has_error_,4,4,8
side_effect == kNewSpacePromotion,4,4,8
is_used(reg),4,4,8
!maybe_hash->IsFailure(),4,4,8
"IsAligned(offset, static_cast<unsigned>(kIntSize))",4,4,8
index <= parameter_count(),4,4,8
type() == MAP_TRANSITION,4,4,8
is_external_array_load_stub() || is_external_array_store_stub(),4,4,8
!IsReserved(),4,4,8
try_catch_handler_address_ == NULL,4,4,8
reg.code() < kNumAllocatableRegisters,4,4,8
index == this->index(),4,4,8
length <= length_,4,4,8
iterator_count_ == 0,4,4,8
op->IsRegister(),4,4,8
this->index() == index,4,4,8
offset >= -4,4,4,8
!map()->has_fast_elements(),4,4,8
offset,4,4,8
0 <= from,4,4,8
!HEAP->InNewSpace(obj),4,4,8
chunk->size() == static_cast<size_t>(kPageSize),4,4,8
!Serializer::enabled() || (found_by_runtime_probing_ & mask) == 0,4,4,8
"!AreAliased(rt, rt2)",4,4,8
0 <= i && i <= struct_length(structure),4,4,8
is_struct(type),4,4,8
is_uint24(imm),4,4,8
isolate()->code_range()->exists(),4,4,8
0 <= index && index < kNumAllocatableRegisters,4,4,8
type_ == kElement || type_ == kHidden,4,4,8
!is_finalized(),4,4,8
JSFunction::kCodeEntryOffset + kPointerSize == JSFunction::kPrototypeOrInitialMapOffset,4,4,8
is_keyed_load_stub() || is_keyed_store_stub(),4,4,8
IS_POWER_OF_TWO(kStep),4,3,7
String::kMaxLength <= Smi::kMaxValue,4,3,7
sizeof(*pc_) == 1,4,3,7
direction == OLD_TO_OLD,4,3,7
kNumberOfSpaces <= kSpaceMask + 1,4,3,7
kMaxArrayIndexSize < (1 << kArrayIndexLengthBits),4,3,7
constant_pool != NULL,3,3,6
tok < NUM_TOKENS,3,3,6
last_ != NULL,3,3,6
is_bitset(type),3,3,6
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC,3,3,6
obj.is_null() || !obj->IsTheHole(),3,3,6
chunk->size() <= kPageSize,3,3,6
key >= 0 && key < (1 << kKnownRhsKeyBits),3,3,6
(Page::kObjectStartOffset <= offset) && (offset <= Page::kPageSize),3,3,6
-2 <= index && index < num_parameters,3,3,6
sizeof(T) <= sizeof(base::AtomicWord),4,2,6
!thread_local_top_.scheduled_exception_->IsException(),3,3,6
kFastCloneModeCount < 16,3,3,6
Top::context() == *context_,3,3,6
isolate || value->IsHeapObject(),3,3,6
this->IsBitset(),3,3,6
kHeapObjectTagSize == String::kHashShift,3,3,6
kMaximumClonedLength < 16,3,3,6
IsOpen(),3,3,6
length_ >= 0,3,3,6
-1 <= index && index <= parameter_count_,3,3,6
is_constant(type),3,3,6
!thread_local_top_.pending_exception_->IsException(),3,3,6
index == 0,3,3,6
(Map::kInstanceTypeOffset & 1) == 0,3,3,6
index < parameter_count_,3,3,6
position_ + sizeof(answer) <= length_ + 0u,3,3,6
source_ != NULL || destination_ == NULL,3,3,6
IsPowerOf2(constant_rhs_),3,3,6
target()->is_keyed_load_stub() || target()->is_external_array_load_stub(),3,3,6
extra_ic_state == kNoExtraICState || (kind == CALL_IC && (ic_state == MONOMORPHIC || ic_state == MONOMORPHIC_PROTOTYPE_FAILURE)) || (kind == STORE_IC),3,3,6
object->IsFixedArray() || object->IsFixedDoubleArray() || object->IsConstantPoolArray(),3,3,6
!info_->IsStub(),3,3,6
e_ == other.e_,3,3,6
kGrowICDelta == STORE_AND_GROW_TRANSITION_DOUBLE_TO_OBJECT - STORE_TRANSITION_DOUBLE_TO_OBJECT,3,3,6
t == kUnknownType || t == kPrimitiveType || t == kNumberType || t == kInteger32Type || t == kSmiType || t == kDoubleType || t == kStringType,3,3,6
(type_ & kIsNotStringMask) == kStringTag,3,3,6
context->IsTest(),3,3,6
IsPowerOf2(m),3,3,6
GetDetails(descriptor_number).type() == FIELD,3,3,6
"top_, this",3,3,6
(size == kDRegSizeInBits) || (size == kSRegSizeInBits),3,3,6
index > kCArgSlotCount,3,3,6
to_space_.Capacity() == from_space_.Capacity(),3,3,6
KindField::kSize == 3,5,1,6
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == STUB || kind() == LOAD_IC || kind() == CALL_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC,3,3,6
start.Value() < end.Value(),3,3,6
result == in_range,3,3,6
AssertNoZoneAllocation::allow_allocation(),3,3,6
extra != 0,3,3,6
!thread_local_top_.pending_exception_->IsFailure(),3,3,6
cc != cc_always,3,3,6
i < length_,3,3,6
t->IsBitset() || t->IsClass() || t->IsConstant() || t->IsUnion() || t->IsArray() || t->IsFunction(),3,3,6
!shared()->bound(),3,3,6
!Heap::InNewSpace(Heap::raw_unchecked_empty_fixed_array()),3,3,6
code < kNumRegisters,3,3,6
0 <= index && index < kMaxSlots,3,3,6
IsInJSState(),3,3,6
IndexField::is_valid(index),3,3,6
to == LAST_TYPE,3,3,6
false,3,3,6
value->IsUndefined(),3,3,6
value->IsNull() || value->IsJSObject(),3,3,6
"!AreAliased(object_orig_, address_, scratch1_, scratch0_)",3,3,6
InFromSpace(object),3,3,6
cur_addr_ <= cur_limit_,3,3,6
cond == al,3,3,6
Token::IsBinaryOp(op),3,3,6
"!AreAliased(object_, address_orig_, scratch1_, scratch0_)",3,3,6
value_ > 1,3,3,6
flat.IsTwoByte(),3,3,6
other.SizeInBits() == size_,3,3,6
Contains(address + offset),3,3,6
!is_shadowing_,3,3,6
InstructionType() == kImmediateType,3,3,6
!map.is_null(),3,3,6
op->IsConstantOperand(),3,3,6
size <= sizeof(new_value),3,3,6
first_instruction == kTwoByteNopInstruction,3,3,6
frame_pointer() < elements_.length(),3,3,6
FLAG_vector_ics,3,3,6
index >= 0 && index < array->length(),3,3,6
slots_ > 0 && slots <= kMaximumSlots,3,3,6
__maybe_object__->IsRetryAfterGC(),3,3,6
queued_.empty(),3,3,6
!new_space_.FromSpaceContains(address),3,3,6
instr->IsBitwise(),3,3,6
type->IsConstant(),3,3,6
op->IsArgument(),3,3,6
type_ != StackFrame::MANUAL && type_ != StackFrame::NONE,3,3,6
!is_bitset(type),3,3,6
Token::IsAssignmentOp(op),3,3,6
register_locations_[reg.code()] != kIllegalIndex,3,3,6
(reinterpret_cast<intptr_t>(address) & HeapObjectTagMask()) == 0,3,3,6
object != NULL,3,3,6
mode_ != OPTIMIZE,3,3,6
kSmiShift == 32,5,1,6
"0, kStringTag",3,3,6
!heap->InNewSpace(heap->null_value()),3,3,6
(o & 3) == 0,3,3,6
top_ != NULL,3,3,6
is_class(type),3,3,6
HasEnumCache(),3,3,6
top == NULL || top >= Page::FromAddress(top - 1)->ObjectAreaStart(),3,3,6
ic_state() == MONOMORPHIC,3,3,6
"length_, kMaximumClonedLength",3,3,6
IsImmediate(),3,3,6
!address_orig_.is(object_),3,3,6
!IsImpossible(mark_bit),3,3,6
!Heap::InNewSpace(desc->GetValue()),3,3,6
override_mode != DISABLE_ALLOCATION_SITES || AllocationSite::GetMode(kind) == TRACK_ALLOCATION_SITE,3,3,6
cgen->has_valid_frame(),3,3,6
p == NULL,3,3,6
!key->IsString() || details.index() > 0,3,3,6
!Serializer::enabled() || (found_by_runtime_probing_ & (1u << f)) == 0,3,3,6
array->map() != HEAP->raw_unchecked_fixed_cow_array_map(),3,3,6
kGrowICDelta == STORE_AND_GROW_TRANSITION_SMI_TO_OBJECT - STORE_TRANSITION_SMI_TO_OBJECT,3,3,6
index >= 0 && index <= length_,3,3,6
HEAP->linear_allocation_scope_depth_ >= 0,3,3,6
yield_first_feedback_slot_ != kInvalidFeedbackSlot,3,3,6
Isolate::Current()->context() == *context_,3,3,6
index < elements_.length(),3,3,6
FLAG_vector_ics && slot_ != FeedbackSlotInterface::kInvalidFeedbackSlot,3,3,6
IsMovW(Memory::int32_at(pc)),3,3,6
(type == -1) || ((FIRST_IC_MARKER <= type) && (type < LAST_CODE_MARKER)),3,3,6
undefined->IsUndefined(),3,3,6
HasTypeCheck(),3,3,6
this->fixed_index() == fixed_index,3,3,6
!Serializer::enabled() || (cpu_features_->found_by_runtime_probing_ & (1u << f)) == 0,3,3,6
this == Heap::empty_descriptor_array() || this->length() > 2,3,3,6
!IsJSGlobalProxy(),3,3,6
IsInConstantPool(),3,3,6
(kHeapObjectTag & kNotMarkedBit) != 0,3,3,6
i >= 0 && i < length(),3,3,6
result != 0,3,3,6
current_code->kind() == Code::FUNCTION,3,3,6
kSourceObjectReference == kSourceObjectIndex,3,3,6
kNumberOfFlags + kNumberOfSpecials == sizeof(bits_) * CHAR_BIT,3,3,6
allocation_allowed_ && gc_state_ == NOT_IN_GC,3,3,6
!Heap::InNewSpace(Heap::the_hole_value()),3,3,6
!is_observed() || elements_kind == DICTIONARY_ELEMENTS || elements_kind == NON_STRICT_ARGUMENTS_ELEMENTS || IsExternalArrayElementsKind(elements_kind),3,3,6
!reg.is(kDoubleRegZero),3,3,6
!obj->IsFailure(),3,3,6
object_.is(object_orig_) || address_.is(address_orig_),3,3,6
0 <= num && num < kNumRegisters,3,3,6
static_cast<int>(MajorKey()) < NUMBER_OF_IDS,3,3,6
Heap::RelocationLock::IsLocked(isolate()->heap()) || !isolate()->optimizing_compiler_thread()->IsOptimizerThread(),3,3,6
kGrowICDelta == STORE_AND_GROW_TRANSITION_SMI_TO_DOUBLE - STORE_TRANSITION_SMI_TO_DOUBLE,3,3,6
!unresolved_branches_.empty(),3,3,6
!result || HeapObject::cast(this)->map()->is_access_check_needed(),3,3,6
string->IsExternalString(),3,3,6
code >= 0,3,3,6
frame->is_java_script(),3,3,6
!Heap::InNewSpace(desc->GetKey()),3,3,6
type->IsClass(),3,3,6
other.RegisterSizeInBits() == size_,3,3,6
(FIRST_IC_MARKER <= type) && (type < LAST_CODE_MARKER),3,3,6
value == Heap::undefined_value() || value->IsContext(),3,3,6
0 <= index && index < frame_local_count_,3,3,6
Map::kBitFieldOffset == Map::kInstanceTypeOffset + 1,3,3,6
sizeof(T) == sizeof(v8::internal::Address),4,2,6
IsNumber(),3,3,6
index >= kDataIndex,3,3,6
stack_pointer_ == elements_.length() - 1,3,3,6
!thread_local_top_.scheduled_exception_->IsFailure(),3,3,6
LAST_ALLOCATION_SITE_MODE == 1,3,3,6
len_ == 1,3,3,6
new_top >= Page::FromAllocationTop(new_top)->ObjectAreaStart(),3,3,6
type->IsArray(),3,3,6
uint32_instructions_ == NULL || !uint32_instructions_->is_empty(),3,3,6
target->is_inline_cache_stub(),3,3,6
!value->IsHeapObject() || !GetHeap()->InNewSpace(value),3,3,6
details_.type() != NONEXISTENT,3,3,6
amount_of_external_allocated_memory_ >= 0,3,3,6
key->IsNumber(),3,3,6
Isolate::Current()->inlined_write_barrier_size() != -1,3,3,6
(scale & -4) == 0,3,3,6
IsFullTransitionArray(),3,3,6
f_ >= other.f_,3,3,6
!scratch_register_acquired_,3,3,6
type < 32,3,3,6
(alpha <= c_mk->e() + e) && (c_mk->e() + e <= gamma),3,3,6
type->IsFunction(),3,3,6
second_instruction == kFiveByteNopInstruction,3,3,6
object->IsFixedArrayBase(),3,3,6
IsPowerOf2(size),3,3,6
t == kUnknownType || t == kNumberType || t == kInteger32Type || t == kSmiType || t == kDoubleType,3,3,6
args[index]->IsSmi(),5,1,6
allocation_disallowed_ >= 0,3,3,6
scope_ < NUMBER_OF_SCOPES,3,3,6
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC || kind() == CALL_IC,3,3,6
f_ != 0,3,3,6
type < FIRST_NONSTRING_TYPE,3,3,6
reg.code() % 2 == 0,3,3,6
IsValidOrNone() && other.IsValidOrNone(),3,3,6
(reg_size == kWRegSize) || (reg_size == kXRegSize),3,3,6
(kind != NON_STRICT_ARGUMENTS_ELEMENTS) || (elements()->IsFixedArray() && elements()->length() >= 2),3,3,6
IsNativeContext(),3,3,6
is_bound(),3,3,6
NUMBER_OF_TYPES <= 6,3,3,6
instance_type() < FIRST_JS_OBJECT_TYPE || instance_type() > LAST_JS_OBJECT_TYPE || has_slow_elements_kind() || has_external_array_elements(),3,3,6
obj->Size() >= 2*kPointerSize,3,3,6
is_linked(),3,3,6
"0, maps->size()",3,3,6
sizeof(void *) == sizeof(int64_t),3,2,5
5 == kNumberOfSpaces,3,2,5
sizeof(1) == sizeof(int32_t),3,2,5
kTrueValueRootIndex == Internals::kTrueValueRootIndex,3,2,5
kLastFlag < kBitsPerInt,3,2,5
sizeof(LargePage) <= MemoryChunk::kHeaderSize,3,2,5
kempty_stringRootIndex == Internals::kEmptyStringRootIndex,3,2,5
type,3,2,5
kNumRegisters == Code::kAfterLast,3,2,5
kFalseValueRootIndex == Internals::kFalseValueRootIndex,3,2,5
LAST_TOKEN - FIRST_TOKEN < (1 << 4),3,2,5
sizeof(MemoryChunk) <= MemoryChunk::kHeaderSize,3,2,5
sizeof(1L) == sizeof(int64_t),3,2,5
kNullValueRootIndex == Internals::kNullValueRootIndex,3,2,5
sizeof(int) == sizeof(int32_t),3,2,5
kUndefinedValueRootIndex == Internals::kUndefinedValueRootIndex,3,2,5
sizeof(Atomic64) == sizeof(PVOID),3,2,5
sizeof(Page) <= MemoryChunk::kHeaderSize,3,2,5
IS_POWER_OF_TWO(kSize),3,2,5
i::LANGUAGE_END == 3,3,2,5
kMaxNumRegisters == Code::kAfterLast,3,2,5
(pc_ >= buffer_) && (pc_ < (buffer_ + buffer_size_)),2,2,4
is_field_index(),2,2,4
regoffset_.Is64Bits() && !regoffset_.IsSP(),2,2,4
reg.code() / 2 < kNumAllocatableRegisters,2,2,4
other.kind_ != kExternal,2,2,4
(type != CODE_TYPE) && (type != MAP_TYPE),2,2,4
"raw_address_, NULL",2,2,4
type_ == STRING,2,2,4
target_->iterator_count_-- > 0,2,2,4
index >= 0 && index < length(shape),2,2,4
arguments > 0,2,2,4
p->Offset(top),2,2,4
pause_count_ > 0,2,2,4
fd.Is64Bits(),2,2,4
(generic - base + StaticVisitorBase::kMinObjectSizeInWords) == 10,2,2,4
GetType(descriptor_number) == CALLBACKS,2,2,4
next->address(),2,2,4
is_int8(offset),2,2,4
++target->iterator_count_ > 0,2,2,4
InstructionType() == kJumpType,2,2,4
pointer_ != NULL,2,2,4
is_uint7(imm7),2,2,4
sizeof(pad) == kInstructionSize,2,2,4
IsOptimizing(),2,2,4
reg.code() < NumAllocatableRegisters(),2,2,4
length == static_cast<unsigned>(string->length()),2,2,4
shift == LSL,2,2,4
push_count_ >= 0,2,2,4
!str->AsArrayIndex(&index),2,2,4
f != 0,2,2,4
object,2,2,4
!isolate()->heap()->InNewSpace(obj),2,2,4
"DESCRIPTOR, property_encoding_",2,2,4
LAST_KIND < (1 << kKindWidth),2,2,4
frame->is_standard(),2,2,4
current->level > 0,2,2,4
!result_.is(index_),2,2,4
register_allocation_map_ == 0,2,2,4
new_space_strings_[i] != Heap::raw_unchecked_null_value(),2,2,4
IsPartiallyScanned(),2,2,4
location->index() < kPointerSize - 1,2,2,4
mode == Variable::VAR || mode == Variable::CONST,2,2,4
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == STORE_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == TO_BOOLEAN_IC,2,2,4
pointer_ == NULL && value != NULL,2,2,4
HasDoubleValue(),2,2,4
is_uint6(scale),2,2,4
shift_amount <= 4,2,2,4
loc != NULL,2,2,4
masm_->SizeOfCodeGeneratedSince(&start_) == size_,2,2,4
GetConstant() != *value || value->FitsRepresentation(representation()),2,2,4
slots_ > 0 && slots_ <= kMaximumSlots,2,2,4
!from.Equals(to),2,2,4
GetContextualMode(code->extra_ic_state()) == GetContextualMode(target()->extra_ic_state()),2,2,4
((imm7 >> size) << size) == imm7,2,2,4
inlined_write_barrier_size_ != -1,2,2,4
instr->following(2)->IsMovk(),2,2,4
IsMarking(),2,2,4
target->instance_descriptors()->GetFieldType( descriptor)->NowContains(value),2,2,4
(pc_ + size) <= (buffer_ + buffer_size_),2,2,4
callnew_feedback_slot_ != kInvalidFeedbackSlot,2,2,4
obj->IsOrderedHashTable(),2,2,4
pc_offset() < buffer_size_,2,2,4
(lhs_.is(r0) && rhs_.is(r1)) || (lhs_.is(r1) && rhs_.is(r0)),2,2,4
left_shift <= 4,2,2,4
"1, level_",2,2,4
!result_.is(object_),2,2,4
base_offset_value >= 0,2,2,4
ScratchRegisterBits::is_valid(scratch_.code()),2,2,4
page->owner() == owner(),2,2,4
!r.IsNone(),2,2,4
is_inline_cache_stub() || ic_state() == DEBUG_STUB,2,2,4
IsFlagSet(HAS_PROGRESS_BAR),2,2,4
reg == 0 || id == Debug::k_register_address,2,2,4
0 <= major && major < 256,2,2,4
str_ + size <= end_,2,2,4
result == GetThreadLocal(key),2,2,4
Assembler::IsBne(first_instruction),2,2,4
IsBlack(markbit),2,2,4
spill_operand_ != NULL,2,2,4
elements_kind < kElementsKindCount,2,2,4
CheckFlag(kFlexibleRepresentation),2,2,4
!is_copy(),2,2,4
!FLAG_gc_greedy || v8::internal::Heap::GarbageCollectionGreedyCheck(),2,2,4
space.IsImmediate(),2,2,4
availablefp_->type() == CPURegister::kFPRegister,2,2,4
index <= 0,2,2,4
instr2->IsPCRelAddressing(),2,2,4
!deoptimization_info_.is_empty(),2,2,4
!index.is(esp) || base.is(esp),2,2,4
SignRegisterBits::is_valid(sign_.code()),2,2,4
map->instance_type() >= FIRST_NONSTRING_TYPE,2,2,4
!SpilledScope::is_spilled(),2,2,4
reinterpret_cast<Object*>(value)->IsSmi(),2,2,4
(extend_ == UXTW) || (extend_ == SXTW) || (extend_ == SXTX),2,2,4
!IsExpressionStackEmpty(),2,2,4
init == NULL || type_ == FOR_LOOP,2,2,4
kSimpleTransitionIndex != kNotFound,2,2,4
(size == kXRegSize) || (size == kWRegSize),2,2,4
Contains(address),2,2,4
!heap_->code_space()->Contains(addr),2,2,4
shift == LSL || shift == LSR || shift == ASR || shift == ROR,2,2,4
Isolate::Current()->debugger_agent_instance() == NULL,2,2,4
Assembler::IsBeq(masm->instr_at(pos)),2,2,4
location->type() == Slot::LOCAL,2,2,4
code_start_ >= 0,2,2,4
Code::GetStrictMode(code->extra_ic_state()) == Code::GetStrictMode(target()->extra_ic_state()),2,2,4
!result->IsReturn() && !result->IsSimulate() && !result->IsDeoptimize(),2,2,4
as_int.Is64Bits(),2,2,4
op->kind() == kOperandKind,2,2,4
!already_compiled_,2,2,4
(first_inobject_property_offset & (kPointerSize - 1)) == 0,2,2,4
HeapObject::cast(obj)->Size() == JSValue::kSize,2,2,4
IsDereferenceAllowed(false),2,2,4
argument_index_ == -1 || index == argument_index_,2,2,4
Assembler::kCallSizeWithoutRelocation == 5 * kInstructionSize,2,2,4
kDynamicDepth <= DepthBits::kMax,2,2,4
cur == index,2,2,4
((reg_size == kXRegSize) && is_uint6(immr)) || ((reg_size == kWRegSize) && is_uint5(immr)),2,2,4
LAST_JS_OBJECT_TYPE == LAST_TYPE,3,1,4
instr_->InputAt(current_) != NULL,2,2,4
adjusted_index >= 0,2,2,4
is_type_recording_unary_op_stub(),2,2,4
new_space_strings_[i] != HEAP->raw_unchecked_null_value(),2,2,4
kShiftBits >= 0,2,2,4
location_ == NULL || !(*location_)->IsFailure(),2,2,4
first <= last,2,2,4
loop_depth_ > 0,2,2,4
"kGeneratorClosed, 0",2,2,4
"IsAddressAligned(result, kAlignment, 0)",2,2,4
recorded_ast_id_ != kNoASTId,2,2,4
"kGeneratorExecuting, kGeneratorClosed",2,2,4
"BUILTIN, kind()",2,2,4
prev->is_valid(),2,2,4
Token::IsCountOp(op),2,2,4
depth >= 0 && depth < stack_height(),2,2,4
value >> kSpaceTagSize == requested,2,2,4
front_ >= rear_,2,2,4
isprint(marker_name[0]) && isprint(marker_name[1]),2,2,4
rd.code() != kSPRegInternalCode,2,2,4
!IsSimpleTransition(),2,2,4
last_reg >= first_reg,2,2,4
type <= LAST_TYPE,2,2,4
reg_code < (sizeof(RegList) * kBitsPerByte),2,2,4
top_of_stack_state_ == NO_TOS_REGISTERS,2,2,4
(OffsetFrom(address) & kObjectAlignmentMask) == 0,2,2,4
is_one_byte_,2,2,4
!already_resolved(),2,2,4
IsOverflowed(),2,2,4
IsImmAddSub(imm),2,2,4
(regoffset_.Is64Bits() || (extend_ != SXTX)),2,2,4
index >= 0 && index < length() && value <= kMaxAsciiCharCode,2,2,4
index >= first_int64_index() && index < first_code_ptr_index(),2,2,4
"0, level_",2,2,4
(SizeLS_offset + SizeLS_width) == (kInstructionSize * 8),2,2,4
name_->Equals(isolate()->heap()->length_string()),2,2,4
capacity <= kMaxCapacity,2,2,4
!field_representation().IsDouble() || !has_transition(),2,2,4
target->data_length_ > 0,2,2,4
!rd.IsSP() && rd.Is64Bits(),2,2,4
std::isnan(num),2,2,4
!IsLinked(),2,2,4
(sizeof(value) == kDRegSize) || (sizeof(value) == kSRegSize),2,2,4
IsBootstrappingOrContext(result),2,2,4
(0 < n) && (n < (sizeof(x) * kBitsPerByte)),2,2,4
!is_array_index(),2,2,4
desc->GetDetails().descriptor_index() <= number_of_descriptors(),2,2,4
(reinterpret_cast<intptr_t>(owner_) & kFailureTagMask) == kFailureTag,2,2,4
this->Object::IsSeqTwoByteString(),2,2,4
t == kUnknown || t == kPrimitive || t == kNumber || t == kInteger32 || t == kSmi || t == kDouble || t == kString || t == kNonPrimitive,2,2,4
(0 < size) && (size <= Page::kMaxHeapObjectSize),2,2,4
pos >= 0,2,2,4
kind() == OPTIMIZED_FUNCTION || kind() == STUB,2,2,4
mode_ == DYNAMIC_LOCAL && local_if_not_shadowed_ != NULL,2,2,4
operand,2,2,4
handle_scope_implementer_,2,2,4
kStartOfLabelLinkChain == 0,2,2,4
(shift_ == LSL) && (shift_amount_ <= 4),2,2,4
offset < frame_size_,2,2,4
!candidate.Is(target),2,2,4
painted_ == kUnpainted,2,2,4
hydrogen()->IsConstantHoleStore() && hydrogen()->value()->representation().IsDouble(),2,2,4
"RETRY_AFTER_GC, type()",2,2,4
HasAssignedIndexAt(index),2,2,4
buffer8_ != NULL && end_ != NULL,2,2,4
"BitsetType::Is(bound->AsBitset(), BitsetType::Lub(*map))",2,2,4
IsSeqString(),2,2,4
"size, answer->Size()",2,2,4
IsExtendedRegister(),2,2,4
this->Object::IsExternalTwoByteString(),2,2,4
IsArithmeticCompareOp(op),2,2,4
this->language_mode() == CLASSIC_MODE || this->language_mode() == language_mode || language_mode == EXTENDED_MODE,2,2,4
flat.IsAscii(),2,2,4
IsOptimizable(),2,2,4
V8::UseCrankshaft(),2,2,4
num >= kFirstAllocatedRegister,2,2,4
!is_generator(),2,2,4
!scratch_.is(result_),2,2,4
"instr->Bits(27, 25) == 0x7",2,2,4
Heap::linear_allocation_scope_depth_ >= 0,2,2,4
variable != NULL,2,2,4
successor1_ == NULL && successor != NULL,2,2,4
instr->following(3)->IsMovk(),2,2,4
sizeof(argument) == sizeof(bits_),2,2,4
is_uint16(imm),2,2,4
cgen_->in_spilled_code(),2,2,4
HasFastTypeElements(),2,2,4
(reg_type != kNoRegister) || (reg_size == 0),2,2,4
offset.IsExtendedRegister(),2,2,4
instr1->IsPCRelAddressing() || instr1->IsUncondBranchImm(),2,2,4
"NULL, null",2,2,4
((reg_size == kXRegSizeInBits) && is_uint6(imms)) || ((reg_size == kWRegSizeInBits) && is_uint5(imms)),2,2,4
"this, codegen_->nesting_stack_",2,2,4
capacity > 0,2,2,4
prev_ != NULL || !debug->is_interrupt_pending(DEBUGBREAK),2,2,4
!HasFastElements(),2,2,4
(buffer8_ == NULL && end_ == NULL) || buffer8_ < end_,2,2,4
top_page->is_valid(),2,2,4
!IsLiteralSite(),2,2,4
result->is_inline_cache_stub(),2,2,4
array->map() != Heap::raw_unchecked_fixed_cow_array_map(),2,2,4
OperandInitializer<T>::kIsIntType,2,2,4
optimizing_compiler_thread_ == NULL || FLAG_concurrent_recompilation,2,2,4
IsTaggedPosition(val),2,2,4
handle_.is_null(),2,2,4
!HEAP->InNewSpace(desc->GetValue()),2,2,4
this->portion() == portion,2,2,4
JSWeakCollection::kNextOffset + kPointerSize == JSWeakCollection::kSize,2,2,4
!object->IsUninitialized(),2,2,4
IsNone(),2,2,4
rn.code() != kSPRegInternalCode,2,2,4
(buffer_end_ - buffer_) >= 2,2,2,4
((type == CPURegister::kRegister) && (last_reg < kNumberOfRegisters)) || ((type == CPURegister::kFPRegister) && (last_reg < kNumberOfFPRegisters)),2,2,4
available_->type() == CPURegister::kRegister,2,2,4
is_uint12(imm12),2,2,4
HEAP->IsAllocationAllowed(),2,2,4
instr2->IsPCRelAddressing() || instr2->IsUncondBranchImm(),2,2,4
kind() == STUB || kind() == HANDLER || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == STORE_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == KEYED_CALL_IC || kind() == TO_BOOLEAN_IC,2,2,4
index >= 0 && index < first_ptr_index(),2,2,4
kNotStringTag != 0,2,2,4
!HEAP->IsAllocationAllowed(),2,2,4
extra_ic_state == kNoExtraICState || (kind == CALL_IC && (ic_state == MONOMORPHIC || ic_state == MONOMORPHIC_PROTOTYPE_FAILURE)),2,2,4
ScheduleValid(),2,2,4
name != NULL,2,2,4
pos_.IsValid(),2,2,4
children_index_ >= 0,2,2,4
RelocInfo::IsRuntimeEntry(rmode),2,2,4
IntRegisterBits::is_valid(the_int_.code()),2,2,4
rt.code() != kSPRegInternalCode,2,2,4
Marking::IsBlack(mark_bit),2,2,4
!is_reg(),2,2,4
type_ == kContextVariable || type_ == kProperty || type_ == kInternal || type_ == kShortcut || type_ == kWeak,2,2,4
is_uint2(shift),2,2,4
Smi::IsValid(value << kFailureTypeTagSize),2,2,4
"BitsetType::Is(bound->AsBitset(), BitsetType::Lub(*value))",2,2,4
1 << kPointerSizeLog2 == kPointerSize,2,2,4
Code::kArgumentsBits + 2 <= kStubMinorKeyBits,2,2,4
t->is_bitset() || t->is_class() || t->is_constant() || t->is_union(),2,2,4
compact_offset < (1 << kForwardingOffsetBits),2,2,4
spill_operand_->IsUnallocated(),2,2,4
IsMovW(Memory::int32_at(candidate)) && IsMovT(Memory::int32_at(candidate + kInstrSize)),2,2,4
fun == NULL || mode == VAR || mode == LET,2,2,4
mode != ALLOW_COPIED_DOUBLE_ELEMENTS,2,2,4
instr1->IsPCRelAddressing() && (instr1->Rd() == xzr.code()),2,2,4
"RoundUp(len, kInstructionSize) <= static_cast<size_t>(kGap)",2,2,4
fd.Is32Bits(),2,2,4
!requires_slow_elements(),2,2,4
NativeAllocationChecker::allocation_allowed(),2,2,4
num < kFirstAllocatedRegister || num >= kFirstAllocatedRegister + kNumberOfAllocatedRegisters,2,2,4
!code_.is(result_),2,2,4
"ASCII, state_",2,2,4
!scratch_.is(object_),2,2,4
object->IsString() || object->IsNumber() || object->IsBoolean(),2,2,4
index >= first_code_ptr_index() && index < first_heap_ptr_index(),2,2,4
sizeof(int_t) <= 8,2,2,4
size_in_bytes >= kHeaderSize,2,2,4
!block_buffer_growth_,2,2,4
size,2,2,4
cur != index,2,2,4
(pc_ + sizeof(instruction)) <= (buffer_ + buffer_size_),2,2,4
IsPowerOf2(sp_alignment),2,2,4
old_space_strings_[i] != Heap::raw_unchecked_null_value(),2,2,4
(dst >= (src + size_in_words)) || ((OffsetFrom(reinterpret_cast<Address>(src)) - OffsetFrom(reinterpret_cast<Address>(dst))) >= kPointerSize),2,2,4
deferred_handles_ == NULL,2,2,4
index >= 0 && index < first_code_ptr_index(),2,2,4
!constructor->shared()->IsInobjectSlackTrackingInProgress(),2,2,4
previous_->state_ != EXTERNAL,2,2,4
HasMapValue(),2,2,4
forward_bailout_pending_ == NULL,2,2,4
Next(enqueue_pos_) != dequeue_pos_,2,2,4
value->IsNull() || value->IsJSReceiver(),2,2,4
(mask & (0x80000000u >> (kSmiTagSize - 1))) == 0,4,0,4
"current->next, current->limit",2,2,4
value_->HasFastElements(),2,2,4
IsModule() && IsFrozen(),2,2,4
is_int32(static_cast<int64_t>(Heap::NewSpaceMask())),2,2,4
"callback == Heap::GetScavenger(instance_type(), instance_size())",2,2,4
obj->IsJSValue(),2,2,4
elements_kind < JSObject::kElementsKindCount,2,2,4
JSArray::kPreallocatedArrayElements > 0,2,2,4
!continuation_captured_,2,2,4
(kSmiShift == kWRegSizeInBits) && (kSmiValueSize == kWRegSizeInBits) && (kSmiTag == 0),2,2,4
!src1.is(rdx),2,2,4
block_ != NULL,2,2,4
!src2.is(rax),2,2,4
cgen()->HasValidEntryRegisters(),2,2,4
has_prototype(),2,2,4
"(instr->Bits(27, 24) == 0x8) || (instr->Bits(27, 24) == 0x9) || (instr->Bits(27, 24) == 0xC) || (instr->Bits(27, 24) == 0xD) ",2,2,4
instr->IsSourcePosition(),2,2,4
"Token::ADD, op_",2,2,4
!SitePointsToLiteral(),2,2,4
transition_.is_null(),2,2,4
"!AreAliased(scratch, object, address)",2,2,4
!HasAstId(),2,2,4
!iteration_done_,2,2,4
AllowHeapAllocation::IsAllowed(),2,2,4
is_int32(static_cast<int64_t>(HEAP->NewSpaceMask())),2,2,4
(kAllocatableLowRangeBegin == 0) && (kAllocatableLowRangeEnd == 14) && (kAllocatableHighRangeBegin == 16) && (kAllocatableHighRangeEnd == 29),2,2,4
space->low() <= alloc_info->top && alloc_info->top <= space->high() && alloc_info->limit == space->high(),2,2,4
!HasRegisterAssigned() && !IsSpilled(),2,2,4
num_dropped >= 0,2,2,4
"static_cast<unsigned>(live_byte_count_), size_",2,2,4
Contains(reinterpret_cast<uint8_t*>(address) + size - 1),2,2,4
kXRegSizeInBits == static_cast<unsigned>(kSmiShift + kSmiValueSize),4,0,4
op <= LAST_TOKEN && op >= FIRST_TOKEN,2,2,4
current_hint_operand_ == FirstHint(),2,2,4
sequence_start_ != kNoSequence,2,2,4
num_pending_reloc_info() == 0,2,2,4
this->data()->IsFixedArray(),2,2,4
instr->Bit(28) == 0x1,2,2,4
"IsAligned(offset, kInstructionSize)",2,2,4
(extend == UXTW) || (extend == SXTW) || (extend == SXTX),2,2,4
!heap_->old_data_space()->Contains(addr),2,2,4
SEMANTIC(bound->AsBitset()) == SEMANTIC(BitsetType::kArray),2,2,4
this->Object::IsExternalAsciiString(),2,2,4
!src1.is(src4),2,2,4
IsBranch(),2,2,4
current_index_ < kPartLength,2,2,4
IsAnchor(),2,2,4
result == !HasExternalArrayElements(),2,2,4
rd.Is64Bits() && rn.Is64Bits(),2,2,4
IsValidChunk(chunk_id),2,2,4
IsField(),2,2,4
"instr->Bits(29, 25) == 0x6",2,2,4
kSmiValueSize + kSmiShift == kXRegSizeInBits,2,2,4
i < kNumberOfFlags,2,2,4
array->map() != HEAP->fixed_cow_array_map(),2,2,4
is_class(type) || is_constant(type),2,2,4
JSWeakCollection::kTableOffset + kPointerSize == JSWeakCollection::kNextOffset,2,2,4
value->kind() != Code::FUNCTION || !value->optimizable() || this->code() == Builtins::builtin(Builtins::Illegal) || this->allows_lazy_compilation(),2,2,4
value() > 0.0,2,2,4
function->function_id == Runtime::kCreateObjectLiteral,2,2,4
address.Is64Bits(),2,2,4
map()->has_fast_elements(),2,2,4
isolate_->context() == *context_,2,2,4
shared()->bound(),2,2,4
"check == NO_CHECK || IsAddressAligned(addr, kInstructionSize)",2,2,4
UntagPosition(result) == val,2,2,4
i < input_count_,2,2,4
it.has_next(),2,2,4
object->FitsRepresentation(representation),2,2,4
SlowEquals(canonical),2,2,4
kFirstGeneration < generations_,2,2,4
reg.code() / 2 < kMaxNumAllocatableRegisters,2,2,4
(dump_.flags_ & ~Flags_mask) == 0,2,2,4
!is_inobject(),2,2,4
HasExit(),2,2,4
unit_size == 0 || IsPowerOf2(unit_size),2,2,4
value == ((value << kFailureTypeTagSize) >> kFailureTypeTagSize),2,2,4
(OffsetFrom(address) & Page::kPageAlignmentMask) == 0,2,2,4
is_inline_cache_stub(),2,2,4
heap_->InNewSpace(new_space_strings_[i]),2,2,4
special >= 0,2,2,4
is_uint6(imms),2,2,4
policy == FIXED_SLOT,2,2,4
0 <= index && index < parameters_count(),2,2,4
this->offset() == offset,2,2,4
redirector_ == NULL,2,2,4
frame->is_construct(),2,2,4
frame->is_java_script() || frame->is_arguments_adaptor(),2,2,4
instr->HasResult(),2,2,4
HasFixedRegisterPolicy() || HasFixedDoubleRegisterPolicy(),2,2,4
fun == NULL || mode == Variable::VAR,2,2,4
instr->following(1)->IsMovk(),2,2,4
RuntimeProfiler::IsSomeIsolateInJS(),2,2,4
rt2.code() != kSPRegInternalCode,2,2,4
is_code_target(rmode_) || rmode_ == runtime_entry,2,2,4
reinterpret_cast<Address>(rear_) >= HEAP->new_space()->top(),2,2,4
!is_bound(),2,2,4
anchor_.next_page() != &anchor_,2,2,4
instance_ == NULL,2,2,4
!rt2.IsZero(),2,2,4
prev_ != NULL || !debug->is_interrupt_pending(PREEMPT),2,2,4
original != NULL,2,2,4
!Heap::InNewSpace(old_space_strings_[i]),2,2,4
ExtractICStateFromFlags(result) == ic_state,2,2,4
buffer8_ < end_,2,2,4
"IsAddressAligned(start, MemoryChunk::kAlignment)",2,2,4
!scratch_.is(index_),2,2,4
"MemoryChunk::kSlotsBufferOffset == offsetof(MemoryChunk, slots_buffer_)",2,2,4
policy == FIXED_REGISTER || policy == FIXED_DOUBLE_REGISTER,2,2,4
cur < current->limit,2,2,4
emit_debug_code(),2,2,4
index >= first_ptr_index() && index < first_int32_index(),2,2,4
is_int7(scaled_imm7),2,2,4
obj->IsFixedArray(),2,2,4
get_type(index) == INT32,2,2,4
valid(),2,2,4
!operand->IsUnallocated(),2,2,4
ShouldBeSweptBySweeperThreads(p),2,2,4
!masm->has_frame(),2,2,4
regoffset.Is64Bits() || (extend != SXTX),2,2,4
dst.Is32Bits() && src.Is64Bits(),2,2,4
Heap::gc_state() != Heap::NOT_IN_GC || IsBootstrappingOrGlobalObject(result),2,2,4
reg.IsValid(),2,2,4
is_unary_op_stub(),2,2,4
divider_ != last_,2,2,4
"Heap::InNewSpace(object) || !Heap::InNewSpace(READ_FIELD(object, offset))",2,2,4
Isolate::Current()->external_reference_redirector() == NULL,2,2,4
"isolate_->relocatable_top(), this",2,2,4
merged_index >= 0,2,2,4
ExtractArgumentsCountFromFlags(result) == argc,2,2,4
!ObjectIsDuplicateAt(index),2,2,4
tracer_->indent_ >= 0,2,2,4
ExtractTypeFromFlags(result) == type,2,2,4
canonical->IsInternalizedString(),2,2,4
ShouldBeSweptLazily(p),2,2,4
output_operand_ == NULL,2,2,4
array->IsSortedNoDuplicates(),2,2,4
"0, kFlatAsciiStringMask & (kFlatAsciiStringMask << 3)",2,2,4
inferred_name_.is_null(),2,2,4
location->index() < kPointerSize,2,2,4
!is_ascii_,2,2,4
ArgsInRegistersSupported(),2,2,4
Heap::InNewSpace(new_space_strings_[i]),2,2,4
value->HasValidElements(),2,2,4
!IsMarked(),2,2,4
reg.code() < kMaxNumAllocatableRegisters,2,2,4
"BitsetType::Is(bound->AsBitset(), BitsetType::kFunction)",2,2,4
!Serializer::enabled(),2,2,4
!isolate()->optimizing_compiler_thread()->IsOptimizerThread(),2,2,4
is_const_pool_blocked(),2,2,4
!src3.is(src4),2,2,4
(position_ & 0x1) == 0,2,2,4
frame->is_exit(),2,2,4
!(details_.type() == CALLBACKS && !IsFound()),2,2,4
Top::has_pending_exception(),2,2,4
is_code_target(rmode_),2,2,4
index >= first_int64_index() && index < first_ptr_index(),2,2,4
object.Is64Bits(),2,2,4
extra_ic_state == kNoExtraICState || (kind == CALL_IC && (ic_state == MONOMORPHIC || ic_state == MONOMORPHIC_PROTOTYPE_FAILURE)) || (kind == STORE_IC) || (kind == KEYED_STORE_IC) || (kind == KEYED_EXTERNAL_ARRAY_STORE_IC),2,2,4
is_uint1(shift_amount),2,2,4
ExtractKindFromFlags(flags) != CALL_IC || ExtractArgumentsCountFromFlags(flags) >= 0,2,2,4
pc_offset() >= label->pos(),2,2,4
old_target->extra_ic_state() == target->extra_ic_state(),2,2,4
!from.IsNone() && !to.IsNone(),2,2,4
target->is_inline_cache_stub() || target->is_compare_ic_stub(),2,2,4
block_buffer_growth_,2,2,4
"(instr->Bits(27, 24) == 0x4) || (instr->Bits(27, 24) == 0x5) || (instr->Bits(27, 24) == 0x6) || (instr->Bits(27, 24) == 0x7) ",2,2,4
has_major_key(),2,2,4
"!AreAliased(scratch0_, object_, address_, ecx)",2,2,4
!right->IsConstant() || (!HConstant::cast(right)->HasInteger32Value() || HConstant::cast(right)->HasSmiValue()),2,2,4
c0_ == '!',2,2,4
shift < reg_size,2,2,4
is_header_index(),2,2,4
!heap_->InNewSpace(string),2,2,4
instr2->IsPCRelAddressing() && (instr2->Rd() == xzr.code()),2,2,4
!heap->InNewSpace(heap->raw_unchecked_empty_fixed_array()),2,2,4
(string != NULL) || (not_string != NULL),2,2,4
"instr->Bits(27, 24) == 0x3",2,2,4
generator()->has_valid_frame(),2,2,4
lookup_type_ == TRANSITION_TYPE,2,2,4
representation_.IsNone() && !r.IsNone(),2,2,4
type_ == FLOAT,2,2,4
"instr->Bits(27, 24) == 0x2",2,2,4
(kAllocatableLowRangeBegin == 0) && (kAllocatableLowRangeEnd == 15) && (kAllocatableHighRangeBegin == 18) && (kAllocatableHighRangeEnd == 24) && (kAllocatableContext == 27),2,2,4
-1 <= index && index < param_count,2,2,4
is_reg(),2,2,4
map_page_index,2,2,4
rmode_ == external_reference,2,2,4
final_section_ == EXTENDED_SECTION,2,2,4
is_valid(value),2,2,4
cur_addr_ == cur_limit_,2,2,4
HEAP->InToSpace(object),2,2,4
this->length() > kFirstIndex || this == HEAP->empty_descriptor_array(),2,2,4
value >= 0 && value <= 0xFFFF,2,2,4
raw_inferred_name_== NULL || raw_inferred_name_->IsEmpty(),2,2,4
SEMANTIC(bound->AsBitset() | BitsetType::kNumber) == SEMANTIC(BitsetType::kNumber),2,2,4
!deferred_key.is_null(),2,2,4
kPaddingSize >= 0,2,2,4
"IsAligned<size_t>(byte_size, kPointerSize)",2,2,4
((kind == FAST_ELEMENTS || kind == FAST_SMI_ONLY_ELEMENTS) && (map == GetHeap()->fixed_array_map() || map == GetHeap()->fixed_cow_array_map())) || (kind == FAST_DOUBLE_ELEMENTS && fixed_array->IsFixedDoubleArray()) || (kind == DICTIONARY_ELEMENTS && fixed_array->IsFixedArray() && fixed_array->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),2,2,4
scratch_.is(r5),2,2,4
0 <= index && index < expression_count(),2,2,4
this->language_mode() == SLOPPY_MODE || this->language_mode() == language_mode || language_mode == EXTENDED_MODE,2,2,4
as_int.Is32Bits(),2,2,4
node,2,2,4
HEAP->InFromSpace(object),2,2,4
index >= 0 && index < buffer->length(),2,2,4
type.IsHeapObject(),2,2,4
"offset_is_type(offset, INT64)",2,2,4
old_length < length(),2,2,4
uses_.length() == 0,2,2,4
!maybe->IsFailure(),2,2,4
heap->InFromSpace(object),2,2,4
IsFlat(),2,2,4
kind() == COMPARE_IC || kind() == BINARY_OP_IC,2,2,4
Isolate::Current()->AllowHandleDereference(),2,2,4
is_uint15(imm15),2,2,4
args[index]->IsNumber(),4,0,4
"instr->Bits(27, 24) == 0x0",2,2,4
label->is_bound(),2,2,4
!is_full(),2,2,4
!src2.is(src4),2,2,4
"heap->InNewSpace(object) || !heap->InNewSpace(READ_FIELD(object, offset)) || Page::FromAddress(object->address())-> IsRegionDirty(object->address() + offset)",2,2,4
value()->HasFastElements(),2,2,4
Marking::IsGrey(Marking::MarkBitFrom(object)),2,2,4
math_fn <= max_math_id_number(),2,2,4
map()->has_fast_elements() == (value->map() == Heap::fixed_array_map() || value->map() == Heap::fixed_cow_array_map()),2,2,4
index < parameter_count(),2,2,4
rm_.is(no_reg),2,2,4
"BitsetType::Is(bound->AsBitset(), BitsetType::kNumber)",2,2,4
Sign() > 0,2,2,4
instr->following(4)->IsBranchAndLinkToRegister(),2,2,4
!Marking::IsImpossible(mark_bit),2,2,4
target()->is_keyed_store_stub(),2,2,4
stack_height() > 0,2,2,4
!HasFastProperties(),2,2,4
inside_with_level_ <= nesting_level_,2,2,4
!rn.IsZero(),2,2,4
index < length(),2,2,4
!fixed_right_arg_.has_value || can_encode_arg_value(fixed_right_arg_.value),2,2,4
isolate->has_pending_exception(),2,2,4
size >= 0,2,2,4
length_ <= kMaximumClonedLength,2,2,4
(value & ~(kPointerSize - 1)) == value,2,2,4
!is_finished(),2,2,4
cell_index_ == Bitmap::IndexToCell(Bitmap::CellAlignIndex( chunk_->AddressToMarkbitIndex(cell_base_))),2,2,4
sizeof(pointer) == sizeof(uintptr_t),2,2,4
Heap::IsAllocationAllowed(),2,2,4
0 <= i && i <= struct_length(structured),2,2,4
this->strict_mode() == SLOPPY || this->strict_mode() == strict_mode,2,2,4
HasFastElements(),2,2,4
!this->is_empty(),2,2,4
op == Token::BIT_AND || op == Token::BIT_OR || op == Token::BIT_XOR,2,2,4
can_encode_arg_value(value),2,2,4
value.Is64Bits(),2,2,4
!type->is_union(),2,2,4
isolate->current_code_generator() != NULL,2,2,4
!heap_->cell_space()->Contains(addr),2,2,4
index >= 0 && (index * kIntSize) < this->length(),2,2,4
transitions() != transition_array,2,2,4
!should_postpone_interrupts(lock),2,2,4
code_end_ > 0,2,2,4
is_uint16(imm16),2,2,4
!left->IsConstant() || (!HConstant::cast(left)->HasInteger32Value() || HConstant::cast(left)->HasSmiValue()),2,2,4
StorageField::is_valid(index),2,2,4
mode_ == 0 || mode_ == 1,2,2,4
(scale >= 0) && (scale <= (64 - kSmiValueSize)),2,2,4
capacity >= 0,2,2,4
"kInObjectLiteral, kIsInObjectLiteral",2,2,4
store_mode != PREINITIALIZING_STORE || obj->IsAllocate() || obj->IsInnerAllocatedObject(),2,2,4
prev_ != NULL || !Debug::is_interrupt_pending(DEBUGBREAK),2,2,4
argc <= Code::kMaxArguments,2,2,4
!heap->InNewSpace(heap->undefined_value()),2,2,4
try_catch_handler_ == NULL,2,2,4
index >= 0 && index < size_,2,2,4
IsStub(),2,2,4
!has_transition(),2,2,4
"AreSameSizeAndType(reg1, reg2, reg3, reg4)",2,2,4
(kSmiShift + kSmiValueSize) == kXRegSizeInBits,2,2,4
number->IsHeapNumber(),2,2,4
rm.code() != kSPRegInternalCode,2,2,4
(offset % kPointerSize) == 0,2,2,4
AllowHandleAllocation::IsAllowed(),2,2,4
base_offset_ >= 0,2,2,4
is_shadowing_ && is_unused(),2,2,4
isolate != NULL,2,2,4
variable->IsStackLocal(),2,2,4
IsPowerOf2(alignment),2,2,4
kind() == STUB || kind() == HANDLER || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC || kind() == KEYED_CALL_IC || kind() == TO_BOOLEAN_IC,2,2,4
(FIRST_NOP_MARKER <= n) && (n <= LAST_NOP_MARKER),2,2,4
"IsAligned(size_in_bytes, kPointerSize)",2,2,4
!OptimizingCompilerThread::IsOptimizerThread(isolate()),2,2,4
IsFPRegister() || IsNone(),2,2,4
is_uint6(immr),2,2,4
type->IsHeapObject(),2,2,4
instr->IsGapMoves(),2,2,4
"c0_, '{'",2,2,4
!Isolate::Current()->heap()->InNewSpace(value),2,2,4
reg.code() < 4 || reg.code() == 7,2,2,4
!string_.is_null(),2,2,4
(space).page_low() <= (info).top && (info).top <= (space).page_high() && (info).limit <= (space).page_high(),2,2,4
fpcr().RMode() == FPTieEven,2,2,4
!IsSpecial(),2,2,4
elements()->map() == Heap::fixed_array_map() || elements()->map() == Heap::fixed_cow_array_map(),2,2,4
false_destination != NULL,2,2,4
(reg_size == kXRegSizeInBits) || (bitn == 0),2,2,4
HasObjectMap(),2,2,4
sequence_length < new_chunk.length(),2,2,4
Assembler::IsLdrPpImmediateOffset(Memory::int32_at(pc_)),2,2,4
index == this->dictionary_index(),2,2,4
Assembler::IsBne(second_instruction),2,2,4
type_ == INT,2,2,4
reinterpret_cast<Address>(*location_) != kHandleZapValue,2,2,4
(kConstantPoolOffset & kPointerAlignmentMask) == 0,2,2,4
"kAccessorFunction, kIsAccessorFunction",2,2,4
0 <= i && i < length_,2,2,4
elements()->map() == GetHeap()->fixed_array_map() || elements()->map() == GetHeap()->fixed_cow_array_map(),2,2,4
"NULL, replace_to->first_use_",2,2,4
node->IsJoinNode(),2,2,4
0,2,2,4
!Heap::IsAllocationAllowed(),2,2,4
is_inline_cache_stub() || result == UNINITIALIZED || result == DEBUG_BREAK || result == DEBUG_PREPARE_STEP_IN,2,2,4
SizeInBits() % 8 == 0,2,2,4
instr->Bit(30) == 0,2,2,4
TopLevel()->HasAllocatedSpillOperand(),2,2,4
x <= 0x80000000u,2,2,4
0 <= index && index < OperandCount(),2,2,4
answer <= 7,2,2,4
object->IsSmi(),2,2,4
!closure.is_null(),2,2,4
"BitsetType::Is(bound->AsBitset(), BitsetType::kArray)",2,2,4
node->IsBlockNode(),2,2,4
get_type(index) == HEAP_PTR,2,2,4
frame->is_entry(),2,2,4
i >= 0,2,2,4
transition_number == kSimpleTransitionIndex,2,2,4
true_destination != NULL && false_destination != NULL,2,2,4
catch_var->AsVariableProxy() != NULL,2,2,4
"(instr->Bits(27, 24) == 0xE) || (instr->Bits(27, 24) == 0xF) ",2,2,4
HasFixedSlotPolicy(),2,2,4
reg.is(accumulator0()) || reg.is(accumulator1()),2,2,4
(reg_type != kNoRegister) || (reg_code == 0),2,2,4
values[T::kIsolateIndex]->IsSmi(),2,2,4
(reinterpret_cast<int>(address) & kHeapObjectTagMask) == 0,2,2,4
index < total_count(),2,2,4
!TmpList()->IncludesAliasOf(stack_pointer),2,2,4
sizeof(T) == sizeof(pc_),2,2,4
HasInteger32Value(),2,2,4
Smi::kMaxValue <= std::numeric_limits<size_t>::max(),2,2,4
function_ == NULL,2,2,4
Assembler::IsLdrPpImmediateOffset(Memory::int32_at(pc)),2,2,4
object->IsSerializedScopeInfo(),2,2,4
type() == RETRY_AFTER_GC,2,2,4
value->IsUndefined() || value->IsContext(),2,2,4
heap_->always_allocate_scope_depth_ == 0,2,2,4
recorded_ast_id_ == kNoASTId,2,2,4
frame->is_internal(),2,2,4
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC,2,2,4
"cmp(&data_[i - 1], &data_[i]) <= 0",2,2,4
obj != heap_->the_hole_value(),2,2,4
(data_ & kTagMask) != kEmptyTag,2,2,4
is_simple_api_call_,2,2,4
!src2.is(rdx),2,2,4
kind_ != kExternal,2,2,4
body_size,2,2,4
"(instr->Bits(27, 24) == 0xA) || (instr->Bits(27, 24) == 0xB) ",2,2,4
!regoffset_.IsSP(),2,2,4
HeapNumberRegisterBits::is_valid(the_heap_number_.code()),2,2,4
index < register_param_count_,2,2,4
alloc_info->VerifyPagedAllocation(),2,2,4
get_type(index) == CODE_PTR,2,2,4
obj != HEAP->the_hole_value(),2,2,4
(offset & 1) == 0,2,2,4
raw_inferred_name_ == NULL,2,2,4
instr->following(1)->IsBranchAndLinkToRegister(),2,2,4
location->index() < kBitsPerPointer - 1,2,2,4
regoffset.Is64Bits() && !regoffset.IsSP(),2,2,4
isolate->heap()->always_allocate_scope_depth_ == 0,2,2,4
-1 <= index && index < parameter_count_,2,2,4
"String::TWO_BYTE_ENCODING, encoding()",2,2,4
!has_osr_entry_,2,2,4
is_int9(imm9),2,2,4
pos < source_length_,2,2,4
array->map()->instance_type() == EXTERNAL_FLOAT_ARRAY_TYPE,2,2,4
canonical->HasHashCode(),2,2,4
expected.reg().is(rbx),2,2,4
object_size > 0,2,2,4
current_ != NULL,2,2,4
t == kUnknownType || t == kNumberType || t == kInteger32Type || t == kSmiType || t == kHeapNumberType,2,2,4
IsRegister() || IsNone(),2,2,4
answer >= 0,2,2,4
desc->GetDetails().descriptor_index() > 0,2,2,4
strlen(marker_name) == 2,2,2,4
Marking::Color(array) == Marking::WHITE_OBJECT,2,2,4
num - kFirstAllocatedRegister < kNumberOfAllocatedRegisters,2,2,4
left != NULL && right != NULL,2,2,4
current->IsSmi() || current->IsTheHole(),2,2,4
"kStringMapsSize, string_maps_.size()",2,2,4
!representation_.IsNone(),2,2,4
!regoffset.IsSP(),2,2,4
SmiValuesAre31Bits(),2,2,4
known_smi_map < (1u << count),2,2,4
is_extended_layout(),2,2,4
r >= 0 && r < kNumberOfAllocatedRegisters,2,2,4
!Heap::InNewSpace(string),2,2,4
!too_late_to_enable_now_,2,2,4
Smi::IsValid(info),2,2,4
Token::IsUnaryOp(op),2,2,4
IsForwardingAddress(),2,2,4
length >= first_expression,2,2,4
is_uint16(data),2,2,4
special < kNumberOfSpecials,2,2,4
constructor()->has_initial_map(),2,2,4
other->IsJSObject(),2,2,4
(size_in_bits % kBitsPerByte) == 0,2,2,4
!IsSpilled(),2,2,4
"ascii_hint != String::ASCII || String::IsAscii(str.start(), str.length())",2,2,4
LAST_TOKEN - FIRST_TOKEN < (1 << 5),2,2,4
!CpuFeatures::IsSafeForSnapshot(SSE2),2,2,4
(reinterpret_cast<intptr_t>(space) & kFailureTagMask) == 0,2,2,4
odd_number_.is(r4),2,2,4
entry_block_ == NULL,2,2,4
is_uint6(bit_pos),2,2,4
ExtractKindFromFlags(result) == kind,2,2,4
i == Isolate::Current(),2,2,4
frame->is_entry_construct(),2,2,4
 JSArrayBuffer::kWeakFirstArrayOffset == JSArrayBuffer::kWeakNextOffset + kPointerSize,2,2,4
current->IsSmi() || current == heap->the_hole_value(),2,2,4
cur < current_.limit,2,2,4
"instr->Bits(27, 24) == 0x1",2,2,4
!resource->is_reserved_,2,2,4
0 <= i,2,2,4
sinfo_size,2,2,4
value->IsAllocate(),2,2,4
is_array_index(),2,2,4
Isolate::Current()->zone_allow_allocation(),2,2,4
var != NULL,2,2,4
has_instance_prototype(),2,2,4
reg.Is64Bits() || ((extend != SXTX) && (extend != UXTX)),2,2,4
key->IsUniqueName(),2,2,4
sp_alignment >= 16,2,2,4
is_call_stub() || kind() == STUB,2,2,4
HasFastSmiOrObjectElements(),2,2,4
!HEAP->InNewSpace(desc->GetKey()),2,2,4
IsInternalizedString(),2,2,4
Dictionary::kEntrySize == 3,3,1,4
current_.level > 0,2,2,4
true_destination != NULL,2,2,4
!value->IsHeapObject() || !Heap::InNewSpace(value),2,2,4
x.rmode_ == RelocInfo::NONE,2,2,4
(pc_offset() + kGap) == buffer_size_,2,2,4
IsCodeStubOrIC(),2,2,4
mask_bits_.is(r3),2,2,4
this->fixed_slot_index() == index,2,2,4
is_to_boolean_ic_stub(),2,2,4
reg.Is32Bits() || (shift_amount < kXRegSizeInBits),2,2,4
occupancy_ < capacity_,2,2,4
!desc->GetDetails().representation().IsNone(),2,2,4
kFirstTypeCode <= type && type < kTypeCodeCount,2,2,4
map_page->mc_page_index,2,2,4
not_smi_label,2,2,4
(reg_size == kXRegSizeInBits) || is_uint6(imms + 3),2,2,4
"String::IsAscii(string->GetChars(), string->length())",2,2,4
c == expected,2,2,4
MAP_SPACE == space,2,2,4
is_immediate(),2,2,4
context->IsContext(),2,2,4
length() >= kFirstIndex || IsEmpty(),2,2,4
(0 <= index) && (index <= MapSpace::kMaxMapPageIndex),2,2,4
map()->has_fast_elements() == (value->map() == GetHeap()->fixed_array_map() || value->map() == GetHeap()->fixed_cow_array_map()),2,2,4
register_index >= 0,2,2,4
0 <= i && i < structured->length,2,2,4
is_uint5(imm),2,2,4
"BitsetType::Is( bound->AsBitset(), BitsetType::kInternal & BitsetType::kTaggedPtr)",2,2,4
type_ == SMI,2,2,4
"Min(dst, src) + num_words <= Max(dst, src)",2,2,4
!rd.IsSP(),2,2,4
index >= kInvalidSlotNumber,2,2,4
length() > kFirstIndex || IsEmpty(),2,2,4
!map->is_deprecated(),2,2,4
(reg.code() - 2) < (kMaxNumAllocatableRegisters - 1) || reg.is(from_code(kCpRegister)),2,2,4
index <= kIndexMask,2,2,4
!HEAP->InNewSpace(HEAP->the_hole_value()),2,2,4
kInternalizedTag != 0,2,2,4
reg.is_valid() && !reg.is(esp) && !reg.is(ebp),2,2,4
yield_kind() == kDelegating,2,2,4
array->map() != array->GetHeap()->fixed_cow_array_map(),2,2,4
reg.Is64Bits() || (shift_amount < kWRegSizeInBits),2,2,4
ISOLATE->allow_handle_deref(),2,2,4
UsesSeed,2,2,4
!constructor_initial_map_.is_null(),2,2,4
obj != HEAP->raw_unchecked_the_hole_value(),2,2,4
t == NULL_TYPE || t == UNDEFINED || t == THE_HOLE,2,2,4
shift_ == LSL,2,2,4
"IsAligned(reinterpret_cast<intptr_t>(list), kPointerAlignment)",2,2,4
old_space_strings_[i] != HEAP->raw_unchecked_null_value(),2,2,4
buffer_cursor_ > raw_data_,2,2,4
shift_distance_.is(r9),2,2,4
Smi::cast(code)->value() == StackHandler::kCodeNotPresent,2,2,4
!(FLAG_track_allocation_sites && override_mode == DISABLE_ALLOCATION_SITES) || AllocationSite::GetMode(kind) == TRACK_ALLOCATION_SITE,2,2,4
IsSortedNoDuplicates(),2,2,4
pc_ < (buffer_ + buffer_size_),2,2,4
"length_, new_capacity",2,2,4
!HeapObject::cast(obj)->GetHeap()->InNewSpace(obj),2,2,4
n < 31,2,2,4
sizeof(kFP64SignallingNaN) == sizeof(bits_),2,2,4
!AllowHeapAllocation::IsAllowed(),2,2,4
RelocInfo::IsNone(x.rmode_),2,2,4
IsFastSmiOrObjectElementsKind(elements_kind) || IsFastDoubleElementsKind(elements_kind),2,2,4
PropertyDetails::IsValidIndex(index),2,2,4
IsKeyword(),2,2,4
unescaped_length <= String::kMaxLength,2,2,4
(IsFastSmiOrObjectElementsKind(kind) && (map == GetHeap()->fixed_array_map() || map == GetHeap()->fixed_cow_array_map())) || (IsFastDoubleElementsKind(kind) && (fixed_array->IsFixedDoubleArray() || fixed_array == GetHeap()->empty_fixed_array())) || (kind == DICTIONARY_ELEMENTS && fixed_array->IsFixedArray() && fixed_array->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),2,2,4
ra.code() != kSPRegInternalCode,2,2,4
has_error_,2,2,4
t == kUnknown || t == kNumber || t == kInteger32 || t == kSmi || t == kDouble,2,2,4
value->kind() != Code::OPTIMIZED_FUNCTION,2,2,4
sizeof(XMMRegister) == sizeof(IntelDoubleRegister),2,2,4
code()->kind() == Code::BUILTIN,2,2,4
level >= 0 && level <= kMaxLoopNestingMarker,2,2,4
boilerplate->IsBoilerplate(),2,2,4
"Code::kPrologueOffsetNotSet, prologue_offset_",2,2,4
pattern.length() > 1,2,2,4
name->HasHashCode(),2,2,4
slots_buffer_ == NULL,2,2,4
position != RelocInfo::kNoPosition,2,2,4
location->index() < kBitsPerPointer,2,2,4
ticks_buffer_is_initialized_ && ticks_buffer_is_empty_,2,2,4
"IsAligned(reinterpret_cast<uintptr_t>(pc_), kInstructionSize)",2,2,4
type_ == BOOL,2,2,4
prev_ != NULL || !Debug::is_interrupt_pending(PREEMPT),2,2,4
is_uint6(amount),2,2,4
HasDependency(),2,2,4
!range_poisoned_,2,2,4
type() == JAVA_SCRIPT,2,2,4
!result->IsSimulate(),2,2,4
"String::Equals(isolate()->factory()->length_string(), name_)",2,2,4
0 <= index && index <= length_,2,2,4
code_ < 16,2,2,4
!heap_->InNewSpace(old_space_strings_[i]),2,2,4
frame->is_arguments_adaptor(),2,2,4
code_end_ >= code_start_,2,2,4
this->Object::IsSeqAsciiString(),2,2,4
isBracketStartOpcode(*opcodePtr) || *opcodePtr == OP_ALT,2,2,4
!reg.is(kLithiumScratchDouble),2,2,4
!HEAP->InNewSpace(heap->null_value()),2,2,4
Assembler::IsBne(masm->instr_at(pos)),2,2,4
IsMarked(),2,2,4
SEMANTIC(bound->AsBitset()) == SEMANTIC(BitsetType::kFunction),2,2,4
IsRegisterOffset(),2,2,4
static_cast<uint64_t>(size) == SizeOfCodeGeneratedSince(label),2,2,4
value->IsObjectLiteral(),2,2,4
next == NULL || type_ == FOR_LOOP,2,2,4
values[T::kHolderIndex]->IsHeapObject(),2,2,4
fpcr().FZ() == 0,2,2,4
component == ACCESSOR_GETTER || component == ACCESSOR_SETTER,2,2,4
!seq_string.is_null(),2,2,4
"kPrologueOffsetNotSet, prologue_offset_",2,2,4
sizeof(for_sizeof().s_[0]) == kSRegSize,2,1,3
(static_cast<int32_t>(-1) >> 1) == -1,2,1,3
(kConsStringTag & kIsIndirectStringMask) == kIsIndirectStringTag,2,1,3
FIRST_FAST_ELEMENTS_KIND == 0,2,1,3
kEntriesPerBucket == -kHashMask,2,1,3
SharedFunctionInfo::kNameOffset + kPointerSize == SharedFunctionInfo::kCodeOffset,2,1,3
sizeof(instruction) == kInstructionSize,2,1,3
String::kMaxLength < kMaxInt,2,1,3
FunctionKind::functionKind == 1 << (compilerFunctionKind - kFunctionKind),2,1,3
(kEntriesPerBucket & (kEntriesPerBucket - 1)) == 0,2,1,3
sizeof(for_sizeof().d_[0]) == kXRegSize,2,1,3
kProtoTransitionHeaderSize == 1,2,1,3
SharedFunctionInfo::kCodeOffset + kPointerSize == SharedFunctionInfo::kOptimizedCodeMapOffset,2,1,3
sizeof(CPURegister) == sizeof(FPRegister),2,1,3
kClassConstructorBitsWithinByte < (1 << kBitsPerByte),2,1,3
kArrayIndexLengthBits > 0,2,1,3
sizeof(bits) == sizeof(double_value_),2,1,3
kTransitionSize == 2,2,1,3
kNonWeakFieldsEndOffset == kCodeEntryOffset,2,1,3
"kConciseMethod, kIsConciseMethod",2,1,3
LAST_FUNCTION_TYPE == LAST_TYPE,2,1,3
(kFunctionKind % kBitsPerByte) == 0,2,1,3
SharedFunctionInfo::kCompilerHintsCount <= SharedFunctionInfo::kCompilerHintsSize * kBitsPerByte,2,1,3
kStringTag == 0,2,1,3
(kExternalStringTag & kIsIndirectStringMask) == 0,2,1,3
sizeof(for_sizeof().x_[0]) == kXRegSize,2,1,3
LAST_ALLOCATION_SITE_OVERRIDE_MODE == 1,2,1,3
sizeof(for_sizeof().w_[0]) == kWRegSize,2,1,3
t,2,1,3
kCodeEntryOffset + kPointerSize == kNextFunctionLinkOffset,2,1,3
LAST_TYPE == LAST_JS_OBJECT_TYPE,2,1,3
kJSSPCode == 28,2,1,3
Assembler::kCallSizeWithRelocation == 2 * kInstructionSize,2,1,3
(Map::kInstanceTypeAndBitFieldOffset & 1) == 0,2,1,3
"kGeneratorFunction, kIsGenerator",2,1,3
kNextFunctionLinkOffset + kPointerSize == kSize,2,1,3
sizeof(Value*) == sizeof(void*),2,1,3
NUMBER_OF_SLOT_TYPES < 8,2,1,3
kSpaceTagSize + kPageSizeBits <= 32,2,1,3
"kSubclassConstructor, kIsSubclassConstructor",2,1,3
kind() == STUB || kind() == COMPILED_STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == TO_BOOLEAN_IC,2,1,3
"kBaseConstructor, kIsBaseConstructor",2,1,3
kElementsKindCount <= (1 << kBitsForElementsKind),2,1,3
(static_cast<uint32_t>(-1) >> 1) == 0x7FFFFFFF,2,1,3
kNoKnownSuccessorIndex + kInternalKnownSuccessorOffset >= 0,2,1,3
sizeof(for_sizeof().s_[0]) == kWRegSize,2,1,3
(kBitsForElementsKind + kBitsForHoleMode + kBitsForBaseOffset + kBitsForIsDehoisted) <= sizeof(uint32_t) * 8,2,1,3
kVisitorIdCount <= 256,2,1,3
(kSlicedStringTag & kIsIndirectStringMask) == kIsIndirectStringTag,2,1,3
FIRST_PRIMITIVE_TYPE == FIRST_TYPE,2,1,3
"kDefaultConstructor, kIsDefaultConstructor",2,1,3
Page::kPageSize % kRegionSize == 0,2,1,3
(reg_zero == (reg_not_zero ^ 1)) && (reg_bit_clear == (reg_bit_set ^ 1)) && (always == (never ^ 1)),2,1,3
"kArrowFunction, kIsArrow",2,1,3
static_cast<uint32_t>(IntrinsicId::kIdCount) <= kMaxUInt8,2,1,3
sizeof(Key*) == sizeof(void*),2,1,3
kKindFieldWidth == 3,2,1,3
"MemoryChunk::kOldToNewSlotsOffset == offsetof(MemoryChunk, old_to_new_slots_)",2,1,3
static_cast<int>(FeedbackVectorSlotKind::KINDS_NUMBER) < (1 << kFeedbackVectorSlotKindBits),2,1,3
IsHiddenField::kNext <= 32,2,1,3
E::kLastValue < (sizeof(base::AtomicWord) * CHAR_BIT),2,1,3
V8_ALIGNOF(StorageType) >= V8_ALIGNOF(T),2,1,3
std::numeric_limits<Src>::is_specialized,3,0,3
LAST_KIND < (1 << (CHAR_BIT * sizeof(int16_t))),2,1,3
sizeof(CPURegister) == sizeof(Register),2,1,3
(Map::kBitFieldOffset & ~1) == (Map::kInstanceTypeOffset & ~1),2,1,3
(kSmiTagMask | kSmiSignMask) == (intptr_t)(1UL << (kBitsPerPointer - 1) | 1),2,1,3
sizeof(for_sizeof().d_[0]) == kDRegSize,2,1,3
sizeof(long) == sizeof(int64_t),2,1,3
kNumRepresentations <= (1 << kBitsPerByte),2,1,3
(kSeqStringTag & kIsIndirectStringMask) == 0,2,1,3
kCacheIndexShift == Name::kHashShift,2,1,3
DepthBits::kMax == kMaximumDepth,2,1,3
type() == MAP_TRANSITION || type() == CONSTANT_TRANSITION,1,2,3
state_ != NON_FLAT,1,1,2
in_debug_scope(),1,1,2
is_overflowed(obj),1,1,2
expected == result,1,1,2
kHeapObjectTagSize == kHashShift,1,1,2
"!CpuFeatures::IsSafeForSnapshot(isolate, SSE2)",1,1,2
len >= valid_entries,1,1,2
length >= 0 && length == string->length(),1,1,2
day->IsEmpty(),1,1,2
static_cast<int64_t>(static_cast<double>(number)) == number,1,1,2
!object_.IsKnownGlobal(heap->nan_value()),1,1,2
uniq.IsInitialized(),1,1,2
depth >= 0 && depth <= stack_height(),1,1,2
extra_ic_state == kNoExtraICState || (kind == CALL_IC) || (kind == STORE_IC) || (kind == KEYED_STORE_IC),1,1,2
"IsAligned(reinterpret_cast<intptr_t>(pointer), kPointerAlignment)",1,1,2
GetContextInputCount(node) > 0,1,1,2
call_depth_ == 0,1,1,2
this->map()->NumberOfOwnDescriptors() + 1 == map->NumberOfOwnDescriptors(),1,1,2
!HasSuccessor() && instruction != NULL,1,1,2
growth_factor_ > 1,1,1,2
block->predecessors()->length() == pred_counts_[block->block_id()],1,1,2
integer_range_constraint >= RANGE_VALID && integer_range_constraint <= RANGE_INVALID,1,1,2
store->IsStoreNamedField(),1,1,2
is_uint3(code),1,1,2
LAST_STATE <= 0xFF,1,1,2
kCompareOperationFirstBit + kCompareOperationBitCount <= 32,1,1,2
branch->opcode() == IrOpcode::kBranch,1,1,2
target != NULL,1,1,2
Assembler::kPatchDebugBreakSlotAddressOffset == 0,2,0,2
"result, value >= kMinValue && value <= kMaxValue",1,1,2
kInvalidPosition != kUnknownPosition,1,1,2
data_->get(static_cast<PerThreadAssertType>(i)),1,1,2
has_int32_value_ || !handle_->IsSmi(),1,1,2
index >= 0 && index < 3,1,1,2
thread->IsOptimizerThread() || !HEAP->IsAllocationAllowed(),1,1,2
!GetHeap()->InNewSpace(GetHeap()->empty_slow_element_dictionary()),1,1,2
2 == Linkage::kInterpreterDispatchTableParameter,1,1,2
Assembler::IsTstImmediate(masm->instr_at(pos)),1,1,2
"strcmp(kGreyBitPattern, ""11"") == 0",1,1,2
position_ == -1,1,1,2
"allocation_info_, to_space_",1,1,2
section == EXTENDED_SECTION && is_extended_layout(),1,1,2
ExtractICInLoopFromFlags(result) == in_loop,1,1,2
CpuFeatures::IsSafeForSnapshot(SSE2) || save_fp == kDontSaveFPRegs,1,1,2
!isolate->heap()->InNewSpace(obj),1,1,2
HEAP->InFromSpace(heap_obj),1,1,2
NewSpacePage::IsAtEnd(start_address),1,1,2
page->area_size() <= kNonCodeObjectAreaSize,1,1,2
store->HasObservableSideEffects(),1,1,2
"IsAligned(size, kPointerSize)",1,1,2
kUnaryOpTypeFirstBit + kUnaryOpTypeBitCount <= 32,1,1,2
rmode > RelocInfo::LAST_GCED_ENUM,1,1,2
fun != NULL,1,1,2
!script_.is_null(),1,1,2
code_sub_type_index >= FIRST_CODE_KIND_SUB_TYPE && code_sub_type_index < FIRST_CODE_AGE_SUB_TYPE,1,1,2
backing_[kStrictModeIndex] == kStrictMode || backing_[kStrictModeIndex] == kNonStrictMode,1,1,2
IsMovW(Memory::int32_at(pc)) && IsMovT(Memory::int32_at(pc + kInstrSize)),1,1,2
"index, 2",1,1,2
length == rv,1,1,2
thread_local_top_.isolate_ == this,1,1,2
block_id < gen_->schedule()->BasicBlockCount(),1,1,2
!Shape::kIsEnumerable || details.index() > 0,1,1,2
op == Token::EQ || op == Token::EQ_STRICT,1,1,2
to_space_.InitialCapacity() == from_space_.InitialCapacity(),1,1,2
!to.IsNone(),1,1,2
pos_ >= Scanner::kCharacterLookaheadBufferSize,1,1,2
IsApiFunction(),1,1,2
t->IsBitset() || t->IsClass() || t->IsConstant() || t->IsUnion() || t->IsArray() || t->IsFunction() || t->IsContext(),1,1,2
!instance_descriptors()->IsEmpty(),1,1,2
(storage->map() == array->GetHeap()->fixed_double_array_map() && IsFastDoubleElementsKind(array->GetElementsKind())) || ((storage->map() != array->GetHeap()->fixed_double_array_map()) && (IsFastObjectElementsKind(array->GetElementsKind()) || (IsFastSmiElementsKind(array->GetElementsKind()) && Handle<FixedArray>::cast(storage)->ContainsOnlySmisOrHoles()))),1,1,2
rinfo->rmode() == RelocInfo::CELL,1,1,2
array->HasValidElements(),1,1,2
KeywordTable::kPrefixLength == 3,1,1,2
sequence_start_ == kNoSequence,1,1,2
static_cast<size_t>(length) == rv,1,1,2
exponent <= 9,1,1,2
string == NULL || offset_out == 0,1,1,2
HasValue(),1,1,2
time->IsEmpty(),1,1,2
kSmiTag == 0 && kSmiShift > 1,2,0,2
right_successor_ == NULL && successor != NULL,1,1,2
stack_height_ > 0,1,1,2
!info_->osr_ast_id().IsNone(),1,1,2
current != NULL,1,1,2
(flags & CAN_ALLOCATE_IN_OLD_DATA_SPACE) == 0,1,1,2
HasError(),1,1,2
mode == VAR || mode == CONST || mode == CONST_HARMONY || mode == LET,1,1,2
slot != NULL && slot->IsStackAllocated(),1,1,2
entered_contexts_.length() == 0,1,1,2
obj->IsJSDate(),1,1,2
depth_ > 0,1,1,2
redzone_position + kASanRedzoneBytes == position_,1,1,2
descriptors->IsSortedNoDuplicates(),1,1,2
!(isolate)->has_pending_exception(),1,1,2
"offset_is_type(offset, INT32)",1,1,2
maybe_assigned_flag == this->maybe_assigned_flag(),1,1,2
actual.reg().is(rax),1,1,2
!iterator.handle_.is_null(),1,1,2
" StringShape( String::cast(READ_FIELD(this, kBufferOffset))).IsAsciiRepresentation() == StringShape(this).IsAsciiRepresentation()",1,1,2
value->IsHeapObject(),1,1,2
kNotInternalizedTag != 0,2,0,2
type == EXTERNAL_ARRAY_TRANSITION,1,1,2
result == EXCEPTION,1,1,2
transitions() != transitions_array,1,1,2
low <= high,1,1,2
!pending(),1,1,2
function_entries <= (static_cast<int>(store_[kFunctionsSizeOffset]) - (function_index_ - kHeaderSize)),1,1,2
"IsAligned(object_size, kPointerSize)",1,1,2
kSmiTag == 0 && kSmiShift > kDoubleSizeLog2,2,0,2
isolate_->debugger_agent_instance() == NULL,1,1,2
!val->IsJSGlobalPropertyCell() && !val->IsCell(),1,1,2
IsIdentifier(expression),1,1,2
!src2.AddressUsesRegister(dst),1,1,2
(LAST_SPACE & ~kSpaceTagMask) == 0,1,1,2
repeats >= 1 && repeats <= kMaxRepeats,1,1,2
false_block,1,1,2
heap->InNewSpace(object),1,1,2
map()->has_fast_elements() == (value->map() == Heap::fixed_array_map()),1,1,2
to_space_.current_page()->ContainsLimit(allocation_info_.top),1,1,2
destination->is_empty(),1,1,2
i < OutputCount(),1,1,2
Code::NUMBER_OF_KINDS <= (kFlagsKindMask >> kFlagsKindShift)+1,1,1,2
GetStrictMode(code->extra_ic_state()) == strict_mode(),1,1,2
slot_address > this->address(),1,1,2
this->existing_inobject_property() == existing_inobject_property,1,1,2
type() == MAP_TRANSITION || type() == CONSTANT_TRANSITION || type() == ELEMENTS_TRANSITION,1,1,2
rinfo->rmode() == RelocInfo::EMBEDDED_OBJECT,1,1,2
(blocks_.is_empty() && prev_limit == NULL) || (!blocks_.is_empty() && prev_limit != NULL),1,1,2
kBlockCopyLimit * kPointerSize >= OS::kMinComplexMemCopy,1,1,2
backing_[kLanguageModeIndex] == SLOPPY_MODE || backing_[kLanguageModeIndex] == STRICT_MODE || backing_[kLanguageModeIndex] == EXTENDED_MODE,1,1,2
!IsRealRelocMode(mode),1,1,2
obj->GetIsolate()->heap()->Contains(obj),1,1,2
Code::kArgumentsBits <= kStubMinorKeyBits - 1,1,1,2
scope_nesting_ > 0,1,1,2
id >= 0,1,1,2
operands.length() == descriptor->environment_length(),1,1,2
unoptimized->kind() == Code::FUNCTION,1,1,2
kUninitialized < (1 << (2 * kBitsPerByte)),1,1,2
!IsBuiltin() || native,1,1,2
array->IsPixelArray(),1,1,2
!FLAG_parallel_sweeping && !FLAG_concurrent_sweeping,1,1,2
chunk->owner() == owner,1,1,2
(space & ~kSpaceTagMask) == 0,1,1,2
(sizeof(value) == 1) || (sizeof(value) == 2) || (sizeof(value) == 4) || (sizeof(value) == 8),2,0,2
value->IsObjectLiteralGeneric(),1,1,2
type->Is(Type::Symbol()),1,1,2
member->loop_information()->parent_loop() == loop,1,1,2
ExtractExtraICStateFromFlags(result) == extra_ic_state,1,1,2
slot_count_ >= 0,1,1,2
sizeof(lchar) <= 2,1,1,2
bits <= Representation::kTagged,1,1,2
is_near_linked(),1,1,2
(map()->has_fast_smi_or_object_elements() || (value == GetHeap()->empty_fixed_array())) == (value->map() == GetHeap()->fixed_array_map() || value->map() == GetHeap()->fixed_cow_array_map()),1,1,2
it != constants_.end(),1,1,2
"!Code::IsYoungSequence(stub->GetIsolate(), pc_)",1,1,2
IsSet(),1,1,2
var->IsContextSlot(),1,1,2
!flag || AllowDeoptimization::IsAllowed(GetIsolate()),1,1,2
is_constant_call(),1,1,2
"strcmp(kWhiteBitPattern, ""00"") == 0",1,1,2
!(FLAG_track_double_fields && field_representation().IsDouble()) || transition_.is_null(),1,1,2
"kExternalReference, type()",1,1,2
is_marked(obj),1,1,2
kBinaryOpTypeFirstBit + kBinaryOpTypeBitCount <= 32,1,1,2
index < kNumberOfGlobalVars,1,1,2
kind_ == Code::LOAD_IC || kind_ == Code::STORE_IC || kind_ == Code::KEYED_STORE_IC,1,1,2
(data_ & kTagMask) == kSingletonTag,1,1,2
(kind == FAST_ELEMENTS && (elements()->map() == GetHeap()->fixed_array_map() || elements()->map() == GetHeap()->fixed_cow_array_map())) || (kind == FAST_DOUBLE_ELEMENTS && elements()->IsFixedDoubleArray()) || (kind == DICTIONARY_ELEMENTS && elements()->IsFixedArray() && elements()->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),1,1,2
sizeof(for_sizeof().x_[0]) == kXRegSizeInBytes,1,1,2
"FIRST_TOKEN, op",1,1,2
allocation_info_.VerifyPagedAllocation(),1,1,2
type() == REGISTER,1,1,2
string->address() + StringType::SizeFor(string->length()) == allocation_info_.top,1,1,2
id < Traits::max_id(graph),1,1,2
!rm_.is_valid(),1,1,2
(storage->map() == GetHeap()->fixed_double_array_map() && IsFastDoubleElementsKind(GetElementsKind())) || ((storage->map() != GetHeap()->fixed_double_array_map()) && (IsFastObjectElementsKind(GetElementsKind()) || (IsFastSmiElementsKind(GetElementsKind()) && FixedArray::cast(storage)->ContainsOnlySmisOrHoles()))),1,1,2
(0 <= i) && (i < length()),1,1,2
number <= instance_descriptors()->number_of_descriptors(),1,1,2
kind == GetInitialFastElementsKind(),1,1,2
count_ < kMaxCount,1,1,2
state != SERIALIZER_STATE_UNINITIALIZED,1,1,2
object.is_null() || *object == scope_site->transition_info(),1,1,2
!is_shared(),1,1,2
type() == ELEMENTS_TRANSITION,1,1,2
backing_[kStrictModeOffset] == kStrictMode || backing_[kStrictModeOffset] == kNonStrictMode,1,1,2
10 + kDescriptorIndexBitCount + kDescriptorIndexBitCount <= 31,1,1,2
"b, kMaxUInt8",1,1,2
!val->IsPropertyCell() && !val->IsCell(),1,1,2
kNotStringTag + kIsSymbolMask > LAST_TYPE,1,1,2
NUMBER_OF_TYPES <= 8,1,1,2
Assembler::IsLdrPcImmediateOffset(Memory::int32_at(pc)),1,1,2
lower_limit <= higher_limit,1,1,2
type == kMessage || type == kKeyboard || type == kDisconnect,1,1,2
needle_length > 1,1,1,2
args.smi_at(index) == STRICT || args.smi_at(index) == SLOPPY,1,1,2
RepresentationField::decode(value_) == representation.kind(),1,1,2
is_used(reg.code()),1,1,2
!GetHeap()->InNewSpace(GetHeap()->the_hole_value()),1,1,2
reinterpret_cast<Object*>(isolate)->IsSmi(),1,1,2
NeedsCompaction(live_maps),1,1,2
LAST_TYPE == LAST_JS_RECEIVER_TYPE,1,1,2
index_ + min_capacity <= current_capacity_,1,1,2
!SlowIsUndeclaredGlobal(),1,1,2
kMaxWatchpointCode < kMaxStopCode,2,0,2
map->GetPrototypeTransitions() != *proto_transitions,1,1,2
String::kMaxLength < 0x7fffffff - 6,1,1,2
**current == *substring,1,1,2
-max_exponent / 2 <= exponent && exponent <= max_exponent / 2,1,1,2
symbol_entries <= symbol_data_end_ - symbol_data_,1,1,2
access.representation().IsHeapObject(),1,1,2
"IsBootstrappingOrValidParentContext(result, this)",1,1,2
construct_stub_deopt_pc_offset() == Smi::FromInt(0),1,1,2
length <= 4,1,1,2
exponent >= 1,1,1,2
tz->IsEmpty(),1,1,2
IsMarked(object),1,1,2
"TWO_BYTE, state_",1,1,2
kind != HEX,1,1,2
target()->is_load_stub() || target()->is_keyed_load_stub(),1,1,2
len == 0 || len == descriptors->GetDetails(descriptors->LastAdded()).index(),1,1,2
unibrow::Utf8::kMaxOneByteChar == 0x7F,1,1,2
tmp0.IsNone() || tmp0.Is(ip0),1,1,2
a != kUninitialized,1,1,2
descriptors->IsDescriptorArray(),1,1,2
number < ((int64_t)1 << 53),1,1,2
function->function_id == Runtime::kHiddenCreateObjectLiteral,1,1,2
(BitCast<uint64_t>(OS::nan_value()) >> 32) != kHoleNanUpper32,1,1,2
(is_inline_cache_stub() && !needs_extended_extra_ic_state(kind())) || ic_state() == DEBUG_STUB,1,1,2
Heap::InNewSpace(this) || !Heap::InNewSpace(value),1,1,2
IsDetached(),1,1,2
CallICBase::StringStubState::kShift == 0,1,1,2
sizeof(for_sizeof().s_[0]) == kWRegSizeInBytes,1,1,2
data != NULL,1,1,2
code->kind() == Code::FUNCTION,1,1,2
FIRST_NAME_TYPE == FIRST_TYPE,1,1,2
is_int8(disp),1,1,2
IsDereferenceAllowed(INCLUDE_DEFERRED_CHECK),1,1,2
GetHeadPage() == Page::FromAllocationTop(limit),1,1,2
(callback == NULL) ^ (global_gc_epilogue_callback_ == NULL),1,1,2
block->rpo_number_ >= 0 && block->rpo_number_ < static_cast<int>(schedule_->rpo_order_.size()),1,1,2
mode == this->mode(),1,1,2
!key->IsString() || details.IsDeleted() || details.index() > 0,1,1,2
type != EXTERNAL_ARRAY_TRANSITION,1,1,2
*type_out == string->map()->instance_type(),1,1,2
IsHeapObject(),1,1,2
sizeof(*dest) >= sizeof(*src),1,1,2
2 <= length && length <= this->Length(),1,1,2
c > Latin1::kMaxChar,1,1,2
sizeof(for_sizeof().d_[0]) == kDRegSizeInBytes,1,1,2
(num_pending_64_bit_reloc_info_ == 0) || (start < (first_const_pool_64_use_ + kMaxDistToFPPool)),1,1,2
!__object__->IsRetryAfterGC(),1,1,2
prev_ == NULL ? !Debug::preemption_pending() : true,1,1,2
threshold >= 0.0 && threshold <= 1.0,1,1,2
is_call_stub() || is_keyed_call_stub() || kind() == STUB,1,1,2
isolate_->top_lookup_result() == this,1,1,2
!is_near_linked(),1,1,2
value->is_temporary(),1,1,2
new_type.IsSubtypeOf(type_),1,1,2
StringShape(this).IsIndirect(),1,1,2
RelocInfo::IsCodeTarget(rmode) || rmode == RelocInfo::CODE_AGE_SEQUENCE,1,1,2
transitioned_fast_element_map == NULL || map->elements_kind() != FAST_ELEMENTS,1,1,2
Assembler::IsBranch(masm->instr_at(pos)),1,1,2
!IsSweepingComplete() || (unswept_free_bytes_ == 0),1,1,2
"0, i",1,1,2
!used_indices[enum_index],1,1,2
"Code::KEYED_STORE_IC, kind()",1,1,2
(value->IsUndefined() && GetBackPointer()->IsMap()) || (value->IsMap() && GetBackPointer()->IsUndefined()),1,1,2
!inferred_name.is_null(),1,1,2
HasPrototypeTransitions(),1,1,2
old_length <= length(),1,1,2
"rm_reg.code() & 0xf, rm_reg.code()",1,1,2
stub_kind != LOAD,1,1,2
(sizeof(value) == kDRegSizeInBytes) || (sizeof(value) == kSRegSizeInBytes),1,1,2
code_age_index >= FIRST_CODE_AGE_SUB_TYPE && code_age_index < OBJECT_STATS_COUNT,1,1,2
code()->gc_metadata() == NULL && value->gc_metadata() == NULL,1,1,2
!exception->IsFailure(),1,1,2
has_been_globally_set_up_,1,1,2
index_ < node_->input_count_,1,1,2
index < input_count_ + 1,1,1,2
value_->HasFastObjectElements(),1,1,2
elements_kind == FAST_SMI_ONLY_ELEMENTS,1,1,2
context == NULL || context->IsGlobalContext(),1,1,2
i == 0,1,1,2
Smi::IsValid(immediate),1,1,2
type >= FIRST_TYPE && type < NUMBER_OF_TYPES,1,1,2
!dst.is(src1),1,1,2
result->IsCell() || result->IsJSGlobalPropertyCell(),1,1,2
NUMBER_OF_KINDS <= 16,1,1,2
holder::offset % kPointerSize == kIntSize,1,1,2
block->IsLoopHeader(),1,1,2
sizeof(for_sizeof().w_[0]) == kWRegSizeInBytes,1,1,2
!object_.IsKnownGlobal(heap->minus_zero_value()),1,1,2
FLAG_randomize_string_hashes || raw_running_hash_ == 0,1,1,2
function->function_id == Runtime::kCreateObjectLiteral || function->function_id == Runtime::kCreateObjectLiteralShallow,1,1,2
!info->IsStub(),1,1,2
0 <= pos && pos <= length_,1,1,2
!is_finalized() && position_ < size_,1,1,2
0 <= depth && depth <= kMaxUInt16,1,1,2
"instruction_start() - address(), static_cast<intptr_t>(Code::kHeaderSize)",1,1,2
value->is_slot(),1,1,2
merged_index >= 0 || merged_index == kInvalidMergedIndex,1,1,2
"DICTIONARY, property_encoding_",1,1,2
!isolate()->heap()->InNewSpace(*value),1,1,2
entries >= 0,1,1,2
instance_type == CODE_TYPE,1,1,2
static_cast<unsigned>(live_byte_count_) <= size_,1,1,2
!heap()->linear_allocation() || (anchor_.next_chunk() == &anchor_ && anchor_.prev_chunk() == &anchor_),1,1,2
!encoded,1,1,2
smasm_->current_environment_ == NULL,1,1,2
(map()->has_fast_elements() || map()->has_fast_smi_only_elements() || (value == GetHeap()->empty_fixed_array())) == (value->map() == GetHeap()->fixed_array_map() || value->map() == GetHeap()->fixed_cow_array_map()),1,1,2
array->IsFixedArray() || array->IsPixelArray() || array->IsExternalArray(),1,1,2
!Debug::preemption_pending(),1,1,2
!is_marked(obj),1,1,2
is_eval(),1,1,2
!is_uint32,1,1,2
(BitCast<uint64_t>(base::OS::nan_value()) >> 32) != kHoleNanUpper32,1,1,2
object->IsString() || object->IsSymbol() || object->IsNumber() || object->IsBoolean(),1,1,2
is_function_scope() && function_ == NULL,1,1,2
actual.is_immediate(),1,1,2
ObjectIsDuplicateAt(index),1,1,2
0 <= index && index < GetEffectInputCount(node),1,1,2
map()->has_fast_smi_or_object_elements() || map()->has_fast_double_elements(),1,1,2
(length & kConstantPoolLengthMaxMask) == length,1,1,2
kElementsKindCount <= (1 << kElementsKindBitCount),1,1,2
override_mode != DISABLE_ALLOCATION_SITES || AllocationSiteInfo::GetMode(kind) == TRACK_ALLOCATION_SITE,1,1,2
cursor_ < instruction_start_ + unoptimized->instruction_size(),1,1,2
((kind == FAST_ELEMENTS || kind == FAST_SMI_ONLY_ELEMENTS) && (map == GetHeap()->fixed_array_map() || map == GetHeap()->fixed_cow_array_map())) || (kind == FAST_DOUBLE_ELEMENTS && (fixed_array->IsFixedDoubleArray() || fixed_array == GetHeap()->empty_fixed_array())) || (kind == DICTIONARY_ELEMENTS && fixed_array->IsFixedArray() && fixed_array->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),1,1,2
backing_[kLanguageModeIndex] == CLASSIC_MODE || backing_[kLanguageModeIndex] == STRICT_MODE || backing_[kLanguageModeIndex] == EXTENDED_MODE,1,1,2
"BooleanBit::get(hints, kStrictModeFunction)",1,1,2
"from, from_",1,1,2
result->IsCell() || result->IsPropertyCell(),1,1,2
buffer8_ != end_,1,1,2
!(details_.type() == CONSTANT_FUNCTION && !IsFound()),1,1,2
Assembler::IsTstImmediate(second_instruction),1,1,2
HeapObject::cast(obj)->Size() == JSGeneratorObject::kSize,1,1,2
(base == kVisitDataObject) || (base == kVisitStruct) || (base == kVisitJSObject),1,1,2
*handle_ != heap->minus_zero_value(),1,1,2
nested_site->IsAllocationSite(),1,1,2
!crankshaft_fp_scratch.IsAllocatable(),1,1,2
(kExternalStringTag | kOneByteStringTag) == Internals::kExternalAsciiRepresentationTag,1,1,2
type == ELEMENTS_TRANSITION,1,1,2
!page->is_anchor(),1,1,2
current_top != NULL,1,1,2
object_size < Page::kMaxNonCodeHeapObjectSize,1,1,2
representation.kind() <= Representation::kTagged,1,1,2
cond != al,1,1,2
properties()->IsDictionary() == map()->is_dictionary_map(),1,1,2
for_in_feedback_slot_ != kInvalidFeedbackSlot,1,1,2
"reinterpret_cast<unsigned int>(instruction_start()) - reinterpret_cast<unsigned int>(address()), Code::kHeaderSize",1,1,2
!ExpectedTransitionKey(map).is_null(),1,1,2
!isolate_->optimizing_compiler_thread()->IsOptimizerThread(),1,1,2
!dst.is(rcx),1,1,2
!marking_->IsMarking() || Marking::Color(array) == Marking::WHITE_OBJECT,1,1,2
NumberOfOwnDescriptors() <= value->number_of_descriptors(),1,1,2
desc->GetDetails().index() <= number_of_descriptors(),1,1,2
is_optimized_code(),1,1,2
memento->IsValid(),1,1,2
!SlowIsContextual(),1,1,2
!candidate.Is(forbidden),1,1,2
(num_pending_64_bit_reloc_info_ == 0) || (pc_offset() < (first_const_pool_use_ + kMaxDistToFPPool)),1,1,2
!std::isnan(min) && !std::isnan(max) && min <= max,1,1,2
"virtual_register, it->first",1,1,2
type != CODE_TYPE,1,1,2
!representation.IsNone(),1,1,2
space < kNumberOfSpaces,1,1,2
algorithm <= BOYER_MOORE,1,1,2
!callback->IsForeign(),1,1,2
string->IsFlat(),1,1,2
"index, ComputeOperandsCount()",1,1,2
block->rpo_number_ >= 0,1,1,2
IsMarked(obj),1,1,2
!(details_.type() == NORMAL && !IsFound()),1,1,2
unique_id_ != UniqueValueId::nan_value(heap),1,1,2
NeedsPointerMap(),1,1,2
ExtractStateFromFlags(result) == state,1,1,2
(FlagsBits::kMask & FastClonePropertiesCountBits::kMask) == 0,1,1,2
0x7f - kHotObjectWithSkip == kMaxHotObjectIndex,1,1,2
gc_state_ == NOT_IN_GC,1,1,2
offset < kInvalidLocalOffsetInMs,1,1,2
index > StandardFrameConstants::kCArgSlotCount,1,1,2
AllowHandleAllocation::IsAllowed() && gc_state_ == NOT_IN_GC,1,1,2
STANDARD_STORE == 0,1,1,2
"NULL, pointer_map_",1,1,2
rpo_number_ >= 0,1,1,2
"memento_address == top || memento_address + HeapObject::kHeaderSize <= top || !NewSpacePage::OnSamePage(memento_address, top)",1,1,2
CallICBase::Contextual::kShift == ContextualBits::kShift,1,1,2
!no_failure.is_null(),1,1,2
"0, result",1,1,2
op_->opcode() <= IrOpcode::kLast,1,1,2
fun == NULL || mode == Variable::VAR || mode == Variable::LET,1,1,2
maps,1,1,2
shadowed != NULL,1,1,2
type() == CALLBACKS && !IsTransition(),1,1,2
kSmiTag == 0 && kSmiTagSize < kPointerSizeLog2,2,0,2
this->block(node) == NULL,1,1,2
is_working_iterator_,1,1,2
(kLanguageModeMask & EXTENDED_MODE) == EXTENDED_MODE,1,1,2
0 <= index && index < GetValueInputCount(node),1,1,2
HasHashCode(),1,1,2
!IsSkip(control),1,1,2
!is_array_index_,1,1,2
types != NULL && types->length() == 1,1,1,2
JSObject::kElementsKindCount <= (1 << kElementsKindBitCount),1,1,2
"kInt32, type()",1,1,2
(kBitsForElementsKind + kBitsForBaseOffset + kBitsForIsDehoisted) <= sizeof(uint32_t)*8,1,1,2
class_name == isolate_->heap()->Boolean_string(),1,1,2
"String::cast(READ_FIELD(this, kSecondOffset))->length() != 0 || StringShape( String::cast( READ_FIELD(this, kFirstOffset))).IsAsciiRepresentation() == StringShape(this).IsAsciiRepresentation()",1,1,2
raw_inferred_name != NULL,1,1,2
1 == Linkage::kInterpreterDispatchTableParameter,1,1,2
it != decorators_.end(),1,1,2
descriptors->number_of_descriptors() == number_of_own_descriptors,1,1,2
(dst < src) || (dst >= (src + byte_size)),1,1,2
code_unit < 0x10000u,1,1,2
Token::NUM_TOKENS <= 0x100,1,1,2
top < top_page->ObjectAreaEnd(),1,1,2
(value == GetHeap()->empty_fixed_array()) || (map()->has_fast_double_elements() == value->IsFixedDoubleArray()),1,1,2
"offset_is_type(offset, HEAP_PTR)",1,1,2
tmp1.IsNone() || tmp1.Is(ip1),1,1,2
"1 << bits, original_x",1,1,2
closure_.is_null(),1,1,2
reg.Is32Bits() || (shift_amount < kXRegSize),1,1,2
HotObjectsList::kSize == kMaxHotObjectIndex + 1,1,1,2
true_block,1,1,2
!data.is_null(),1,1,2
IsRetry(),1,1,2
to_space_.current_page()->ContainsLimit(top),1,1,2
type != ELEMENTS_TRANSITION,1,1,2
obj->IsJSGeneratorObject(),1,1,2
array->IsDictionary(),1,1,2
top == limit || Page::FromAddress(top) == Page::FromAddress(limit - 1),1,1,2
HasExpressionAt(index),1,1,2
!is_the_hole_nan(result),1,1,2
IC::Contextual::kShift == ContextualBits::kShift,1,1,2
initial_map->elements_kind() == FAST_SMI_ONLY_ELEMENTS,1,1,2
cur_addr_ < cur_limit_,1,1,2
algorithm <= BOYER_MOORE_HORSPOOL,1,1,2
stack_size_in_bytes >= 0,1,1,2
output_buffer_ != NULL,1,1,2
IsIdentifier(),1,1,2
IsAccessCheckNeeded(),1,1,2
x.rmode_ == RelocInfo::NONE32,1,1,2
constant_function_ != NULL,1,1,2
pos <= length_,1,1,2
size_ <= destination.length(),1,1,2
output_count == 0 || outputs != NULL,1,1,2
!RelocInfo::IsNone(rmode),1,1,2
"IsAligned(offset, static_cast<unsigned>(kPointerSize))",1,1,2
!removed_side_effects_,1,1,2
!access.IsInobject() || access.existing_inobject_property() || obj->IsAllocate() || obj->IsInnerAllocatedObject(),1,1,2
arguments_adaptor_deopt_pc_offset() == Smi::FromInt(0),1,1,2
"0, input_queue_length_",1,1,2
!IsScratchRegister(result) || scratch_register_acquired_,1,1,2
!reg.is(kScratchDoubleReg),1,1,2
callback_ != NULL,1,1,2
len <= DescriptorArray::kMaxNumberOfDescriptors,1,1,2
value != heap->empty_fixed_array(),1,1,2
accounting_stats_.Size() == actual_size,1,1,2
saved_contexts_.length() == 0,1,1,2
kHeapObjectTagSize == Name::kHashShift,1,1,2
node_ != NULL,1,1,2
n_of_pages == CountTotalPages(),1,1,2
map->is_stable(),1,1,2
kBinaryOpResultTypeFirstBit + kBinaryOpResultTypeBitCount <= 32,1,1,2
Token::IsAssignmentOp(op_),1,1,2
IsStoreStub(),1,1,2
value->IsPhi(),1,1,2
"index <= last_index(LAST_TYPE, section)",1,1,2
kind() == COMPARE_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC,1,1,2
top >= Start(),1,1,2
other.capacity() >= 0,1,1,2
type_ == CONTEXT_VARIABLE || type_ == PROPERTY || type_ == INTERNAL,1,1,2
call->opcode() == IrOpcode::kCall,1,1,2
this->elements_kind() == elements_kind,1,1,2
instr->following(3)->IsBranchAndLinkToRegister(),1,1,2
to_space_.current_page()->ContainsLimit(allocation_info_.top()),1,1,2
"!AreAliased(xzr, csp, tmp0, tmp1)",1,1,2
length() >= kFirstIndex,1,1,2
singleton_handles_[singleton] == kInvalidIndex,1,1,2
map->HasTransitionArray(),1,1,2
ModeField::is_valid(mode),1,1,2
this != NULL,1,1,2
(reinterpret_cast<intptr_t>(owner_) & kPageHeaderTagMask) == kPageHeaderTag,1,1,2
ExtraICStateField::kShift == ExtendedExtraICStateField::kShift,1,1,2
StorageField::is_valid(static_cast<int>(array_type)),1,1,2
!script.is_null(),1,1,2
index < ComputeOperandsCount(),1,1,2
from_ + length_ <= string_->length(),1,1,2
IsInformativeDefinition(),1,1,2
MaybeAssignedField::is_valid(maybe_assigned_flag),1,1,2
elements_transition_map() != NULL,1,1,2
object->IsTransitionArray(),1,1,2
survived >= 0,1,1,2
size > 0,1,1,2
mode_ == 0 || mode_ == 1 || mode_ == 2,1,1,2
var_ != NULL,1,1,2
count < MementoFoundCountBits::kMax,1,1,2
contextual_mode() != CONTEXTUAL,1,1,2
!IsLazySweepingComplete() || (unswept_free_bytes_ == 0),1,1,2
ticks < 256,1,1,2
Size() == from->Size(),1,1,2
index < input_->use->from->input_count_,1,1,2
(kLanguageModeMask & STRICT_MODE) == STRICT_MODE,1,1,2
Assembler::IsTstImmediate(first_instruction),1,1,2
BoundsCheck(cursor_),1,1,2
length() > kBitField3StorageIndex,1,1,2
value->IsObjectLiteral() || value->IsFastLiteral(),1,1,2
to.IsInteger32(),1,1,2
i < InputCount(),1,1,2
getter_stub_deopt_pc_offset() == Smi::FromInt(0),1,1,2
children_index_ < snapshot_->children().length() || (children_index_ == snapshot_->children().length() && children_count_ == 0),1,1,2
survival_rate_trend != FLUCTUATING,1,1,2
string->IsSeqString(),1,1,2
biased_good_suffix_shift_ + index >= good_suffix_shift_,1,1,2
!value->representation().IsNone(),1,1,2
offset <= length,1,1,2
!GetHeap()->InNewSpace(GetHeap()->undefined_value()),1,1,2
shared_info()->script()->IsScript(),1,1,2
constants_.find(virtual_register) == constants_.end(),1,1,2
state_ == STOPPED || FLAG_incremental_marking,1,1,2
IsTransitionType(type()),1,1,2
new_action->next_ == NULL,1,1,2
stack_depth_ < X87Register::kNumAllocatableRegisters,1,1,2
allocated_registers_ == NULL,1,1,2
sizeof(for_sizeof().s_[0]) == kSRegSizeInBytes,1,1,2
prev_chunk()->owner() == owner(),1,1,2
(kBitsForElementsKind + kBitsForIndexOffset + kBitsForIsDehoisted) <= sizeof(uint32_t)*8,1,1,2
deferred_handles_head_ == NULL,1,1,2
1 <= length,1,1,2
allocated_double_registers_ == NULL,1,1,2
map() == from->map(),1,1,2
index < GetEffectInputCount(node),1,1,2
value->IsConstantPoolArray(),1,1,2
RelocInfo::IsCodeTarget(rmode),1,1,2
"IsAligned(OffsetFrom(addr), kPointerSize) || IsAligned(OffsetFrom(addr) - 1, kPointerSize)",1,1,2
scope_ != NULL,1,1,2
top < limit_,1,1,2
closure_.is_null() && !shared_info_.is_null() && script_.is_null(),1,1,2
(map()->has_fast_elements() || map()->has_fast_smi_only_elements()) == (value->map() == GetHeap()->fixed_array_map() || value->map() == GetHeap()->fixed_cow_array_map()),1,1,2
type() != NORMAL,1,1,2
Top::security_context() == *security_context_,1,1,2
GetPrototypeTransitions() != proto_transitions,1,1,2
"return_count, 2",1,1,2
(GetHeap()->MaxSemiSpaceSize() / (StaticVisitorBase::kMinObjectSizeInWords * kPointerSize + AllocationMemento::kSize)) < MementoFoundCountBits::kMax,1,1,2
state() == MONOMORPHIC,1,1,2
object->IsFixedArray(),1,1,2
sub_type <= LAST_FIXED_ARRAY_SUB_TYPE,1,1,2
"to_, to",1,1,2
code_age < Code::kLastCodeAge,1,1,2
kind() == STUB || is_handler(),1,1,2
obj->IsJSModule(),1,1,2
heap_->InNewSpace(obj),1,1,2
IsNameCompatibleWithPrototypeFailure(name),1,1,2
sizeof(rchar) <= 2,1,1,2
Contains(top),1,1,2
IsFound() && state_ != JSPROXY,1,1,2
map_ <= p && p < end,1,1,2
sizeof(X87Register) == sizeof(IntelDoubleRegister),1,1,2
Isolate::Current() == isolate(),1,1,2
(reinterpret_cast<intptr_t>(address) & kHeapObjectTagMask) == 0,1,1,2
index_ + min_capacity <= current_chunk_.length(),1,1,2
!IsFastHoleyElementsKind(from) || IsFastHoleyElementsKind(to),1,1,2
(kind != SLOPPY_ARGUMENTS_ELEMENTS) || (elements()->IsFixedArray() && elements()->length() >= 2),1,1,2
IsWhite(markbit),1,1,2
sizeof(for_sizeof().d_[0]) == kXRegSizeInBytes,1,1,2
block != NULL,1,1,2
induction_variable_data_ == NULL,1,1,2
sizeof(Dest) == sizeof(Source),1,1,2
unique_id_ != UniqueValueId::minus_zero_value(heap),1,1,2
sizeof(XMMRegister) == sizeof(DoubleRegister),1,1,2
p_ == NULL || p_ != new_value,1,1,2
current_iterator_.Current() != NULL,1,1,2
type_ == CONTEXT_VARIABLE || type_ == PROPERTY,1,1,2
(kAllocatableLowRangeBegin == 0) && (kAllocatableLowRangeEnd == 14) && (kAllocatableHighRangeBegin == 16) && (kAllocatableHighRangeEnd == 28),1,1,2
schedule_->rpo_order_[block->rpo_number_] == block,1,1,2
representation().IsTagged() || representation().Equals(to),1,1,2
object == HeapObject::cast(object)->GetHeap()->empty_fixed_array() || object->IsFixedDoubleArray(),1,1,2
Code::kArgumentsBits <= kStubMinorKeyBits - 5,1,1,2
isolate->external_reference_redirector() == NULL,1,1,2
map_owner->IsJSObject(),1,1,2
!array->GetHeap()->InNewSpace(value),1,1,2
length() >= kFirstIndex || this == GetHeap()->empty_descriptor_array(),1,1,2
current_page->next_page()->is_valid(),1,1,2
Exists(singleton),1,1,2
type != ODDBALL_TYPE,1,1,2
fpcr().DN() == 0,1,1,2
!(details_.type() == MAP_TRANSITION && !IsFound()),1,1,2
0 <= idx_ && idx_ < kNumberOfElements,1,1,2
object_size <= Page::kMaxRegularHeapObjectSize,1,1,2
HasBeenSetUp(),1,1,2
IC::Contextual::kSize == ContextualBits::kSize,1,1,2
index >= 0 && index < length() && value <= kMaxOneByteCharCode,1,1,2
GetStrictMode(code->extra_ic_state()) == GetStrictMode(target()->extra_ic_state()),1,1,2
"expected_stack_height_, codegen()->stack_height()",1,1,2
input_count == 0 || inputs != NULL,1,1,2
InitField::is_valid(init_flag),1,1,2
0 <= n && n < capacity_,1,1,2
i < TempCount(),1,1,2
name_hash & String::kHashComputedMask,1,1,2
"IsBootstrappingOrGlobalObject(this->GetIsolate(), result)",1,1,2
stack_depth_ < X87Register::kMaxNumAllocatableRegisters,1,1,2
page->area_size() <= kMaxRegularHeapObjectSize,1,1,2
"!AreAliased(scratch0_, object_, address_, rcx)",1,1,2
target()->is_keyed_call_stub(),1,1,2
0 <= length && length <= struct_length(structured),1,1,2
HEAP->Contains(obj),1,1,2
"op, LAST_TOKEN",1,1,2
isolate_->context() == *debug_context(),1,1,2
false_target != NULL,1,1,2
rt.Is64Bits(),1,1,2
expr->context() == Expression::kValue,1,1,2
new_target_index != TransitionArray::kNotFound,1,1,2
this->length() > kTransitionsIndex,1,1,2
FLAG_pretenuring_call_new,1,1,2
buffer8_ != NULL,1,1,2
v8::String::ASCII_ENCODING == kOneByteStringTag,1,1,2
type->IsRange(),1,1,2
saved_value != 0,1,1,2
CallICBase::StringStubState::kSize == 1,1,1,2
receiver_mode_ == ARGUMENTS_CONTAIN_RECEIVER,1,1,2
kScratchDoubleReg.code() - kDoubleRegZero.code() == kNumReservedRegisters - 1,1,1,2
has_miss_handler_,1,1,2
Code::kArgumentsBits <= kStubMinorKeyBits - 2,1,1,2
"1, static_cast<int>(kSmiTagMask)",1,1,2
!rear_page->prev_page()->is_anchor(),1,1,2
owns_data_,1,1,2
string == NULL || *length_out == static_cast<unsigned>(string->length()),1,1,2
page->InNewSpace(),1,1,2
index >= first_int32_index() && index < length(),1,1,2
offset >= HeapObject::kHeaderSize && offset < AllocationSite::kSize,1,1,2
multiplier > part,1,1,2
type->Is(HeapType::Symbol()),1,1,2
end_position <= data->length(),1,1,2
(ExtractKindFromFlags(flags) != CALL_IC && ExtractKindFromFlags(flags) != KEYED_CALL_IC) || ExtractArgumentsCountFromFlags(flags) >= 0,1,1,2
depth_ >= 1,1,1,2
text_type() == ATOM,1,1,2
"static_cast<int>(1), static_cast<int>(kSmiTagMask)",1,1,2
scope_ == NULL,1,1,2
IsDeclaredVariableMode(mode),1,1,2
"map_set_.length(), map_unique_ids_.length()",1,1,2
MayContainTransitions(),1,1,2
(kLanguageModeMask & CLASSIC_MODE) == CLASSIC_MODE,1,1,2
(OffsetFrom(address) & kMapAlignmentMask) == 0,1,1,2
CpuFeatures::IsSafeForSnapshot(VFP2) || save_fp == kDontSaveFPRegs,1,1,2
kMinObjectSizeInWords * kPointerSize <= object_size,1,1,2
class_name == isolate_->heap()->Boolean_symbol(),1,1,2
chunk->size() <= static_cast<size_t>(kPageSize),1,1,2
type != MAP_TYPE,1,1,2
type_ == ELEMENT,1,1,2
IsPowerOf2(capacity_),1,1,2
type_ == kElement,1,1,2
(storage->map() == GetHeap()->fixed_double_array_map() && GetElementsKind() == FAST_DOUBLE_ELEMENTS) || ((storage->map() != GetHeap()->fixed_double_array_map()) && ((GetElementsKind() == FAST_ELEMENTS) || (GetElementsKind() == FAST_SMI_ONLY_ELEMENTS && FixedArray::cast(storage)->ContainsOnlySmisOrHoles()))),1,1,2
length >= 0 && length <= kMaximumLength,1,1,2
type() == EXTERNAL_ARRAY_TRANSITION,1,1,2
index < use_count_,1,1,2
(current_state == JS) == (state == JS),1,1,2
transitioned_double_map == NULL || map->elements_kind() == FAST_SMI_ONLY_ELEMENTS,1,1,2
temp_count == 0 || temps != NULL,1,1,2
thread_local_.memory_size_ != 0,1,1,2
true_target != NULL,1,1,2
IsMapped(obj),1,1,2
!disallow_adding_new_values_,1,1,2
!IsOptimizerThread(),1,1,2
type == string->map()->instance_type(),1,1,2
IsPowerOf2(x),1,1,2
IsFinished(),1,1,2
frame_->is_java_script(),1,1,2
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == TO_BOOLEAN_IC,2,0,2
!obj->IsTheHole(),1,1,2
const_cast<Object*>(object)->IsHeapObject() && HeapObject::cast(object)->map()->instance_type() == Traits::kInstanceType,1,1,2
function->next_function_link()->IsUndefined(),1,1,2
HAS_FAILURE_TAG(obj),1,1,2
"offset, 0",1,1,2
kSmiShift == 1,2,0,2
prec >= 4,1,1,2
filler != SamplingCircularQueue::kClear,1,1,2
Code::GetStrictMode(old_target->extra_ic_state()) == Code::GetStrictMode(target->extra_ic_state()),1,1,2
kSmiTagSize + kSmiShiftSize == 32,2,0,2
!IsZombie(),1,1,2
this->immutable() == immutable,1,1,2
expr->context() == Expression::kTest || expr->context() == Expression::kValueTest || expr->context() == Expression::kTestValue,1,1,2
scale >= kSmiTagSize,1,1,2
free_label_count_ > 0,1,1,2
elements->map() == heap->fixed_array_map() || elements->map() == heap->fixed_cow_array_map(),1,1,2
IsConstPoolEmpty(),1,1,2
unchecked_transition_array()->HasPrototypeTransitions(),1,1,2
"kEmptyHandleSentinel, raw_address_",1,1,2
(RelocInfo::IsJSReturn(rinfo->rmode()) && rinfo->IsPatchedReturnSequence()) || (RelocInfo::IsDebugBreakSlot(rinfo->rmode()) && rinfo->IsPatchedDebugBreakSlotSequence()),1,1,2
unique_id_ != UniqueValueId(heap->nan_value()),1,1,2
Heap::map_space() == owner,1,1,2
!IsMarked(object),1,1,2
!ExpressionStackIsEmpty(),1,1,2
setter_stub_deopt_pc_offset() == Smi::FromInt(0),1,1,2
element_count() == other->element_count(),1,1,2
instr->IsBlockStart(),1,1,2
!heap_->new_space()->Contains(addr),1,1,2
"0, reinterpret_cast<intptr_t>(backing_store) % sizeof(unsigned)",1,1,2
!InNewSpace(value),1,1,2
kHasFunctionCacheFirstBit + kHasFunctionCacheBitCount <= 32,1,1,2
static_cast<int>(element) < static_cast<int>(sizeof(T) * CHAR_BIT),1,1,2
sizeof(intptr_t) == sizeof(AccessorGetterCallback),1,1,2
IsFastSmiElementsKind(from_kind),1,1,2
!value->representation().IsNone() && !to.IsNone(),1,1,2
kJSArray < (1 << (2 * kBitsPerByte)),1,1,2
this->IsFlat(),1,1,2
(kConstantPoolLengthMaxMask & kMaxNumPendingRelocInfo) == kMaxNumPendingRelocInfo,1,1,2
bindings == GetHeap()->empty_fixed_array() || bindings->map() == GetHeap()->fixed_cow_array_map(),1,1,2
type() == MAP_TRANSITION || type() == ELEMENTS_TRANSITION || type() == CONSTANT_TRANSITION,1,1,2
IsDereferenceAllowed(NO_DEFERRED_CHECK) && other.IsDereferenceAllowed(NO_DEFERRED_CHECK),1,1,2
LAST_CODE_KIND < 16,1,1,2
"!AreAliased(stack_pointer, Tmp0(), Tmp1())",1,1,2
!value->representation().Equals(to),1,1,2
!has_position(),1,1,2
kFixedIndexWidth > 5,1,1,2
*length_out == static_cast<unsigned>(string->length()),1,1,2
"offset_is_type(offset, CODE_PTR)",1,1,2
value->IsFixedArray() || value->IsPixelArray(),1,1,2
kFirstEntryOffset - kHeaderSize == kInt32Size,1,1,2
(0 <= scope_) && (scope_ < kNumberOfScopes),1,1,2
HasEnumIndicesCache(),1,1,2
limit_ == NULL || (reinterpret_cast<intptr_t>(limit_) & HeapObjectTagMask()) == 0,1,1,2
space != NEW_SPACE || retry_space == OLD_POINTER_SPACE || retry_space == OLD_DATA_SPACE,1,1,2
map()->has_fast_elements() || map()->has_fast_smi_only_elements(),1,1,2
(flags & CAN_ALLOCATE_IN_OLD_POINTER_SPACE) == 0,1,1,2
obj->IsJSMessageObject(),1,1,2
"BodyDescriptor::SizeOf(map, object) == object_size",1,1,2
(0 < n) && (n < 64),1,1,2
"1, search->pattern_.length()",1,1,2
out->length() >= OUTPUT_SIZE,1,1,2
Page::FromAddress(reinterpret_cast<Address>(anchor_slot))->owner() != NULL,1,1,2
!AllowHeapAllocation::IsAllowed() || handle->IsMap(),1,1,2
transitions->IsMap() || transitions->IsUndefined(),1,1,2
bound_ || !used_,1,1,2
!CheckFlag(kCannotBeTagged) || !r.IsTagged(),1,1,2
"kInt64, type()",1,1,2
kElementsKindCount <= (1 << Map::ElementsKindBits::kSize),1,1,2
FLAG_allocation_site_pretenuring,1,1,2
current_iterator_.HasNext(),1,1,2
instance_type() >= FIRST_JS_RECEIVER_TYPE,1,1,2
max_map_space_pages < kMaxMapPageIndex,1,1,2
num_bytes >= 0,1,1,2
offset >= 0 && offset <= length,1,1,2
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC || kind() == TO_BOOLEAN_IC,1,1,2
opcode >= 0,1,1,2
"Code::KEYED_LOAD_IC, kind()",1,1,2
"IsAddressAligned(base, kPointerSize)",1,1,2
implicit_args[v8::Arguments::kIsolateIndex]->IsSmi(),1,1,2
IsMovW(Memory::int32_at(candidate)) && IsMovT(Memory::int32_at(candidate + Assembler::kInstrSize)),1,1,2
value >= root_index_wave_front_,1,1,2
unswept_free_bytes_ == 0,1,1,2
INTERCEPTOR == BEFORE_PROPERTY,1,1,2
(0 < size) && (size <= Page::kMaxRegularHeapObjectSize),1,1,2
space != NEW_SPACE || retry_space == OLD_POINTER_SPACE || retry_space == OLD_DATA_SPACE || retry_space == LO_SPACE,1,1,2
index == this->descriptor_index(),1,1,2
code < kMaxNumRegisters,1,1,2
sizeof(PatternChar) == 2,1,1,2
Marking::Color(array->GetContentArray()) == Marking::WHITE_OBJECT,1,1,2
0 == Linkage::kInterpreterBytecodeOffsetParameter,1,1,2
(len == 0 && LastAdded() == kNoneAdded) || len == descriptors->GetDetails(LastAdded()).index(),1,1,2
op->opcode() == IrOpcode::kLoadField || op->opcode() == IrOpcode::kStoreField,1,1,2
page->area_size() <= kMaxNonCodeHeapObjectSize,1,1,2
window_size >= 2,1,1,2
length <= NumberOfOwnDescriptors(),1,1,2
sub_type <= Code::LAST_CODE_KIND,1,1,2
sizeof(Char) == 1 || sizeof(Char) == 2,1,1,2
rinfo->rmode() == RelocInfo::GLOBAL_PROPERTY_CELL,1,1,2
!shared_info_.is_null(),1,1,2
static_cast<uint32_t>(frame_size_) == frame_size_,1,1,2
(kind != Code::CALL_IC && kind != Code::KEYED_CALL_IC) || (ExtraICStateField::encode(extra_ic_state) | true),1,1,2
((reg_size == kXRegSize) && is_uint6(imms)) || ((reg_size == kWRegSize) && is_uint5(imms)),1,1,2
array_type == this->array_type(),1,1,2
descriptor != Map::kNoneAdded,1,1,2
HeapObject::cast(obj)->Size() == JSDate::kSize,1,1,2
object->GetIsolate()->heap()->InFromSpace(object),1,1,2
elements->map() == GetHeap()->fixed_array_map() || elements->map() == GetHeap()->fixed_cow_array_map(),1,1,2
state != NULL,1,1,2
object->IsFixedArray() || object->IsFixedDoubleArray(),1,1,2
pat.length() >= kBMMinPatternLength,1,1,2
answer != NULL,1,1,2
!key->IsUndefined() && !key->IsNull(),1,1,2
"IsAligned(reinterpret_cast<uintptr_t>(this) + offset, kInstructionSize)",1,1,2
Contains(addr),1,1,2
Heap::InFromSpace(heap_obj),1,1,2
!IsMapped(obj),1,1,2
*handle == isolate()->heap()->true_value() || *handle == isolate()->heap()->false_value(),1,1,2
biased_suffixes_ + index >= suffixes_,1,1,2
kNumJSCalleeSaved == 0,1,1,2
state_ != INITIALIZED,1,1,2
base() == NULL,1,1,2
(num_pending_reloc_info_ == 0) || (pc_offset() < (first_const_pool_use_ + kMaxDistToIntPool)),1,1,2
fresh.is_valid(),1,1,2
IsSymbol(),1,1,2
buffer_pos == 0,1,1,2
location_ == NULL || IsDereferenceAllowed(false),1,1,2
owns_script_data_,1,1,2
index < builtin_count,1,1,2
((significand & kHiddenBit) != 0) || exponent <= kDenormalExponent,1,1,2
scope_ < kNumberOfScopes,1,1,2
new_space_strings_[i] != HEAP->raw_unchecked_the_hole_value(),1,1,2
kind == Yield::DELEGATING,1,1,2
(callback == NULL) ^ (global_gc_prologue_callback_ == NULL),1,1,2
other.length() <= length(),1,1,2
!ConstantPoolOverflowed(),1,1,2
is_array_index_,1,1,2
!(FLAG_track_double_fields && field_representation().IsDouble()) || !has_transition(),1,1,2
0 <= index && index < GetControlInputCount(node),1,1,2
strict_mode_flag() == kNonStrictMode,1,1,2
!this->existing_inobject_property() || IsInobject(),1,1,2
!filler_value->IsHeapObject() || !GetHeap()->InNewSpace(filler_value),1,1,2
sizeof(MacroAssembler) < KB / 2,1,1,2
result != kAbsent,1,1,2
"!FLAG_gc_greedy || v8::internal::Heap::disallow_allocation_failure() || v8::internal::Heap::CollectGarbage(0, NEW_SPACE)",1,1,2
size_in_bytes >= 0,1,1,2
builder_ != NULL,1,1,2
"rm_reg.code() & 0x0f, rm_reg.code()",1,1,2
kNotStringTag != 0 && kSymbolTag != 0,1,1,2
block_id >= 0,1,1,2
cc == equal || cc == not_equal,1,1,2
IndexField::kShift == 35,1,1,2
mode == VAR || mode == LET,1,1,2
sizeof(struct Entry) == kEntrySizeInWords * kPointerSize,1,1,2
desc->GetDetails().index() > 0,1,1,2
"kHeapObject, type()",1,1,2
StorageField::is_valid(static_cast<int>(elements_kind)),1,1,2
is_lazy(),1,1,2
result->is_untagged_int32(),1,1,2
!heap_->cell_space()->Contains(addr) && !heap_->code_space()->Contains(addr) && !heap_->old_data_space()->Contains(addr) && !heap_->new_space()->Contains(addr),1,1,2
pos == 0 || pos == 1,1,1,2
!this->IsFailure(),1,1,2
kSmiTag == 0 && kSmiShift > kPointerSizeLog2,2,0,2
op->opcode() == IrOpcode::kLoadElement || op->opcode() == IrOpcode::kStoreElement,1,1,2
!rinfo->target_object()->IsConsString(),1,1,2
MayContainTransitions() || IsEmpty(),1,1,2
kXRegSize == kDRegSize,1,1,2
entry != NULL,1,1,2
depth_ <= maximum_depth_,1,1,2
StringShape(this).IsSequential(),1,1,2
function_entries >= 0,1,1,2
mode == VAR || mode == CONST || mode == LET,1,1,2
extra_ic_state == kNoExtraICState || kind == CALL_IC || kind == STORE_IC || kind == KEYED_STORE_IC,1,1,2
to_space_.MaximumCapacity() == from_space_.MaximumCapacity(),1,1,2
sizeof(dump_.d_[0]) == kXRegSizeInBytes,1,1,2
HEAP->InFromSpace(*p),1,1,2
immediate < 0x10000,1,1,2
"prev_block_ == this, next_block_ == this",1,1,2
!front_page->prev_page()->is_anchor(),1,1,2
kLengthOffset % kPointerSize == 0,1,1,2
type != JS_GLOBAL_PROPERTY_CELL_TYPE,1,1,2
IsFailure(),1,1,2
func_to_infer_ == NULL,1,1,2
!is_store || argc == 1,1,1,2
HeapObject::cast(obj)->Size() == JSMessageObject::kSize,1,1,2
mode == Variable::VAR || mode == Variable::CONST || mode == Variable::LET,1,1,2
continuation_captured_,1,1,2
len == 0 || len == descriptors->GetDetails(LastAdded()).index(),1,1,2
CallICBase::Contextual::kSize == ContextualBits::kSize,1,1,2
!should_log_symbols_,1,1,2
index < return_count_,1,1,2
kIsIndirectStringTag != 0,2,0,2
slots_ >= Context::MIN_CONTEXT_SLOTS && slots_ <= kMaximumSlots,1,1,2
significand <= kSignificandMask + kHiddenBit,1,1,2
index >= this->first_int32_index() && index < length(),1,1,2
function->code() == function->shared()->code(),1,1,2
smasm_->current_environment_ != NULL,1,1,2
(static_cast<unsigned>(kSmiShift) == kWRegSizeInBits) && (static_cast<unsigned>(kSmiValueSize) == kWRegSizeInBits) && (kSmiTag == 0),2,0,2
top_ == NULL || (reinterpret_cast<intptr_t>(top_) & HeapObjectTagMask()) == 0,1,1,2
key != NULL,1,1,2
nesting_level_ >= 0,1,1,2
length() > kBackPointerStorageIndex,1,1,2
NUMBER_OF_KINDS <= 32,1,1,2
index >= 1 && index <= 2,1,1,2
HasUpperLimit(),1,1,2
init_flag == this->initialization_flag(),1,1,2
pretenure() == TENURED,1,1,2
retainers_index_ >= 0,1,1,2
index < kNumberOfInobjectFields,1,1,2
raw_data_[pos_ - Scanner::kCharacterLookaheadBufferSize] == ch,1,1,2
object_size < Page::kMaxHeapObjectSize,1,1,2
member->current_loop() == loop,1,1,2
should_log_symbols_,1,1,2
unresolved_branches_ < kMaxUnresolvedBranches,1,1,2
result == (!HasPixelElements() && !HasExternalArrayElements()),1,1,2
"kUnassignedRegister <= RegisterConfiguration::kMaxDoubleRegisters, ""kUnassignedRegister too small""",1,1,2
!other->IsUndefined() && !other->IsNull(),1,1,2
sizeof(dump_.d_[0]) == kDRegSizeInBytes,1,1,2
"type(), JAVA_SCRIPT",1,1,2
9 + kDescriptorIndexBitCount + kDescriptorIndexBitCount <= 31,1,1,2
array_sub_type <= LAST_FIXED_ARRAY_SUB_TYPE,1,1,2
(object->map()->has_fast_smi_or_object_elements() || (*value == object->GetHeap()->empty_fixed_array())) == (value->map() == object->GetHeap()->fixed_array_map() || value->map() == object->GetHeap()->fixed_cow_array_map()),1,1,2
!source_position_.IsInvalid(),1,1,2
result->filler != SamplingCircularQueue::kClear,1,1,2
!is_one_byte_,1,1,2
offset < static_cast<uintptr_t>(Page::kObjectAreaSize),1,1,2
new_cp_offset >= cp_offset_,1,1,2
instruction_position_ == -1,1,1,2
StrictModeFlagField::decode(flags_) == kNonStrictMode || StrictModeFlagField::decode(flags_) == strict_mode_flag,1,1,2
(reg_size == kXRegSize) || (bitn == 0),1,1,2
cache->length() != 0,1,1,2
"sizeof(Dest) == sizeof(Source), VerifySizesAreEqual",1,1,2
entry >= 0,1,1,2
type->IsContext(),1,1,2
count >= 32 || known_smi_map < (1u << count),1,1,2
IsMonomorphic(),1,1,2
this->MayContainTransitions(),1,1,2
!info->being_expanded,1,1,2
HasNumberValue(),1,1,2
byte_code >= kConstantRepeat && byte_code <= 0x7f,1,1,2
old_space_strings_[i] != HEAP->raw_unchecked_the_hole_value(),1,1,2
FLAG_randomize_string_hashes || seed == 0,1,1,2
StoreIC::GetStrictMode(old_target->extra_ic_state()) == StoreIC::GetStrictMode(target->extra_ic_state()),1,1,2
top == NULL || (reinterpret_cast<intptr_t>(top) & HeapObjectTagMask()) == 0,1,1,2
(size == kDRegSize) || (size == kSRegSize),1,1,2
entries <= store_.length() - index_,1,1,2
!source_position_.IsUnknown(),1,1,2
index < static_cast<int>(immediates_.size()),1,1,2
descriptor != DescriptorArray::kNotFound,1,1,2
CountPagesToTop() <= kMaxMapPageIndex,1,1,2
f->nargs == -1 || f->nargs == arguments,1,1,2
context == NULL || context->IsContext(),1,1,2
offset == HeapNumber::kValueOffset,1,1,2
symbol_entries >= 0,1,1,2
where_ == TempLocation::NOT_ALLOCATED,1,1,2
CpuFeatures::IsSafeForSnapshot(SSE2) || fp_mode == kDontSaveFPRegs,1,1,2
NUMBER_OF_CONSTRAINTS <= 8,1,1,2
pos == 0,1,1,2
"CpuFeatures::IsSafeForSnapshot(isolate, SSE2) || fp_mode == kDontSaveFPRegs",1,1,2
i::LANGUAGE_END == 2,1,1,2
HeapObject::cast(obj)->Size() == JSModule::kSize,1,1,2
zone_,1,1,2
text_type() == CHAR_CLASS,1,1,2
"strcmp(kBlackBitPattern, ""10"") == 0",1,1,2
is_in_object,1,1,2
!src.is(kScratchRegister),1,1,2
"IsAligned(stack_size_in_bytes, kPointerSize)",1,1,2
N == StrLength(str) + 1,1,1,2
!closure_.is_null() && shared_info_.is_null() && script_.is_null(),1,1,2
!IsFailure(),1,1,2
proto->IsJSGlobalObject(),1,1,2
IsPCRelAddressing(),1,1,2
(mask & 0x80000000u) == 0,1,1,2
preferred_old_space == OLD_POINTER_SPACE || preferred_old_space == OLD_DATA_SPACE,1,1,2
from <= to,1,1,2
parent->IsSeqString(),1,1,2
!IsEmpty() || index > 0,1,1,2
"result, input_queue_capacity_",1,1,2
sizeof(dump_.s_[0]) == kSRegSizeInBytes,1,1,2
!mark_bit.Get(),1,1,2
!value->IsMap() && !value->IsFixedArray(),1,1,2
id < StaticVisitorBase::kVisitorIdCount,1,1,2
ExtraICStateField::kShift + ExtraICStateField::kSize + kArgumentsBits == ExtendedExtraICStateField::kShift + ExtendedExtraICStateField::kSize,1,1,2
transitions->IsFixedArray(),1,1,2
true_target != NULL && false_target != NULL,1,1,2
GetHeadPage() == Page::FromAllocationTop(reinterpret_cast<Address>(limit_)),1,1,2
mode_ != TEMPORARY,1,1,2
length() > kFirstIndex || length() == kTransitionsIndex || IsEmpty(),1,1,2
!object->IsJSGlobalProxy() && !object->IsGlobalObject(),1,1,2
len == 0 && LastAdded() == kNoneAdded,1,1,2
0 <= length && length <= struct_length(structure),1,1,2
!is_pregenerated || FindCodeInCache(&code),1,1,2
current != end,1,1,2
value->IsFixedArray() || value->IsPixelArray() || value->IsExternalArray(),1,1,2
object->IsGlobalObject(),1,1,2
1 + kStubMajorKeyBits + kSafepointTableOffsetBitCount <= 32,1,1,2
index < characters_,1,1,2
pre_allocated * kPointerSize + kHeaderSize <= size,1,1,2
free_slot_count_ > 0,1,1,2
is_uint2(scale),1,1,2
(num_pending_32_bit_reloc_info_ == 0) || (start + num_pending_64_bit_reloc_info_ * kDoubleSize < (first_const_pool_32_use_ + kMaxDistToIntPool)),1,1,2
range->Kind() == GENERAL_REGISTERS,1,1,2
!handle->is_deprecated(),1,1,2
iterator_.frame()->is_arguments_adaptor(),1,1,2
code < NumAllocatableRegisters(),1,1,2
"CpuFeatures::IsSafeForSnapshot(isolate, SSE2) || save_fp == kDontSaveFPRegs",1,1,2
"kFloat64, type()",1,1,2
env_->values()->at(current_) != NULL,1,1,2
kind() == STUB || kind() == TYPE_RECORDING_UNARY_OP_IC || kind() == TYPE_RECORDING_BINARY_OP_IC || kind() == COMPARE_IC,1,1,2
string_->IsSeqString() || string->IsExternalString(),1,1,2
elements_kind == this->elements_kind(),1,1,2
to.IsSmiOrInteger32(),1,1,2
object_size <= Page::kMaxNonCodeHeapObjectSize,1,1,2
"strcmp(kImpossibleBitPattern, ""01"") == 0",1,1,2
sizeof(dump_.s_[0]) == kWRegSizeInBytes,1,1,2
type_ == kContextVariable || type_ == kProperty || type_ == kInternal,1,1,2
finished_,1,1,2
stack_height_ >= 0,1,1,2
!stack_parameter_count_.is_valid(),1,1,2
values[T::kCalleeIndex]->IsJSFunction(),1,1,2
kPointerSize == kInt32Size,1,1,2
HasNoUses(),1,1,2
!string->IsConsString(),1,1,2
IsFastSmiOrObjectElementsKind(elements_kind),1,1,2
BitCast<uint64_t>(OS::nan_value()) != kHoleNanInt64,1,1,2
obj->type() == typeConst,1,1,2
growth_factor > 1,1,1,2
!(details_.type() == CONSTANT && !IsFound()),1,1,2
isolate()->use_crankshaft(),1,1,2
!masm_.ScratchRegister().IsAllocatable(),1,1,2
(1 << kTranscendentalTypeBits) >= kNumberOfCaches,1,1,2
this->IsSmi() || this->length() > kFirstIndex || this == HEAP->empty_descriptor_array(),1,1,2
length == 0 || instance_descriptors()->HasEnumCache(),1,1,2
HasDictionaryElements(),1,1,2
"!AreAliased(StackPointer(), tmp0, tmp1)",1,1,2
(data_ & kTagMask) == kListTag,1,1,2
info()->replacement_calculated,1,1,2
(lhs_.is(a0) && rhs_.is(a1)) || (lhs_.is(a1) && rhs_.is(a0)),1,1,2
((info << kFailureTagSize) >> kFailureTagSize) == info,1,1,2
successor_ == NULL,1,1,2
"static_cast<int>(result->Hash()), static_cast<int>(hash_field >> String::kHashShift)",1,1,2
array->length() >= index && array->get(index)->IsCode(),1,1,2
start_index < length,1,1,2
global_scope_ == NULL,1,1,2
number != 0,1,1,2
kShiftSize != 0,1,1,2
index >= 0 && index < InputCount(),1,1,2
!shared_info.is_null(),1,1,2
type != PROPERTY_CELL_TYPE,1,1,2
value->is_constant(),1,1,2
output_handle_ != NULL,1,1,2
IS_POWER_OF_TWO(kSlicedNotConsMask) && kSlicedNotConsMask != 0,1,1,2
0 <= id && id < 256,1,1,2
value->IsFixedArray() || value->IsExternalArray(),1,1,2
(reinterpret_cast<intptr_t>(space) & kPageHeaderTagMask) == 0,1,1,2
kDoubleSize == kPointerSize * 2,1,1,2
mode_ >= 0 && mode_ <= LAST_CLONE_MODE,1,1,2
string->length() != 0,1,1,2
scratch_register_acquired_,1,1,2
isolate()->optimizing_compiler_thread()->IsOptimizerThread() || !isolate()->heap()->IsAllocationAllowed(),1,1,2
sub_type < Code::NUMBER_OF_KINDS,1,1,2
end()->SuccessorCount() == 0,1,1,2
IsMovT(Memory::int32_at(pc + kInstrSize)) && IsLdrPpRegOffset(Memory::int32_at(pc + 2 * kInstrSize)),1,1,2
!object->IsSmi(),1,1,2
number_of_own_descriptors < descriptors->number_of_descriptors(),1,1,2
closure_.is_null() && shared_info_.is_null() && !script_.is_null(),1,1,2
counters_ != NULL,1,1,2
is_uint2(mod),1,1,2
const_cast<Object*>(obj)->IsHashTable(),1,1,2
kWRegSize == kSRegSize,1,1,2
HasBuiltinFunctionId(),1,1,2
VirtualFrame::SpilledScope::is_spilled(),1,1,2
kMaxAsciiCharCode == 0x7F,1,1,2
0 == Linkage::kInterpreterBytecodeParameter,1,1,2
!disable_allocation_sites || AllocationSiteInfo::GetMode(kind) == TRACK_ALLOCATION_SITE,1,1,2
map_ - 1 <= p && p < end,1,1,2
!index.is(rsp) || base.is(rsp) || base.is(r12),1,1,2
follows_start == UNKNOWN || follows_start == that->follows_start,1,1,2
"0, static_cast<int>( reinterpret_cast<intptr_t>(backing_store) % sizeof(unsigned))",1,1,2
error_message_ != NULL,1,1,2
kSmiTag == 0 && kSmiShift < 2,2,0,2
top_scope_ != NULL,1,1,2
obj->IsHeapObject(),1,1,2
IsLdrPcImmediateOffset(instr),1,1,2
length() >= kFirstIndex || this == HEAP->empty_descriptor_array(),1,1,2
kind() == STUB || kind() == COMPILED_STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC || kind() == TO_BOOLEAN_IC,1,1,2
limit == NULL || (reinterpret_cast<intptr_t>(limit) & HeapObjectTagMask()) == 0,1,1,2
follows_newline == UNKNOWN || follows_newline == that->follows_newline,1,1,2
kSmiTag == 0 && kSmiShift < kPointerSizeLog2,2,0,2
!IsContextual(),1,1,2
space_number >= 0,1,1,2
"no_side_effects_scope_environment_delta_, environment()->push_count() - environment()->pop_count()",1,1,2
is_inline_cache_stub() || result == UNINITIALIZED || result == DEBUG_STUB,1,1,2
string == NULL || *type_out == string->map()->instance_type(),1,1,2
ptr == top || ptr + HeapObject::kHeaderSize <= top,1,1,2
length <= string->length(),1,1,2
HasStringValue(),1,1,2
to_space_.current_page()->ContainsLimit(allocation_info_.limit()),1,1,2
number_of_own_descriptors > 0,1,1,2
HasCustomCallGenerator(),1,1,2
kSmiTag == 0 && kSmiShift < kDoubleSizeLog2,2,0,2
"0, value & (kPointerSize - 1)",1,1,2
code_sub_type < Code::NUMBER_OF_KINDS,1,1,2
holder::offset % kPointerSize == 0,1,1,2
 (location_ == NULL || IsDereferenceAllowed(NO_DEFERRED_CHECK)) && (o.location_ == NULL || o.IsDereferenceAllowed(NO_DEFERRED_CHECK)),1,1,2
!owns_data_,1,1,2
Color(from) == Color(to),1,1,2
0 <= length && length <= structured->length,1,1,2
FLAG_randomize_hashes || raw_running_hash_ == 0,1,1,2
LAST_CONTEXT_CHECK_MODE == 1,1,1,2
0 <= enum_index && enum_index < len,1,1,2
location_ == NULL || IsDereferenceAllowed(INCLUDE_DEFERRED_CHECK),1,1,2
space_number <= LAST_SPACE,1,1,2
!after_push_argument_ || inlined_arguments_,1,1,2
array->HasFastSmiOrObjectElements(),1,1,2
i::IsDecimalDigit(c0_),1,1,2
!scratch_register_used_,1,1,2
t == kUnknownType || t == kPrimitiveType || t == kNumberType || t == kInteger32Type || t == kSmiType || t == kHeapNumberType || t == kStringType,1,1,2
this->map()->inobject_properties() == map->inobject_properties(),1,1,2
1 == Linkage::kInterpreterBytecodeArrayParameter,1,1,2
kSmiTag == 0 && kSmiShift == 1,2,0,2
(reg_size == kXRegSize) || is_uint6(imms + 3),1,1,2
top <= Limit(),1,1,2
!reinterpret_cast<Object*>( reinterpret_cast<intptr_t>(callback))->IsHeapObject(),1,1,2
kToBooleanStateFirstBit + kToBooleanStateBitCount <= 32,1,1,2
!key->IsString() || details.IsDeleted() || details.dictionary_index() > 0,1,1,2
type != CELL_TYPE,1,1,2
IsDereferenceAllowed(true) && other.IsDereferenceAllowed(true),1,1,2
parent_loop_header_ == NULL,1,1,2
!new_space_->FromSpaceContains(address),1,1,2
reg.Is64Bits() || (shift_amount < kWRegSize),1,1,2
to_kind == DICTIONARY_ELEMENTS,1,1,2
!HasHashCode(),1,1,2
unique_id_ != UniqueValueId(heap->minus_zero_value()),1,1,2
this->block(node) == NULL || this->block(node) == block,1,1,2
kAlignment >= kPointerSize,1,1,2
length >= 0,1,1,2
!key->IsTheHole(),1,1,2
!this->descriptors()->IsDescriptorArray() || descriptors->number_of_descriptors() == 0 || descriptors->HasEnumCache() || !this->descriptors()->HasEnumCache(),1,1,2
0 <= index && static_cast<uint32_t>(index) <= kMaxUInt32,1,1,2
!val->IsJSGlobalPropertyCell(),1,1,2
depth >= 1,1,1,2
object->IsFlat(),1,1,2
i < kNumberOfTrackedSideEffects,1,1,2
CountTotalPages() <= kMaxMapPageIndex,1,1,2
size_upper_bound_ == NULL,1,1,2
object->map() != object->GetHeap()->allocation_memento_map(),1,1,2
IsLoadStub(),1,1,2
follows_word == UNKNOWN || follows_word == that->follows_word,1,1,2
singleton_ != NULL,1,1,2
!(FLAG_track_double_fields && field_representation_.IsDouble()) || transition_.is_null(),1,1,2
language_mode() == CLASSIC_MODE,1,1,2
needs_extended_extra_ic_state(kind()),1,1,2
this->IsSmi() || this->MayContainTransitions() || this == HEAP->empty_descriptor_array(),1,1,2
"Min(dst, src) + num_bytes <= Max(dst, src)",1,1,2
kCompareStateFirstBit + kCompareStateBitCount <= 32,1,1,2
(code & ~0x7) == 0,1,1,2
object->GetIsolate()->heap()->InFromSpace(*p),1,1,2
!IsScratchRegister(rd) || scratch_register_acquired_,1,1,2
type() == MAP_TRANSITION || type() == CONSTANT_TRANSITION || type() == EXTERNAL_ARRAY_TRANSITION,1,1,2
(instr & kConstantPoolMarkerMask) == kConstantPoolMarker,1,1,2
backing_[kStrictModeIndex] == SLOPPY || backing_[kStrictModeIndex] == STRICT,1,1,2
!current_iterator_.Done(),1,1,2
value->IsBoolean(),1,1,2
length_ >= capacity_,1,1,2
"node, replacement",1,1,2
IsModule() && IsFrozen() && Chase()->index_ == -1,1,1,2
(0 < size) && (size <= Page::kMaxNonCodeHeapObjectSize),1,1,2
array->IsFixedArray() || array->IsExternalArray(),1,1,2
n > 0,1,1,2
*handle_ != heap->nan_value(),1,1,2
next_chunk()->owner() == owner(),1,1,2
isolate()->top_lookup_result() == this,1,1,2
!o->IsScript(),1,1,2
value()->HasFastObjectElements(),1,1,2
"0, Smi::FromInt(0)",1,1,2
!(details_.type() == FIELD && !IsFound()),1,1,2
target()->is_store_stub() || target()->is_keyed_store_stub(),1,1,2
kSmiShift == kSmiTagSize,1,1,2
!heap->InNewSpace(heap->empty_fixed_array()),1,1,2
constant >= 0 && constant < kRootArrayNumberOfConstantEncodings,1,1,2
value->IsObjectLiteralGeneric() || value->IsObjectLiteralFast(),1,1,2
RelocInfo::IsCodeTarget(rinfo->rmode()),1,1,2
!is_jsruntime() || callruntime_feedback_slot_ != kInvalidFeedbackSlot,1,1,2
has_int32_value_ || !object_.handle()->IsSmi(),1,1,2
BitCast<uint64_t>(base::OS::nan_value()) != kHoleNanInt64,1,1,2
!StackGuard::IsPreempted(),1,1,2
direction == OLD_TO_NEW,1,1,2
t->IsBitset() || t->IsClass() || t->IsConstant() || t->IsRange() || t->IsUnion() || t->IsArray() || t->IsFunction() || t->IsContext(),1,1,2
!pre_allocated_value->IsHeapObject() || !GetHeap()->InNewSpace(pre_allocated_value),1,1,2
reservation,1,1,2
mode == ALLOW_COPIED_DOUBLE_ELEMENTS,1,1,2
cache_line_size_ != 0,1,1,2
result.GetLoadByFieldIndex() == orig_index,1,1,2
(0 <= id) && (id < StaticVisitorBase::kVisitorIdCount),1,1,2
(space).page_low() <= (info).top() && (info).top() <= (space).page_high() && (info).limit() <= (space).page_high(),1,1,2
RelocInfo::IsCodeAgeSequence(rinfo->rmode()),1,1,2
i::ScannerConstants::kIsIdentifierStart.get(c0_),1,1,2
next == token,1,1,2
IsHandler(),1,1,2
sizeof(dump_.w_[0]) == kWRegSizeInBytes,1,1,2
is_call_stub() || is_keyed_call_stub() || kind() == STUB || is_handler(),1,1,2
(*value == object->GetHeap()->empty_fixed_array()) || (object->map()->has_fast_double_elements() == value->IsFixedDoubleArray()),1,1,2
HasMapValue() || !has_stable_map_value_,1,1,2
dominator_ >= 0,1,1,2
CanBeWeakStub(),1,1,2
implicit_args[v8::Arguments::kCalleeIndex]->IsJSFunction(),1,1,2
kNotStringTag + kIsInternalizedMask > LAST_TYPE,1,1,2
unbuffered_start_ != NULL,1,1,2
transition_array->GetTarget(new_target_index) == target,1,1,2
top == limit_,1,1,2
has_been_globally_setup_,1,1,2
c0_ == '*',1,1,2
element < static_cast<int>(sizeof(T) * CHAR_BIT),1,1,2
fd.SizeInBits() == kSRegSizeInBits,1,1,2
!heap_->InNewSpace(obj),1,1,2
par_index < descriptor_->GetEnvironmentLength(),1,1,2
blocks_.length() == 0,1,1,2
CpuFeatures::IsSafeForSnapshot(FPU) || save_fp == kDontSaveFPRegs,1,1,2
!exception_obj->IsException(),1,1,2
"instruction_start() - address(), Code::kHeaderSize",1,1,2
kMarkedForDeoptimizationFirstBit + kMarkedForDeoptimizationBitCount <= 32,1,1,2
kInstanceTypeOffset == Internals::kMapInstanceTypeOffset,1,1,2
"static_cast<int>(instruction_start() - address()), Code::kHeaderSize",1,1,2
node->is_block(),1,1,2
(num_pending_reloc_info_ == 0) || (pc_offset() < (first_const_pool_use_ + kMaxDistToPool)),1,1,2
ZoneScope::nesting() > 0,1,1,2
index != 0,1,1,2
array->IsFixedArray() || array->IsPixelArray(),1,1,2
(kIsIndirectStringMask & kStringEncodingMask) == 0,2,0,2
(value & 0xC0000000) == 0xC0000000 || (value & 0xC0000000) == 0x0,1,1,2
from < length_,1,1,2
new_input_count < input_count_,1,1,2
true_branch != NULL || false_branch != NULL,1,1,2
kStubMajorKeyFirstBit + kStubMajorKeyBits <= 32,1,1,2
op == Token::EQ_STRICT,1,1,2
par_index < descriptor_->environment_length(),1,1,2
kind() == COMPARE_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC,1,1,2
sizeof(dump_.x_[0]) == kXRegSizeInBytes,1,1,2
map()->has_fast_elements() || map()->has_fast_smi_only_elements() || map()->has_fast_double_elements(),1,1,2
"length_, kMaximumClonedProperties",1,1,2
parent->IsSeqString() || parent->IsExternalString(),1,1,2
kIsTurbofannedBit + 1 <= 32,1,1,2
index >= first_heap_ptr_index() && index < first_int32_index(),1,1,2
"c0_, '['",1,1,2
DescriptorArray::cast(this),1,1,2
strict_mode_flag == kStrictMode || strict_mode_flag == kNonStrictMode,1,1,2
LAST_JS_RECEIVER_TYPE == LAST_TYPE,2,0,2
x != 0,1,1,2
array->IsSortedNoDuplicates(valid_entries),1,1,2
shape.IsSequential(),1,1,2
loc->is_temporary(),1,1,2
!IsBoilerplate(),1,1,2
logger_ != NULL,1,1,2
FLAG_randomize_hashes || seed == 0,1,1,2
Code::GetStrictMode(code->extra_ic_state()) == strict_mode(),1,1,2
implicit_args[v8::Arguments::kHolderIndex]->IsHeapObject(),1,1,2
out->length() == OUTPUT_SIZE,1,1,2
__object__ != (ISOLATE)->heap()->exception(),1,1,2
IsAsciiSign(),1,1,2
(Page::kPageSize - MemoryChunk::kBodyOffset) % (2 * kPointerSize) == 0,1,1,2
fd.SizeInBits() == kSRegSize,1,1,2
is_black == (Color(to) == BLACK_OBJECT),1,1,2
!result || gc_state_ != NOT_IN_GC || InToSpace(object),1,1,2
store_mode != STORE_TO_INITIALIZED_ENTRY || elements_kind == FAST_SMI_ELEMENTS,1,1,2
"0, index",1,1,2
info_->is_osr(),1,1,2
!key->IsName() || details.IsDeleted() || details.dictionary_index() > 0,1,1,2
IsPowerOf2(capacity),1,1,2
kSmiTag == 0 && kSmiShift > 2,2,0,2
cur_addr_ <= cur_end_,1,1,2
value->IsCallRuntime(),1,1,2
frame_->is_java_script() || frame_->is_exit(),1,1,2
index < static_cast<int>(instructions_.size()),1,1,2
location_ != NULL && !(*location_)->IsFailure(),1,1,2
mode_ == 0 || mode_ == 1 || mode_ == 2 || mode_ == 3,1,1,2
index >= first_code_ptr_index() && index < first_int32_index(),1,1,2
"'{', c0_",1,1,2
"IsAligned(reinterpret_cast<intptr_t>(resource), kPointerSize)",1,1,2
is_used(num),1,1,2
result < current_.limit,1,1,2
operands.length() == descriptor->GetEnvironmentLength(),1,1,2
!Marking::IsWhite(mark_bit),1,1,2
!GetHeap()->InNewSpace(GetHeap()->null_value()),1,1,2
result->is_valid(),1,1,2
!position.IsUnknown(),1,1,2
kInvalidatedWeakStubFirstBit + kInvalidatedWeakStubBitCount <= 32,1,1,2
map()->has_fast_double_elements() == value->IsFixedDoubleArray(),1,1,2
kHandlerTableOffset + kPointerSize == kDeoptimizationDataOffset,1,0,1
kResourceOffset == Internals::kStringResourceOffset,1,0,1
WeakCell::kSize >= 2 * kPointerSize,1,0,1
SKIP_STRINGS == static_cast<PropertyFilter>(v8::PropertyFilter::SKIP_STRINGS),1,0,1
FOREIGN_TYPE == Internals::kForeignType,1,0,1
kSmiTag == 0 && kSmiTagSize < kDoubleSizeLog2,1,0,1
kContextIndexBits + kSlotIndexBits <= kSubMinorKeyBits,1,0,1
WeakCell::kValueOffset == AllocationSite::kTransitionInfoOffset,1,0,1
ONLY_ENUMERABLE == static_cast<PropertyFilter>(DONT_ENUM),1,0,1
kTheHoleValueRootIndex == Internals::kTheHoleValueRootIndex,1,0,1
kTableOffset + kPointerSize == kNextOffset,1,0,1
AbstractCode::FUNCTION == static_cast<AbstractCode::Kind>(Code::FUNCTION),1,0,1
v8::String::TWO_BYTE_ENCODING == kTwoByteStringTag,1,0,1
static_cast<int>((kMaxSize - kHeaderSize)/sizeof(uint16_t)) >= String::kMaxLength,1,0,1
ChunkIndexBits::kNext == ValueIndexBits::kNext,1,0,1
ONLY_ENUMERABLE == static_cast<PropertyFilter>(v8::PropertyFilter::ONLY_ENUMERABLE),1,0,1
IS_POWER_OF_TWO(kHalfStep),1,0,1
FIRST_NONSTRING_TYPE == Internals::kFirstNonstringType,1,0,1
SpaceBits::kNext == 32,1,0,1
"kSetterFunction, kIsSetterFunction",1,0,1
ALL_PROPERTIES == static_cast<PropertyFilter>(v8::PropertyFilter::ALL_PROPERTIES),1,0,1
ONLY_WRITABLE == static_cast<PropertyFilter>(v8::PropertyFilter::ONLY_WRITABLE),1,0,1
WeakCell::kValueOffset == FixedArray::kLengthOffset,1,0,1
JS_API_OBJECT_TYPE == Internals::kJSApiObjectType,1,0,1
kSlackTrackingCounterStart <= ConstructionCounter::kMax,1,0,1
TypeField::kNext == LocationField::kNext,1,0,1
kind() == COMPARE_IC || kind() == BINARY_OP_IC || kind() == STUB || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC,1,0,1
ONLY_CONFIGURABLE == static_cast<PropertyFilter>(DONT_DELETE),1,0,1
JS_OBJECT_TYPE == Internals::kJSObjectType,1,0,1
kGroupCount <= GroupField::kMax + 1,1,0,1
kNextOffset + kPointerSize == kSize,1,0,1
holder::offset % kPointerSize == PSEUDO_SMI_LO_ALIGN,1,0,1
kTypeFeedbackInfoOffset + kPointerSize == kNextCodeLinkOffset,1,0,1
kSingletonTag == 0,1,0,1
(kExternalStringTag | kTwoByteStringTag) == Internals::kExternalTwoByteRepresentationTag,1,0,1
(kMaxSize - kHeaderSize) >= String::kMaxLength,1,0,1
IS_POWER_OF_TWO(kSlicedNotConsMask),1,0,1
kDeoptimizationDataOffset + kPointerSize == kSourcePositionTableOffset,1,0,1
kHeaderSize == Internals::kFixedArrayHeaderSize,1,0,1
kBitFieldSlot + kPointerSize == kSize,1,0,1
is_valid_language_mode(args.smi_at(index)),1,0,1
NUMBER_OF_TYPES <= 16,1,0,1
((SKIP_STRINGS | SKIP_SYMBOLS | ONLY_ALL_CAN_READ) & ALL_ATTRIBUTES_MASK) == 0,1,0,1
kNumberOfHotObjects == HotObjectsList::kSize,1,0,1
ODDBALL_TYPE == Internals::kOddballType,1,0,1
ALL_PROPERTIES == static_cast<PropertyFilter>(NONE),1,0,1
"kGetterFunction, kIsGetterFunction",1,0,1
1 + kSafepointTableOffsetBitCount <= 32,1,0,1
 (args.smi_at(index) & ~(READ_ONLY | DONT_ENUM | DONT_DELETE)) == 0,1,0,1
kind() == STUB || kind() == HANDLER || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC || kind() == TO_BOOLEAN_IC,1,0,1
"MemoryChunk::kLiveBytesOffset == offsetof(MemoryChunk, live_byte_count_)",1,0,1
std::numeric_limits<Dst>::is_specialized,1,0,1
ONLY_WRITABLE == static_cast<PropertyFilter>(READ_ONLY),1,0,1
sizeof(AllocationResult) == kPointerSize,1,0,1
Dictionary::kEntrySize == 2 || Dictionary::kEntrySize == 3,1,0,1
kPointerSize == (1 << kPointerSizeLog2),1,0,1
kHeaderSize == Internals::kJSObjectHeaderSize,1,0,1
PretenureDecisionBits::kMax >= kLastPretenureDecisionValue,1,0,1
static_cast<int>(OperandScale::kQuadruple) == 4 && OperandScale::kLast == OperandScale::kQuadruple,1,0,1
KindField::kNext == LocationField::kShift,1,0,1
kNull == Internals::kNullOddballKind,1,0,1
"MemoryChunk::kSizeOffset == offsetof(MemoryChunk, size_)",1,0,1
kKindOffset == Internals::kOddballKindOffset,1,0,1
(kExternalStringTag | kOneByteStringTag) == Internals::kExternalOneByteRepresentationTag,1,0,1
kDescriptorIndexBitCount + kDescriptorIndexBitCount == 20,1,0,1
kMapOffset == Internals::kHeapObjectMapOffset,1,0,1
std::numeric_limits<T>::is_iec559,1,0,1
NUMBER_OF_KINDS <= KindField::kMax,1,0,1
kAttachedReferenceSpace < (1 << kSpaceTagSize),1,0,1
"MemoryChunk::kWriteBarrierCounterOffset == offsetof(MemoryChunk, write_barrier_counter_)",1,0,1
ImmediateInitializer<T>::kIsIntType,1,0,1
EMBEDDER_DATA_INDEX == Internals::kContextEmbedderDataIndex,1,0,1
kCanHaveWeakObjects + 1 <= 32,1,0,1
kBackingStoreOffset + kPointerSize == kBitFieldSlot,1,0,1
LargePage::kMaxCodePageSize <= TypedSlotSet::kMaxOffset,1,0,1
kRelocationInfoOffset + kPointerSize == kHandlerTableOffset,1,0,1
(kind == FAST_ELEMENTS && (elements()->map() == GetHeap()->fixed_array_map() || elements()->map() == GetHeap()->fixed_cow_array_map())) || (kind == DICTIONARY_ELEMENTS && elements()->IsFixedArray() && elements()->IsDictionary()) || (kind > DICTIONARY_ELEMENTS),1,0,1
NUMBER_OF_MODES <= kBitsPerInt,1,0,1
kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == BINARY_OP_IC || kind() == STUB || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC,1,0,1
FieldIndexField::kNext <= 31,1,0,1
sizeof(MacroAssembler) < 128 * kPointerSize,1,0,1
v8::String::ONE_BYTE_ENCODING == kOneByteStringTag,1,0,1
AllowOSRAtLoopNestingLevelField::kMax >= kMaxLoopNestingMarker,1,0,1
SKIP_SYMBOLS == static_cast<PropertyFilter>(v8::PropertyFilter::SKIP_SYMBOLS),1,0,1
kToNumberRawOffset == HeapNumber::kValueOffset,1,0,1
kHeaderSize == Internals::kContextHeaderSize,1,0,1
static_cast<uint32_t>(kStringEncodingMask) == Internals::kStringEncodingMask,1,0,1
(1L << kBitsPerRegisterNumber) >= Register::kNumRegisters,1,0,1
kEntrySize > 0,1,0,1
kStackSlotsFirstBit + kStackSlotsBitCount <= 32,1,0,1
kind() == STUB || kind() == UNARY_OP_IC || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == TO_BOOLEAN_IC,1,0,1
kSourcePositionTableOffset + kPointerSize == kTypeFeedbackInfoOffset,1,0,1
kind() == COMPARE_IC || kind() == BINARY_OP_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == STORE_IC || kind() == KEYED_STORE_IC,1,0,1
kind() == STUB || kind() == HANDLER || kind() == BINARY_OP_IC || kind() == COMPARE_IC || kind() == COMPARE_NIL_IC || kind() == STORE_IC || kind() == LOAD_IC || kind() == KEYED_LOAD_IC || kind() == TO_BOOLEAN_IC,1,0,1
Name::kHashNotComputedMask == kHeapObjectTag,1,0,1
(generic - base + Heap::kMinObjectSizeInWords) == 10,1,0,1
TypeField::kShift == KindField::kShift,1,0,1
kUndefined == Internals::kUndefinedOddballKind,1,0,1
kTagMask + 1 <= kPointerAlignment,1,0,1
Assembler::kCallSizeWithoutRelocation == 4 * kInstructionSize,1,0,1
WeakCell::kValueOffset == Name::kHashFieldSlot,1,0,1
"sizeof(x) == sizeof(arg), ""Size mismatch""",1,0,1
kForeignAddressOffset == Internals::kForeignAddressOffset,1,0,1
ConsString::kFirstOffset == SlicedString::kParentOffset,1,0,1
IS_POWER_OF_TWO(kStackSize),1,0,1
args[index]->IsBoolean(),1,0,1
sizeof(T) <= 8,1,0,1
holder::offset % kPointerSize == PSEUDO_SMI_HI_ALIGN,1,0,1
Code::NUMBER_OF_KINDS <= KindField::kMax + 1,1,0,1
kPointerSize == kInt64Size || kPointerSize == kInt32Size,1,0,1
ONLY_CONFIGURABLE == static_cast<PropertyFilter>( v8::PropertyFilter::ONLY_CONFIGURABLE),1,0,1
NUMBER_OF_CPU_FEATURES <= kBitsPerInt,1,0,1
kPointerSize <= 8,1,0,1
(kStringRepresentationMask | kStringEncodingMask) == Internals::kFullStringRepresentationMask,1,0,1
DictionaryStorageField::kNext <= 31,1,0,1
"kUnassignedRegister <= RegisterConfiguration::kMaxFPRegisters, ""kUnassignedRegister too small""",1,0,1
"sizeof(Dest) == sizeof(Source), ""source and dest must be same size""",1,0,1
kSafepointTableOffsetFirstBit + kSafepointTableOffsetBitCount <= 32,1,0,1
(Name::kEmptyHashField & kHeapObjectTag) == kHeapObjectTag,1,0,1
args[index]->ToInt32(&name),1,0,1
kind() == STUB || kind() == TYPE_RECORDING_BINARY_OP_IC || kind() == COMPARE_IC,0,1,1
static_cast<int>(INSIDE_TYPEOF) == 0,1,0,1
NUMBER_OF_IDS < (1 << kStubMajorKeyBits),1,0,1
kInstanceTypeAndBitFieldOffset == Internals::kMapInstanceTypeAndBitFieldOffset,1,0,1
kByteLengthOffset + kPointerSize == kBackingStoreOffset,1,0,1
kDeoptimizationDataOffset + kPointerSize == kTypeFeedbackInfoOffset,1,0,1
Dictionary::kEntrySize == 2,1,0,1
Name::kEmptyHashField == 0x3,1,0,1
obj->IsNumber(),1,0,1
