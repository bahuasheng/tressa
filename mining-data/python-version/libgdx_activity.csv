x_val,y_added,y_removed,y_combined
 0 ,37,35,72
 stream ,28,21,49
 stream && stream->cursor ,24,18,42
 decoder && decoder->current_subfont ,22,11,33
 border->start >= 0 ,16,12,28
 arrstack != NULL ,18,9,27
 ( face->len_buildchar == 0 ) == ( face->buildchar == NULL ) ,12,9,21
 range >= 1 && range <= 3 ,12,9,21
 decoder ,14,7,21
 !CUR.face->unpatented_hinting ,9,9,18
"size < 16384, ""size too big: """,8,8,16
"(size == 1) || (size == 2) || (size == 4) || (size == 8) || ((size % 16) == 0), ""size not a multiple of 16byte: """,8,8,16
"ea != 0, ""Nullpointer EA: """,8,8,16
" (((uintsize)ea % 16) == 0) || (size < 16), ""XDR Address not aligned: """,8,8,16
" ((uintsize)ea%16)==((uintsize)ls%16), ""wrong Quadword alignment of LS and EA: """,8,8,16
"ls != 0, ""Nullpointer LS: """,8,8,16
" (((uintsize)ls % 16) == 0) || (size < 16), ""LS Address not aligned: """,8,8,16
a == 0,8,8,16
" ((((uintsize)ls % size) == 0) && (((uintsize)ea % size) == 0)) || (size > 16), ""Not naturally aligned: """,8,8,16
 first != NULL ,8,6,14
"strncmp(cp, ""TYPE"", 4)==0",7,7,14
"strncmp(cp, ""STRC"", 4)==0",7,7,14
 I >= 0 ,7,7,14
 face ,8,6,14
"strncmp(cp, ""TLEN"", 4)==0",7,7,14
"t, monitorOwner(t, monitor) == t",6,6,12
 outline && outline->decoder ,6,3,9
c >= 0 && c < 19,4,4,8
x+gw < pw,4,4,8
rbExtra,4,4,8
sizes[i] <= (1 << i),4,4,8
e->y0 <= start_point,4,4,8
z->valid,4,4,8
unicode_codepoint <= ttUSHORT(data + endCount + 2*item),4,4,8
y+gh < ph,4,4,8
 stream && stream->cursor == 0 ,4,3,7
 list->num_nodes == 0 ,4,3,7
 FT_ABS( point->out_dir ) == major_dir && point->in_dir != point->out_dir ,4,3,7
 encoding->code_first <= encoding->code_last ,4,3,7
a->num_bits == 0,4,3,7
 (FT_UInt)( char_code - FTC_CMAP_NODE( node )->first ) < FTC_CMAP_INDICES_MAX ,4,3,7
 cmap->code_to_sid != NULL ,4,3,7
 coderange->base != NULL ,4,3,7
out_n == 2 || out_n == 4,4,3,7
c == 18,4,3,7
 FT_Outline_Check( outline ) == 0 ,4,3,7
 scaling ,4,3,7
 num_args >= 0 ,4,3,7
 p == table + 518 ,4,3,7
out_n == s->img_n || out_n == s->img_n+1,4,3,7
 flag != NULL ,4,3,7
 node ,4,3,7
 known_othersubr_result_cnt == 0 || unknown_othersubr_result_cnt == 0 ,4,3,7
z->size[b] == s,4,3,7
 **acur == '{' ,4,3,7
A,4,3,7
 i < charmap->face->num_charmaps ,4,3,7
 cur[0]->clazz ,4,3,7
 snode->count <= FTC_SBIT_ITEMS_PER_NODE ,4,3,7
 first == node ,4,3,7
 cmap->indices != NULL ,4,3,7
 name ,4,3,7
 (slot->internal->flags & FT_GLYPH_OWN_BITMAP) == 0 ,4,3,7
 left->start >= 0 ,4,3,7
 axis_count <= T1_MAX_MM_AXIS ,4,3,7
 ( decoder->len_buildchar == 0 ) == ( decoder->buildchar == NULL ) ,4,3,7
z->code_buffer < (1U << z->num_bits),4,3,7
img_n+1 == out_n,4,3,7
 prev == node ,4,3,7
bits <= 16,4,3,7
 module->clazz && module->clazz->get_interface ,4,3,7
 state->free_ent < state->prefix_size ,4,3,7
req_comp >= 1 && req_comp <= 4,4,3,7
 face && face->bdffont ,4,3,7
s->img_out_n == 4,4,3,7
 block == NULL ,4,3,7
 point <= end_point && ( point->flags & touch_flag ) != 0 ,4,3,7
 cf2_hintmap_isValid( &glyphpath->hintMap ) || glyphpath->hintMap.count == 0 ,4,2,6
denom != 0,3,3,6
-bits_left <= MAD_BUFFER_GUARD * CHAR_BIT,3,3,6
stream->md_len + md_len - si.main_data_begin <= MAD_BUFFER_MDLEN,3,3,6
 hintmask->byteCount > 0 ,4,2,6
type == CYLINDER,3,3,6
add,3,3,6
(((j->code_buffer) >> (32 - h->size[c])) & bmask[h->size[c]]) == h->code[c],3,3,6
c < infoCount,3,3,6
 (FT_ULong)IP <= coderange->size ,3,3,6
hsz == 108,3,3,6
factor != 0,3,3,6
c < nextFree,2,2,4
c >= data,2,2,4
 index < length() ,2,2,4
I < 3,2,2,4
index >= 0,2,2,4
 I <= 2 ,2,2,4
type == SPHERE,2,2,4
 globals->metrics[nn]->clazz == clazz ,2,2,4
index < size,2,2,4
"t, classArrayElementSize(t, objectClass(t, array)) == BytesPerWord",2,2,4
"s, offset + size <= position",2,2,4
rem,2,2,4
"t, classFixedSize(t, objectClass(t, array)) == BytesPerWord * 2",2,2,4
sinfo->stackHeader == this,2,2,4
count > 0,2,2,4
 decoder && decoder->cff ,2,1,3
 FT_STREAM_POS() == 0 ,2,1,3
 newSize > 0 ,2,1,3
 decoder && decoder->builder.face ,2,1,3
 charstring + len >= charstring ,2,1,3
 cf2_hint_isValid( bottomHintEdge ) || cf2_hint_isValid( topHintEdge ) ,2,1,3
 unitsPerEm > 0 ,2,1,3
 cf2_hint_isValid( &hintmap->edge[i] ) ,2,1,3
 j < hintmap->count ,2,1,3
 decoder && decoder->builder.glyph ,2,1,3
 i < j || hintmap->edge[i].dsCoord <= hintmap->edge[j].dsCoord ,2,1,3
 j > 0 ,2,1,3
 params->op == CF2_PathOpCubeTo ,2,1,3
 ptr != NULL ,2,1,3
 stream == face->root.stream ,2,1,3
 cf2_hint_isValid( &hintmap->edge[j] ) ,2,1,3
img_n == 3,2,1,3
 decoder->locals ,2,1,3
 cf2_hint_isLocked( &hintmap->edge[i] ) == cf2_hint_isLocked( &hintmap->edge[j] ) ,2,1,3
 cf2_stack_count( stack ) <= CF2_OPERAND_STACK_SIZE ,2,1,3
 transform->b == 0 && transform->c == 0 ,2,1,3
 charstring_base + charstring_len >= charstring_base ,2,1,3
 decoder && decoder->builder.face && decoder->builder.face->root.size ,2,1,3
 hintmap->lastIndex < CF2_MAX_HINT_EDGES ,2,1,3
 params->op == CF2_PathOpMoveTo ,2,1,3
 transform->tx == 0 && transform->ty == 0 ,2,1,3
 ( hintmask->mask[hintmask->byteCount - 1] & mask ) == 0 || *hintmask->error ,2,1,3
 glyphpath->prevElemOp == CF2_PathOpLineTo || glyphpath->prevElemOp == CF2_PathOpCubeTo ,2,1,3
 !exc->face->unpatented_hinting ,3,0,3
 !cf2_hint_isTop( bottomHintEdge ) && !cf2_hint_isBottom( topHintEdge ) ,2,1,3
 j < hintmap->count - 1 ,2,1,3
 decoder->builder.face->root.units_per_EM ,2,1,3
 decoder->globals ,2,1,3
 params->op == CF2_PathOpLineTo ,2,1,3
 i == 0 || hintmap->edge[i - 1].dsCoord <= hintmap->edge[i].dsCoord ,2,1,3
 !isPair || topHintEdge->csCoord >= bottomHintEdge->csCoord ,1,1,2
 I < 4*4 ,1,1,2
newUnused->state == true,1,1,2
"Thread* t, bool v",1,1,2
c == infoCount,1,1,2
i >= 0 && i <freeList.size,1,1,2
n < size,1,1,2
(const char *)x,1,1,2
"t, p->state == Thread::IdleState",1,1,2
"System* s, bool v",1,1,2
"t, classObjectMask(t, objectClass(t, array)) == classObjectMask(t, arrayBody (t, t->m->types, Machine::ArrayType))",1,1,2
"t, index < singletonCount(t, singleton)",1,1,2
element,1,1,2
"s, minimumCapacity >= 0",1,1,2
infoCount != 0,1,1,2
add != tail,1,1,2
"t, t->exception == 0",1,1,2
"s, offset + sizeof(T) <= position",1,1,2
sinfo->restOn[i].body,1,1,2
i>=0 && i<num,1,1,2
num<=array_size,1,1,2
newUnusedHead == NULL,1,1,2
"t, not singletonIsObject(t, singleton, index)",1,1,2
"t, e",1,1,2
"t, not objectFixed(t, o)",1,1,2
 Max >= Min ,1,1,2
next == NULL,1,1,2
s>=num,1,1,2
"s, offset <= position - 2",1,1,2
 I <= 1 ,1,1,2
 *length >= 0 && *length < 5 ,1,1,2
"t, not zombified(target)",1,1,2
 hintmask->byteCount < sizeof ( hintmask->mask ) / sizeof ( hintmask->mask[0] ) ,1,1,2
n >= 0,1,1,2
"t, t->heapIndex + ceiling(sizeInBytes, BytesPerWord) <= ThreadHeapSizeInWords",1,1,2
"t, monitorWaitTail(t, monitor) == 0",1,1,2
"t, sizeInBytes",1,1,2
"t->m->system, v",1,1,2
unused->state == false,1,1,2
element[i] != t,1,1,2
"t, (classVmFlags(t, class_) & BootstrapFlag) == 0",1,1,2
output == NULL,1,1,2
"t, singletonIsObject(t, singleton, index)",1,1,2
type == BOX,1,1,2
"t, singletonLength(t, o) == count + singletonMaskSize(t, o)",1,1,2
"t, p->state == Thread::NoState",1,1,2
"t, t->waitNext == 0",1,1,2
norm >= 0.0f,1,1,2
 p ,1,1,2
"t, not objectExtended(t, o)",1,1,2
"t, *s != '",1,1,2
i<num,1,1,2
s>0,1,1,2
"t, objectExtended(t, o)",1,1,2
 I <= 3 ,1,1,2
"t, *s == '",1,1,2
((neStackInfoItem*)add)->next == NULL,1,1,2
pOutput != NULL,1,1,2
"t, singletonLength(t, singleton)",1,1,2
"t, t->state == Thread::NoState or t->state == Thread::ActiveState",1,1,2
x,1,0,1
 IP <= coderange->size ,1,0,1
hsz == 108 || hsz == 124,1,0,1
 hintmask->byteCount <= sizeof ( hintmask->mask ) / sizeof ( hintmask->mask[0] ) ,1,0,1
(((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c],1,0,1
img_width_bytes <= x,1,0,1
n >= 0 && n < (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask)),1,0,1
